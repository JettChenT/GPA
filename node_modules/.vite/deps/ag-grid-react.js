import {
  require_react_dom
} from "./chunk-AHQIPYUF.js";
import {
  require_react
} from "./chunk-KRWLW7CN.js";
import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS
} from "./chunk-QOVRSCHT.js";

// node_modules/ag-grid-community/dist/ag-grid-community.auto.esm.js
var ag_grid_community_auto_esm_exports = {};
__export(ag_grid_community_auto_esm_exports, {
  AbstractHeaderCellCtrl: () => AbstractHeaderCellCtrl,
  AgAbstractField: () => AgAbstractField,
  AgAngleSelect: () => AgAngleSelect,
  AgCheckbox: () => AgCheckbox,
  AgColorPicker: () => AgColorPicker,
  AgDialog: () => AgDialog,
  AgGroupComponent: () => AgGroupComponent,
  AgInputNumberField: () => AgInputNumberField,
  AgInputRange: () => AgInputRange,
  AgInputTextArea: () => AgInputTextArea,
  AgInputTextField: () => AgInputTextField,
  AgMenuItemComponent: () => AgMenuItemComponent,
  AgMenuList: () => AgMenuList,
  AgMenuPanel: () => AgMenuPanel,
  AgPanel: () => AgPanel,
  AgPromise: () => AgPromise,
  AgPromiseStatus: () => AgPromiseStatus,
  AgRadioButton: () => AgRadioButton,
  AgSelect: () => AgSelect,
  AgSlider: () => AgSlider,
  AgStackComponentsRegistry: () => AgStackComponentsRegistry,
  AgToggleButton: () => AgToggleButton,
  AlignedGridsService: () => AlignedGridsService,
  AllCommunityModules: () => AllCommunityModules,
  AnimateShowChangeCellRenderer: () => AnimateShowChangeCellRenderer,
  AnimateSlideCellRenderer: () => AnimateSlideCellRenderer,
  AnimationFrameService: () => AnimationFrameService,
  AutoScrollService: () => AutoScrollService,
  AutoWidthCalculator: () => AutoWidthCalculator,
  Autowired: () => Autowired,
  BarColumnLabelPlacement: () => BarColumnLabelPlacement,
  BaseComponentWrapper: () => BaseComponentWrapper,
  BaseCreator: () => BaseCreator,
  BaseGridSerializingSession: () => BaseGridSerializingSession,
  Bean: () => Bean,
  BeanStub: () => BeanStub,
  Beans: () => Beans,
  BodyDropPivotTarget: () => BodyDropPivotTarget,
  BodyDropTarget: () => BodyDropTarget,
  CHART_TOOLBAR_ALLOW_LIST: () => CHART_TOOLBAR_ALLOW_LIST,
  CHART_TOOL_PANEL_ALLOW_LIST: () => CHART_TOOL_PANEL_ALLOW_LIST,
  CHART_TOOL_PANEL_MENU_OPTIONS: () => CHART_TOOL_PANEL_MENU_OPTIONS,
  CellComp: () => CellComp,
  CellCtrl: () => CellCtrl,
  CellNavigationService: () => CellNavigationService,
  CellPositionUtils: () => CellPositionUtils,
  CellRangeType: () => CellRangeType,
  ChangedPath: () => ChangedPath,
  CheckboxSelectionComponent: () => CheckboxSelectionComponent,
  ClientSideRowModelModule: () => ClientSideRowModelModule,
  ClientSideRowModelSteps: () => ClientSideRowModelSteps,
  ColDefUtil: () => ColDefUtil,
  Color: () => Color,
  Column: () => Column,
  ColumnApi: () => ColumnApi,
  ColumnFactory: () => ColumnFactory,
  ColumnGroup: () => ColumnGroup,
  ColumnKeyCreator: () => ColumnKeyCreator,
  ColumnModel: () => ColumnModel,
  ColumnUtils: () => ColumnUtils,
  Component: () => Component,
  ComponentUtil: () => ComponentUtil,
  Constants: () => Constants,
  Context: () => Context,
  CssClassApplier: () => CssClassApplier,
  CssClassManager: () => CssClassManager,
  CsvCreator: () => CsvCreator,
  CsvExportModule: () => CsvExportModule,
  CtrlsService: () => CtrlsService,
  CustomTooltipFeature: () => CustomTooltipFeature,
  DEFAULT_CHART_GROUPS: () => DEFAULT_CHART_GROUPS,
  DateFilter: () => DateFilter,
  DisplayedGroupCreator: () => DisplayedGroupCreator,
  Downloader: () => Downloader,
  DragAndDropService: () => DragAndDropService,
  DragService: () => DragService,
  DragSourceType: () => DragSourceType,
  Environment: () => Environment,
  EventService: () => EventService,
  Events: () => Events,
  ExcelFactoryMode: () => ExcelFactoryMode,
  ExpressionService: () => ExpressionService,
  FilterManager: () => FilterManager,
  FloatingFilterMapper: () => FloatingFilterMapper,
  FocusService: () => FocusService,
  Grid: () => Grid,
  GridApi: () => GridApi,
  GridBodyComp: () => GridBodyComp,
  GridBodyCtrl: () => GridBodyCtrl,
  GridComp: () => GridComp,
  GridCoreCreator: () => GridCoreCreator,
  GridCtrl: () => GridCtrl,
  GridHeaderComp: () => GridHeaderComp,
  GridHeaderCtrl: () => GridHeaderCtrl,
  GridOptionsWrapper: () => GridOptionsWrapper,
  GridSerializer: () => GridSerializer,
  GroupCellRenderer: () => GroupCellRenderer,
  GroupCellRendererCtrl: () => GroupCellRendererCtrl,
  GroupInstanceIdCreator: () => GroupInstanceIdCreator,
  HeaderCellCtrl: () => HeaderCellCtrl,
  HeaderFilterCellComp: () => HeaderFilterCellComp,
  HeaderFilterCellCtrl: () => HeaderFilterCellCtrl,
  HeaderGroupCellCtrl: () => HeaderGroupCellCtrl,
  HeaderNavigationDirection: () => HeaderNavigationDirection,
  HeaderNavigationService: () => HeaderNavigationService,
  HeaderPositionUtils: () => HeaderPositionUtils,
  HeaderRowComp: () => HeaderRowComp,
  HeaderRowContainerComp: () => HeaderRowContainerComp,
  HeaderRowContainerCtrl: () => HeaderRowContainerCtrl,
  HeaderRowCtrl: () => HeaderRowCtrl,
  HeaderRowType: () => HeaderRowType,
  HorizontalDirection: () => HorizontalDirection,
  HorizontalResizeService: () => HorizontalResizeService,
  InfiniteRowModelModule: () => InfiniteRowModelModule,
  KeyCode: () => KeyCode,
  LargeTextCellEditor: () => LargeTextCellEditor,
  LayoutCssClasses: () => LayoutCssClasses,
  Logger: () => Logger,
  LoggerFactory: () => LoggerFactory,
  ManagedFocusFeature: () => ManagedFocusFeature,
  ModuleNames: () => ModuleNames,
  ModuleRegistry: () => ModuleRegistry,
  MouseEventService: () => MouseEventService,
  MoveColumnFeature: () => MoveColumnFeature,
  NavigationService: () => NavigationService,
  NumberFilter: () => NumberFilter,
  NumberSequence: () => NumberSequence,
  Optional: () => Optional,
  PaginationProxy: () => PaginationProxy,
  PinnedRowModel: () => PinnedRowModel,
  PopupComponent: () => PopupComponent,
  PopupEditorWrapper: () => PopupEditorWrapper,
  PopupSelectCellEditor: () => PopupSelectCellEditor,
  PopupService: () => PopupService,
  PopupTextCellEditor: () => PopupTextCellEditor,
  PositionableFeature: () => PositionableFeature,
  PostConstruct: () => PostConstruct,
  PreConstruct: () => PreConstruct,
  PreDestroy: () => PreDestroy,
  PropertyKeys: () => PropertyKeys,
  ProvidedColumnGroup: () => ProvidedColumnGroup,
  ProvidedFilter: () => ProvidedFilter,
  Qualifier: () => Qualifier,
  QuerySelector: () => QuerySelector,
  RefSelector: () => RefSelector,
  ResizeObserverService: () => ResizeObserverService,
  RowAnimationCssClasses: () => RowAnimationCssClasses,
  RowContainerComp: () => RowContainerComp,
  RowContainerCtrl: () => RowContainerCtrl,
  RowContainerName: () => RowContainerName,
  RowContainerType: () => RowContainerType,
  RowCtrl: () => RowCtrl,
  RowHighlightPosition: () => RowHighlightPosition,
  RowNode: () => RowNode,
  RowNodeBlock: () => RowNodeBlock,
  RowNodeBlockLoader: () => RowNodeBlockLoader,
  RowNodeSorter: () => RowNodeSorter,
  RowPositionUtils: () => RowPositionUtils,
  RowRenderer: () => RowRenderer,
  RowType: () => RowType,
  ScalarFilter: () => ScalarFilter,
  ScrollVisibleService: () => ScrollVisibleService,
  SelectCellEditor: () => SelectCellEditor,
  SelectableService: () => SelectableService,
  SelectionHandleType: () => SelectionHandleType,
  SelectionService: () => SelectionService,
  ServerSideTransactionResultStatus: () => ServerSideTransactionResultStatus,
  SetLeftFeature: () => SetLeftFeature,
  SimpleFilter: () => SimpleFilter,
  SortController: () => SortController,
  SortIndicatorComp: () => SortIndicatorComp,
  StandardMenuFactory: () => StandardMenuFactory,
  StylingService: () => StylingService,
  TabGuardComp: () => TabGuardComp,
  TabGuardCtrl: () => TabGuardCtrl,
  TabbedLayout: () => TabbedLayout,
  TemplateService: () => TemplateService,
  TextCellEditor: () => TextCellEditor,
  TextFilter: () => TextFilter,
  TextFloatingFilter: () => TextFloatingFilter,
  Timer: () => Timer,
  TouchListener: () => TouchListener,
  UserComponentFactory: () => UserComponentFactory,
  UserComponentRegistry: () => UserComponentRegistry,
  ValueCache: () => ValueCache,
  ValueFormatterService: () => ValueFormatterService,
  ValueService: () => ValueService,
  VanillaFrameworkOverrides: () => VanillaFrameworkOverrides,
  VerticalDirection: () => VerticalDirection,
  VirtualList: () => VirtualList,
  XmlFactory: () => XmlFactory,
  ZipContainer: () => ZipContainer,
  _: () => _,
  defaultGroupComparator: () => defaultGroupComparator,
  getRowContainerTypeForName: () => getRowContainerTypeForName,
  simpleHttpRequest: () => simpleHttpRequest,
  stringToArray: () => stringToArray
});
function makeNull(value) {
  if (value == null || value === "") {
    return null;
  }
  return value;
}
function exists(value, allowEmptyString) {
  if (allowEmptyString === void 0) {
    allowEmptyString = false;
  }
  return value != null && (value !== "" || allowEmptyString);
}
function missing(value) {
  return !exists(value);
}
function missingOrEmpty(value) {
  return value == null || value.length === 0;
}
function toStringOrNull(value) {
  return value != null && typeof value.toString === "function" ? value.toString() : null;
}
function attrToNumber(value) {
  if (value === void 0) {
    return;
  }
  if (value === null || value === "") {
    return null;
  }
  if (typeof value === "number") {
    return isNaN(value) ? void 0 : value;
  }
  var valueParsed = parseInt(value, 10);
  return isNaN(valueParsed) ? void 0 : valueParsed;
}
function attrToBoolean(value) {
  if (value === void 0) {
    return;
  }
  if (value === null || value === "") {
    return false;
  }
  if (typeof value === "boolean") {
    return value;
  }
  return /true/i.test(value);
}
function attrToString(value) {
  if (value == null || value === "") {
    return;
  }
  return value;
}
function referenceCompare(left, right) {
  if (left == null && right == null) {
    return true;
  }
  if (left == null && right != null) {
    return false;
  }
  if (left != null && right == null) {
    return false;
  }
  return left === right;
}
function jsonEquals(val1, val2) {
  var val1Json = val1 ? JSON.stringify(val1) : null;
  var val2Json = val2 ? JSON.stringify(val2) : null;
  return val1Json === val2Json;
}
function defaultComparator(valueA, valueB, accentedCompare) {
  if (accentedCompare === void 0) {
    accentedCompare = false;
  }
  var valueAMissing = valueA == null;
  var valueBMissing = valueB == null;
  if (valueA && valueA.toNumber) {
    valueA = valueA.toNumber();
  }
  if (valueB && valueB.toNumber) {
    valueB = valueB.toNumber();
  }
  if (valueAMissing && valueBMissing) {
    return 0;
  }
  if (valueAMissing) {
    return -1;
  }
  if (valueBMissing) {
    return 1;
  }
  function doQuickCompare(a, b) {
    return a > b ? 1 : a < b ? -1 : 0;
  }
  if (typeof valueA !== "string") {
    return doQuickCompare(valueA, valueB);
  }
  if (!accentedCompare) {
    return doQuickCompare(valueA, valueB);
  }
  try {
    return valueA.localeCompare(valueB);
  } catch (e) {
    return doQuickCompare(valueA, valueB);
  }
}
function values(object) {
  if (object instanceof Set || object instanceof Map) {
    var arr_1 = [];
    object.forEach(function(value) {
      return arr_1.push(value);
    });
    return arr_1;
  }
  return Object.values(object);
}
function iterateObject(object, callback) {
  if (object == null) {
    return;
  }
  if (Array.isArray(object)) {
    object.forEach(function(value, index) {
      return callback("" + index, value);
    });
  } else {
    Object.keys(object).forEach(function(key) {
      return callback(key, object[key]);
    });
  }
}
function cloneObject(object) {
  var copy = {};
  var keys2 = Object.keys(object);
  for (var i = 0; i < keys2.length; i++) {
    var key = keys2[i];
    var value = object[key];
    copy[key] = value;
  }
  return copy;
}
function deepCloneObject(object) {
  return JSON.parse(JSON.stringify(object));
}
function deepCloneDefinition(object, keysToSkip) {
  if (!object) {
    return;
  }
  var obj = object;
  var res = {};
  Object.keys(obj).forEach(function(key) {
    if (keysToSkip && keysToSkip.indexOf(key) >= 0) {
      return;
    }
    var value = obj[key];
    var sourceIsSimpleObject = isNonNullObject(value) && value.constructor === Object;
    if (sourceIsSimpleObject) {
      res[key] = deepCloneDefinition(value);
    } else {
      res[key] = value;
    }
  });
  return res;
}
function getProperty(object, key) {
  return object[key];
}
function setProperty(object, key, value) {
  object[key] = value;
}
function copyPropertiesIfPresent(source, target) {
  var properties = [];
  for (var _i = 2; _i < arguments.length; _i++) {
    properties[_i - 2] = arguments[_i];
  }
  properties.forEach(function(p) {
    return copyPropertyIfPresent(source, target, p);
  });
}
function copyPropertyIfPresent(source, target, property, transform) {
  var value = getProperty(source, property);
  if (value !== void 0) {
    setProperty(target, property, transform ? transform(value) : value);
  }
}
function getAllKeysInObjects(objects) {
  var allValues = {};
  objects.filter(function(obj) {
    return obj != null;
  }).forEach(function(obj) {
    Object.keys(obj).forEach(function(key) {
      return allValues[key] = null;
    });
  });
  return Object.keys(allValues);
}
function getAllValuesInObject(obj) {
  if (!obj) {
    return [];
  }
  var anyObject = Object;
  if (typeof anyObject.values === "function") {
    return anyObject.values(obj);
  }
  var ret = [];
  for (var key in obj) {
    if (obj.hasOwnProperty(key) && obj.propertyIsEnumerable(key)) {
      ret.push(obj[key]);
    }
  }
  return ret;
}
function mergeDeep(dest, source, copyUndefined, makeCopyOfSimpleObjects) {
  if (copyUndefined === void 0) {
    copyUndefined = true;
  }
  if (makeCopyOfSimpleObjects === void 0) {
    makeCopyOfSimpleObjects = false;
  }
  if (!exists(source)) {
    return;
  }
  iterateObject(source, function(key, sourceValue) {
    var destValue = dest[key];
    if (destValue === sourceValue) {
      return;
    }
    if (makeCopyOfSimpleObjects) {
      var objectIsDueToBeCopied = destValue == null && sourceValue != null;
      if (objectIsDueToBeCopied) {
        var sourceIsSimpleObject = typeof sourceValue === "object" && sourceValue.constructor === Object;
        var dontCopy = sourceIsSimpleObject;
        if (dontCopy) {
          destValue = {};
          dest[key] = destValue;
        }
      }
    }
    if (isNonNullObject(sourceValue) && isNonNullObject(destValue) && !Array.isArray(destValue)) {
      mergeDeep(destValue, sourceValue, copyUndefined, makeCopyOfSimpleObjects);
    } else if (copyUndefined || sourceValue !== void 0) {
      dest[key] = sourceValue;
    }
  });
}
function missingOrEmptyObject(value) {
  return missing(value) || Object.keys(value).length === 0;
}
function get(source, expression, defaultValue) {
  if (source == null) {
    return defaultValue;
  }
  var keys2 = expression.split(".");
  var objectToRead = source;
  while (keys2.length > 1) {
    objectToRead = objectToRead[keys2.shift()];
    if (objectToRead == null) {
      return defaultValue;
    }
  }
  var value = objectToRead[keys2[0]];
  return value != null ? value : defaultValue;
}
function set(target, expression, value) {
  if (target == null) {
    return;
  }
  var keys2 = expression.split(".");
  var objectToUpdate = target;
  while (keys2.length > 1) {
    objectToUpdate = objectToUpdate[keys2.shift()];
    if (objectToUpdate == null) {
      return;
    }
  }
  objectToUpdate[keys2[0]] = value;
}
function deepFreeze(object) {
  Object.freeze(object);
  values(object).forEach(function(v) {
    if (isNonNullObject(v) || typeof v === "function") {
      deepFreeze(v);
    }
  });
  return object;
}
function getValueUsingField(data, field, fieldContainsDots) {
  if (!field || !data) {
    return;
  }
  if (!fieldContainsDots) {
    return data[field];
  }
  var fields = field.split(".");
  var currentObject = data;
  for (var i = 0; i < fields.length; i++) {
    if (currentObject == null) {
      return void 0;
    }
    currentObject = currentObject[fields[i]];
  }
  return currentObject;
}
function removeAllReferences(obj, objectName) {
  Object.keys(obj).forEach(function(key) {
    var value = obj[key];
    if (typeof value === "object") {
      obj[key] = void 0;
    }
  });
  var proto = Object.getPrototypeOf(obj);
  var properties = {};
  Object.keys(proto).forEach(function(key) {
    var value = proto[key];
    if (typeof value === "function") {
      var func = function() {
        console.warn("AG Grid: " + objectName + " function " + key + "() cannot be called as the grid has been destroyed.\n                     Please don't call grid API functions on destroyed grids - as a matter of fact you shouldn't\n                     be keeping the API reference, your application has a memory leak! Remove the API reference\n                     when the grid is destroyed.");
      };
      properties[key] = { value: func, writable: true };
    }
  });
  Object.defineProperties(obj, properties);
}
function isNonNullObject(value) {
  return typeof value === "object" && value !== null;
}
function doOnce(func, key) {
  if (doOnceFlags[key]) {
    return;
  }
  func();
  doOnceFlags[key] = true;
}
function getFunctionName(funcConstructor) {
  if (funcConstructor.name) {
    return funcConstructor.name;
  }
  var matches = /function\s+([^\(]+)/.exec(funcConstructor.toString());
  return matches && matches.length === 2 ? matches[1].trim() : null;
}
function isFunction(val) {
  return !!(val && val.constructor && val.call && val.apply);
}
function executeInAWhile(funcs) {
  executeAfter(funcs, 400);
}
function executeNextVMTurn(func) {
  executeNextVMTurnFuncs.push(func);
  if (executeNextVMTurnPending) {
    return;
  }
  executeNextVMTurnPending = true;
  window.setTimeout(function() {
    var funcsCopy = executeNextVMTurnFuncs.slice();
    executeNextVMTurnFuncs.length = 0;
    executeNextVMTurnPending = false;
    funcsCopy.forEach(function(func2) {
      return func2();
    });
  }, 0);
}
function executeAfter(funcs, milliseconds) {
  if (milliseconds === void 0) {
    milliseconds = 0;
  }
  if (funcs.length > 0) {
    window.setTimeout(function() {
      return funcs.forEach(function(func) {
        return func();
      });
    }, milliseconds);
  }
}
function debounce(func, wait, immediate) {
  if (immediate === void 0) {
    immediate = false;
  }
  var timeout;
  return function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var context = this;
    var callNow = immediate && !timeout;
    window.clearTimeout(timeout);
    timeout = window.setTimeout(function() {
      timeout = null;
      if (!immediate) {
        func.apply(context, args);
      }
    }, wait);
    if (callNow) {
      func.apply(context, args);
    }
  };
}
function throttle(func, wait) {
  var previousCall = 0;
  return function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var context = this;
    var currentCall = new Date().getTime();
    if (currentCall - previousCall < wait) {
      return;
    }
    previousCall = currentCall;
    func.apply(context, args);
  };
}
function waitUntil(condition, callback, timeout, timeoutMessage) {
  if (timeout === void 0) {
    timeout = 100;
  }
  var timeStamp = new Date().getTime();
  var interval = null;
  var executed = false;
  var internalCallback = function() {
    var reachedTimeout = new Date().getTime() - timeStamp > timeout;
    if (condition() || reachedTimeout) {
      callback();
      executed = true;
      if (interval != null) {
        window.clearInterval(interval);
        interval = null;
      }
      if (reachedTimeout && timeoutMessage) {
        console.warn(timeoutMessage);
      }
    }
  };
  internalCallback();
  if (!executed) {
    interval = window.setInterval(internalCallback, 10);
  }
}
function compose() {
  var fns = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    fns[_i] = arguments[_i];
  }
  return function(arg) {
    return fns.reduce(function(composed, f) {
      return f(composed);
    }, arg);
  };
}
function callIfPresent(func) {
  if (func) {
    func();
  }
}
function applyToConstructor(constructor, argArray) {
  var args = [null].concat(argArray);
  var factoryFunction = constructor.bind.apply(constructor, args);
  return new factoryFunction();
}
function PreConstruct(target, methodName, descriptor) {
  var props = getOrCreateProps$1(target.constructor);
  if (!props.preConstructMethods) {
    props.preConstructMethods = [];
  }
  props.preConstructMethods.push(methodName);
}
function PostConstruct(target, methodName, descriptor) {
  var props = getOrCreateProps$1(target.constructor);
  if (!props.postConstructMethods) {
    props.postConstructMethods = [];
  }
  props.postConstructMethods.push(methodName);
}
function PreDestroy(target, methodName, descriptor) {
  var props = getOrCreateProps$1(target.constructor);
  if (!props.preDestroyMethods) {
    props.preDestroyMethods = [];
  }
  props.preDestroyMethods.push(methodName);
}
function Bean(beanName) {
  return function(classConstructor) {
    var props = getOrCreateProps$1(classConstructor);
    props.beanName = beanName;
  };
}
function Autowired(name) {
  return function(target, propertyKey, descriptor) {
    autowiredFunc(target, name, false, target, propertyKey, null);
  };
}
function Optional(name) {
  return function(target, propertyKey, descriptor) {
    autowiredFunc(target, name, true, target, propertyKey, null);
  };
}
function autowiredFunc(target, name, optional, classPrototype, methodOrAttributeName, index) {
  if (name === null) {
    console.error("AG Grid: Autowired name should not be null");
    return;
  }
  if (typeof index === "number") {
    console.error("AG Grid: Autowired should be on an attribute");
    return;
  }
  var props = getOrCreateProps$1(target.constructor);
  if (!props.agClassAttributes) {
    props.agClassAttributes = [];
  }
  props.agClassAttributes.push({
    attributeName: methodOrAttributeName,
    beanName: name,
    optional
  });
}
function Qualifier(name) {
  return function(classPrototype, methodOrAttributeName, index) {
    var constructor = typeof classPrototype == "function" ? classPrototype : classPrototype.constructor;
    var props;
    if (typeof index === "number") {
      var methodName = void 0;
      if (methodOrAttributeName) {
        props = getOrCreateProps$1(constructor);
        methodName = methodOrAttributeName;
      } else {
        props = getOrCreateProps$1(constructor);
        methodName = "agConstructor";
      }
      if (!props.autowireMethods) {
        props.autowireMethods = {};
      }
      if (!props.autowireMethods[methodName]) {
        props.autowireMethods[methodName] = {};
      }
      props.autowireMethods[methodName][index] = name;
    }
  };
}
function getOrCreateProps$1(target) {
  if (!target.hasOwnProperty("__agBeanMetaData")) {
    target.__agBeanMetaData = {};
  }
  return target.__agBeanMetaData;
}
function firstExistingValue() {
  var values2 = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    values2[_i] = arguments[_i];
  }
  for (var i = 0; i < values2.length; i++) {
    var value = values2[i];
    if (exists(value)) {
      return value;
    }
  }
  return null;
}
function existsAndNotEmpty(value) {
  return value != null && value.length > 0;
}
function last(arr) {
  if (!arr || !arr.length) {
    return;
  }
  return arr[arr.length - 1];
}
function areEqual(a, b, comparator) {
  if (a == null && b == null) {
    return true;
  }
  return a != null && b != null && a.length === b.length && a.every(function(value, index) {
    return comparator ? comparator(value, b[index]) : b[index] === value;
  });
}
function compareArrays(array1, array2) {
  return areEqual(array1, array2);
}
function shallowCompare(arr1, arr2) {
  return areEqual(arr1, arr2);
}
function sortNumerically(array) {
  return array.sort(function(a, b) {
    return a - b;
  });
}
function removeRepeatsFromArray(array, object) {
  if (!array) {
    return;
  }
  for (var index = array.length - 2; index >= 0; index--) {
    var thisOneMatches = array[index] === object;
    var nextOneMatches = array[index + 1] === object;
    if (thisOneMatches && nextOneMatches) {
      array.splice(index + 1, 1);
    }
  }
}
function removeFromArray(array, object) {
  var index = array.indexOf(object);
  if (index >= 0) {
    array.splice(index, 1);
  }
}
function removeAllFromArray(array, toRemove) {
  toRemove.forEach(function(item) {
    return removeFromArray(array, item);
  });
}
function insertIntoArray(array, object, toIndex) {
  array.splice(toIndex, 0, object);
}
function insertArrayIntoArray(dest, src, toIndex) {
  if (dest == null || src == null) {
    return;
  }
  for (var i = src.length - 1; i >= 0; i--) {
    var item = src[i];
    insertIntoArray(dest, item, toIndex);
  }
}
function moveInArray(array, objectsToMove, toIndex) {
  removeAllFromArray(array, objectsToMove);
  objectsToMove.slice().reverse().forEach(function(obj) {
    return insertIntoArray(array, obj, toIndex);
  });
}
function includes(array, value) {
  return array.indexOf(value) > -1;
}
function flatten(arrayOfArrays) {
  return [].concat.apply([], arrayOfArrays);
}
function pushAll(target, source) {
  if (source == null || target == null) {
    return;
  }
  source.forEach(function(value) {
    return target.push(value);
  });
}
function toStrings(array) {
  return array.map(toStringOrNull);
}
function forEachReverse(list, action) {
  if (list == null) {
    return;
  }
  for (var i = list.length - 1; i >= 0; i--) {
    action(list[i], i);
  }
}
function stopPropagationForAgGrid(event) {
  event[AG_GRID_STOP_PROPAGATION] = true;
}
function isStopPropagationForAgGrid(event) {
  return event[AG_GRID_STOP_PROPAGATION] === true;
}
function getCtrlForEvent(gridOptionsWrapper, event, type) {
  var sourceElement = event.target;
  while (sourceElement) {
    var renderedComp = gridOptionsWrapper.getDomData(sourceElement, type);
    if (renderedComp) {
      return renderedComp;
    }
    sourceElement = sourceElement.parentElement;
  }
  return null;
}
function addChangeListener(element, listener) {
  element.addEventListener("changed", listener);
  element.addEventListener("paste", listener);
  element.addEventListener("input", listener);
}
function isElementInEventPath(element, event) {
  if (!event || !element) {
    return false;
  }
  return getEventPath(event).indexOf(element) >= 0;
}
function createEventPath(event) {
  var res = [];
  var pointer = event.target;
  while (pointer) {
    res.push(pointer);
    pointer = pointer.parentElement;
  }
  return res;
}
function addAgGridEventPath(event) {
  event.__agGridEventPath = getEventPath(event);
}
function getEventPath(event) {
  var eventNoType = event;
  if (eventNoType.path) {
    return eventNoType.path;
  }
  if (eventNoType.composedPath) {
    return eventNoType.composedPath();
  }
  if (eventNoType.__agGridEventPath) {
    return eventNoType.__agGridEventPath;
  }
  return createEventPath(event);
}
function addSafePassiveEventListener(frameworkOverrides, eElement, event, listener) {
  var isPassive = includes(PASSIVE_EVENTS$1, event);
  var options = isPassive ? { passive: true } : void 0;
  if (frameworkOverrides && frameworkOverrides.addEventListener) {
    frameworkOverrides.addEventListener(eElement, event, listener, options);
  }
}
function utf8_encode(s) {
  var stringFromCharCode = String.fromCharCode;
  function ucs2decode(string) {
    var output = [];
    if (!string) {
      return [];
    }
    var len = string.length;
    var counter = 0;
    var value;
    var extra;
    while (counter < len) {
      value = string.charCodeAt(counter++);
      if (value >= 55296 && value <= 56319 && counter < len) {
        extra = string.charCodeAt(counter++);
        if ((extra & 64512) == 56320) {
          output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
        } else {
          output.push(value);
          counter--;
        }
      } else {
        output.push(value);
      }
    }
    return output;
  }
  function checkScalarValue(point) {
    if (point >= 55296 && point <= 57343) {
      throw Error("Lone surrogate U+" + point.toString(16).toUpperCase() + " is not a scalar value");
    }
  }
  function createByte(point, shift) {
    return stringFromCharCode(point >> shift & 63 | 128);
  }
  function encodeCodePoint(point) {
    if (point >= 0 && point <= 31 && point !== 10) {
      var convertedCode = point.toString(16).toUpperCase();
      var paddedCode = convertedCode.padStart(4, "0");
      return "_x" + paddedCode + "_";
    }
    if ((point & 4294967168) == 0) {
      return stringFromCharCode(point);
    }
    var symbol = "";
    if ((point & 4294965248) == 0) {
      symbol = stringFromCharCode(point >> 6 & 31 | 192);
    } else if ((point & 4294901760) == 0) {
      checkScalarValue(point);
      symbol = stringFromCharCode(point >> 12 & 15 | 224);
      symbol += createByte(point, 6);
    } else if ((point & 4292870144) == 0) {
      symbol = stringFromCharCode(point >> 18 & 7 | 240);
      symbol += createByte(point, 12);
      symbol += createByte(point, 6);
    }
    symbol += stringFromCharCode(point & 63 | 128);
    return symbol;
  }
  var codePoints = ucs2decode(s);
  var length = codePoints.length;
  var index = -1;
  var codePoint;
  var byteString = "";
  while (++index < length) {
    codePoint = codePoints[index];
    byteString += encodeCodePoint(codePoint);
  }
  return byteString;
}
function camelCaseToHyphen(str) {
  if (str === null || str === void 0) {
    return null;
  }
  return str.replace(/([A-Z])/g, function(g) {
    return "-" + g[0].toLowerCase();
  });
}
function hyphenToCamelCase(str) {
  if (str === null || str === void 0) {
    return null;
  }
  return str.replace(/-([a-z])/g, function(g) {
    return g[1].toUpperCase();
  });
}
function capitalise(str) {
  return str[0].toUpperCase() + str.substr(1).toLowerCase();
}
function escapeString(toEscape, skipEscapingHtmlChars) {
  if (toEscape == null) {
    return null;
  }
  var stringResult = toEscape.toString().toString();
  if (skipEscapingHtmlChars) {
    return stringResult;
  }
  return stringResult.replace(reUnescapedHtml, function(chr) {
    return HTML_ESCAPES[chr];
  });
}
function camelCaseToHumanText(camelCase) {
  if (!camelCase || camelCase == null) {
    return null;
  }
  var rex = /([A-Z])([A-Z])([a-z])|([a-z])([A-Z])/g;
  var words = camelCase.replace(rex, "$1$4 $2$3$5").replace(".", " ").split(" ");
  return words.map(function(word) {
    return word.substring(0, 1).toUpperCase() + (word.length > 1 ? word.substring(1, word.length) : "");
  }).join(" ");
}
function convertToMap(arr) {
  var map = /* @__PURE__ */ new Map();
  arr.forEach(function(pair) {
    return map.set(pair[0], pair[1]);
  });
  return map;
}
function mapById(arr, callback) {
  var map = /* @__PURE__ */ new Map();
  arr.forEach(function(item) {
    return map.set(callback(item), item);
  });
  return map;
}
function keys(map) {
  var arr = [];
  map.forEach(function(_2, key) {
    return arr.push(key);
  });
  return arr;
}
function getBrowserInfo() {
  if (browserInfo) {
    return browserInfo;
  }
  var userAgent = navigator.userAgent;
  var match = userAgent.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
  var tem;
  var version;
  if (/trident/i.test(match[1])) {
    tem = /\brv[ :]+(\d+)/g.exec(userAgent) || [];
    version = tem[1] != null ? parseFloat(tem[1]) : 0;
    return {
      name: "IE",
      version
    };
  }
  if (match[1] === "Chrome") {
    tem = userAgent.match(/\bOPR|Edge\/(\d+)/);
    if (tem != null) {
      version = tem[1] != null ? parseFloat(tem[1]) : 0;
      return {
        name: "Opera",
        version
      };
    }
  }
  match = match[2] ? [match[1], match[2]] : [navigator.appName, navigator.appVersion, "-?"];
  tem = userAgent.match(/version\/(\d+)/i);
  if (tem != null) {
    match.splice(1, 1, tem[1]);
  }
  var name = match[0];
  version = match[1] != null ? parseFloat(match[1]) : 0;
  browserInfo = { name, version };
  return browserInfo;
}
function isBrowserIE() {
  if (isIE === void 0) {
    isIE = !!document.documentMode;
  }
  return isIE;
}
function isBrowserEdge() {
  if (isEdge === void 0) {
    isEdge = !isBrowserIE() && !!window.StyleMedia;
  }
  return isEdge;
}
function isBrowserSafari() {
  if (isSafari === void 0) {
    isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
  }
  return isSafari;
}
function isBrowserChrome() {
  if (isChrome === void 0) {
    var win = window;
    isChrome = !!win.chrome && (!!win.chrome.webstore || !!win.chrome.runtime) || /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
  }
  return isChrome;
}
function isBrowserFirefox() {
  if (isFirefox === void 0) {
    var win = window;
    isFirefox = typeof win.InstallTrigger !== "undefined";
  }
  return isFirefox;
}
function isMacOsUserAgent() {
  if (isMacOs === void 0) {
    isMacOs = /(Mac|iPhone|iPod|iPad)/i.test(navigator.platform);
  }
  return isMacOs;
}
function isIOSUserAgent() {
  if (isIOS === void 0) {
    isIOS = (/iPad|iPhone|iPod/.test(navigator.platform) || navigator.platform === "MacIntel" && navigator.maxTouchPoints > 1) && !window.MSStream;
  }
  return isIOS;
}
function browserSupportsPreventScroll() {
  return !isBrowserSafari() || getBrowserInfo().version >= 15;
}
function getTabIndex(el) {
  if (!el) {
    return null;
  }
  var numberTabIndex = el.tabIndex;
  var tabIndex = el.getAttribute("tabIndex");
  if (numberTabIndex === -1 && (tabIndex === null || tabIndex === "" && !isBrowserFirefox())) {
    return null;
  }
  return numberTabIndex.toString();
}
function getMaxDivHeight() {
  if (!document.body) {
    return -1;
  }
  var res = 1e6;
  var testUpTo = navigator.userAgent.toLowerCase().match(/firefox/) ? 6e6 : 1e9;
  var div = document.createElement("div");
  document.body.appendChild(div);
  while (true) {
    var test = res * 2;
    div.style.height = test + "px";
    if (test > testUpTo || div.clientHeight !== test) {
      break;
    } else {
      res = test;
    }
  }
  document.body.removeChild(div);
  return res;
}
function getScrollbarWidth() {
  if (browserScrollbarWidth == null) {
    initScrollbarWidthAndVisibility();
  }
  return browserScrollbarWidth;
}
function initScrollbarWidthAndVisibility() {
  var body = document.body;
  var div = document.createElement("div");
  div.style.width = div.style.height = "100px";
  div.style.opacity = "0";
  div.style.overflow = "scroll";
  div.style.msOverflowStyle = "scrollbar";
  div.style.position = "absolute";
  body.appendChild(div);
  var width = div.offsetWidth - div.clientWidth;
  if (width === 0 && div.clientWidth === 0) {
    width = null;
  }
  if (div.parentNode) {
    div.parentNode.removeChild(div);
  }
  if (width != null) {
    browserScrollbarWidth = width;
    invisibleScrollbar = width === 0;
  }
}
function isInvisibleScrollbar() {
  if (invisibleScrollbar == null) {
    initScrollbarWidthAndVisibility();
  }
  return invisibleScrollbar;
}
function hasOverflowScrolling() {
  var e_1, _a;
  var prefixes = ["webkit", "moz", "o", "ms"];
  var div = document.createElement("div");
  var body = document.getElementsByTagName("body")[0];
  var found = false;
  var p;
  body.appendChild(div);
  div.setAttribute("style", prefixes.map(function(prefix) {
    return "-" + prefix + "-overflow-scrolling: touch";
  }).concat("overflow-scrolling: touch").join(";"));
  var computedStyle = window.getComputedStyle(div);
  if (computedStyle.overflowScrolling === "touch") {
    found = true;
  }
  if (!found) {
    try {
      for (var prefixes_1 = __values$5(prefixes), prefixes_1_1 = prefixes_1.next(); !prefixes_1_1.done; prefixes_1_1 = prefixes_1.next()) {
        p = prefixes_1_1.value;
        if (computedStyle[p + "OverflowScrolling"] === "touch") {
          found = true;
          break;
        }
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (prefixes_1_1 && !prefixes_1_1.done && (_a = prefixes_1.return))
          _a.call(prefixes_1);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
  }
  if (div.parentNode) {
    div.parentNode.removeChild(div);
  }
  return found;
}
function getBodyWidth() {
  if (document.body) {
    return document.body.clientWidth;
  }
  if (window.innerHeight) {
    return window.innerWidth;
  }
  if (document.documentElement && document.documentElement.clientWidth) {
    return document.documentElement.clientWidth;
  }
  return -1;
}
function getBodyHeight() {
  if (document.body) {
    return document.body.clientHeight;
  }
  if (window.innerHeight) {
    return window.innerHeight;
  }
  if (document.documentElement && document.documentElement.clientHeight) {
    return document.documentElement.clientHeight;
  }
  return -1;
}
function fuzzyCheckStrings(inputValues, validValues, allSuggestions) {
  var fuzzyMatches = {};
  var invalidInputs = inputValues.filter(function(inputValue) {
    return !validValues.some(function(validValue) {
      return validValue === inputValue;
    });
  });
  if (invalidInputs.length > 0) {
    invalidInputs.forEach(function(invalidInput) {
      return fuzzyMatches[invalidInput] = fuzzySuggestions(invalidInput, allSuggestions);
    });
  }
  return fuzzyMatches;
}
function fuzzySuggestions(inputValue, allSuggestions, hideIrrelevant, weighted) {
  var search = weighted ? string_weighted_distances : string_distances;
  var thisSuggestions = allSuggestions.map(function(text) {
    return {
      value: text,
      relevance: search(inputValue.toLowerCase(), text.toLocaleLowerCase())
    };
  });
  thisSuggestions.sort(function(a, b) {
    return b.relevance - a.relevance;
  });
  if (hideIrrelevant) {
    thisSuggestions = thisSuggestions.filter(function(suggestion) {
      return suggestion.relevance !== 0;
    });
  }
  return thisSuggestions.map(function(suggestion) {
    return suggestion.value;
  });
}
function get_bigrams(from) {
  var s = from.toLowerCase();
  var v = new Array(s.length - 1);
  var i;
  var j;
  var ref;
  for (i = j = 0, ref = v.length; j <= ref; i = j += 1) {
    v[i] = s.slice(i, i + 2);
  }
  return v;
}
function string_distances(str1, str2) {
  if (str1.length === 0 && str2.length === 0) {
    return 0;
  }
  var pairs1 = get_bigrams(str1);
  var pairs2 = get_bigrams(str2);
  var union = pairs1.length + pairs2.length;
  var hit_count = 0;
  var j;
  var len;
  for (j = 0, len = pairs1.length; j < len; j++) {
    var x = pairs1[j];
    var k = void 0;
    var len1 = void 0;
    for (k = 0, len1 = pairs2.length; k < len1; k++) {
      var y = pairs2[k];
      if (x === y) {
        hit_count++;
      }
    }
  }
  return hit_count > 0 ? 2 * hit_count / union : 0;
}
function string_weighted_distances(str1, str2) {
  var a = str1.replace(/\s/g, "");
  var b = str2.replace(/\s/g, "");
  var weight = 0;
  var lastIndex = 0;
  for (var i = 0; i < a.length; i++) {
    var idx = b.indexOf(a[i], lastIndex);
    if (idx === -1) {
      continue;
    }
    lastIndex = idx;
    weight += 100 - lastIndex * 100 / 1e4 * 100;
  }
  return weight;
}
function padStartWidthZeros(value, totalStringSize) {
  return value.toString().padStart(totalStringSize, "0");
}
function createArrayOfNumbers(first, last2) {
  var result = [];
  for (var i = first; i <= last2; i++) {
    result.push(i);
  }
  return result;
}
function isNumeric(value) {
  return value !== "" && !isNaN(parseFloat(value)) && isFinite(value);
}
function cleanNumber(value) {
  if (typeof value === "string") {
    value = parseInt(value, 10);
  }
  if (typeof value === "number") {
    return Math.floor(value);
  }
  return null;
}
function decToHex(number, bytes) {
  var hex = "";
  for (var i = 0; i < bytes; i++) {
    hex += String.fromCharCode(number & 255);
    number >>>= 8;
  }
  return hex;
}
function formatNumberTwoDecimalPlacesAndCommas(value, thousandSeparator, decimalSeparator) {
  if (typeof value !== "number") {
    return "";
  }
  return formatNumberCommas(Math.round(value * 100) / 100, thousandSeparator, decimalSeparator);
}
function formatNumberCommas(value, thousandSeparator, decimalSeparator) {
  if (typeof value !== "number") {
    return "";
  }
  return value.toString().replace(".", decimalSeparator).replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1" + thousandSeparator);
}
function sum(values2) {
  return values2 == null ? null : values2.reduce(function(total, value) {
    return total + value;
  }, 0);
}
function isTrue(value) {
  return value === true || value === "true";
}
function toNumber(value) {
  if (typeof value == "number") {
    return value;
  }
  if (typeof value == "string") {
    return parseInt(value, 10);
  }
}
function zeroOrGreater(value, defaultValue) {
  if (value >= 0) {
    return value;
  }
  return defaultValue;
}
function oneOrGreater(value, defaultValue) {
  var valueNumber = parseInt(value, 10);
  if (isNumeric(valueNumber) && valueNumber > 0) {
    return valueNumber;
  }
  return defaultValue;
}
function stringToArray(strData, delimiter) {
  if (delimiter === void 0) {
    delimiter = ",";
  }
  var data = [];
  var isNewline = function(char) {
    return char === "\r" || char === "\n";
  };
  var insideQuotedField = false;
  if (strData === "") {
    return [[""]];
  }
  var _loop_1 = function(row2, column2, position2) {
    var previousChar = strData[position2 - 1];
    var currentChar = strData[position2];
    var nextChar = strData[position2 + 1];
    var ensureDataExists = function() {
      if (!data[row2]) {
        data[row2] = [];
      }
      if (!data[row2][column2]) {
        data[row2][column2] = "";
      }
    };
    ensureDataExists();
    if (currentChar === '"') {
      if (insideQuotedField) {
        if (nextChar === '"') {
          data[row2][column2] += '"';
          position2++;
        } else {
          insideQuotedField = false;
        }
        return out_row_1 = row2, out_column_1 = column2, out_position_1 = position2, "continue";
      } else if (previousChar === void 0 || previousChar === delimiter || isNewline(previousChar)) {
        insideQuotedField = true;
        return out_row_1 = row2, out_column_1 = column2, out_position_1 = position2, "continue";
      }
    }
    if (!insideQuotedField) {
      if (currentChar === delimiter) {
        column2++;
        ensureDataExists();
        return out_row_1 = row2, out_column_1 = column2, out_position_1 = position2, "continue";
      } else if (isNewline(currentChar)) {
        column2 = 0;
        row2++;
        ensureDataExists();
        if (currentChar === "\r" && nextChar === "\n") {
          position2++;
        }
        return out_row_1 = row2, out_column_1 = column2, out_position_1 = position2, "continue";
      }
    }
    data[row2][column2] += currentChar;
    out_row_1 = row2;
    out_column_1 = column2;
    out_position_1 = position2;
  };
  var out_row_1, out_column_1, out_position_1;
  for (var row = 0, column = 0, position = 0; position < strData.length; position++) {
    _loop_1(row, column, position);
    row = out_row_1;
    column = out_column_1;
    position = out_position_1;
  }
  return data;
}
function radioCssClass(element, elementClass, otherElementClass) {
  var parent = element.parentElement;
  var sibling = parent && parent.firstChild;
  while (sibling) {
    if (elementClass) {
      sibling.classList.toggle(elementClass, sibling === element);
    }
    if (otherElementClass) {
      sibling.classList.toggle(otherElementClass, sibling !== element);
    }
    sibling = sibling.nextSibling;
  }
}
function isFocusableFormField(element) {
  var matches = Element.prototype.matches || Element.prototype.msMatchesSelector;
  var isFocusable = matches.call(element, Constants.INPUT_SELECTOR);
  var isNotFocusable = matches.call(element, Constants.FOCUSABLE_EXCLUDE);
  var isElementVisible = isVisible(element);
  var focusable = isFocusable && !isNotFocusable && isElementVisible;
  return focusable;
}
function setDisplayed(element, displayed) {
  element.classList.toggle("ag-hidden", !displayed);
}
function setVisible(element, visible) {
  element.classList.toggle("ag-invisible", !visible);
}
function setDisabled(element, disabled) {
  var attributeName = "disabled";
  var addOrRemoveDisabledAttribute = disabled ? function(e) {
    return e.setAttribute(attributeName, "");
  } : function(e) {
    return e.removeAttribute(attributeName);
  };
  addOrRemoveDisabledAttribute(element);
  nodeListForEach(element.querySelectorAll("input"), function(input) {
    return addOrRemoveDisabledAttribute(input);
  });
}
function isElementChildOfClass(element, cls, maxNest) {
  var counter = 0;
  while (element) {
    if (element.classList.contains(cls)) {
      return true;
    }
    element = element.parentElement;
    if (typeof maxNest == "number") {
      if (++counter > maxNest) {
        break;
      }
    } else if (element === maxNest) {
      break;
    }
  }
  return false;
}
function getElementSize(el) {
  var _a = window.getComputedStyle(el), height = _a.height, width = _a.width, paddingTop = _a.paddingTop, paddingRight = _a.paddingRight, paddingBottom = _a.paddingBottom, paddingLeft = _a.paddingLeft, marginTop = _a.marginTop, marginRight = _a.marginRight, marginBottom = _a.marginBottom, marginLeft = _a.marginLeft, boxSizing = _a.boxSizing;
  return {
    height: parseFloat(height),
    width: parseFloat(width),
    paddingTop: parseFloat(paddingTop),
    paddingRight: parseFloat(paddingRight),
    paddingBottom: parseFloat(paddingBottom),
    paddingLeft: parseFloat(paddingLeft),
    marginTop: parseFloat(marginTop),
    marginRight: parseFloat(marginRight),
    marginBottom: parseFloat(marginBottom),
    marginLeft: parseFloat(marginLeft),
    boxSizing
  };
}
function getInnerHeight(el) {
  var size = getElementSize(el);
  if (size.boxSizing === "border-box") {
    return size.height - size.paddingTop - size.paddingBottom;
  }
  return size.height;
}
function getInnerWidth(el) {
  var size = getElementSize(el);
  if (size.boxSizing === "border-box") {
    return size.width - size.paddingLeft - size.paddingRight;
  }
  return size.width;
}
function getAbsoluteHeight(el) {
  var size = getElementSize(el);
  var marginRight = size.marginBottom + size.marginTop;
  return Math.ceil(el.offsetHeight + marginRight);
}
function getAbsoluteWidth(el) {
  var size = getElementSize(el);
  var marginWidth = size.marginLeft + size.marginRight;
  return Math.ceil(el.offsetWidth + marginWidth);
}
function isRtlNegativeScroll() {
  if (typeof rtlNegativeScroll === "boolean") {
    return rtlNegativeScroll;
  }
  var template = document.createElement("div");
  template.style.direction = "rtl";
  template.style.width = "1px";
  template.style.height = "1px";
  template.style.position = "fixed";
  template.style.top = "0px";
  template.style.overflow = "hidden";
  template.dir = "rtl";
  template.innerHTML = '<div style="width: 2px">\n            <span style="display: inline-block; width: 1px"></span>\n            <span style="display: inline-block; width: 1px"></span>\n        </div>';
  document.body.appendChild(template);
  template.scrollLeft = 1;
  rtlNegativeScroll = Math.floor(template.scrollLeft) === 0;
  document.body.removeChild(template);
  return rtlNegativeScroll;
}
function getScrollLeft(element, rtl) {
  var scrollLeft = element.scrollLeft;
  if (rtl) {
    scrollLeft = Math.abs(scrollLeft);
    if (isBrowserChrome() && !isRtlNegativeScroll()) {
      scrollLeft = element.scrollWidth - element.clientWidth - scrollLeft;
    }
  }
  return scrollLeft;
}
function setScrollLeft(element, value, rtl) {
  if (rtl) {
    if (isRtlNegativeScroll()) {
      value *= -1;
    } else if (isBrowserSafari() || isBrowserChrome()) {
      value = element.scrollWidth - element.clientWidth - value;
    }
  }
  element.scrollLeft = value;
}
function clearElement(el) {
  while (el && el.firstChild) {
    el.removeChild(el.firstChild);
  }
}
function removeElement(parent, cssSelector) {
  removeFromParent(parent.querySelector(cssSelector));
}
function removeFromParent(node) {
  if (node && node.parentNode) {
    node.parentNode.removeChild(node);
  }
}
function isVisible(element) {
  return element.offsetParent !== null;
}
function loadTemplate(template) {
  var tempDiv = document.createElement("div");
  tempDiv.innerHTML = (template || "").trim();
  return tempDiv.firstChild;
}
function appendHtml(eContainer, htmlTemplate) {
  if (eContainer.lastChild) {
    eContainer.insertAdjacentHTML("afterbegin", htmlTemplate);
  } else {
    eContainer.innerHTML = htmlTemplate;
  }
}
function getElementAttribute(element, attributeName) {
  if (element.attributes && element.attributes[attributeName]) {
    var attribute = element.attributes[attributeName];
    return attribute.value;
  }
  return null;
}
function offsetHeight(element) {
  return element && element.clientHeight ? element.clientHeight : 0;
}
function offsetWidth(element) {
  return element && element.clientWidth ? element.clientWidth : 0;
}
function ensureDomOrder(eContainer, eChild, eChildBefore) {
  if (eChildBefore && eChildBefore.nextSibling === eChild) {
    return;
  }
  var focusedEl = document.activeElement;
  var eChildHasFocus = eChild.contains(focusedEl);
  if (eChildBefore) {
    if (eChildBefore.nextSibling) {
      eContainer.insertBefore(eChild, eChildBefore.nextSibling);
    } else {
      eContainer.appendChild(eChild);
    }
  } else {
    if (eContainer.firstChild && eContainer.firstChild !== eChild) {
      eContainer.insertAdjacentElement("afterbegin", eChild);
    }
  }
  if (eChildHasFocus && focusedEl && browserSupportsPreventScroll()) {
    focusedEl.focus({ preventScroll: true });
  }
}
function setDomChildOrder(eContainer, orderedChildren) {
  for (var i = 0; i < orderedChildren.length; i++) {
    var correctCellAtIndex = orderedChildren[i];
    var actualCellAtIndex = eContainer.children[i];
    if (actualCellAtIndex !== correctCellAtIndex) {
      eContainer.insertBefore(correctCellAtIndex, actualCellAtIndex);
    }
  }
}
function insertWithDomOrder(eContainer, eToInsert, eChildBefore) {
  if (eChildBefore) {
    eChildBefore.insertAdjacentElement("afterend", eToInsert);
  } else {
    if (eContainer.firstChild) {
      eContainer.insertAdjacentElement("afterbegin", eToInsert);
    } else {
      eContainer.appendChild(eToInsert);
    }
  }
}
function prependDC(parent, documentFragment) {
  if (exists(parent.firstChild)) {
    parent.insertBefore(documentFragment, parent.firstChild);
  } else {
    parent.appendChild(documentFragment);
  }
}
function addStylesToElement(eElement, styles) {
  if (!styles) {
    return;
  }
  Object.keys(styles).forEach(function(key) {
    var keyCamelCase = hyphenToCamelCase(key);
    if (keyCamelCase) {
      eElement.style[keyCamelCase] = styles[key];
    }
  });
}
function isHorizontalScrollShowing(element) {
  return element.clientWidth < element.scrollWidth;
}
function isVerticalScrollShowing(element) {
  return element.clientHeight < element.scrollHeight;
}
function setElementWidth(element, width) {
  if (width === "flex") {
    element.style.removeProperty("width");
    element.style.removeProperty("minWidth");
    element.style.removeProperty("maxWidth");
    element.style.flex = "1 1 auto";
  } else {
    setFixedWidth(element, width);
  }
}
function setFixedWidth(element, width) {
  width = formatSize(width);
  element.style.width = width.toString();
  element.style.maxWidth = width.toString();
  element.style.minWidth = width.toString();
}
function setElementHeight(element, height) {
  if (height === "flex") {
    element.style.removeProperty("height");
    element.style.removeProperty("minHeight");
    element.style.removeProperty("maxHeight");
    element.style.flex = "1 1 auto";
  } else {
    setFixedHeight(element, height);
  }
}
function setFixedHeight(element, height) {
  height = formatSize(height);
  element.style.height = height.toString();
  element.style.maxHeight = height.toString();
  element.style.minHeight = height.toString();
}
function formatSize(size) {
  if (typeof size === "number") {
    return size + "px";
  }
  return size;
}
function isNode(o) {
  return typeof Node === "function" ? o instanceof Node : o && typeof o === "object" && typeof o.nodeType === "number" && typeof o.nodeName === "string";
}
function isElement(o) {
  return typeof HTMLElement === "function" ? o instanceof HTMLElement : o && isNonNullObject(o) && o.nodeType === 1 && typeof o.nodeName === "string";
}
function isNodeOrElement(o) {
  return isNode(o) || isElement(o);
}
function copyNodeList(nodeList) {
  if (nodeList == null) {
    return [];
  }
  var result = [];
  nodeListForEach(nodeList, function(node) {
    return result.push(node);
  });
  return result;
}
function iterateNamedNodeMap(map, callback) {
  if (!map) {
    return;
  }
  for (var i = 0; i < map.length; i++) {
    var attr = map[i];
    callback(attr.name, attr.value);
  }
}
function setCheckboxState(eCheckbox, state) {
  if (typeof state === "boolean") {
    eCheckbox.checked = state;
    eCheckbox.indeterminate = false;
  } else {
    eCheckbox.indeterminate = true;
  }
}
function addOrRemoveAttribute(element, name, value) {
  if (value == null) {
    element.removeAttribute(name);
  } else {
    element.setAttribute(name, value.toString());
  }
}
function nodeListForEach(nodeList, action) {
  if (nodeList == null) {
    return;
  }
  for (var i = 0; i < nodeList.length; i++) {
    action(nodeList[i]);
  }
}
function getNameOfClass(theClass) {
  var funcNameRegex = /function (.{1,})\(/;
  var funcAsString = theClass.toString();
  var results = funcNameRegex.exec(funcAsString);
  return results && results.length > 1 ? results[1] : "";
}
function findLineByLeastSquares(values2) {
  var len = values2.length;
  var maxDecimals = 0;
  if (len <= 1) {
    return values2;
  }
  for (var i = 0; i < values2.length; i++) {
    var value = values2[i];
    var splitExponent = value.toString().split("e-");
    if (splitExponent.length > 1) {
      maxDecimals = Math.max(maxDecimals, parseInt(splitExponent[1], 10));
      continue;
    }
    if (Math.floor(value) === value) {
      continue;
    }
    maxDecimals = Math.max(maxDecimals, value.toString().split(".")[1].length);
  }
  var sum_x = 0;
  var sum_y = 0;
  var sum_xy = 0;
  var sum_xx = 0;
  var y = 0;
  for (var x = 0; x < len; x++) {
    y = values2[x];
    sum_x += x;
    sum_y += y;
    sum_xx += x * x;
    sum_xy += x * y;
  }
  var m = (len * sum_xy - sum_x * sum_y) / (len * sum_xx - sum_x * sum_x);
  var b = sum_y / len - m * sum_x / len;
  var result = [];
  for (var x = 0; x <= len; x++) {
    result.push(parseFloat((x * m + b).toFixed(maxDecimals)));
  }
  return result;
}
function cssStyleObjectToMarkup(stylesToUse) {
  if (!stylesToUse) {
    return "";
  }
  var resParts = [];
  iterateObject(stylesToUse, function(styleKey, styleValue) {
    var styleKeyDashed = camelCaseToHyphen(styleKey);
    resParts.push(styleKeyDashed + ": " + styleValue + ";");
  });
  return resParts.join(" ");
}
function message(msg) {
  var eMessage = document.createElement("div");
  var eBox = document.querySelector("#__ag__message");
  eMessage.innerHTML = msg;
  if (!eBox) {
    var template = '<div id="__ag__message" style="display: inline-block; position: absolute; top: 0px; left: 0px; color: white; background-color: black; z-index: 20; padding: 2px; border: 1px solid darkred; height: 200px; overflow-y: auto;"></div>';
    eBox = loadTemplate(template);
    if (document.body) {
      document.body.appendChild(eBox);
    }
  }
  eBox.insertBefore(eMessage, eBox.children[0]);
}
function bindCellRendererToHtmlElement(cellRendererPromise, eTarget) {
  cellRendererPromise.then(function(cellRenderer) {
    var gui = cellRenderer.getGui();
    if (gui != null) {
      if (typeof gui === "object") {
        eTarget.appendChild(gui);
      } else {
        eTarget.innerHTML = gui;
      }
    }
  });
}
function setAriaAttribute(element, attribute, value) {
  element.setAttribute(ariaAttributeName(attribute), value.toString());
}
function removeAriaAttribute(element, attribute) {
  element.removeAttribute(ariaAttributeName(attribute));
}
function ariaAttributeName(attribute) {
  return "aria-" + attribute;
}
function setAriaRole(element, role) {
  if (role) {
    element.setAttribute("role", role);
  } else {
    element.removeAttribute("role");
  }
}
function getAriaSortState(column) {
  var sort;
  if (column.isSortAscending()) {
    sort = "ascending";
  } else if (column.isSortDescending()) {
    sort = "descending";
  } else {
    sort = "none";
  }
  return sort;
}
function getAriaLevel(element) {
  return parseInt(element.getAttribute("aria-level"), 10);
}
function getAriaPosInSet(element) {
  return parseInt(element.getAttribute("aria-posinset"), 10);
}
function getAriaDescribedBy(element) {
  return element.getAttribute("aria-describedby") || "";
}
function setAriaLabel(element, label) {
  var key = "label";
  if (label != null && label !== "") {
    setAriaAttribute(element, key, label);
  } else {
    removeAriaAttribute(element, key);
  }
}
function setAriaLabelledBy(element, labelledBy) {
  var key = "labelledby";
  if (labelledBy) {
    setAriaAttribute(element, key, labelledBy);
  } else {
    removeAriaAttribute(element, key);
  }
}
function setAriaDescription(element, description) {
  var key = "description";
  if (description) {
    setAriaAttribute(element, key, description);
  } else {
    removeAriaAttribute(element, key);
  }
}
function setAriaDescribedBy(element, describedby) {
  var key = "describedby";
  if (describedby) {
    setAriaAttribute(element, key, describedby);
  } else {
    removeAriaAttribute(element, key);
  }
}
function setAriaLevel(element, level) {
  setAriaAttribute(element, "level", level);
}
function setAriaDisabled(element, disabled) {
  setAriaAttribute(element, "disabled", disabled);
}
function setAriaHidden(element, hidden) {
  if (hidden) {
    setAriaAttribute(element, "hidden", true);
  } else {
    removeAriaAttribute(element, "hidden");
  }
}
function setAriaExpanded(element, expanded) {
  setAriaAttribute(element, "expanded", expanded);
}
function removeAriaExpanded(element) {
  removeAriaAttribute(element, "expanded");
}
function setAriaSetSize(element, setsize) {
  setAriaAttribute(element, "setsize", setsize);
}
function setAriaPosInSet(element, position) {
  setAriaAttribute(element, "posinset", position);
}
function setAriaMultiSelectable(element, multiSelectable) {
  setAriaAttribute(element, "multiselectable", multiSelectable);
}
function setAriaRowCount(element, rowCount) {
  setAriaAttribute(element, "rowcount", rowCount);
}
function setAriaRowIndex(element, rowIndex) {
  setAriaAttribute(element, "rowindex", rowIndex);
}
function setAriaColCount(element, colCount) {
  setAriaAttribute(element, "colcount", colCount);
}
function setAriaColIndex(element, colIndex) {
  setAriaAttribute(element, "colindex", colIndex);
}
function setAriaColSpan(element, colSpan) {
  setAriaAttribute(element, "colspan", colSpan);
}
function setAriaSort(element, sort) {
  setAriaAttribute(element, "sort", sort);
}
function removeAriaSort(element) {
  removeAriaAttribute(element, "sort");
}
function setAriaSelected(element, selected) {
  var attributeName = "selected";
  if (selected) {
    setAriaAttribute(element, attributeName, selected);
  } else {
    removeAriaAttribute(element, attributeName);
  }
}
function setAriaChecked(element, checked) {
  setAriaAttribute(element, "checked", checked === void 0 ? "mixed" : checked);
}
function serialiseDate(date, includeTime, separator) {
  if (includeTime === void 0) {
    includeTime = true;
  }
  if (separator === void 0) {
    separator = "-";
  }
  if (!date) {
    return null;
  }
  var serialised = [date.getFullYear(), date.getMonth() + 1, date.getDate()].map(function(part) {
    return padStartWidthZeros(part, 2);
  }).join(separator);
  if (includeTime) {
    serialised += " " + [date.getHours(), date.getMinutes(), date.getSeconds()].map(function(part) {
      return padStartWidthZeros(part, 2);
    }).join(":");
  }
  return serialised;
}
function dateToFormattedString(date, format) {
  if (format === void 0) {
    format = "YYYY-MM-DD";
  }
  var fullYear = padStartWidthZeros(date.getFullYear(), 4);
  var months = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
  ];
  var days = [
    "Sunday",
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday"
  ];
  var replace = {
    YYYY: function() {
      return fullYear.slice(fullYear.length - 4, fullYear.length);
    },
    YY: function() {
      return fullYear.slice(fullYear.length - 2, fullYear.length);
    },
    Y: function() {
      return "" + date.getFullYear();
    },
    MMMM: function() {
      return months[date.getMonth()];
    },
    MMM: function() {
      return months[date.getMonth()].slice(0, 3);
    },
    MM: function() {
      return padStartWidthZeros(date.getMonth() + 1, 2);
    },
    Mo: function() {
      return "" + (date.getMonth() + 1) + calculateOrdinal(date.getMonth() + 1);
    },
    M: function() {
      return "" + (date.getMonth() + 1);
    },
    Do: function() {
      return "" + date.getDate() + calculateOrdinal(date.getDate());
    },
    DD: function() {
      return padStartWidthZeros(date.getDate(), 2);
    },
    D: function() {
      return "" + date.getDate();
    },
    dddd: function() {
      return days[date.getDay()];
    },
    ddd: function() {
      return days[date.getDay()].slice(0, 3);
    },
    dd: function() {
      return days[date.getDay()].slice(0, 2);
    },
    do: function() {
      return "" + date.getDay() + calculateOrdinal(date.getDay());
    },
    d: function() {
      return "" + date.getDay();
    }
  };
  var regexp = new RegExp(Object.keys(replace).join("|"), "g");
  return format.replace(regexp, function(match) {
    if (match in replace) {
      return replace[match]();
    }
    return match;
  });
}
function parseDateTimeFromString(value) {
  if (!value) {
    return null;
  }
  var _a = __read$j(value.split(" "), 2), dateStr = _a[0], timeStr = _a[1];
  if (!dateStr) {
    return null;
  }
  var fields = dateStr.split("-").map(function(f) {
    return parseInt(f, 10);
  });
  if (fields.filter(function(f) {
    return !isNaN(f);
  }).length !== 3) {
    return null;
  }
  var _b = __read$j(fields, 3), year = _b[0], month = _b[1], day = _b[2];
  var date = new Date(year, month - 1, day);
  if (date.getFullYear() !== year || date.getMonth() !== month - 1 || date.getDate() !== day) {
    return null;
  }
  if (!timeStr || timeStr === "00:00:00") {
    return date;
  }
  var _c = __read$j(timeStr.split(":").map(function(part) {
    return parseInt(part, 10);
  }), 3), hours = _c[0], minutes = _c[1], seconds = _c[2];
  if (hours >= 0 && hours < 24) {
    date.setHours(hours);
  }
  if (minutes >= 0 && minutes < 60) {
    date.setMinutes(minutes);
  }
  if (seconds >= 0 && seconds < 60) {
    date.setSeconds(seconds);
  }
  return date;
}
function createIcon(iconName, gridOptionsWrapper, column) {
  var iconContents = createIconNoSpan(iconName, gridOptionsWrapper, column);
  if (iconContents && iconContents.className.indexOf("ag-icon") > -1) {
    return iconContents;
  }
  var eResult = document.createElement("span");
  eResult.appendChild(iconContents);
  return eResult;
}
function createIconNoSpan(iconName, gridOptionsWrapper, column, forceCreate) {
  var userProvidedIcon = null;
  var icons = column && column.getColDef().icons;
  if (icons) {
    userProvidedIcon = icons[iconName];
  }
  if (gridOptionsWrapper && !userProvidedIcon) {
    var optionsIcons = gridOptionsWrapper.getIcons();
    if (optionsIcons) {
      userProvidedIcon = optionsIcons[iconName];
    }
  }
  if (userProvidedIcon) {
    var rendererResult = void 0;
    if (typeof userProvidedIcon === "function") {
      rendererResult = userProvidedIcon();
    } else if (typeof userProvidedIcon === "string") {
      rendererResult = userProvidedIcon;
    } else {
      throw new Error("icon from grid options needs to be a string or a function");
    }
    if (typeof rendererResult === "string") {
      return loadTemplate(rendererResult);
    }
    if (isNodeOrElement(rendererResult)) {
      return rendererResult;
    }
    console.warn("AG Grid: iconRenderer should return back a string or a dom object");
  } else {
    var span = document.createElement("span");
    var cssClass = iconNameClassMap[iconName];
    if (!cssClass) {
      if (!forceCreate) {
        console.warn("AG Grid: Did not find icon " + iconName);
        cssClass = "";
      } else {
        cssClass = iconName;
      }
    }
    span.setAttribute("class", "ag-icon ag-icon-" + cssClass);
    span.setAttribute("unselectable", "on");
    setAriaRole(span, "presentation");
    return span;
  }
}
function isEventFromPrintableCharacter(event) {
  if (event.altKey || event.ctrlKey || event.metaKey) {
    return false;
  }
  var printableCharacter = event.key.length === 1;
  var numpadDelWithNumlockOnForEdgeOrIe = isNumpadDelWithNumLockOnForEdge(event);
  return printableCharacter || numpadDelWithNumlockOnForEdgeOrIe;
}
function isUserSuppressingKeyboardEvent(gridOptionsWrapper, keyboardEvent, rowNode, column, editing) {
  var gridOptionsFunc = gridOptionsWrapper.getSuppressKeyboardEventFunc();
  var colDefFunc = column ? column.getColDef().suppressKeyboardEvent : void 0;
  if (!gridOptionsFunc && !colDefFunc) {
    return false;
  }
  var params = {
    event: keyboardEvent,
    editing,
    column,
    api: gridOptionsWrapper.getApi(),
    node: rowNode,
    data: rowNode.data,
    colDef: column.getColDef(),
    context: gridOptionsWrapper.getContext(),
    columnApi: gridOptionsWrapper.getColumnApi()
  };
  if (colDefFunc) {
    var colDefFuncResult = colDefFunc(params);
    if (colDefFuncResult) {
      return true;
    }
  }
  if (gridOptionsFunc) {
    return gridOptionsFunc(params);
  }
  return false;
}
function isUserSuppressingHeaderKeyboardEvent(gridOptionsWrapper, keyboardEvent, headerRowIndex, column) {
  var colDef = column.getDefinition();
  var colDefFunc = colDef && colDef.suppressHeaderKeyboardEvent;
  if (!exists(colDefFunc)) {
    return false;
  }
  var params = {
    api: gridOptionsWrapper.getApi(),
    columnApi: gridOptionsWrapper.getColumnApi(),
    context: gridOptionsWrapper.getContext(),
    colDef,
    column,
    headerRowIndex,
    event: keyboardEvent
  };
  return !!colDefFunc(params);
}
function isNumpadDelWithNumLockOnForEdge(event) {
  return isBrowserEdge() && event.key === NUMPAD_DEL_NUMLOCK_ON_KEY && event.charCode === NUMPAD_DEL_NUMLOCK_ON_KEYCODE;
}
function normaliseQwertyAzerty(keyboardEvent) {
  var keyCode = keyboardEvent.keyCode;
  var code;
  switch (keyCode) {
    case A_KEYCODE:
      code = KeyCode.A;
      break;
    case C_KEYCODE:
      code = KeyCode.C;
      break;
    case V_KEYCODE:
      code = KeyCode.V;
      break;
    case D_KEYCODE:
      code = KeyCode.D;
      break;
    case Z_KEYCODE:
      code = KeyCode.Z;
      break;
    case Y_KEYCODE:
      code = KeyCode.Y;
      break;
    default:
      code = keyboardEvent.code;
  }
  return code;
}
function isDeleteKey(key, alwaysReturnFalseOnBackspace) {
  if (alwaysReturnFalseOnBackspace === void 0) {
    alwaysReturnFalseOnBackspace = false;
  }
  if (key === KeyCode.DELETE) {
    return true;
  }
  if (!alwaysReturnFalseOnBackspace && key === KeyCode.BACKSPACE) {
    return isMacOsUserAgent();
  }
  return false;
}
function areEventsNear(e1, e2, pixelCount) {
  if (pixelCount === 0) {
    return false;
  }
  var diffX = Math.abs(e1.clientX - e2.clientX);
  var diffY = Math.abs(e1.clientY - e2.clientY);
  return Math.max(diffX, diffY) <= pixelCount;
}
function sortRowNodesByOrder(rowNodes, rowNodeOrder) {
  if (!rowNodes) {
    return false;
  }
  var comparator = function(nodeA, nodeB) {
    var positionA = rowNodeOrder[nodeA.id];
    var positionB = rowNodeOrder[nodeB.id];
    var aHasIndex = positionA !== void 0;
    var bHasIndex = positionB !== void 0;
    var bothNodesAreUserNodes = aHasIndex && bHasIndex;
    var bothNodesAreFillerNodes = !aHasIndex && !bHasIndex;
    if (bothNodesAreUserNodes) {
      return positionA - positionB;
    }
    if (bothNodesAreFillerNodes) {
      return nodeA.__objectId - nodeB.__objectId;
    }
    if (aHasIndex) {
      return 1;
    }
    return -1;
  };
  var rowNodeA;
  var rowNodeB;
  var atLeastOneOutOfOrder = false;
  for (var i = 0; i < rowNodes.length - 1; i++) {
    rowNodeA = rowNodes[i];
    rowNodeB = rowNodes[i + 1];
    if (comparator(rowNodeA, rowNodeB) > 0) {
      atLeastOneOutOfOrder = true;
      break;
    }
  }
  if (atLeastOneOutOfOrder) {
    rowNodes.sort(comparator);
    return true;
  }
  return false;
}
function traverseNodesWithKey(nodes, callback) {
  var keyParts = [];
  recursiveSearchNodes(nodes);
  function recursiveSearchNodes(currentNodes) {
    if (!currentNodes) {
      return;
    }
    currentNodes.forEach(function(node) {
      if (node.group || node.hasChildren()) {
        keyParts.push(node.key);
        var key = keyParts.join("|");
        callback(node, key);
        recursiveSearchNodes(node.childrenAfterGroup);
        keyParts.pop();
      }
    });
  }
}
function convertToSet(list) {
  var set2 = /* @__PURE__ */ new Set();
  list.forEach(function(x) {
    return set2.add(x);
  });
  return set2;
}
function QuerySelector(selector) {
  return querySelectorFunc.bind(this, selector, void 0);
}
function RefSelector(ref) {
  return querySelectorFunc.bind(this, "[ref=" + ref + "]", ref);
}
function querySelectorFunc(selector, refSelector, classPrototype, methodOrAttributeName, index) {
  if (selector === null) {
    console.error("AG Grid: QuerySelector selector should not be null");
    return;
  }
  if (typeof index === "number") {
    console.error("AG Grid: QuerySelector should be on an attribute");
    return;
  }
  addToObjectProps(classPrototype, "querySelectors", {
    attributeName: methodOrAttributeName,
    querySelector: selector,
    refSelector
  });
}
function addToObjectProps(target, key, value) {
  var props = getOrCreateProps(target, getFunctionName(target.constructor));
  if (!props[key]) {
    props[key] = [];
  }
  props[key].push(value);
}
function getOrCreateProps(target, instanceName) {
  if (!target.__agComponentMetaData) {
    target.__agComponentMetaData = {};
  }
  if (!target.__agComponentMetaData[instanceName]) {
    target.__agComponentMetaData[instanceName] = {};
  }
  return target.__agComponentMetaData[instanceName];
}
function getRowContainerTypeForName(name) {
  switch (name) {
    case RowContainerName.CENTER:
    case RowContainerName.TOP_CENTER:
    case RowContainerName.STICKY_TOP_CENTER:
    case RowContainerName.BOTTOM_CENTER:
      return RowContainerType.CENTER;
    case RowContainerName.LEFT:
    case RowContainerName.TOP_LEFT:
    case RowContainerName.STICKY_TOP_LEFT:
    case RowContainerName.BOTTOM_LEFT:
      return RowContainerType.LEFT;
    case RowContainerName.RIGHT:
    case RowContainerName.TOP_RIGHT:
    case RowContainerName.STICKY_TOP_RIGHT:
    case RowContainerName.BOTTOM_RIGHT:
      return RowContainerType.RIGHT;
    case RowContainerName.FULL_WIDTH:
    case RowContainerName.TOP_FULL_WIDTH:
    case RowContainerName.STICKY_TOP_FULL_WIDTH:
    case RowContainerName.BOTTOM_FULL_WIDTH:
      return RowContainerType.FULL_WIDTH;
    default:
      throw Error("Invalid Row Container Type");
  }
}
function templateFactory() {
  var name = Component.elementGettingCreated.getAttribute("name");
  var cssClasses = RowContainerCtrl.getRowContainerCssClasses(name);
  var res;
  var template1 = name === RowContainerName.CENTER;
  var template2 = name === RowContainerName.TOP_CENTER || name === RowContainerName.STICKY_TOP_CENTER || name === RowContainerName.BOTTOM_CENTER;
  if (template1) {
    res = '<div class="' + cssClasses.wrapper + '" ref="eWrapper" role="presentation">\n                <div class="' + cssClasses.viewport + '" ref="eViewport" role="presentation">\n                    <div class="' + cssClasses.container + '" ref="eContainer"></div>\n                </div>\n            </div>';
  } else if (template2) {
    res = '<div class="' + cssClasses.viewport + '" ref="eViewport" role="presentation">\n                <div class="' + cssClasses.container + '" ref="eContainer"></div>\n            </div>';
  } else {
    res = '<div class="' + cssClasses.container + '" ref="eContainer"></div>';
  }
  return res;
}
function unwrapUserComp(comp) {
  var compAsAny = comp;
  var isProxy = compAsAny != null && compAsAny.getFrameworkComponentInstance != null;
  return isProxy ? compAsAny.getFrameworkComponentInstance() : comp;
}
function simpleHttpRequest(params) {
  return new AgPromise(function(resolve) {
    var httpRequest = new XMLHttpRequest();
    httpRequest.open("GET", params.url);
    httpRequest.send();
    httpRequest.onreadystatechange = function() {
      if (httpRequest.readyState === 4 && httpRequest.status === 200) {
        resolve(JSON.parse(httpRequest.responseText));
      }
    };
  });
}
function defaultGroupComparator(valueA, valueB, nodeA, nodeB, accentedCompare) {
  if (accentedCompare === void 0) {
    accentedCompare = false;
  }
  console.warn("AG Grid: Since ag-grid 11.0.0 defaultGroupComparator is not necessary. You can remove this from your colDef");
  var nodeAIsGroup = exists(nodeA) && nodeA.group;
  var nodeBIsGroup = exists(nodeB) && nodeB.group;
  var bothAreGroups = nodeAIsGroup && nodeBIsGroup;
  var bothAreNormal = !nodeAIsGroup && !nodeBIsGroup;
  if (bothAreGroups) {
    return defaultComparator(nodeA.key, nodeB.key, accentedCompare);
  }
  if (bothAreNormal) {
    return defaultComparator(valueA, valueB, accentedCompare);
  }
  if (nodeAIsGroup) {
    return 1;
  }
  return -1;
}
var GenericUtils, ColumnKeyCreator, ObjectUtils, doOnceFlags, executeNextVMTurnFuncs, executeNextVMTurnPending, noop, FunctionUtils, Context, __assign$i, __decorate$2A, __param$a, EventService, Constants, ModuleNames, ModuleRegistry, __decorate$2z, instanceIdSequence$4, Column, ArrayUtils, __decorate$2y, ColumnGroup, ProvidedColumnGroup, DefaultColumnTypes, AG_GRID_STOP_PROPAGATION, PASSIVE_EVENTS$1, supports, isEventSupported, EventUtils, __decorate$2x, BeanStub, __extends$2U, __decorate$2w, __param$9, ColumnFactory, Events, GroupInstanceIdCreator, reUnescapedHtml, HTML_ESCAPES, StringUtils, MapUtils, __read$p, __spread$j, ColDefUtil, __read$o, __spread$i, PropertyKeys, __assign$h, __read$n, __spread$h, ComponentUtil, SideBarDefParser, __values$5, isSafari, isIE, isEdge, isChrome, isFirefox, isMacOs, isIOS, invisibleScrollbar, browserScrollbarWidth, browserInfo, BrowserUtils, FuzzyMatchUtils, NumberUtils, __assign$g, __decorate$2v, __param$8, __read$m, __spread$g, DEFAULT_ROW_HEIGHT, DEFAULT_DETAIL_ROW_HEIGHT, DEFAULT_VIEWPORT_ROW_MODEL_PAGE_SIZE, DEFAULT_VIEWPORT_ROW_MODEL_BUFFER_SIZE, DEFAULT_KEEP_DETAIL_ROW_COUNT, GridOptionsWrapper, __extends$2T, __decorate$2u, __param$7, __rest, __values$4, __read$l, __spread$f, ColumnModel, __extends$2S, __decorate$2t, ColumnUtils, __extends$2R, __decorate$2s, DisplayedGroupCreator, __extends$2Q, __decorate$2r, AgStackComponentsRegistry, __read$k, Color, CsvUtils, rtlNegativeScroll, DomUtils, GeneralUtils, AriaUtils, __read$j, calculateOrdinal, DateUtils, iconNameClassMap, IconUtils, KeyCode, NUMPAD_DEL_NUMLOCK_ON_KEY, NUMPAD_DEL_NUMLOCK_ON_KEYCODE, A_KEYCODE, C_KEYCODE, V_KEYCODE, D_KEYCODE, Z_KEYCODE, Y_KEYCODE, KeyboardUtils, MouseUtils, RowNodeUtils, SetUtils, __assign$f, utils, _, NumberSequence, AgPromiseStatus, AgPromise, Timer, __extends$2P, __assign$e, __decorate$2q, TooltipStates, CustomTooltipFeature, CssClassManager, __extends$2O, __decorate$2p, compIdSequence, Component, __extends$2N, __decorate$2o, ReadOnlyFloatingFilter, DateCompWrapper, __assign$d, OptionsFactory, DEFAULT_FILTER_LOCALE_TEXT, __extends$2M, __assign$c, __decorate$2n, ManagedFocusFeature, __extends$2L, __decorate$2m, ProvidedFilter, __extends$2K, __decorate$2l, AgAbstractLabel, __extends$2J, AgAbstractField, __extends$2I, __decorate$2k, AgPickerField, __extends$2H, __decorate$2j, AgList, __extends$2G, __decorate$2i, AgSelect, __extends$2F, __decorate$2h, AgAbstractInputField, __extends$2E, __decorate$2g, ConditionPosition, SimpleFilter, __extends$2D, ScalarFilter, __extends$2C, __assign$b, __decorate$2f, DEFAULT_MIN_YEAR, DEFAULT_MAX_YEAR, DateFilter, __extends$2B, SimpleFloatingFilter, __extends$2A, __decorate$2e, DateFloatingFilter, __extends$2z, __decorate$2d, DefaultDateComponent, __extends$2y, __decorate$2c, NumberFilter, __extends$2x, __assign$a, __decorate$2b, TextFilter, __extends$2w, __decorate$2a, TextInputFloatingFilter, __extends$2v, NumberFloatingFilter, __extends$2u, TextFloatingFilter, TouchListener, __extends$2t, __decorate$29, SortIndicatorComp, __extends$2s, __decorate$28, HeaderComp, __extends$2r, __decorate$27, HeaderGroupComp, __extends$2q, PopupComponent, __extends$2p, __decorate$26, LargeTextCellEditor, __extends$2o, __decorate$25, SelectCellEditor, __extends$2n, PopupSelectCellEditor, __extends$2m, __decorate$24, TextCellEditor, __extends$2l, PopupTextCellEditor, __extends$2k, __decorate$23, ARROW_UP, ARROW_DOWN, AnimateShowChangeCellRenderer, __extends$2j, __decorate$22, AnimateSlideCellRenderer, RowHighlightPosition, RowNode, __extends$2i, __assign$9, __decorate$21, CheckboxSelectionComponent, __extends$2h, __decorate$20, __values$3, DragSourceType, VerticalDirection, HorizontalDirection, DragAndDropService, __extends$2g, __decorate$1$, RowDragComp, VisibilityStrategy, NonManagedVisibilityStrategy, ManagedVisibilityStrategy, __extends$2f, __assign$8, __decorate$1_, GroupCellRendererCtrl, __extends$2e, __decorate$1Z, GroupCellRenderer, __extends$2d, __decorate$1Y, LoadingCellRenderer, __extends$2c, LoadingOverlayComponent$1, __extends$2b, NoRowsOverlayComponent$1, __extends$2a, TooltipComponent$1, __extends$29, __decorate$1X, UserComponentRegistry, DateComponent, HeaderComponent, HeaderGroupComponent, CellRendererComponent, CellEditorComponent, InnerRendererComponent, LoadingOverlayComponent, NoRowsOverlayComponent, TooltipComponent, FilterComponent, FloatingFilterComponent, ToolPanelComponent, StatusPanelComponent, FullWidth, FullWidthLoading, FullWidthGroup, FullWidthDetail, FloatingFilterMapper, __extends$28, __decorate$1W, UserComponentFactory, ExcelFactoryMode, __extends$27, __decorate$1V, DragService, __extends$26, __assign$7, __decorate$1U, FilterManager, __extends$25, AbstractHeaderCellComp, __extends$24, __decorate$1T, HeaderFilterCellComp, __extends$23, __decorate$1S, LayoutCssClasses, LayoutFeature, __extends$22, __decorate$1R, GridBodyScrollFeature, AutoScrollService, __extends$21, __assign$6, __decorate$1Q, __read$i, __spread$e, RowDragFeature, __extends$20, __decorate$1P, RowAnimationCssClasses, CSS_CLASS_CELL_SELECTABLE, CSS_CLASS_FORCE_VERTICAL_SCROLL, CSS_CLASS_COLUMN_MOVING, GridBodyCtrl, SelectionHandleType, CellRangeType, CSS_CELL_RANGE_SELECTED, CSS_CELL_RANGE_CHART, CSS_CELL_RANGE_SINGLE_CELL, CSS_CELL_RANGE_CHART_CATEGORY, CSS_CELL_RANGE_HANDLE, CSS_CELL_RANGE_TOP, CSS_CELL_RANGE_RIGHT, CSS_CELL_RANGE_BOTTOM, CSS_CELL_RANGE_LEFT, CellRangeFeature, __extends$1$, CellPositionFeature, __extends$1_, CellCustomStyleFeature, __extends$1Z, TooltipFeature, __decorate$1O, Beans, __extends$1Y, CellMouseListenerFeature, __extends$1X, CellKeyboardListenerFeature, __extends$1W, __decorate$1N, DndSourceComp, __extends$1V, __assign$5, CSS_CELL, CSS_AUTO_HEIGHT, CSS_NORMAL_HEIGHT, CSS_CELL_FOCUS, CSS_CELL_FIRST_RIGHT_PINNED, CSS_CELL_LAST_LEFT_PINNED, CSS_CELL_NOT_INLINE_EDITING, CSS_CELL_INLINE_EDITING, CSS_CELL_POPUP_EDITING, CSS_COLUMN_HOVER, CSS_CELL_WRAP_TEXT, instanceIdSequence$3, CellCtrl, __extends$1U, __values$2, __read$h, __spread$d, RowType$1, instanceIdSequence$2, RowCtrl, __extends$1T, __decorate$1M, __read$g, RowContainerEventsFeature, __extends$1S, __decorate$1L, ViewportSizeFeature, __extends$1R, __decorate$1K, SetPinnedLeftWidthFeature, __extends$1Q, __decorate$1J, SetPinnedRightWidthFeature, __extends$1P, __decorate$1I, SetHeightFeature, __extends$1O, __decorate$1H, DragListenerFeature, __extends$1N, __decorate$1G, CenterWidthFeature, __extends$1M, __decorate$1F, __read$f, __spread$c, RowContainerName, RowContainerType, ContainerCssClasses, ViewportCssClasses, WrapperCssClasses, RowContainerCtrl, __extends$1L, __decorate$1E, GRID_BODY_TEMPLATE, GridBodyComp, __extends$1K, __decorate$1D, ScrollVisibleService, __extends$1J, __decorate$1C, MouseEventService, __extends$1I, __assign$4, __decorate$1B, NavigationService, __extends$1H, __decorate$1A, PopupEditorWrapper, __extends$1G, CellComp, __extends$1F, RowComp, __extends$1E, __assign$3, __decorate$1z, RowContainerComp, __decorate$1y, BodyDropPivotTarget, __decorate$1x, __read$e, MoveColumnFeature, __extends$1D, __decorate$1w, BodyDropTarget, __read$d, __spread$b, CssClassApplier, __extends$1C, __decorate$1v, HeaderCellComp, __extends$1B, __decorate$1u, HeaderGroupCellComp, __extends$1A, __decorate$1t, HeaderRowType, HeaderRowComp, __extends$1z, __decorate$1s, instanceIdSequence$1, AbstractHeaderCellCtrl, ClientSideRowModelSteps, __decorate$1r, GridApi, __extends$1y, __decorate$1q, SetLeftFeature, __extends$1x, __decorate$1p, HoverFeature, __extends$1w, __decorate$1o, HeaderFilterCellCtrl, __extends$1v, __decorate$1n, ResizeFeature, __extends$1u, AgCheckbox, __extends$1t, __decorate$1m, SelectAllFeature, __extends$1s, __decorate$1l, HeaderCellCtrl, __extends$1r, __decorate$1k, GroupResizeFeature, __extends$1q, __decorate$1j, GroupWidthFeature, __extends$1p, __decorate$1i, HeaderGroupCellCtrl, __extends$1o, __decorate$1h, instanceIdSequence, HeaderRowCtrl, __extends$1n, __decorate$1g, __read$c, __spread$a, HeaderRowContainerCtrl, __extends$1m, __decorate$1f, HeaderRowContainerComp, __extends$1l, __decorate$1e, HeaderNavigationDirection, HeaderNavigationService, __extends$1k, __decorate$1d, GridHeaderCtrl, __extends$1j, __decorate$1c, GridHeaderComp, __extends$1i, __decorate$1b, HorizontalResizeService, __extends$1h, __decorate$1a, StandardMenuFactory, __extends$1g, __decorate$19, TabbedLayout, __extends$1f, __decorate$18, DEBOUNCE_DELAY, ResizeObserverService, __extends$1e, __decorate$17, AnimationFrameService, __extends$1d, __decorate$16, RESIZE_CONTAINER_STYLE, RESIZE_TEMPLATE, PositionableFeature, __extends$1c, __decorate$15, AutoWidthCalculator, __extends$1b, __decorate$14, __values$1, __read$b, __spread$9, StickyRowFeature, __extends$1a, __decorate$13, __read$a, __spread$8, RowRenderer, RowCtrlCache, __extends$19, __decorate$12, ValueFormatterService, __extends$18, __decorate$11, PinnedRowModel, ServerSideTransactionResultStatus, ChangedPath, __extends$17, RowNodeBlock, __extends$16, __decorate$10, __param$6, RowNodeBlockLoader, __extends$15, __decorate$$, PaginationProxy, __extends$14, __decorate$_, StylingService, __extends$13, AgRadioButton, __extends$12, AgToggleButton, __extends$11, AgInputTextField, __extends$10, AgInputTextArea, __extends$$, AgInputNumberField, __extends$_, AgInputRange, __extends$Z, __decorate$Z, AgSlider, __extends$Y, __decorate$Y, AgAngleSelect, __extends$X, __decorate$X, __read$9, AgColorPanel, __extends$W, __decorate$W, AgPanel, __extends$V, __assign$2, __decorate$V, AgDialog, __extends$U, AgColorPicker, __extends$T, __decorate$U, AgGroupComponent, __extends$S, __decorate$T, TabGuardCtrl, __extends$R, __read$8, __spread$7, TabGuardComp, __extends$Q, __assign$1, __decorate$S, AgMenuList, __extends$P, __decorate$R, AgMenuPanel, __extends$O, __decorate$Q, AgMenuItemComponent, __extends$N, __decorate$P, __read$7, __spread$6, FocusService, __extends$M, __decorate$O, __read$6, __spread$5, DIRECTION, instanceIdSeq, PopupService, __extends$L, __decorate$N, VirtualList, OUTSIDE_ANGULAR_EVENTS, PASSIVE_EVENTS, VanillaFrameworkOverrides, __extends$K, __decorate$M, __read$5, __spread$4, CellNavigationService, __extends$J, __decorate$L, __param$5, AlignedGridsService, __extends$I, __decorate$K, __param$4, SelectionService, __decorate$J, ColumnApi, __extends$H, __decorate$I, ValueService, __extends$G, __decorate$H, __param$3, ExpressionService, __extends$F, __decorate$G, TemplateService, __extends$E, __decorate$F, __param$2, LoggerFactory, Logger, __extends$D, __decorate$E, GridCtrl, __extends$C, __decorate$D, GridComp, __extends$B, __decorate$C, __read$4, __spread$3, SortController, __extends$A, __decorate$B, ColumnHoverService, __extends$z, __decorate$A, ColumnAnimationService, __extends$y, __decorate$z, AutoGroupColService, __extends$x, __decorate$y, PaginationAutoPageSizeService, __extends$w, __decorate$x, ValueCache, __extends$v, __decorate$w, ChangeDetectionService, __extends$u, __decorate$v, AgComponentUtils, __extends$t, __decorate$u, ComponentMetadataProvider, __extends$s, __decorate$t, MAT_GRID_SIZE, BASE_GRID_SIZE, BALHAM_GRID_SIZE, ALPINE_GRID_SIZE, HARD_CODED_SIZES, SASS_PROPERTY_BUILDER, CALCULATED_SIZES, Environment, __extends$r, __decorate$s, __param$1, RowContainerHeightService, __extends$q, __decorate$r, SelectableService, __extends$p, __decorate$q, PaginationComp, __extends$o, __decorate$p, LoadingType, OverlayWrapperComponent, __extends$n, __decorate$o, RowPositionUtils, __extends$m, __decorate$n, CellPositionUtils, __extends$l, UndoRedoAction, RangeUndoRedoAction, UndoRedoStack, __extends$k, __assign, __decorate$m, __read$3, __spread$2, UndoRedoService, __extends$j, __decorate$l, HeaderPositionUtils, __decorate$k, ColumnDefFactory, __decorate$j, RowCssClassCalculator, __decorate$i, RowNodeSorter, __extends$i, __decorate$h, CtrlsService, __extends$h, __decorate$g, CtrlsFactory, __extends$g, __decorate$f, FakeHScrollCtrl, __extends$f, __decorate$e, FakeHScrollComp, __extends$e, __decorate$d, PinnedWidthService, __extends$d, __decorate$c, RowNodeEventThrottle, __read$2, __spread$1, Grid, GridCoreCreator, BaseComponentWrapper, DEFAULT_CHART_GROUPS, CHART_TOOL_PANEL_ALLOW_LIST, CHART_TOOLBAR_ALLOW_LIST, CHART_TOOL_PANEL_MENU_OPTIONS, BarColumnLabelPlacement, globalObj, __read$1, __spread, ClientSideNodeManager, __extends$c, __decorate$b, RecursionType, ClientSideRowModel, __extends$b, __decorate$a, FilterStage, __extends$a, __decorate$9, SortStage, __extends$9, __decorate$8, FlattenStage, __extends$8, __decorate$7, SortService, __extends$7, __decorate$6, FilterService, __extends$6, __decorate$5, __read, ImmutableService, ClientSideRowModelModule, __extends$5, __decorate$4, InfiniteBlock, __extends$4, __decorate$3, __param, InfiniteCache, __extends$3, __decorate$2, InfiniteRowModel, InfiniteRowModelModule, BaseCreator, BaseGridSerializingSession, Downloader, __extends$2, LINE_SEPARATOR$1, CsvSerializingSession, __extends$1, __decorate$1, CsvCreator, __extends, __decorate, RowType, GridSerializer, CsvExportModule, LINE_SEPARATOR, XmlFactory, __values, crcTable, ZipContainer, AllCommunityModules;
var init_ag_grid_community_auto_esm = __esm({
  "node_modules/ag-grid-community/dist/ag-grid-community.auto.esm.js"() {
    GenericUtils = Object.freeze({
      __proto__: null,
      makeNull,
      exists,
      missing,
      missingOrEmpty,
      toStringOrNull,
      attrToNumber,
      attrToBoolean,
      attrToString,
      referenceCompare,
      jsonEquals,
      defaultComparator,
      values
    });
    ColumnKeyCreator = function() {
      function ColumnKeyCreator2() {
        this.existingKeys = {};
      }
      ColumnKeyCreator2.prototype.addExistingKeys = function(keys2) {
        for (var i = 0; i < keys2.length; i++) {
          this.existingKeys[keys2[i]] = true;
        }
      };
      ColumnKeyCreator2.prototype.getUniqueKey = function(colId, colField) {
        colId = toStringOrNull(colId);
        var count = 0;
        while (true) {
          var idToTry = void 0;
          if (colId) {
            idToTry = colId;
            if (count !== 0) {
              idToTry += "_" + count;
            }
          } else if (colField) {
            idToTry = colField;
            if (count !== 0) {
              idToTry += "_" + count;
            }
          } else {
            idToTry = "" + count;
          }
          if (!this.existingKeys[idToTry]) {
            this.existingKeys[idToTry] = true;
            return idToTry;
          }
          count++;
        }
      };
      return ColumnKeyCreator2;
    }();
    ObjectUtils = Object.freeze({
      __proto__: null,
      iterateObject,
      cloneObject,
      deepCloneObject,
      deepCloneDefinition,
      getProperty,
      setProperty,
      copyPropertiesIfPresent,
      copyPropertyIfPresent,
      getAllKeysInObjects,
      getAllValuesInObject,
      mergeDeep,
      missingOrEmptyObject,
      get,
      set,
      deepFreeze,
      getValueUsingField,
      removeAllReferences,
      isNonNullObject
    });
    doOnceFlags = {};
    executeNextVMTurnFuncs = [];
    executeNextVMTurnPending = false;
    noop = function() {
      return;
    };
    FunctionUtils = Object.freeze({
      __proto__: null,
      doOnce,
      getFunctionName,
      isFunction,
      executeInAWhile,
      executeNextVMTurn,
      executeAfter,
      debounce,
      throttle,
      waitUntil,
      compose,
      callIfPresent,
      noop
    });
    Context = function() {
      function Context2(params, logger) {
        this.beanWrappers = {};
        this.destroyed = false;
        if (!params || !params.beanClasses) {
          return;
        }
        this.contextParams = params;
        this.logger = logger;
        this.logger.log(">> creating ag-Application Context");
        this.createBeans();
        var beanInstances = this.getBeanInstances();
        this.wireBeans(beanInstances);
        this.logger.log(">> ag-Application Context ready - component is alive");
      }
      Context2.prototype.getBeanInstances = function() {
        return values(this.beanWrappers).map(function(beanEntry) {
          return beanEntry.beanInstance;
        });
      };
      Context2.prototype.createBean = function(bean, afterPreCreateCallback) {
        if (!bean) {
          throw Error("Can't wire to bean since it is null");
        }
        this.wireBeans([bean], afterPreCreateCallback);
        return bean;
      };
      Context2.prototype.wireBeans = function(beanInstances, afterPreCreateCallback) {
        this.autoWireBeans(beanInstances);
        this.methodWireBeans(beanInstances);
        this.callLifeCycleMethods(beanInstances, "preConstructMethods");
        if (exists(afterPreCreateCallback)) {
          beanInstances.forEach(afterPreCreateCallback);
        }
        this.callLifeCycleMethods(beanInstances, "postConstructMethods");
      };
      Context2.prototype.createBeans = function() {
        var _this = this;
        this.contextParams.beanClasses.forEach(this.createBeanWrapper.bind(this));
        iterateObject(this.beanWrappers, function(key, beanEntry) {
          var constructorParamsMeta;
          if (beanEntry.bean.__agBeanMetaData && beanEntry.bean.__agBeanMetaData.autowireMethods && beanEntry.bean.__agBeanMetaData.autowireMethods.agConstructor) {
            constructorParamsMeta = beanEntry.bean.__agBeanMetaData.autowireMethods.agConstructor;
          }
          var constructorParams = _this.getBeansForParameters(constructorParamsMeta, beanEntry.bean.name);
          var newInstance = applyToConstructor(beanEntry.bean, constructorParams);
          beanEntry.beanInstance = newInstance;
        });
        var createdBeanNames = Object.keys(this.beanWrappers).join(", ");
        this.logger.log("created beans: " + createdBeanNames);
      };
      Context2.prototype.createBeanWrapper = function(BeanClass) {
        var metaData = BeanClass.__agBeanMetaData;
        if (!metaData) {
          var beanName = void 0;
          if (BeanClass.prototype.constructor) {
            beanName = getFunctionName(BeanClass.prototype.constructor);
          } else {
            beanName = "" + BeanClass;
          }
          console.error("Context item " + beanName + " is not a bean");
          return;
        }
        var beanEntry = {
          bean: BeanClass,
          beanInstance: null,
          beanName: metaData.beanName
        };
        this.beanWrappers[metaData.beanName] = beanEntry;
      };
      Context2.prototype.autoWireBeans = function(beanInstances) {
        var _this = this;
        beanInstances.forEach(function(beanInstance) {
          _this.forEachMetaDataInHierarchy(beanInstance, function(metaData, beanName) {
            var attributes = metaData.agClassAttributes;
            if (!attributes) {
              return;
            }
            attributes.forEach(function(attribute) {
              var otherBean = _this.lookupBeanInstance(beanName, attribute.beanName, attribute.optional);
              beanInstance[attribute.attributeName] = otherBean;
            });
          });
        });
      };
      Context2.prototype.methodWireBeans = function(beanInstances) {
        var _this = this;
        beanInstances.forEach(function(beanInstance) {
          _this.forEachMetaDataInHierarchy(beanInstance, function(metaData, beanName) {
            iterateObject(metaData.autowireMethods, function(methodName, wireParams) {
              if (methodName === "agConstructor") {
                return;
              }
              var initParams = _this.getBeansForParameters(wireParams, beanName);
              beanInstance[methodName].apply(beanInstance, initParams);
            });
          });
        });
      };
      Context2.prototype.forEachMetaDataInHierarchy = function(beanInstance, callback) {
        var prototype = Object.getPrototypeOf(beanInstance);
        while (prototype != null) {
          var constructor = prototype.constructor;
          if (constructor.hasOwnProperty("__agBeanMetaData")) {
            var metaData = constructor.__agBeanMetaData;
            var beanName = this.getBeanName(constructor);
            callback(metaData, beanName);
          }
          prototype = Object.getPrototypeOf(prototype);
        }
      };
      Context2.prototype.getBeanName = function(constructor) {
        if (constructor.__agBeanMetaData && constructor.__agBeanMetaData.beanName) {
          return constructor.__agBeanMetaData.beanName;
        }
        var constructorString = constructor.toString();
        var beanName = constructorString.substring(9, constructorString.indexOf("("));
        return beanName;
      };
      Context2.prototype.getBeansForParameters = function(parameters, beanName) {
        var _this = this;
        var beansList = [];
        if (parameters) {
          iterateObject(parameters, function(paramIndex, otherBeanName) {
            var otherBean = _this.lookupBeanInstance(beanName, otherBeanName);
            beansList[Number(paramIndex)] = otherBean;
          });
        }
        return beansList;
      };
      Context2.prototype.lookupBeanInstance = function(wiringBean, beanName, optional) {
        if (optional === void 0) {
          optional = false;
        }
        if (beanName === "context") {
          return this;
        }
        if (this.contextParams.providedBeanInstances && this.contextParams.providedBeanInstances.hasOwnProperty(beanName)) {
          return this.contextParams.providedBeanInstances[beanName];
        }
        var beanEntry = this.beanWrappers[beanName];
        if (beanEntry) {
          return beanEntry.beanInstance;
        }
        if (!optional) {
          console.error("AG Grid: unable to find bean reference " + beanName + " while initialising " + wiringBean);
        }
        return null;
      };
      Context2.prototype.callLifeCycleMethods = function(beanInstances, lifeCycleMethod) {
        var _this = this;
        beanInstances.forEach(function(beanInstance) {
          return _this.callLifeCycleMethodsOnBean(beanInstance, lifeCycleMethod);
        });
      };
      Context2.prototype.callLifeCycleMethodsOnBean = function(beanInstance, lifeCycleMethod, methodToIgnore) {
        var allMethods = {};
        this.forEachMetaDataInHierarchy(beanInstance, function(metaData) {
          var methods = metaData[lifeCycleMethod];
          if (methods) {
            methods.forEach(function(methodName) {
              if (methodName != methodToIgnore) {
                allMethods[methodName] = true;
              }
            });
          }
        });
        var allMethodsList = Object.keys(allMethods);
        allMethodsList.forEach(function(methodName) {
          return beanInstance[methodName]();
        });
      };
      Context2.prototype.getBean = function(name) {
        return this.lookupBeanInstance("getBean", name, true);
      };
      Context2.prototype.destroy = function() {
        if (this.destroyed) {
          return;
        }
        this.logger.log(">> Shutting down ag-Application Context");
        var beanInstances = this.getBeanInstances();
        this.destroyBeans(beanInstances);
        this.contextParams.providedBeanInstances = null;
        this.destroyed = true;
        this.logger.log(">> ag-Application Context shut down - component is dead");
      };
      Context2.prototype.destroyBean = function(bean) {
        if (!bean) {
          return;
        }
        this.destroyBeans([bean]);
      };
      Context2.prototype.destroyBeans = function(beans) {
        var _this = this;
        if (!beans) {
          return [];
        }
        beans.forEach(function(bean) {
          _this.callLifeCycleMethodsOnBean(bean, "preDestroyMethods", "destroy");
          var beanAny = bean;
          if (typeof beanAny.destroy === "function") {
            beanAny.destroy();
          }
        });
        return [];
      };
      return Context2;
    }();
    __assign$i = function() {
      __assign$i = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$i.apply(this, arguments);
    };
    __decorate$2A = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param$a = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    EventService = function() {
      function EventService2() {
        this.allSyncListeners = /* @__PURE__ */ new Map();
        this.allAsyncListeners = /* @__PURE__ */ new Map();
        this.globalSyncListeners = /* @__PURE__ */ new Set();
        this.globalAsyncListeners = /* @__PURE__ */ new Set();
        this.asyncFunctionsQueue = [];
        this.scheduled = false;
        this.firedEvents = {};
      }
      EventService2.prototype.setBeans = function(loggerFactory, gridOptionsWrapper, frameworkOverrides, globalEventListener) {
        if (globalEventListener === void 0) {
          globalEventListener = null;
        }
        this.frameworkOverrides = frameworkOverrides;
        this.gridOptionsWrapper = gridOptionsWrapper;
        if (globalEventListener) {
          var async = gridOptionsWrapper.useAsyncEvents();
          this.addGlobalListener(globalEventListener, async);
        }
      };
      EventService2.prototype.getListeners = function(eventType, async, autoCreateListenerCollection) {
        var listenerMap = async ? this.allAsyncListeners : this.allSyncListeners;
        var listeners = listenerMap.get(eventType);
        if (!listeners && autoCreateListenerCollection) {
          listeners = /* @__PURE__ */ new Set();
          listenerMap.set(eventType, listeners);
        }
        return listeners;
      };
      EventService2.prototype.noRegisteredListenersExist = function() {
        return this.allSyncListeners.size === 0 && this.allAsyncListeners.size === 0 && this.globalSyncListeners.size === 0 && this.globalAsyncListeners.size === 0;
      };
      EventService2.prototype.addEventListener = function(eventType, listener, async) {
        if (async === void 0) {
          async = false;
        }
        this.getListeners(eventType, async, true).add(listener);
      };
      EventService2.prototype.removeEventListener = function(eventType, listener, async) {
        if (async === void 0) {
          async = false;
        }
        var listeners = this.getListeners(eventType, async, false);
        if (!listeners) {
          return;
        }
        listeners.delete(listener);
        if (listeners.size === 0) {
          var listenerMap = async ? this.allAsyncListeners : this.allSyncListeners;
          listenerMap.delete(eventType);
        }
      };
      EventService2.prototype.addGlobalListener = function(listener, async) {
        if (async === void 0) {
          async = false;
        }
        (async ? this.globalAsyncListeners : this.globalSyncListeners).add(listener);
      };
      EventService2.prototype.removeGlobalListener = function(listener, async) {
        if (async === void 0) {
          async = false;
        }
        (async ? this.globalAsyncListeners : this.globalSyncListeners).delete(listener);
      };
      EventService2.prototype.dispatchEvent = function(event) {
        var agEvent = event;
        if (this.gridOptionsWrapper) {
          agEvent = __assign$i(__assign$i({}, event), { api: this.gridOptionsWrapper.getApi(), columnApi: this.gridOptionsWrapper.getColumnApi(), context: this.gridOptionsWrapper.getContext() });
        }
        this.dispatchToListeners(agEvent, true);
        this.dispatchToListeners(agEvent, false);
        this.firedEvents[agEvent.type] = true;
      };
      EventService2.prototype.dispatchEventOnce = function(event) {
        if (!this.firedEvents[event.type]) {
          this.dispatchEvent(event);
        }
      };
      EventService2.prototype.dispatchToListeners = function(event, async) {
        var _this = this;
        var eventType = event.type;
        var processEventListeners = function(listeners2) {
          return listeners2.forEach(function(listener) {
            if (async) {
              _this.dispatchAsync(function() {
                return listener(event);
              });
            } else {
              listener(event);
            }
          });
        };
        var listeners = this.getListeners(eventType, async, false);
        if (listeners) {
          processEventListeners(listeners);
        }
        var globalListeners = async ? this.globalAsyncListeners : this.globalSyncListeners;
        globalListeners.forEach(function(listener) {
          if (async) {
            _this.dispatchAsync(function() {
              return _this.frameworkOverrides.dispatchEvent(eventType, function() {
                return listener(eventType, event);
              }, true);
            });
          } else {
            _this.frameworkOverrides.dispatchEvent(eventType, function() {
              return listener(eventType, event);
            }, true);
          }
        });
      };
      EventService2.prototype.dispatchAsync = function(func) {
        this.asyncFunctionsQueue.push(func);
        if (!this.scheduled) {
          window.setTimeout(this.flushAsyncQueue.bind(this), 0);
          this.scheduled = true;
        }
      };
      EventService2.prototype.flushAsyncQueue = function() {
        this.scheduled = false;
        var queueCopy = this.asyncFunctionsQueue.slice();
        this.asyncFunctionsQueue = [];
        queueCopy.forEach(function(func) {
          return func();
        });
      };
      __decorate$2A([
        __param$a(0, Qualifier("loggerFactory")),
        __param$a(1, Qualifier("gridOptionsWrapper")),
        __param$a(2, Qualifier("frameworkOverrides")),
        __param$a(3, Qualifier("globalEventListener"))
      ], EventService2.prototype, "setBeans", null);
      EventService2 = __decorate$2A([
        Bean("eventService")
      ], EventService2);
      return EventService2;
    }();
    Constants = function() {
      function Constants2() {
      }
      Constants2.ROW_BUFFER_SIZE = 10;
      Constants2.LAYOUT_INTERVAL = 500;
      Constants2.BATCH_WAIT_MILLIS = 50;
      Constants2.EXPORT_TYPE_DRAG_COPY = "dragCopy";
      Constants2.EXPORT_TYPE_CLIPBOARD = "clipboard";
      Constants2.EXPORT_TYPE_EXCEL = "excel";
      Constants2.EXPORT_TYPE_CSV = "csv";
      Constants2.ROW_MODEL_TYPE_INFINITE = "infinite";
      Constants2.ROW_MODEL_TYPE_VIEWPORT = "viewport";
      Constants2.ROW_MODEL_TYPE_CLIENT_SIDE = "clientSide";
      Constants2.ROW_MODEL_TYPE_SERVER_SIDE = "serverSide";
      Constants2.ALWAYS = "always";
      Constants2.ONLY_WHEN_GROUPING = "onlyWhenGrouping";
      Constants2.PINNED_TOP = "top";
      Constants2.PINNED_BOTTOM = "bottom";
      Constants2.DOM_LAYOUT_NORMAL = "normal";
      Constants2.DOM_LAYOUT_PRINT = "print";
      Constants2.DOM_LAYOUT_AUTO_HEIGHT = "autoHeight";
      Constants2.GROUP_AUTO_COLUMN_ID = "ag-Grid-AutoColumn";
      Constants2.SOURCE_PASTE = "paste";
      Constants2.PINNED_RIGHT = "right";
      Constants2.PINNED_LEFT = "left";
      Constants2.SORT_ASC = "asc";
      Constants2.SORT_DESC = "desc";
      Constants2.INPUT_SELECTOR = "input, select, button, textarea";
      Constants2.FOCUSABLE_SELECTOR = "[tabindex], input, select, button, textarea";
      Constants2.FOCUSABLE_EXCLUDE = ".ag-hidden, .ag-hidden *, [disabled], .ag-disabled, .ag-disabled *";
      return Constants2;
    }();
    (function(ModuleNames2) {
      ModuleNames2["CommunityCoreModule"] = "@ag-grid-community/core";
      ModuleNames2["CommunityAllModules"] = "@ag-grid-community/all";
      ModuleNames2["InfiniteRowModelModule"] = "@ag-grid-community/infinite-row-model";
      ModuleNames2["ClientSideRowModelModule"] = "@ag-grid-community/client-side-row-model";
      ModuleNames2["CsvExportModule"] = "@ag-grid-community/csv-export";
      ModuleNames2["EnterpriseCoreModule"] = "@ag-grid-enterprise/core";
      ModuleNames2["EnterpriseAllModules"] = "@ag-grid-enterprise/all";
      ModuleNames2["RowGroupingModule"] = "@ag-grid-enterprise/row-grouping";
      ModuleNames2["ColumnToolPanelModule"] = "@ag-grid-enterprise/column-tool-panel";
      ModuleNames2["FiltersToolPanelModule"] = "@ag-grid-enterprise/filter-tool-panel";
      ModuleNames2["MenuModule"] = "@ag-grid-enterprise/menu";
      ModuleNames2["SetFilterModule"] = "@ag-grid-enterprise/set-filter";
      ModuleNames2["MultiFilterModule"] = "@ag-grid-enterprise/multi-filter";
      ModuleNames2["StatusBarModule"] = "@ag-grid-enterprise/status-bar";
      ModuleNames2["SideBarModule"] = "@ag-grid-enterprise/side-bar";
      ModuleNames2["RangeSelectionModule"] = "@ag-grid-enterprise/range-selection";
      ModuleNames2["MasterDetailModule"] = "@ag-grid-enterprise/master-detail";
      ModuleNames2["RichSelectModule"] = "@ag-grid-enterprise/rich-select";
      ModuleNames2["GridChartsModule"] = "@ag-grid-enterprise/charts";
      ModuleNames2["ViewportRowModelModule"] = "@ag-grid-enterprise/viewport-row-model";
      ModuleNames2["ServerSideRowModelModule"] = "@ag-grid-enterprise/server-side-row-model";
      ModuleNames2["ExcelExportModule"] = "@ag-grid-enterprise/excel-export";
      ModuleNames2["ClipboardModule"] = "@ag-grid-enterprise/clipboard";
      ModuleNames2["SparklinesModule"] = "@ag-grid-enterprise/sparklines";
      ModuleNames2["AngularModule"] = "@ag-grid-community/angular";
      ModuleNames2["ReactModule"] = "@ag-grid-community/react";
      ModuleNames2["VueModule"] = "@ag-grid-community/vue";
      ModuleNames2["PolymerModule"] = "@ag-grid-community/polymer";
    })(ModuleNames || (ModuleNames = {}));
    ModuleRegistry = function() {
      function ModuleRegistry2() {
      }
      ModuleRegistry2.register = function(module, moduleBased) {
        if (moduleBased === void 0) {
          moduleBased = true;
        }
        ModuleRegistry2.modulesMap[module.moduleName] = module;
        if (ModuleRegistry2.moduleBased === void 0) {
          ModuleRegistry2.moduleBased = moduleBased;
        } else {
          if (ModuleRegistry2.moduleBased !== moduleBased) {
            doOnce(function() {
              console.warn("AG Grid: You are mixing modules (i.e. @ag-grid-community/core) and packages (ag-grid-community) - you can only use one or the other of these mechanisms.");
              console.warn("Please see https://www.ag-grid.com/javascript-grid/packages-modules/ for more information.");
            }, "ModulePackageCheck");
          }
        }
      };
      ModuleRegistry2.registerModules = function(modules, moduleBased) {
        if (moduleBased === void 0) {
          moduleBased = true;
        }
        if (!modules) {
          return;
        }
        modules.forEach(function(module) {
          return ModuleRegistry2.register(module, moduleBased);
        });
      };
      ModuleRegistry2.assertRegistered = function(moduleName, reason) {
        if (this.isRegistered(moduleName)) {
          return true;
        }
        var warningKey = reason + moduleName;
        var warningMessage;
        if (ModuleRegistry2.moduleBased) {
          warningMessage = "AG Grid: unable to use " + reason + " as module " + moduleName + " is not present. Please see: https://www.ag-grid.com/javascript-grid/modules/";
        } else {
          warningMessage = "AG Grid: unable to use " + reason + " as package 'ag-grid-enterprise' is not present. Please see: https://www.ag-grid.com/javascript-grid/packages/";
        }
        doOnce(function() {
          console.warn(warningMessage);
        }, warningKey);
        return false;
      };
      ModuleRegistry2.isRegistered = function(moduleName) {
        return !!ModuleRegistry2.modulesMap[moduleName];
      };
      ModuleRegistry2.getRegisteredModules = function() {
        return values(ModuleRegistry2.modulesMap);
      };
      ModuleRegistry2.isPackageBased = function() {
        return !ModuleRegistry2.moduleBased;
      };
      ModuleRegistry2.modulesMap = {};
      return ModuleRegistry2;
    }();
    __decorate$2z = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    instanceIdSequence$4 = 0;
    Column = function() {
      function Column2(colDef, userProvidedColDef, colId, primary) {
        this.instanceId = instanceIdSequence$4++;
        this.autoHeaderHeight = null;
        this.moving = false;
        this.menuVisible = false;
        this.filterActive = false;
        this.eventService = new EventService();
        this.rowGroupActive = false;
        this.pivotActive = false;
        this.aggregationActive = false;
        this.colDef = colDef;
        this.userProvidedColDef = userProvidedColDef;
        this.colId = colId;
        this.primary = primary;
        this.setState(colDef);
      }
      Column2.prototype.getInstanceId = function() {
        return this.instanceId;
      };
      Column2.prototype.setState = function(colDef) {
        if (colDef.sort !== void 0) {
          if (colDef.sort === Constants.SORT_ASC || colDef.sort === Constants.SORT_DESC) {
            this.sort = colDef.sort;
          }
        } else {
          if (colDef.initialSort === Constants.SORT_ASC || colDef.initialSort === Constants.SORT_DESC) {
            this.sort = colDef.initialSort;
          }
        }
        var sortIndex = attrToNumber(colDef.sortIndex);
        var initialSortIndex = attrToNumber(colDef.initialSortIndex);
        if (sortIndex !== void 0) {
          if (sortIndex !== null) {
            this.sortIndex = sortIndex;
          }
        } else {
          if (initialSortIndex !== null) {
            this.sortIndex = initialSortIndex;
          }
        }
        var hide = attrToBoolean(colDef.hide);
        var initialHide = attrToBoolean(colDef.initialHide);
        if (hide !== void 0) {
          this.visible = !hide;
        } else {
          this.visible = !initialHide;
        }
        if (colDef.pinned !== void 0) {
          this.setPinned(colDef.pinned);
        } else {
          this.setPinned(colDef.initialPinned);
        }
        var flex = attrToNumber(colDef.flex);
        var initialFlex = attrToNumber(colDef.initialFlex);
        if (flex !== void 0) {
          this.flex = flex;
        } else if (initialFlex !== void 0) {
          this.flex = initialFlex;
        }
      };
      Column2.prototype.setColDef = function(colDef, userProvidedColDef) {
        this.colDef = colDef;
        this.userProvidedColDef = userProvidedColDef;
        this.initMinAndMaxWidths();
        this.initDotNotation();
        this.eventService.dispatchEvent(this.createColumnEvent(Column2.EVENT_COL_DEF_CHANGED, "api"));
      };
      Column2.prototype.getUserProvidedColDef = function() {
        return this.userProvidedColDef;
      };
      Column2.prototype.setParent = function(parent) {
        this.parent = parent;
      };
      Column2.prototype.getParent = function() {
        return this.parent;
      };
      Column2.prototype.setOriginalParent = function(originalParent) {
        this.originalParent = originalParent;
      };
      Column2.prototype.getOriginalParent = function() {
        return this.originalParent;
      };
      Column2.prototype.initialise = function() {
        this.initMinAndMaxWidths();
        this.resetActualWidth("gridInitializing");
        this.initDotNotation();
        this.validate();
      };
      Column2.prototype.initDotNotation = function() {
        var suppressDotNotation = this.gridOptionsWrapper.isSuppressFieldDotNotation();
        this.fieldContainsDots = exists(this.colDef.field) && this.colDef.field.indexOf(".") >= 0 && !suppressDotNotation;
        this.tooltipFieldContainsDots = exists(this.colDef.tooltipField) && this.colDef.tooltipField.indexOf(".") >= 0 && !suppressDotNotation;
      };
      Column2.prototype.initMinAndMaxWidths = function() {
        var colDef = this.colDef;
        this.minWidth = this.columnUtils.calculateColMinWidth(colDef);
        this.maxWidth = this.columnUtils.calculateColMaxWidth(colDef);
      };
      Column2.prototype.resetActualWidth = function(source) {
        if (source === void 0) {
          source = "api";
        }
        var initialWidth = this.columnUtils.calculateColInitialWidth(this.colDef);
        this.setActualWidth(initialWidth, source, true);
      };
      Column2.prototype.isEmptyGroup = function() {
        return false;
      };
      Column2.prototype.isRowGroupDisplayed = function(colId) {
        if (missing(this.colDef) || missing(this.colDef.showRowGroup)) {
          return false;
        }
        var showingAllGroups = this.colDef.showRowGroup === true;
        var showingThisGroup = this.colDef.showRowGroup === colId;
        return showingAllGroups || showingThisGroup;
      };
      Column2.prototype.isPrimary = function() {
        return this.primary;
      };
      Column2.prototype.isFilterAllowed = function() {
        var filterDefined = !!this.colDef.filter || !!this.colDef.filterFramework;
        return filterDefined;
      };
      Column2.prototype.isFieldContainsDots = function() {
        return this.fieldContainsDots;
      };
      Column2.prototype.isTooltipFieldContainsDots = function() {
        return this.tooltipFieldContainsDots;
      };
      Column2.prototype.validate = function() {
        var colDefAny = this.colDef;
        function warnOnce(msg, key, obj) {
          doOnce(function() {
            if (obj) {
              console.warn(msg, obj);
            } else {
              doOnce(function() {
                return console.warn(msg);
              }, key);
            }
          }, key);
        }
        var usingCSRM = this.gridOptionsWrapper.isRowModelDefault();
        if (usingCSRM && !ModuleRegistry.isRegistered(ModuleNames.RowGroupingModule)) {
          var rowGroupingItems = ["enableRowGroup", "rowGroup", "rowGroupIndex", "enablePivot", "enableValue", "pivot", "pivotIndex", "aggFunc"];
          rowGroupingItems.forEach(function(item) {
            if (exists(colDefAny[item])) {
              if (ModuleRegistry.isPackageBased()) {
                warnOnce("AG Grid: " + item + " is only valid in ag-grid-enterprise, your column definition should not have " + item, "ColumnRowGroupingMissing" + item);
              } else {
                warnOnce("AG Grid: " + item + " is only valid with AG Grid Enterprise Module " + ModuleNames.RowGroupingModule + " - your column definition should not have " + item, "ColumnRowGroupingMissing" + item);
              }
            }
          });
        }
        if (!ModuleRegistry.isRegistered(ModuleNames.RichSelectModule)) {
          if (this.colDef.cellEditor === "agRichSelect" || this.colDef.cellEditor === "agRichSelectCellEditor") {
            if (ModuleRegistry.isPackageBased()) {
              warnOnce("AG Grid: " + this.colDef.cellEditor + " can only be used with ag-grid-enterprise", "ColumnRichSelectMissing");
            } else {
              warnOnce("AG Grid: " + this.colDef.cellEditor + " can only be used with AG Grid Enterprise Module " + ModuleNames.RichSelectModule, "ColumnRichSelectMissing");
            }
          }
        }
        if (this.gridOptionsWrapper.isTreeData()) {
          var itemsNotAllowedWithTreeData = ["rowGroup", "rowGroupIndex", "pivot", "pivotIndex"];
          itemsNotAllowedWithTreeData.forEach(function(item) {
            if (exists(colDefAny[item])) {
              warnOnce("AG Grid: " + item + " is not possible when doing tree data, your column definition should not have " + item, "TreeDataCannotRowGroup");
            }
          });
        }
        if (exists(this.colDef.width) && typeof this.colDef.width !== "number") {
          warnOnce("AG Grid: colDef.width should be a number, not " + typeof this.colDef.width, "ColumnCheck_asdfawef");
        }
        if (colDefAny.pinnedRowCellRenderer) {
          warnOnce("AG Grid: pinnedRowCellRenderer no longer exists, use cellRendererSelector if you want a different Cell Renderer for pinned rows. Check params.node.rowPinned. This was an unfortunate (but necessary) change we had to do to allow future plans we have of re-skinng the data grid in frameworks such as React, Angular and Vue. See https://www.ag-grid.com/javascript-grid/cell-rendering/#many-renderers-one-column", "colDef.pinnedRowCellRenderer-deprecated");
        }
        if (colDefAny.pinnedRowCellRendererParams) {
          warnOnce("AG Grid: pinnedRowCellRenderer no longer exists, use cellRendererSelector if you want a different Cell Renderer for pinned rows. Check params.node.rowPinned. This was an unfortunate (but necessary) change we had to do to allow future plans we have of re-skinng the data grid in frameworks such as React, Angular and Vue. See https://www.ag-grid.com/javascript-grid/cell-rendering/#many-renderers-one-column", "colDef.pinnedRowCellRenderer-deprecated");
        }
        if (colDefAny.pinnedRowCellRendererFramework) {
          warnOnce("AG Grid: pinnedRowCellRenderer no longer exists, use cellRendererSelector if you want a different Cell Renderer for pinned rows. Check params.node.rowPinned. This was an unfortunate (but necessary) change we had to do to allow future plans we have of re-skinng the data grid in frameworks such as React, Angular and Vue. See https://www.ag-grid.com/javascript-grid/cell-rendering/#many-renderers-one-column", "colDef.pinnedRowCellRenderer-deprecated");
        }
        if (colDefAny.pinnedRowValueGetter) {
          warnOnce("AG Grid: pinnedRowCellRenderer is deprecated, use cellRendererSelector if you want a different Cell Renderer for pinned rows. Check params.node.rowPinned. This was an unfortunate (but necessary) change we had to do to allow future plans we have of re-skinng the data grid in frameworks such as React, Angular and Vue.", "colDef.pinnedRowCellRenderer-deprecated");
        }
      };
      Column2.prototype.addEventListener = function(eventType, listener) {
        this.eventService.addEventListener(eventType, listener);
      };
      Column2.prototype.removeEventListener = function(eventType, listener) {
        this.eventService.removeEventListener(eventType, listener);
      };
      Column2.prototype.createColumnFunctionCallbackParams = function(rowNode) {
        return {
          node: rowNode,
          data: rowNode.data,
          column: this,
          colDef: this.colDef,
          context: this.gridOptionsWrapper.getContext(),
          api: this.gridOptionsWrapper.getApi(),
          columnApi: this.gridOptionsWrapper.getColumnApi()
        };
      };
      Column2.prototype.isSuppressNavigable = function(rowNode) {
        if (typeof this.colDef.suppressNavigable === "boolean") {
          return this.colDef.suppressNavigable;
        }
        if (typeof this.colDef.suppressNavigable === "function") {
          var params = this.createColumnFunctionCallbackParams(rowNode);
          var userFunc = this.colDef.suppressNavigable;
          return userFunc(params);
        }
        return false;
      };
      Column2.prototype.isCellEditable = function(rowNode) {
        if (rowNode.group && !this.gridOptionsWrapper.isEnableGroupEdit()) {
          return false;
        }
        return this.isColumnFunc(rowNode, this.colDef.editable);
      };
      Column2.prototype.isSuppressFillHandle = function() {
        return !!attrToBoolean(this.colDef.suppressFillHandle);
      };
      Column2.prototype.isAutoHeight = function() {
        return !!attrToBoolean(this.colDef.autoHeight);
      };
      Column2.prototype.isAutoHeaderHeight = function() {
        return !!attrToBoolean(this.colDef.autoHeaderHeight);
      };
      Column2.prototype.isRowDrag = function(rowNode) {
        return this.isColumnFunc(rowNode, this.colDef.rowDrag);
      };
      Column2.prototype.isDndSource = function(rowNode) {
        return this.isColumnFunc(rowNode, this.colDef.dndSource);
      };
      Column2.prototype.isCellCheckboxSelection = function(rowNode) {
        return this.isColumnFunc(rowNode, this.colDef.checkboxSelection);
      };
      Column2.prototype.isSuppressPaste = function(rowNode) {
        return this.isColumnFunc(rowNode, this.colDef ? this.colDef.suppressPaste : null);
      };
      Column2.prototype.isResizable = function() {
        return !!attrToBoolean(this.colDef.resizable);
      };
      Column2.prototype.isColumnFunc = function(rowNode, value) {
        if (typeof value === "boolean") {
          return value;
        }
        if (typeof value === "function") {
          var params = this.createColumnFunctionCallbackParams(rowNode);
          var editableFunc = value;
          return editableFunc(params);
        }
        return false;
      };
      Column2.prototype.setMoving = function(moving, source) {
        if (source === void 0) {
          source = "api";
        }
        this.moving = moving;
        this.eventService.dispatchEvent(this.createColumnEvent(Column2.EVENT_MOVING_CHANGED, source));
      };
      Column2.prototype.createColumnEvent = function(type, source) {
        return {
          type,
          column: this,
          columns: [this],
          source,
          api: this.gridOptionsWrapper.getApi(),
          columnApi: this.gridOptionsWrapper.getColumnApi(),
          context: this.gridOptionsWrapper.getContext()
        };
      };
      Column2.prototype.isMoving = function() {
        return this.moving;
      };
      Column2.prototype.getSort = function() {
        return this.sort;
      };
      Column2.prototype.setSort = function(sort, source) {
        if (source === void 0) {
          source = "api";
        }
        if (this.sort !== sort) {
          this.sort = sort;
          this.eventService.dispatchEvent(this.createColumnEvent(Column2.EVENT_SORT_CHANGED, source));
        }
      };
      Column2.prototype.setMenuVisible = function(visible, source) {
        if (source === void 0) {
          source = "api";
        }
        if (this.menuVisible !== visible) {
          this.menuVisible = visible;
          this.eventService.dispatchEvent(this.createColumnEvent(Column2.EVENT_MENU_VISIBLE_CHANGED, source));
        }
      };
      Column2.prototype.isMenuVisible = function() {
        return this.menuVisible;
      };
      Column2.prototype.isSortAscending = function() {
        return this.sort === Constants.SORT_ASC;
      };
      Column2.prototype.isSortDescending = function() {
        return this.sort === Constants.SORT_DESC;
      };
      Column2.prototype.isSortNone = function() {
        return missing(this.sort);
      };
      Column2.prototype.isSorting = function() {
        return exists(this.sort);
      };
      Column2.prototype.getSortIndex = function() {
        return this.sortIndex;
      };
      Column2.prototype.setSortIndex = function(sortOrder) {
        this.sortIndex = sortOrder;
      };
      Column2.prototype.setAggFunc = function(aggFunc) {
        this.aggFunc = aggFunc;
      };
      Column2.prototype.getAggFunc = function() {
        return this.aggFunc;
      };
      Column2.prototype.getLeft = function() {
        return this.left;
      };
      Column2.prototype.getOldLeft = function() {
        return this.oldLeft;
      };
      Column2.prototype.getRight = function() {
        return this.left + this.actualWidth;
      };
      Column2.prototype.setLeft = function(left, source) {
        if (source === void 0) {
          source = "api";
        }
        this.oldLeft = this.left;
        if (this.left !== left) {
          this.left = left;
          this.eventService.dispatchEvent(this.createColumnEvent(Column2.EVENT_LEFT_CHANGED, source));
        }
      };
      Column2.prototype.isFilterActive = function() {
        return this.filterActive;
      };
      Column2.prototype.setFilterActive = function(active, source, additionalEventAttributes) {
        if (source === void 0) {
          source = "api";
        }
        if (this.filterActive !== active) {
          this.filterActive = active;
          this.eventService.dispatchEvent(this.createColumnEvent(Column2.EVENT_FILTER_ACTIVE_CHANGED, source));
        }
        var filterChangedEvent = this.createColumnEvent(Column2.EVENT_FILTER_CHANGED, source);
        if (additionalEventAttributes) {
          mergeDeep(filterChangedEvent, additionalEventAttributes);
        }
        this.eventService.dispatchEvent(filterChangedEvent);
      };
      Column2.prototype.setPinned = function(pinned) {
        if (pinned === true || pinned === Constants.PINNED_LEFT) {
          this.pinned = Constants.PINNED_LEFT;
        } else if (pinned === Constants.PINNED_RIGHT) {
          this.pinned = Constants.PINNED_RIGHT;
        } else {
          this.pinned = null;
        }
      };
      Column2.prototype.setFirstRightPinned = function(firstRightPinned, source) {
        if (source === void 0) {
          source = "api";
        }
        if (this.firstRightPinned !== firstRightPinned) {
          this.firstRightPinned = firstRightPinned;
          this.eventService.dispatchEvent(this.createColumnEvent(Column2.EVENT_FIRST_RIGHT_PINNED_CHANGED, source));
        }
      };
      Column2.prototype.setLastLeftPinned = function(lastLeftPinned, source) {
        if (source === void 0) {
          source = "api";
        }
        if (this.lastLeftPinned !== lastLeftPinned) {
          this.lastLeftPinned = lastLeftPinned;
          this.eventService.dispatchEvent(this.createColumnEvent(Column2.EVENT_LAST_LEFT_PINNED_CHANGED, source));
        }
      };
      Column2.prototype.isFirstRightPinned = function() {
        return this.firstRightPinned;
      };
      Column2.prototype.isLastLeftPinned = function() {
        return this.lastLeftPinned;
      };
      Column2.prototype.isPinned = function() {
        return this.pinned === Constants.PINNED_LEFT || this.pinned === Constants.PINNED_RIGHT;
      };
      Column2.prototype.isPinnedLeft = function() {
        return this.pinned === Constants.PINNED_LEFT;
      };
      Column2.prototype.isPinnedRight = function() {
        return this.pinned === Constants.PINNED_RIGHT;
      };
      Column2.prototype.getPinned = function() {
        return this.pinned;
      };
      Column2.prototype.setVisible = function(visible, source) {
        if (source === void 0) {
          source = "api";
        }
        var newValue = visible === true;
        if (this.visible !== newValue) {
          this.visible = newValue;
          this.eventService.dispatchEvent(this.createColumnEvent(Column2.EVENT_VISIBLE_CHANGED, source));
        }
      };
      Column2.prototype.isVisible = function() {
        return this.visible;
      };
      Column2.prototype.getColDef = function() {
        return this.colDef;
      };
      Column2.prototype.getColumnGroupShow = function() {
        return this.colDef.columnGroupShow;
      };
      Column2.prototype.getColId = function() {
        return this.colId;
      };
      Column2.prototype.getId = function() {
        return this.getColId();
      };
      Column2.prototype.getUniqueId = function() {
        return this.getId();
      };
      Column2.prototype.getDefinition = function() {
        return this.colDef;
      };
      Column2.prototype.getActualWidth = function() {
        return this.actualWidth;
      };
      Column2.prototype.getAutoHeaderHeight = function() {
        return this.autoHeaderHeight;
      };
      Column2.prototype.setAutoHeaderHeight = function(height) {
        var changed = height !== this.autoHeaderHeight;
        this.autoHeaderHeight = height;
        return changed;
      };
      Column2.prototype.createBaseColDefParams = function(rowNode) {
        var params = {
          node: rowNode,
          data: rowNode.data,
          colDef: this.colDef,
          column: this,
          api: this.gridOptionsWrapper.getApi(),
          columnApi: this.gridOptionsWrapper.getColumnApi(),
          context: this.gridOptionsWrapper.getContext()
        };
        return params;
      };
      Column2.prototype.getColSpan = function(rowNode) {
        if (missing(this.colDef.colSpan)) {
          return 1;
        }
        var params = this.createBaseColDefParams(rowNode);
        var colSpan = this.colDef.colSpan(params);
        return Math.max(colSpan, 1);
      };
      Column2.prototype.getRowSpan = function(rowNode) {
        if (missing(this.colDef.rowSpan)) {
          return 1;
        }
        var params = this.createBaseColDefParams(rowNode);
        var rowSpan = this.colDef.rowSpan(params);
        return Math.max(rowSpan, 1);
      };
      Column2.prototype.setActualWidth = function(actualWidth, source, silent) {
        if (source === void 0) {
          source = "api";
        }
        if (silent === void 0) {
          silent = false;
        }
        if (this.minWidth != null) {
          actualWidth = Math.max(actualWidth, this.minWidth);
        }
        if (this.maxWidth != null) {
          actualWidth = Math.min(actualWidth, this.maxWidth);
        }
        if (this.actualWidth !== actualWidth) {
          this.actualWidth = actualWidth;
          if (this.flex && source !== "flex" && source !== "gridInitializing") {
            this.flex = null;
          }
          if (!silent) {
            this.fireColumnWidthChangedEvent(source);
          }
        }
      };
      Column2.prototype.fireColumnWidthChangedEvent = function(source) {
        this.eventService.dispatchEvent(this.createColumnEvent(Column2.EVENT_WIDTH_CHANGED, source));
      };
      Column2.prototype.isGreaterThanMax = function(width) {
        if (this.maxWidth != null) {
          return width > this.maxWidth;
        }
        return false;
      };
      Column2.prototype.getMinWidth = function() {
        return this.minWidth;
      };
      Column2.prototype.getMaxWidth = function() {
        return this.maxWidth;
      };
      Column2.prototype.getFlex = function() {
        return this.flex || 0;
      };
      Column2.prototype.setFlex = function(flex) {
        if (this.flex !== flex) {
          this.flex = flex;
        }
      };
      Column2.prototype.setMinimum = function(source) {
        if (source === void 0) {
          source = "api";
        }
        if (exists(this.minWidth)) {
          this.setActualWidth(this.minWidth, source);
        }
      };
      Column2.prototype.setRowGroupActive = function(rowGroup, source) {
        if (source === void 0) {
          source = "api";
        }
        if (this.rowGroupActive !== rowGroup) {
          this.rowGroupActive = rowGroup;
          this.eventService.dispatchEvent(this.createColumnEvent(Column2.EVENT_ROW_GROUP_CHANGED, source));
        }
      };
      Column2.prototype.isRowGroupActive = function() {
        return this.rowGroupActive;
      };
      Column2.prototype.setPivotActive = function(pivot, source) {
        if (source === void 0) {
          source = "api";
        }
        if (this.pivotActive !== pivot) {
          this.pivotActive = pivot;
          this.eventService.dispatchEvent(this.createColumnEvent(Column2.EVENT_PIVOT_CHANGED, source));
        }
      };
      Column2.prototype.isPivotActive = function() {
        return this.pivotActive;
      };
      Column2.prototype.isAnyFunctionActive = function() {
        return this.isPivotActive() || this.isRowGroupActive() || this.isValueActive();
      };
      Column2.prototype.isAnyFunctionAllowed = function() {
        return this.isAllowPivot() || this.isAllowRowGroup() || this.isAllowValue();
      };
      Column2.prototype.setValueActive = function(value, source) {
        if (source === void 0) {
          source = "api";
        }
        if (this.aggregationActive !== value) {
          this.aggregationActive = value;
          this.eventService.dispatchEvent(this.createColumnEvent(Column2.EVENT_VALUE_CHANGED, source));
        }
      };
      Column2.prototype.isValueActive = function() {
        return this.aggregationActive;
      };
      Column2.prototype.isAllowPivot = function() {
        return this.colDef.enablePivot === true;
      };
      Column2.prototype.isAllowValue = function() {
        return this.colDef.enableValue === true;
      };
      Column2.prototype.isAllowRowGroup = function() {
        return this.colDef.enableRowGroup === true;
      };
      Column2.prototype.getMenuTabs = function(defaultValues) {
        var menuTabs = this.getColDef().menuTabs;
        if (menuTabs == null) {
          menuTabs = defaultValues;
        }
        return menuTabs;
      };
      Column2.prototype.isLockPosition = function() {
        console.warn("AG Grid: since v21, col.isLockPosition() should not be used, please use col.getColDef().lockPosition instead.");
        return this.colDef ? !!this.colDef.lockPosition : false;
      };
      Column2.prototype.isLockVisible = function() {
        console.warn("AG Grid: since v21, col.isLockVisible() should not be used, please use col.getColDef().lockVisible instead.");
        return this.colDef ? !!this.colDef.lockVisible : false;
      };
      Column2.prototype.isLockPinned = function() {
        console.warn("AG Grid: since v21, col.isLockPinned() should not be used, please use col.getColDef().lockPinned instead.");
        return this.colDef ? !!this.colDef.lockPinned : false;
      };
      Column2.EVENT_MOVING_CHANGED = "movingChanged";
      Column2.EVENT_LEFT_CHANGED = "leftChanged";
      Column2.EVENT_WIDTH_CHANGED = "widthChanged";
      Column2.EVENT_LAST_LEFT_PINNED_CHANGED = "lastLeftPinnedChanged";
      Column2.EVENT_FIRST_RIGHT_PINNED_CHANGED = "firstRightPinnedChanged";
      Column2.EVENT_VISIBLE_CHANGED = "visibleChanged";
      Column2.EVENT_FILTER_CHANGED = "filterChanged";
      Column2.EVENT_FILTER_ACTIVE_CHANGED = "filterActiveChanged";
      Column2.EVENT_SORT_CHANGED = "sortChanged";
      Column2.EVENT_COL_DEF_CHANGED = "colDefChanged";
      Column2.EVENT_MENU_VISIBLE_CHANGED = "menuVisibleChanged";
      Column2.EVENT_ROW_GROUP_CHANGED = "columnRowGroupChanged";
      Column2.EVENT_PIVOT_CHANGED = "columnPivotChanged";
      Column2.EVENT_VALUE_CHANGED = "columnValueChanged";
      __decorate$2z([
        Autowired("gridOptionsWrapper")
      ], Column2.prototype, "gridOptionsWrapper", void 0);
      __decorate$2z([
        Autowired("columnUtils")
      ], Column2.prototype, "columnUtils", void 0);
      __decorate$2z([
        PostConstruct
      ], Column2.prototype, "initialise", null);
      return Column2;
    }();
    ArrayUtils = Object.freeze({
      __proto__: null,
      firstExistingValue,
      existsAndNotEmpty,
      last,
      areEqual,
      compareArrays,
      shallowCompare,
      sortNumerically,
      removeRepeatsFromArray,
      removeFromArray,
      removeAllFromArray,
      insertIntoArray,
      insertArrayIntoArray,
      moveInArray,
      includes,
      flatten,
      pushAll,
      toStrings,
      forEachReverse
    });
    __decorate$2y = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    ColumnGroup = function() {
      function ColumnGroup2(providedColumnGroup, groupId, instanceId, pinned) {
        this.displayedChildren = [];
        this.localEventService = new EventService();
        this.groupId = groupId;
        this.instanceId = instanceId;
        this.providedColumnGroup = providedColumnGroup;
        this.pinned = pinned;
      }
      ColumnGroup2.createUniqueId = function(groupId, instanceId) {
        return groupId + "_" + instanceId;
      };
      ColumnGroup2.prototype.reset = function() {
        this.parent = null;
        this.children = null;
        this.displayedChildren = null;
      };
      ColumnGroup2.prototype.getParent = function() {
        return this.parent;
      };
      ColumnGroup2.prototype.setParent = function(parent) {
        this.parent = parent;
      };
      ColumnGroup2.prototype.getUniqueId = function() {
        return ColumnGroup2.createUniqueId(this.groupId, this.instanceId);
      };
      ColumnGroup2.prototype.isEmptyGroup = function() {
        return this.displayedChildren.length === 0;
      };
      ColumnGroup2.prototype.isMoving = function() {
        var allLeafColumns = this.getProvidedColumnGroup().getLeafColumns();
        if (!allLeafColumns || allLeafColumns.length === 0) {
          return false;
        }
        return allLeafColumns.every(function(col) {
          return col.isMoving();
        });
      };
      ColumnGroup2.prototype.checkLeft = function() {
        this.displayedChildren.forEach(function(child) {
          if (child instanceof ColumnGroup2) {
            child.checkLeft();
          }
        });
        if (this.displayedChildren.length > 0) {
          if (this.gridOptionsWrapper.isEnableRtl()) {
            var lastChild = last(this.displayedChildren);
            var lastChildLeft = lastChild.getLeft();
            this.setLeft(lastChildLeft);
          } else {
            var firstChildLeft = this.displayedChildren[0].getLeft();
            this.setLeft(firstChildLeft);
          }
        } else {
          this.setLeft(null);
        }
      };
      ColumnGroup2.prototype.getLeft = function() {
        return this.left;
      };
      ColumnGroup2.prototype.getOldLeft = function() {
        return this.oldLeft;
      };
      ColumnGroup2.prototype.setLeft = function(left) {
        this.oldLeft = left;
        if (this.left !== left) {
          this.left = left;
          this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup2.EVENT_LEFT_CHANGED));
        }
      };
      ColumnGroup2.prototype.getPinned = function() {
        return this.pinned;
      };
      ColumnGroup2.prototype.createAgEvent = function(type) {
        return { type };
      };
      ColumnGroup2.prototype.addEventListener = function(eventType, listener) {
        this.localEventService.addEventListener(eventType, listener);
      };
      ColumnGroup2.prototype.removeEventListener = function(eventType, listener) {
        this.localEventService.removeEventListener(eventType, listener);
      };
      ColumnGroup2.prototype.getGroupId = function() {
        return this.groupId;
      };
      ColumnGroup2.prototype.getInstanceId = function() {
        return this.instanceId;
      };
      ColumnGroup2.prototype.isChildInThisGroupDeepSearch = function(wantedChild) {
        var result = false;
        this.children.forEach(function(foundChild) {
          if (wantedChild === foundChild) {
            result = true;
          }
          if (foundChild instanceof ColumnGroup2) {
            if (foundChild.isChildInThisGroupDeepSearch(wantedChild)) {
              result = true;
            }
          }
        });
        return result;
      };
      ColumnGroup2.prototype.getActualWidth = function() {
        var groupActualWidth = 0;
        if (this.displayedChildren) {
          this.displayedChildren.forEach(function(child) {
            groupActualWidth += child.getActualWidth();
          });
        }
        return groupActualWidth;
      };
      ColumnGroup2.prototype.isResizable = function() {
        if (!this.displayedChildren) {
          return false;
        }
        var result = false;
        this.displayedChildren.forEach(function(child) {
          if (child.isResizable()) {
            result = true;
          }
        });
        return result;
      };
      ColumnGroup2.prototype.getMinWidth = function() {
        var result = 0;
        this.displayedChildren.forEach(function(groupChild) {
          result += groupChild.getMinWidth() || 0;
        });
        return result;
      };
      ColumnGroup2.prototype.addChild = function(child) {
        if (!this.children) {
          this.children = [];
        }
        this.children.push(child);
      };
      ColumnGroup2.prototype.getDisplayedChildren = function() {
        return this.displayedChildren;
      };
      ColumnGroup2.prototype.getLeafColumns = function() {
        var result = [];
        this.addLeafColumns(result);
        return result;
      };
      ColumnGroup2.prototype.getDisplayedLeafColumns = function() {
        var result = [];
        this.addDisplayedLeafColumns(result);
        return result;
      };
      ColumnGroup2.prototype.getDefinition = function() {
        return this.providedColumnGroup.getColGroupDef();
      };
      ColumnGroup2.prototype.getColGroupDef = function() {
        return this.providedColumnGroup.getColGroupDef();
      };
      ColumnGroup2.prototype.isPadding = function() {
        return this.providedColumnGroup.isPadding();
      };
      ColumnGroup2.prototype.isExpandable = function() {
        return this.providedColumnGroup.isExpandable();
      };
      ColumnGroup2.prototype.isExpanded = function() {
        return this.providedColumnGroup.isExpanded();
      };
      ColumnGroup2.prototype.setExpanded = function(expanded) {
        this.providedColumnGroup.setExpanded(expanded);
      };
      ColumnGroup2.prototype.addDisplayedLeafColumns = function(leafColumns) {
        this.displayedChildren.forEach(function(child) {
          if (child instanceof Column) {
            leafColumns.push(child);
          } else if (child instanceof ColumnGroup2) {
            child.addDisplayedLeafColumns(leafColumns);
          }
        });
      };
      ColumnGroup2.prototype.addLeafColumns = function(leafColumns) {
        this.children.forEach(function(child) {
          if (child instanceof Column) {
            leafColumns.push(child);
          } else if (child instanceof ColumnGroup2) {
            child.addLeafColumns(leafColumns);
          }
        });
      };
      ColumnGroup2.prototype.getChildren = function() {
        return this.children;
      };
      ColumnGroup2.prototype.getColumnGroupShow = function() {
        return this.providedColumnGroup.getColumnGroupShow();
      };
      ColumnGroup2.prototype.getProvidedColumnGroup = function() {
        return this.providedColumnGroup;
      };
      ColumnGroup2.prototype.getOriginalColumnGroup = function() {
        console.warn("AG Grid: columnGroup.getOriginalColumnGroup() is deprecated due to a method rename, use columnGroup.getProvidedColumnGroup() instead");
        return this.getProvidedColumnGroup();
      };
      ColumnGroup2.prototype.getPaddingLevel = function() {
        var parent = this.getParent();
        if (!this.isPadding() || !parent || !parent.isPadding()) {
          return 0;
        }
        return 1 + parent.getPaddingLevel();
      };
      ColumnGroup2.prototype.calculateDisplayedColumns = function() {
        var _this = this;
        this.displayedChildren = [];
        var parentWithExpansion = this;
        while (parentWithExpansion != null && parentWithExpansion.isPadding()) {
          parentWithExpansion = parentWithExpansion.getParent();
        }
        var isExpandable = parentWithExpansion ? parentWithExpansion.providedColumnGroup.isExpandable() : false;
        if (!isExpandable) {
          this.displayedChildren = this.children;
          this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup2.EVENT_DISPLAYED_CHILDREN_CHANGED));
          return;
        }
        this.children.forEach(function(child) {
          var emptyGroup = child instanceof ColumnGroup2 && (!child.displayedChildren || !child.displayedChildren.length);
          if (emptyGroup) {
            return;
          }
          var headerGroupShow = child.getColumnGroupShow();
          switch (headerGroupShow) {
            case ColumnGroup2.HEADER_GROUP_SHOW_OPEN:
              if (parentWithExpansion.providedColumnGroup.isExpanded()) {
                _this.displayedChildren.push(child);
              }
              break;
            case ColumnGroup2.HEADER_GROUP_SHOW_CLOSED:
              if (!parentWithExpansion.providedColumnGroup.isExpanded()) {
                _this.displayedChildren.push(child);
              }
              break;
            default:
              _this.displayedChildren.push(child);
              break;
          }
        });
        this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup2.EVENT_DISPLAYED_CHILDREN_CHANGED));
      };
      ColumnGroup2.HEADER_GROUP_SHOW_OPEN = "open";
      ColumnGroup2.HEADER_GROUP_SHOW_CLOSED = "closed";
      ColumnGroup2.EVENT_LEFT_CHANGED = "leftChanged";
      ColumnGroup2.EVENT_DISPLAYED_CHILDREN_CHANGED = "displayedChildrenChanged";
      __decorate$2y([
        Autowired("gridOptionsWrapper")
      ], ColumnGroup2.prototype, "gridOptionsWrapper", void 0);
      return ColumnGroup2;
    }();
    ProvidedColumnGroup = function() {
      function ProvidedColumnGroup2(colGroupDef, groupId, padding, level) {
        this.localEventService = new EventService();
        this.expandable = false;
        this.colGroupDef = colGroupDef;
        this.groupId = groupId;
        this.expanded = !!colGroupDef && !!colGroupDef.openByDefault;
        this.padding = padding;
        this.level = level;
      }
      ProvidedColumnGroup2.prototype.reset = function(colGroupDef, level) {
        this.colGroupDef = colGroupDef;
        this.level = level;
        this.originalParent = null;
        this.children = void 0;
        this.expandable = void 0;
      };
      ProvidedColumnGroup2.prototype.setOriginalParent = function(originalParent) {
        this.originalParent = originalParent;
      };
      ProvidedColumnGroup2.prototype.getOriginalParent = function() {
        return this.originalParent;
      };
      ProvidedColumnGroup2.prototype.getLevel = function() {
        return this.level;
      };
      ProvidedColumnGroup2.prototype.isVisible = function() {
        if (this.children) {
          return this.children.some(function(child) {
            return child.isVisible();
          });
        }
        return false;
      };
      ProvidedColumnGroup2.prototype.isPadding = function() {
        return this.padding;
      };
      ProvidedColumnGroup2.prototype.setExpanded = function(expanded) {
        this.expanded = expanded === void 0 ? false : expanded;
        var event = {
          type: ProvidedColumnGroup2.EVENT_EXPANDED_CHANGED
        };
        this.localEventService.dispatchEvent(event);
      };
      ProvidedColumnGroup2.prototype.isExpandable = function() {
        return this.expandable;
      };
      ProvidedColumnGroup2.prototype.isExpanded = function() {
        return this.expanded;
      };
      ProvidedColumnGroup2.prototype.getGroupId = function() {
        return this.groupId;
      };
      ProvidedColumnGroup2.prototype.getId = function() {
        return this.getGroupId();
      };
      ProvidedColumnGroup2.prototype.setChildren = function(children) {
        this.children = children;
      };
      ProvidedColumnGroup2.prototype.getChildren = function() {
        return this.children;
      };
      ProvidedColumnGroup2.prototype.getColGroupDef = function() {
        return this.colGroupDef;
      };
      ProvidedColumnGroup2.prototype.getLeafColumns = function() {
        var result = [];
        this.addLeafColumns(result);
        return result;
      };
      ProvidedColumnGroup2.prototype.addLeafColumns = function(leafColumns) {
        if (!this.children) {
          return;
        }
        this.children.forEach(function(child) {
          if (child instanceof Column) {
            leafColumns.push(child);
          } else if (child instanceof ProvidedColumnGroup2) {
            child.addLeafColumns(leafColumns);
          }
        });
      };
      ProvidedColumnGroup2.prototype.getColumnGroupShow = function() {
        var colGroupDef = this.colGroupDef;
        if (!colGroupDef) {
          return;
        }
        return colGroupDef.columnGroupShow;
      };
      ProvidedColumnGroup2.prototype.setupExpandable = function() {
        var _this = this;
        this.setExpandable();
        this.getLeafColumns().forEach(function(col) {
          return col.addEventListener(Column.EVENT_VISIBLE_CHANGED, _this.onColumnVisibilityChanged.bind(_this));
        });
      };
      ProvidedColumnGroup2.prototype.setExpandable = function() {
        if (this.isPadding()) {
          return;
        }
        var atLeastOneShowingWhenOpen = false;
        var atLeastOneShowingWhenClosed = false;
        var atLeastOneChangeable = false;
        var children = this.findChildrenRemovingPadding();
        for (var i = 0, j = children.length; i < j; i++) {
          var abstractColumn = children[i];
          if (!abstractColumn.isVisible()) {
            continue;
          }
          var headerGroupShow = abstractColumn.getColumnGroupShow();
          if (headerGroupShow === ColumnGroup.HEADER_GROUP_SHOW_OPEN) {
            atLeastOneShowingWhenOpen = true;
            atLeastOneChangeable = true;
          } else if (headerGroupShow === ColumnGroup.HEADER_GROUP_SHOW_CLOSED) {
            atLeastOneShowingWhenClosed = true;
            atLeastOneChangeable = true;
          } else {
            atLeastOneShowingWhenOpen = true;
            atLeastOneShowingWhenClosed = true;
          }
        }
        var expandable = atLeastOneShowingWhenOpen && atLeastOneShowingWhenClosed && atLeastOneChangeable;
        if (this.expandable !== expandable) {
          this.expandable = expandable;
          var event_1 = {
            type: ProvidedColumnGroup2.EVENT_EXPANDABLE_CHANGED
          };
          this.localEventService.dispatchEvent(event_1);
        }
      };
      ProvidedColumnGroup2.prototype.findChildrenRemovingPadding = function() {
        var res = [];
        var process2 = function(items) {
          items.forEach(function(item) {
            var skipBecausePadding = item instanceof ProvidedColumnGroup2 && item.isPadding();
            if (skipBecausePadding) {
              process2(item.children);
            } else {
              res.push(item);
            }
          });
        };
        process2(this.children);
        return res;
      };
      ProvidedColumnGroup2.prototype.onColumnVisibilityChanged = function() {
        this.setExpandable();
      };
      ProvidedColumnGroup2.prototype.addEventListener = function(eventType, listener) {
        this.localEventService.addEventListener(eventType, listener);
      };
      ProvidedColumnGroup2.prototype.removeEventListener = function(eventType, listener) {
        this.localEventService.removeEventListener(eventType, listener);
      };
      ProvidedColumnGroup2.EVENT_EXPANDED_CHANGED = "expandedChanged";
      ProvidedColumnGroup2.EVENT_EXPANDABLE_CHANGED = "expandableChanged";
      return ProvidedColumnGroup2;
    }();
    DefaultColumnTypes = {
      numericColumn: {
        headerClass: "ag-right-aligned-header",
        cellClass: "ag-right-aligned-cell"
      },
      rightAligned: {
        headerClass: "ag-right-aligned-header",
        cellClass: "ag-right-aligned-cell"
      }
    };
    AG_GRID_STOP_PROPAGATION = "__ag_Grid_Stop_Propagation";
    PASSIVE_EVENTS$1 = ["touchstart", "touchend", "touchmove", "touchcancel"];
    supports = {};
    isEventSupported = function() {
      var tags = {
        select: "input",
        change: "input",
        submit: "form",
        reset: "form",
        error: "img",
        load: "img",
        abort: "img"
      };
      var eventChecker = function(eventName) {
        if (typeof supports[eventName] === "boolean") {
          return supports[eventName];
        }
        var el = document.createElement(tags[eventName] || "div");
        eventName = "on" + eventName;
        return supports[eventName] = eventName in el;
      };
      return eventChecker;
    }();
    EventUtils = Object.freeze({
      __proto__: null,
      stopPropagationForAgGrid,
      isStopPropagationForAgGrid,
      isEventSupported,
      getCtrlForEvent,
      addChangeListener,
      isElementInEventPath,
      createEventPath,
      addAgGridEventPath,
      getEventPath,
      addSafePassiveEventListener
    });
    __decorate$2x = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    BeanStub = function() {
      function BeanStub2() {
        var _this = this;
        this.destroyFunctions = [];
        this.destroyed = false;
        this.__v_skip = true;
        this.isAlive = function() {
          return !_this.destroyed;
        };
      }
      BeanStub2.prototype.getFrameworkOverrides = function() {
        return this.frameworkOverrides;
      };
      BeanStub2.prototype.getContext = function() {
        return this.context;
      };
      BeanStub2.prototype.destroy = function() {
        this.destroyFunctions.forEach(function(func) {
          return func();
        });
        this.destroyFunctions.length = 0;
        this.destroyed = true;
        this.dispatchEvent({ type: BeanStub2.EVENT_DESTROYED });
      };
      BeanStub2.prototype.addEventListener = function(eventType, listener) {
        if (!this.localEventService) {
          this.localEventService = new EventService();
        }
        this.localEventService.addEventListener(eventType, listener);
      };
      BeanStub2.prototype.removeEventListener = function(eventType, listener) {
        if (this.localEventService) {
          this.localEventService.removeEventListener(eventType, listener);
        }
      };
      BeanStub2.prototype.dispatchEventAsync = function(event) {
        var _this = this;
        window.setTimeout(function() {
          return _this.dispatchEvent(event);
        }, 0);
      };
      BeanStub2.prototype.dispatchEvent = function(event) {
        if (this.localEventService) {
          this.localEventService.dispatchEvent(event);
        }
      };
      BeanStub2.prototype.addManagedListener = function(object, event, listener) {
        var _this = this;
        if (this.destroyed) {
          return;
        }
        if (object instanceof HTMLElement) {
          addSafePassiveEventListener(this.getFrameworkOverrides(), object, event, listener);
        } else {
          object.addEventListener(event, listener);
        }
        var destroyFunc = function() {
          object.removeEventListener(event, listener);
          _this.destroyFunctions = _this.destroyFunctions.filter(function(fn) {
            return fn !== destroyFunc;
          });
          return null;
        };
        this.destroyFunctions.push(destroyFunc);
        return destroyFunc;
      };
      BeanStub2.prototype.addDestroyFunc = function(func) {
        if (this.isAlive()) {
          this.destroyFunctions.push(func);
        } else {
          func();
        }
      };
      BeanStub2.prototype.createManagedBean = function(bean, context) {
        var res = this.createBean(bean, context);
        this.addDestroyFunc(this.destroyBean.bind(this, bean, context));
        return res;
      };
      BeanStub2.prototype.createBean = function(bean, context, afterPreCreateCallback) {
        return (context || this.getContext()).createBean(bean, afterPreCreateCallback);
      };
      BeanStub2.prototype.destroyBean = function(bean, context) {
        return (context || this.getContext()).destroyBean(bean);
      };
      BeanStub2.prototype.destroyBeans = function(beans, context) {
        var _this = this;
        if (beans) {
          beans.forEach(function(bean) {
            return _this.destroyBean(bean, context);
          });
        }
        return [];
      };
      BeanStub2.EVENT_DESTROYED = "destroyed";
      __decorate$2x([
        Autowired("frameworkOverrides")
      ], BeanStub2.prototype, "frameworkOverrides", void 0);
      __decorate$2x([
        Autowired("context")
      ], BeanStub2.prototype, "context", void 0);
      __decorate$2x([
        Autowired("eventService")
      ], BeanStub2.prototype, "eventService", void 0);
      __decorate$2x([
        Autowired("gridOptionsWrapper")
      ], BeanStub2.prototype, "gridOptionsWrapper", void 0);
      __decorate$2x([
        PreDestroy
      ], BeanStub2.prototype, "destroy", null);
      return BeanStub2;
    }();
    __extends$2U = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$2w = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param$9 = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    ColumnFactory = function(_super) {
      __extends$2U(ColumnFactory2, _super);
      function ColumnFactory2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      ColumnFactory2.prototype.setBeans = function(loggerFactory) {
        this.logger = loggerFactory.create("ColumnFactory");
      };
      ColumnFactory2.prototype.createColumnTree = function(defs, primaryColumns, existingTree) {
        var columnKeyCreator = new ColumnKeyCreator();
        var _a = this.extractExistingTreeData(existingTree), existingCols = _a.existingCols, existingGroups = _a.existingGroups, existingColKeys = _a.existingColKeys;
        columnKeyCreator.addExistingKeys(existingColKeys);
        var unbalancedTree = this.recursivelyCreateColumns(defs, 0, primaryColumns, existingCols, columnKeyCreator, existingGroups);
        var treeDept = this.findMaxDept(unbalancedTree, 0);
        this.logger.log("Number of levels for grouped columns is " + treeDept);
        var columnTree = this.balanceColumnTree(unbalancedTree, 0, treeDept, columnKeyCreator);
        var deptFirstCallback = function(child, parent) {
          if (child instanceof ProvidedColumnGroup) {
            child.setupExpandable();
          }
          child.setOriginalParent(parent);
        };
        this.columnUtils.depthFirstOriginalTreeSearch(null, columnTree, deptFirstCallback);
        return {
          columnTree,
          treeDept
        };
      };
      ColumnFactory2.prototype.extractExistingTreeData = function(existingTree) {
        var existingCols = [];
        var existingGroups = [];
        var existingColKeys = [];
        if (existingTree) {
          this.columnUtils.depthFirstOriginalTreeSearch(null, existingTree, function(item) {
            if (item instanceof ProvidedColumnGroup) {
              var group = item;
              existingGroups.push(group);
            } else {
              var col = item;
              existingColKeys.push(col.getId());
              existingCols.push(col);
            }
          });
        }
        return { existingCols, existingGroups, existingColKeys };
      };
      ColumnFactory2.prototype.createForAutoGroups = function(autoGroupCols, gridBalancedTree) {
        var _this = this;
        return autoGroupCols.map(function(col) {
          return _this.createAutoGroupTreeItem(gridBalancedTree, col);
        });
      };
      ColumnFactory2.prototype.createAutoGroupTreeItem = function(balancedColumnTree, column) {
        var dept = this.findDepth(balancedColumnTree);
        var nextChild = column;
        for (var i = dept - 1; i >= 0; i--) {
          var autoGroup = new ProvidedColumnGroup(null, "FAKE_PATH_" + column.getId() + "}_" + i, true, i);
          this.context.createBean(autoGroup);
          autoGroup.setChildren([nextChild]);
          nextChild.setOriginalParent(autoGroup);
          nextChild = autoGroup;
        }
        return nextChild;
      };
      ColumnFactory2.prototype.findDepth = function(balancedColumnTree) {
        var dept = 0;
        var pointer = balancedColumnTree;
        while (pointer && pointer[0] && pointer[0] instanceof ProvidedColumnGroup) {
          dept++;
          pointer = pointer[0].getChildren();
        }
        return dept;
      };
      ColumnFactory2.prototype.balanceColumnTree = function(unbalancedTree, currentDept, columnDept, columnKeyCreator) {
        var result = [];
        for (var i = 0; i < unbalancedTree.length; i++) {
          var child = unbalancedTree[i];
          if (child instanceof ProvidedColumnGroup) {
            var originalGroup = child;
            var newChildren = this.balanceColumnTree(originalGroup.getChildren(), currentDept + 1, columnDept, columnKeyCreator);
            originalGroup.setChildren(newChildren);
            result.push(originalGroup);
          } else {
            var firstPaddedGroup = void 0;
            var currentPaddedGroup = void 0;
            for (var j = columnDept - 1; j >= currentDept; j--) {
              var newColId = columnKeyCreator.getUniqueKey(null, null);
              var colGroupDefMerged = this.createMergedColGroupDef(null);
              var paddedGroup = new ProvidedColumnGroup(colGroupDefMerged, newColId, true, currentDept);
              this.context.createBean(paddedGroup);
              if (currentPaddedGroup) {
                currentPaddedGroup.setChildren([paddedGroup]);
              }
              currentPaddedGroup = paddedGroup;
              if (!firstPaddedGroup) {
                firstPaddedGroup = currentPaddedGroup;
              }
            }
            if (firstPaddedGroup && currentPaddedGroup) {
              result.push(firstPaddedGroup);
              var hasGroups = unbalancedTree.some(function(leaf) {
                return leaf instanceof ProvidedColumnGroup;
              });
              if (hasGroups) {
                currentPaddedGroup.setChildren([child]);
                continue;
              } else {
                currentPaddedGroup.setChildren(unbalancedTree);
                break;
              }
            }
            result.push(child);
          }
        }
        return result;
      };
      ColumnFactory2.prototype.findMaxDept = function(treeChildren, dept) {
        var maxDeptThisLevel = dept;
        for (var i = 0; i < treeChildren.length; i++) {
          var abstractColumn = treeChildren[i];
          if (abstractColumn instanceof ProvidedColumnGroup) {
            var originalGroup = abstractColumn;
            var newDept = this.findMaxDept(originalGroup.getChildren(), dept + 1);
            if (maxDeptThisLevel < newDept) {
              maxDeptThisLevel = newDept;
            }
          }
        }
        return maxDeptThisLevel;
      };
      ColumnFactory2.prototype.recursivelyCreateColumns = function(defs, level, primaryColumns, existingColsCopy, columnKeyCreator, existingGroups) {
        var _this = this;
        return (defs || []).map(function(def) {
          if (_this.isColumnGroup(def)) {
            return _this.createColumnGroup(primaryColumns, def, level, existingColsCopy, columnKeyCreator, existingGroups);
          } else {
            return _this.createColumn(primaryColumns, def, existingColsCopy, columnKeyCreator);
          }
        });
      };
      ColumnFactory2.prototype.createColumnGroup = function(primaryColumns, colGroupDef, level, existingColumns, columnKeyCreator, existingGroups) {
        var colGroupDefMerged = this.createMergedColGroupDef(colGroupDef);
        var groupId = columnKeyCreator.getUniqueKey(colGroupDefMerged.groupId || null, null);
        var existingGroup = this.findExistingGroup(colGroupDef, existingGroups);
        var providedGroup;
        if (existingGroup) {
          providedGroup = existingGroup;
          providedGroup.reset(colGroupDefMerged, level);
          removeFromArray(existingGroups, existingGroup);
        } else {
          providedGroup = new ProvidedColumnGroup(colGroupDefMerged, groupId, false, level);
          this.context.createBean(providedGroup);
        }
        var children = this.recursivelyCreateColumns(colGroupDefMerged.children, level + 1, primaryColumns, existingColumns, columnKeyCreator, existingGroups);
        providedGroup.setChildren(children);
        return providedGroup;
      };
      ColumnFactory2.prototype.createMergedColGroupDef = function(colGroupDef) {
        var colGroupDefMerged = {};
        Object.assign(colGroupDefMerged, this.gridOptionsWrapper.getDefaultColGroupDef());
        Object.assign(colGroupDefMerged, colGroupDef);
        this.checkForDeprecatedItems(colGroupDefMerged);
        return colGroupDefMerged;
      };
      ColumnFactory2.prototype.createColumn = function(primaryColumns, colDef, existingColsCopy, columnKeyCreator) {
        var colDefMerged = this.mergeColDefs(colDef);
        this.checkForDeprecatedItems(colDefMerged);
        var column = this.findExistingColumn(colDef, existingColsCopy);
        if (existingColsCopy && column) {
          removeFromArray(existingColsCopy, column);
        }
        if (!column) {
          var colId = columnKeyCreator.getUniqueKey(colDefMerged.colId, colDefMerged.field);
          column = new Column(colDefMerged, colDef, colId, primaryColumns);
          this.context.createBean(column);
        } else {
          column.setColDef(colDefMerged, colDef);
          this.applyColumnState(column, colDefMerged);
        }
        return column;
      };
      ColumnFactory2.prototype.applyColumnState = function(column, colDef) {
        var flex = attrToNumber(colDef.flex);
        if (flex !== void 0) {
          column.setFlex(flex);
        }
        var noFlexThisCol = column.getFlex() <= 0;
        if (noFlexThisCol) {
          var width = attrToNumber(colDef.width);
          if (width != null) {
            column.setActualWidth(width);
          } else {
            var widthBeforeUpdate = column.getActualWidth();
            column.setActualWidth(widthBeforeUpdate);
          }
        }
        if (colDef.sort !== void 0) {
          if (colDef.sort == Constants.SORT_ASC || colDef.sort == Constants.SORT_DESC) {
            column.setSort(colDef.sort);
          } else {
            column.setSort(void 0);
          }
        }
        var sortIndex = attrToNumber(colDef.sortIndex);
        if (sortIndex !== void 0) {
          column.setSortIndex(sortIndex);
        }
        var hide = attrToBoolean(colDef.hide);
        if (hide !== void 0) {
          column.setVisible(!hide);
        }
        if (colDef.pinned !== void 0) {
          column.setPinned(colDef.pinned);
        }
      };
      ColumnFactory2.prototype.findExistingColumn = function(newColDef, existingColsCopy) {
        return (existingColsCopy || []).find(function(existingCol) {
          var existingColDef = existingCol.getUserProvidedColDef();
          if (!existingColDef) {
            return false;
          }
          var newHasId = newColDef.colId != null;
          var newHasField = newColDef.field != null;
          if (newHasId) {
            return existingCol.getId() === newColDef.colId;
          }
          if (newHasField) {
            return existingColDef.field === newColDef.field;
          }
          if (existingColDef === newColDef) {
            return true;
          }
          return false;
        });
      };
      ColumnFactory2.prototype.findExistingGroup = function(newGroupDef, existingGroups) {
        return existingGroups.find(function(existingGroup) {
          var existingDef = existingGroup.getColGroupDef();
          if (!existingDef) {
            return false;
          }
          var newHasId = newGroupDef.groupId != null;
          if (newHasId) {
            return existingGroup.getId() === newGroupDef.groupId;
          }
          return false;
        });
      };
      ColumnFactory2.prototype.mergeColDefs = function(colDef) {
        var colDefMerged = {};
        var defaultColDef = this.gridOptionsWrapper.getDefaultColDef();
        mergeDeep(colDefMerged, defaultColDef, false, true);
        var columnType = colDef.type;
        if (!columnType) {
          columnType = defaultColDef && defaultColDef.type;
        }
        if (columnType) {
          this.assignColumnTypes(columnType, colDefMerged);
        }
        mergeDeep(colDefMerged, colDef, false, true);
        var autoGroupColDef = this.gridOptionsWrapper.getAutoGroupColumnDef();
        var isSortingCoupled = this.gridOptionsWrapper.isColumnsSortingCoupledToGroup();
        if (colDef.rowGroup && autoGroupColDef && isSortingCoupled) {
          mergeDeep(colDefMerged, { sort: autoGroupColDef.sort, initialSort: autoGroupColDef.initialSort }, false, true);
        }
        return colDefMerged;
      };
      ColumnFactory2.prototype.assignColumnTypes = function(type, colDefMerged) {
        var typeKeys = [];
        if (type instanceof Array) {
          var invalidArray = type.some(function(a) {
            return typeof a !== "string";
          });
          if (invalidArray) {
            console.warn("AG Grid: if colDef.type is supplied an array it should be of type 'string[]'");
          } else {
            typeKeys = type;
          }
        } else if (typeof type === "string") {
          typeKeys = type.split(",");
        } else {
          console.warn("AG Grid: colDef.type should be of type 'string' | 'string[]'");
          return;
        }
        var allColumnTypes = Object.assign({}, DefaultColumnTypes);
        var userTypes = this.gridOptionsWrapper.getColumnTypes() || {};
        iterateObject(userTypes, function(key, value) {
          if (key in allColumnTypes) {
            console.warn("AG Grid: the column type '" + key + "' is a default column type and cannot be overridden.");
          } else {
            allColumnTypes[key] = value;
          }
        });
        typeKeys.forEach(function(t) {
          var typeColDef = allColumnTypes[t.trim()];
          if (typeColDef) {
            mergeDeep(colDefMerged, typeColDef, false, true);
          } else {
            console.warn("AG Grid: colDef.type '" + t + "' does not correspond to defined gridOptions.columnTypes");
          }
        });
      };
      ColumnFactory2.prototype.checkForDeprecatedItems = function(colDef) {
        if (colDef) {
          var colDefNoType = colDef;
          if (colDefNoType.group !== void 0) {
            console.warn("AG Grid: colDef.group is invalid, please check documentation on how to do grouping as it changed in version 3");
          }
          if (colDefNoType.headerGroup !== void 0) {
            console.warn("AG Grid: colDef.headerGroup is invalid, please check documentation on how to do grouping as it changed in version 3");
          }
          if (colDefNoType.headerGroupShow !== void 0) {
            console.warn("AG Grid: colDef.headerGroupShow is invalid, should be columnGroupShow, please check documentation on how to do grouping as it changed in version 3");
          }
          if (colDefNoType.suppressRowGroup !== void 0) {
            console.warn("AG Grid: colDef.suppressRowGroup is deprecated, please use colDef.type instead");
          }
          if (colDefNoType.suppressAggregation !== void 0) {
            console.warn("AG Grid: colDef.suppressAggregation is deprecated, please use colDef.type instead");
          }
          if (colDefNoType.suppressRowGroup || colDefNoType.suppressAggregation) {
            console.warn("AG Grid: colDef.suppressAggregation and colDef.suppressRowGroup are deprecated, use allowRowGroup, allowPivot and allowValue instead");
          }
          if (colDefNoType.displayName) {
            console.warn("AG Grid: Found displayName " + colDefNoType.displayName + ", please use headerName instead, displayName is deprecated.");
            colDefNoType.headerName = colDefNoType.displayName;
          }
        }
      };
      ColumnFactory2.prototype.isColumnGroup = function(abstractColDef) {
        return abstractColDef.children !== void 0;
      };
      __decorate$2w([
        Autowired("columnUtils")
      ], ColumnFactory2.prototype, "columnUtils", void 0);
      __decorate$2w([
        __param$9(0, Qualifier("loggerFactory"))
      ], ColumnFactory2.prototype, "setBeans", null);
      ColumnFactory2 = __decorate$2w([
        Bean("columnFactory")
      ], ColumnFactory2);
      return ColumnFactory2;
    }(BeanStub);
    Events = function() {
      function Events2() {
      }
      Events2.EVENT_COLUMN_EVERYTHING_CHANGED = "columnEverythingChanged";
      Events2.EVENT_NEW_COLUMNS_LOADED = "newColumnsLoaded";
      Events2.EVENT_COLUMN_PIVOT_MODE_CHANGED = "columnPivotModeChanged";
      Events2.EVENT_COLUMN_ROW_GROUP_CHANGED = "columnRowGroupChanged";
      Events2.EVENT_EXPAND_COLLAPSE_ALL = "expandOrCollapseAll";
      Events2.EVENT_COLUMN_PIVOT_CHANGED = "columnPivotChanged";
      Events2.EVENT_GRID_COLUMNS_CHANGED = "gridColumnsChanged";
      Events2.EVENT_COLUMN_VALUE_CHANGED = "columnValueChanged";
      Events2.EVENT_COLUMN_MOVED = "columnMoved";
      Events2.EVENT_COLUMN_VISIBLE = "columnVisible";
      Events2.EVENT_COLUMN_PINNED = "columnPinned";
      Events2.EVENT_COLUMN_GROUP_OPENED = "columnGroupOpened";
      Events2.EVENT_COLUMN_RESIZED = "columnResized";
      Events2.EVENT_DISPLAYED_COLUMNS_CHANGED = "displayedColumnsChanged";
      Events2.EVENT_VIRTUAL_COLUMNS_CHANGED = "virtualColumnsChanged";
      Events2.EVENT_ASYNC_TRANSACTIONS_FLUSHED = "asyncTransactionsFlushed";
      Events2.EVENT_ROW_GROUP_OPENED = "rowGroupOpened";
      Events2.EVENT_ROW_DATA_CHANGED = "rowDataChanged";
      Events2.EVENT_ROW_DATA_UPDATED = "rowDataUpdated";
      Events2.EVENT_PINNED_ROW_DATA_CHANGED = "pinnedRowDataChanged";
      Events2.EVENT_RANGE_SELECTION_CHANGED = "rangeSelectionChanged";
      Events2.EVENT_CHART_CREATED = "chartCreated";
      Events2.EVENT_CHART_RANGE_SELECTION_CHANGED = "chartRangeSelectionChanged";
      Events2.EVENT_CHART_OPTIONS_CHANGED = "chartOptionsChanged";
      Events2.EVENT_CHART_DESTROYED = "chartDestroyed";
      Events2.EVENT_TOOL_PANEL_VISIBLE_CHANGED = "toolPanelVisibleChanged";
      Events2.EVENT_TOOL_PANEL_SIZE_CHANGED = "toolPanelSizeChanged";
      Events2.EVENT_COLUMN_PANEL_ITEM_DRAG_START = "columnPanelItemDragStart";
      Events2.EVENT_COLUMN_PANEL_ITEM_DRAG_END = "columnPanelItemDragEnd";
      Events2.EVENT_MODEL_UPDATED = "modelUpdated";
      Events2.EVENT_PASTE_START = "pasteStart";
      Events2.EVENT_PASTE_END = "pasteEnd";
      Events2.EVENT_FILL_START = "fillStart";
      Events2.EVENT_FILL_END = "fillEnd";
      Events2.EVENT_KEY_SHORTCUT_CHANGED_CELL_START = "keyShortcutChangedCellStart";
      Events2.EVENT_KEY_SHORTCUT_CHANGED_CELL_END = "keyShortcutChangedCellEnd";
      Events2.EVENT_CELL_CLICKED = "cellClicked";
      Events2.EVENT_CELL_DOUBLE_CLICKED = "cellDoubleClicked";
      Events2.EVENT_CELL_MOUSE_DOWN = "cellMouseDown";
      Events2.EVENT_CELL_CONTEXT_MENU = "cellContextMenu";
      Events2.EVENT_CELL_VALUE_CHANGED = "cellValueChanged";
      Events2.EVENT_CELL_EDIT_REQUEST = "cellEditRequest";
      Events2.EVENT_ROW_VALUE_CHANGED = "rowValueChanged";
      Events2.EVENT_CELL_FOCUSED = "cellFocused";
      Events2.EVENT_FULL_WIDTH_ROW_FOCUSED = "fullWidthRowFocused";
      Events2.EVENT_ROW_SELECTED = "rowSelected";
      Events2.EVENT_SELECTION_CHANGED = "selectionChanged";
      Events2.EVENT_CELL_KEY_DOWN = "cellKeyDown";
      Events2.EVENT_CELL_KEY_PRESS = "cellKeyPress";
      Events2.EVENT_CELL_MOUSE_OVER = "cellMouseOver";
      Events2.EVENT_CELL_MOUSE_OUT = "cellMouseOut";
      Events2.EVENT_FILTER_CHANGED = "filterChanged";
      Events2.EVENT_FILTER_MODIFIED = "filterModified";
      Events2.EVENT_FILTER_OPENED = "filterOpened";
      Events2.EVENT_SORT_CHANGED = "sortChanged";
      Events2.EVENT_VIRTUAL_ROW_REMOVED = "virtualRowRemoved";
      Events2.EVENT_ROW_CLICKED = "rowClicked";
      Events2.EVENT_ROW_DOUBLE_CLICKED = "rowDoubleClicked";
      Events2.EVENT_GRID_READY = "gridReady";
      Events2.EVENT_GRID_SIZE_CHANGED = "gridSizeChanged";
      Events2.EVENT_VIEWPORT_CHANGED = "viewportChanged";
      Events2.EVENT_SCROLLBAR_WIDTH_CHANGED = "scrollbarWidthChanged";
      Events2.EVENT_FIRST_DATA_RENDERED = "firstDataRendered";
      Events2.EVENT_DRAG_STARTED = "dragStarted";
      Events2.EVENT_DRAG_STOPPED = "dragStopped";
      Events2.EVENT_CHECKBOX_CHANGED = "checkboxChanged";
      Events2.EVENT_ROW_EDITING_STARTED = "rowEditingStarted";
      Events2.EVENT_ROW_EDITING_STOPPED = "rowEditingStopped";
      Events2.EVENT_CELL_EDITING_STARTED = "cellEditingStarted";
      Events2.EVENT_CELL_EDITING_STOPPED = "cellEditingStopped";
      Events2.EVENT_BODY_SCROLL = "bodyScroll";
      Events2.EVENT_BODY_SCROLL_END = "bodyScrollEnd";
      Events2.EVENT_HEIGHT_SCALE_CHANGED = "heightScaleChanged";
      Events2.EVENT_PAGINATION_CHANGED = "paginationChanged";
      Events2.EVENT_COMPONENT_STATE_CHANGED = "componentStateChanged";
      Events2.EVENT_BODY_HEIGHT_CHANGED = "bodyHeightChanged";
      Events2.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED = "displayedColumnsWidthChanged";
      Events2.EVENT_SCROLL_VISIBILITY_CHANGED = "scrollVisibilityChanged";
      Events2.EVENT_COLUMN_HOVER_CHANGED = "columnHoverChanged";
      Events2.EVENT_FLASH_CELLS = "flashCells";
      Events2.EVENT_PAGINATION_PIXEL_OFFSET_CHANGED = "paginationPixelOffsetChanged";
      Events2.EVENT_DISPLAYED_ROWS_CHANGED = "displayedRowsChanged";
      Events2.EVENT_LEFT_PINNED_WIDTH_CHANGED = "leftPinnedWidthChanged";
      Events2.EVENT_RIGHT_PINNED_WIDTH_CHANGED = "rightPinnedWidthChanged";
      Events2.EVENT_ROW_CONTAINER_HEIGHT_CHANGED = "rowContainerHeightChanged";
      Events2.EVENT_HEADER_HEIGHT_CHANGED = "headerHeightChanged";
      Events2.EVENT_COLUMN_HEADER_HEIGHT_CHANGED = "columnHeaderHeightChanged";
      Events2.EVENT_ROW_DRAG_ENTER = "rowDragEnter";
      Events2.EVENT_ROW_DRAG_MOVE = "rowDragMove";
      Events2.EVENT_ROW_DRAG_LEAVE = "rowDragLeave";
      Events2.EVENT_ROW_DRAG_END = "rowDragEnd";
      Events2.EVENT_POPUP_TO_FRONT = "popupToFront";
      Events2.EVENT_COLUMN_ROW_GROUP_CHANGE_REQUEST = "columnRowGroupChangeRequest";
      Events2.EVENT_COLUMN_PIVOT_CHANGE_REQUEST = "columnPivotChangeRequest";
      Events2.EVENT_COLUMN_VALUE_CHANGE_REQUEST = "columnValueChangeRequest";
      Events2.EVENT_COLUMN_AGG_FUNC_CHANGE_REQUEST = "columnAggFuncChangeRequest";
      Events2.EVENT_KEYBOARD_FOCUS = "keyboardFocus";
      Events2.EVENT_MOUSE_FOCUS = "mouseFocus";
      Events2.EVENT_STORE_UPDATED = "storeUpdated";
      return Events2;
    }();
    GroupInstanceIdCreator = function() {
      function GroupInstanceIdCreator2() {
        this.existingIds = {};
      }
      GroupInstanceIdCreator2.prototype.getInstanceIdForKey = function(key) {
        var lastResult = this.existingIds[key];
        var result;
        if (typeof lastResult !== "number") {
          result = 0;
        } else {
          result = lastResult + 1;
        }
        this.existingIds[key] = result;
        return result;
      };
      return GroupInstanceIdCreator2;
    }();
    reUnescapedHtml = /[&<>"']/g;
    HTML_ESCAPES = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;",
      "'": "&#39;"
    };
    StringUtils = Object.freeze({
      __proto__: null,
      utf8_encode,
      camelCaseToHyphen,
      hyphenToCamelCase,
      capitalise,
      escapeString,
      camelCaseToHumanText
    });
    MapUtils = Object.freeze({
      __proto__: null,
      convertToMap,
      mapById,
      keys
    });
    __read$p = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread$j = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read$p(arguments[i]));
      return ar;
    };
    ColDefUtil = function() {
      function ColDefUtil2() {
      }
      ColDefUtil2.STRING_PROPERTIES = [
        "headerName",
        "columnGroupShow",
        "headerClass",
        "toolPanelClass",
        "headerValueGetter",
        "pivotKeys",
        "groupId",
        "colId",
        "sort",
        "initialSort",
        "field",
        "type",
        "tooltipComponent",
        "tooltipField",
        "headerTooltip",
        "cellClass",
        "showRowGroup",
        "filter",
        "initialAggFunc",
        "defaultAggFunc",
        "aggFunc",
        "pinned",
        "initialPinned",
        "chartDataType",
        "cellEditorPopupPosition"
      ];
      ColDefUtil2.OBJECT_PROPERTIES = [
        "headerGroupComponent",
        "headerGroupComponentFramework",
        "headerGroupComponentParams",
        "cellStyle",
        "cellRenderer",
        "cellRendererParams",
        "cellRendererFramework",
        "cellEditor",
        "cellEditorFramework",
        "cellEditorParams",
        "pinnedRowCellRendererFramework",
        "pinnedRowCellRendererParams",
        "filterFramework",
        "filterParams",
        "pivotValueColumn",
        "headerComponent",
        "headerComponentFramework",
        "headerComponentParams",
        "floatingFilterComponent",
        "floatingFilterComponentParams",
        "floatingFilterComponentFramework",
        "tooltipComponent",
        "tooltipComponentParams",
        "tooltipComponentFramework",
        "refData",
        "columnsMenuParams"
      ];
      ColDefUtil2.ARRAY_PROPERTIES = [
        "children",
        "sortingOrder",
        "allowedAggFuncs",
        "menuTabs",
        "pivotTotalColumnIds",
        "cellClassRules",
        "icons"
      ];
      ColDefUtil2.NUMBER_PROPERTIES = [
        "sortedAt",
        "sortIndex",
        "initialSortIndex",
        "flex",
        "initialFlex",
        "width",
        "initialWidth",
        "minWidth",
        "maxWidth",
        "rowGroupIndex",
        "initialRowGroupIndex",
        "pivotIndex",
        "initialPivotIndex"
      ];
      ColDefUtil2.BOOLEAN_PROPERTIES = [
        "suppressCellFlash",
        "suppressColumnsToolPanel",
        "suppressFiltersToolPanel",
        "openByDefault",
        "marryChildren",
        "hide",
        "initialHide",
        "rowGroup",
        "initialRowGroup",
        "pivot",
        "initialPivot",
        "checkboxSelection",
        "showDisabledCheckboxes",
        "headerCheckboxSelection",
        "headerCheckboxSelectionFilteredOnly",
        "suppressMenu",
        "suppressMovable",
        "lockPosition",
        "lockVisible",
        "lockPinned",
        "unSortIcon",
        "suppressSizeToFit",
        "suppressAutoSize",
        "enableRowGroup",
        "enablePivot",
        "enableValue",
        "editable",
        "suppressPaste",
        "suppressNavigable",
        "enableCellChangeFlash",
        "rowDrag",
        "dndSource",
        "autoHeight",
        "wrapText",
        "sortable",
        "resizable",
        "singleClickEdit",
        "floatingFilter",
        "cellEditorPopup",
        "suppressFillHandle",
        "wrapHeaderText",
        "autoHeaderHeight"
      ];
      ColDefUtil2.FUNCTION_PROPERTIES = [
        "dndSourceOnRowDrag",
        "valueGetter",
        "valueSetter",
        "filterValueGetter",
        "keyCreator",
        "pinnedRowCellRenderer",
        "valueFormatter",
        "pinnedRowValueFormatter",
        "valueParser",
        "comparator",
        "equals",
        "pivotComparator",
        "suppressKeyboardEvent",
        "suppressHeaderKeyboardEvent",
        "colSpan",
        "rowSpan",
        "getQuickFilterText",
        "newValueHandler",
        "onCellValueChanged",
        "onCellClicked",
        "onCellDoubleClicked",
        "onCellContextMenu",
        "rowDragText",
        "tooltipValueGetter",
        "tooltipComponent",
        "tooltipComponentFramework",
        "cellRendererSelector",
        "cellEditorSelector"
      ];
      ColDefUtil2.ALL_PROPERTIES = __spread$j(ColDefUtil2.ARRAY_PROPERTIES, ColDefUtil2.OBJECT_PROPERTIES, ColDefUtil2.STRING_PROPERTIES, ColDefUtil2.NUMBER_PROPERTIES, ColDefUtil2.FUNCTION_PROPERTIES, ColDefUtil2.BOOLEAN_PROPERTIES);
      ColDefUtil2.FRAMEWORK_PROPERTIES = [
        "__ob__",
        "__v_skip",
        "__metadata__",
        "mappedColumnProperties",
        "hasChildColumns",
        "toColDef",
        "createColDefFromGridColumn"
      ];
      return ColDefUtil2;
    }();
    __read$o = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread$i = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read$o(arguments[i]));
      return ar;
    };
    PropertyKeys = function() {
      function PropertyKeys2() {
      }
      PropertyKeys2.STRING_PROPERTIES = [
        "rowSelection",
        "overlayLoadingTemplate",
        "overlayNoRowsTemplate",
        "quickFilterText",
        "rowModelType",
        "editType",
        "domLayout",
        "clipboardDelimiter",
        "rowGroupPanelShow",
        "multiSortKey",
        "pivotColumnGroupTotals",
        "pivotRowTotals",
        "pivotPanelShow",
        "fillHandleDirection",
        "serverSideStoreType",
        "groupDisplayType",
        "treeDataDisplayType",
        "colResizeDefault"
      ];
      PropertyKeys2.OBJECT_PROPERTIES = [
        "components",
        "frameworkComponents",
        "rowStyle",
        "context",
        "autoGroupColumnDef",
        "localeText",
        "icons",
        "datasource",
        "serverSideDatasource",
        "viewportDatasource",
        "groupRowRendererParams",
        "aggFuncs",
        "fullWidthCellRendererParams",
        "defaultColGroupDef",
        "defaultColDef",
        "defaultExportParams",
        "defaultCsvExportParams",
        "defaultExcelExportParams",
        "columnTypes",
        "rowClassRules",
        "detailCellRendererParams",
        "loadingCellRendererParams",
        "loadingOverlayComponentParams",
        "noRowsOverlayComponentParams",
        "popupParent",
        "statusBar",
        "sideBar",
        "chartThemeOverrides",
        "customChartThemes",
        "chartToolPanelsDef"
      ];
      PropertyKeys2.ARRAY_PROPERTIES = [
        "sortingOrder",
        "alignedGrids",
        "rowData",
        "columnDefs",
        "excelStyles",
        "pinnedTopRowData",
        "pinnedBottomRowData",
        "chartThemes",
        "rowClass"
      ];
      PropertyKeys2.NUMBER_PROPERTIES = [
        "rowHeight",
        "detailRowHeight",
        "rowBuffer",
        "colWidth",
        "headerHeight",
        "groupHeaderHeight",
        "floatingFiltersHeight",
        "pivotHeaderHeight",
        "pivotGroupHeaderHeight",
        "groupDefaultExpanded",
        "minColWidth",
        "maxColWidth",
        "viewportRowModelPageSize",
        "viewportRowModelBufferSize",
        "autoSizePadding",
        "maxBlocksInCache",
        "maxConcurrentDatasourceRequests",
        "tooltipShowDelay",
        "tooltipHideDelay",
        "cacheOverflowSize",
        "paginationPageSize",
        "cacheBlockSize",
        "infiniteInitialRowCount",
        "serverSideInitialRowCount",
        "scrollbarWidth",
        "batchUpdateWaitMillis",
        "asyncTransactionWaitMillis",
        "blockLoadDebounceMillis",
        "keepDetailRowsCount",
        "undoRedoCellEditingLimit",
        "cellFlashDelay",
        "cellFadeDelay",
        "tabIndex"
      ];
      PropertyKeys2.BOOLEAN_PROPERTIES = [
        "suppressMakeColumnVisibleAfterUnGroup",
        "suppressRowClickSelection",
        "suppressCellSelection",
        "suppressCellFocus",
        "suppressHorizontalScroll",
        "alwaysShowHorizontalScroll",
        "alwaysShowVerticalScroll",
        "debug",
        "enableBrowserTooltips",
        "enableCellExpressions",
        "angularCompileRows",
        "angularCompileFilters",
        "groupSuppressAutoColumn",
        "groupSelectsChildren",
        "groupIncludeFooter",
        "groupIncludeTotalFooter",
        "groupUseEntireRow",
        "groupSuppressBlankHeader",
        "suppressMenuHide",
        "suppressRowDeselection",
        "unSortIcon",
        "suppressMultiSort",
        "alwaysMultiSort",
        "singleClickEdit",
        "suppressLoadingOverlay",
        "suppressNoRowsOverlay",
        "suppressAutoSize",
        "skipHeaderOnAutoSize",
        "suppressParentsInRowNodes",
        "suppressColumnMoveAnimation",
        "suppressMovableColumns",
        "suppressFieldDotNotation",
        "enableRangeSelection",
        "enableRangeHandle",
        "enableFillHandle",
        "suppressClearOnFillReduction",
        "deltaSort",
        "suppressTouch",
        "suppressAsyncEvents",
        "allowContextMenuWithControlKey",
        "suppressContextMenu",
        "rememberGroupStateWhenNewData",
        "enableCellChangeFlash",
        "suppressDragLeaveHidesColumns",
        "suppressRowGroupHidesColumns",
        "suppressMiddleClickScrolls",
        "suppressPreventDefaultOnMouseWheel",
        "suppressCopyRowsToClipboard",
        "copyHeadersToClipboard",
        "copyGroupHeadersToClipboard",
        "pivotMode",
        "suppressAggFuncInHeader",
        "suppressColumnVirtualisation",
        "suppressAggAtRootLevel",
        "suppressFocusAfterRefresh",
        "functionsPassive",
        "functionsReadOnly",
        "animateRows",
        "groupSelectsFiltered",
        "groupRemoveSingleChildren",
        "groupRemoveLowestSingleChildren",
        "enableRtl",
        "suppressClickEdit",
        "rowDragEntireRow",
        "rowDragManaged",
        "suppressRowDrag",
        "suppressMoveWhenRowDragging",
        "rowDragMultiRow",
        "enableGroupEdit",
        "embedFullWidthRows",
        "deprecatedEmbedFullWidthRows",
        "suppressPaginationPanel",
        "groupHideOpenParents",
        "groupMultiAutoColumn",
        "pagination",
        "stopEditingWhenGridLosesFocus",
        "paginationAutoPageSize",
        "suppressScrollOnNewData",
        "suppressScrollWhenPopupsAreOpen",
        "purgeClosedRowNodes",
        "cacheQuickFilter",
        "deltaRowDataMode",
        "ensureDomOrder",
        "accentedSort",
        "suppressChangeDetection",
        "valueCache",
        "valueCacheNeverExpires",
        "aggregateOnlyChangedColumns",
        "suppressAnimationFrame",
        "suppressExcelExport",
        "suppressCsvExport",
        "treeData",
        "masterDetail",
        "suppressMultiRangeSelection",
        "enterMovesDownAfterEdit",
        "enterMovesDown",
        "suppressPropertyNamesCheck",
        "rowMultiSelectWithClick",
        "suppressEnterpriseResetOnNewColumns",
        "suppressRowHoverHighlight",
        "suppressRowTransform",
        "suppressClipboardPaste",
        "suppressLastEmptyLineOnPaste",
        "suppressSetColumnStateEvents",
        "suppressColumnStateEvents",
        "enableCharts",
        "enableChartToolPanelsButton",
        "deltaColumnMode",
        "suppressMaintainUnsortedOrder",
        "enableCellTextSelection",
        "suppressBrowserResizeObserver",
        "suppressMaxRenderedRowRestriction",
        "excludeChildrenWhenTreeDataFiltering",
        "tooltipMouseTrack",
        "keepDetailRows",
        "paginateChildRows",
        "preventDefaultOnContextMenu",
        "undoRedoCellEditing",
        "allowDragFromColumnsToolPanel",
        "immutableData",
        "immutableColumns",
        "pivotSuppressAutoColumn",
        "suppressExpandablePivotGroups",
        "applyColumnDefOrder",
        "debounceVerticalScrollbar",
        "detailRowAutoHeight",
        "serverSideFilteringAlwaysResets",
        "serverSideSortingAlwaysResets",
        "serverSideSortAllLevels",
        "serverSideFilterAllLevels",
        "serverSideSortOnServer",
        "serverSideFilterOnServer",
        "suppressAggFilteredOnly",
        "showOpenedGroup",
        "suppressClipboardApi",
        "suppressModelUpdateAfterUpdateTransaction",
        "stopEditingWhenCellsLoseFocus",
        "maintainColumnOrder",
        "groupMaintainOrder",
        "columnHoverHighlight",
        "reactUi",
        "suppressReactUi",
        "readOnlyEdit",
        "suppressRowVirtualisation",
        "enableCellEditingOnBackspace",
        "resetRowDataOnUpdate",
        "removePivotHeaderRowWhenSingleValueColumn",
        "suppressCopySingleCellRanges",
        "groupRowsSticky",
        "serverSideInfiniteScroll",
        "rowGroupPanelSuppressSort",
        "allowShowChangeAfterFilter"
      ];
      PropertyKeys2.FUNCTIONAL_PROPERTIES = [
        "localeTextFunc",
        "doesExternalFilterPass",
        "groupRowAggNodes",
        "isFullWidthCell",
        "processSecondaryColDef",
        "processSecondaryColGroupDef",
        "processPivotResultColDef",
        "processPivotResultColGroupDef",
        "getBusinessKeyForNode",
        "isRowSelectable",
        "postSort",
        "defaultGroupSortComparator",
        "defaultGroupOrderComparator",
        "rowDragText",
        "groupRowInnerRenderer",
        "groupRowInnerRendererFramework",
        "groupRowRenderer",
        "groupRowRendererFramework",
        "fullWidthCellRenderer",
        "fullWidthCellRendererFramework",
        "loadingCellRenderer",
        "loadingCellRendererFramework",
        "loadingOverlayComponent",
        "loadingOverlayComponentFramework",
        "noRowsOverlayComponent",
        "noRowsOverlayComponentFramework",
        "detailCellRenderer",
        "detailCellRendererFramework"
      ];
      PropertyKeys2.CALLBACK_PROPERTIES = [
        "getLocaleText",
        "isExternalFilterPresent",
        "getRowHeight",
        "getRowClass",
        "getRowStyle",
        "getContextMenuItems",
        "getMainMenuItems",
        "processRowPostCreate",
        "processCellForClipboard",
        "getGroupRowAgg",
        "getRowNodeId",
        "isFullWidthRow",
        "sendToClipboard",
        "navigateToNextHeader",
        "tabToNextHeader",
        "navigateToNextCell",
        "tabToNextCell",
        "processCellFromClipboard",
        "getDocument",
        "postProcessPopup",
        "getChildCount",
        "getDataPath",
        "isRowMaster",
        "postSortRows",
        "processHeaderForClipboard",
        "processGroupHeaderForClipboard",
        "paginationNumberFormatter",
        "processDataFromClipboard",
        "getServerSideGroupKey",
        "isServerSideGroup",
        "suppressKeyboardEvent",
        "createChartContainer",
        "getChartToolbarItems",
        "fillOperation",
        "isApplyServerSideTransaction",
        "getServerSideStoreParams",
        "getServerSideGroupLevelParams",
        "isServerSideGroupOpenByDefault",
        "isGroupOpenByDefault",
        "initialGroupOrderComparator",
        "loadingCellRendererSelector",
        "getRowId",
        "groupAggFiltering"
      ];
      PropertyKeys2.FUNCTION_PROPERTIES = __spread$i(PropertyKeys2.FUNCTIONAL_PROPERTIES, PropertyKeys2.CALLBACK_PROPERTIES);
      PropertyKeys2.ALL_PROPERTIES = __spread$i(PropertyKeys2.ARRAY_PROPERTIES, PropertyKeys2.OBJECT_PROPERTIES, PropertyKeys2.STRING_PROPERTIES, PropertyKeys2.NUMBER_PROPERTIES, PropertyKeys2.FUNCTION_PROPERTIES, PropertyKeys2.BOOLEAN_PROPERTIES);
      PropertyKeys2.FRAMEWORK_PROPERTIES = [
        "__ob__",
        "__v_skip",
        "__metadata__",
        "mappedColumnProperties",
        "hasChildColumns",
        "toColDef",
        "createColDefFromGridColumn"
      ];
      return PropertyKeys2;
    }();
    __assign$h = function() {
      __assign$h = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$h.apply(this, arguments);
    };
    __read$n = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread$h = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read$n(arguments[i]));
      return ar;
    };
    ComponentUtil = function() {
      function ComponentUtil2() {
      }
      ComponentUtil2.getEventCallbacks = function() {
        if (!ComponentUtil2.EVENT_CALLBACKS) {
          ComponentUtil2.EVENT_CALLBACKS = ComponentUtil2.EVENTS.map(function(event) {
            return ComponentUtil2.getCallbackForEvent(event);
          });
        }
        return ComponentUtil2.EVENT_CALLBACKS;
      };
      ComponentUtil2.copyAttributesToGridOptions = function(gridOptions, component, skipEventDeprecationCheck) {
        if (typeof gridOptions !== "object") {
          gridOptions = {};
        }
        var pGridOptions = gridOptions;
        var keyExists = function(key) {
          return typeof component[key] !== "undefined";
        };
        if (keyExists("groupAggFiltering") && typeof component.groupAggFiltering !== "function") {
          pGridOptions.groupAggFiltering = ComponentUtil2.toBoolean(component.groupAggFiltering);
          delete component.groupAggFiltering;
        }
        __spread$h(ComponentUtil2.ARRAY_PROPERTIES, ComponentUtil2.STRING_PROPERTIES, ComponentUtil2.OBJECT_PROPERTIES, ComponentUtil2.FUNCTION_PROPERTIES, ComponentUtil2.getEventCallbacks()).filter(keyExists).forEach(function(key) {
          return pGridOptions[key] = component[key];
        });
        ComponentUtil2.BOOLEAN_PROPERTIES.filter(keyExists).forEach(function(key) {
          return pGridOptions[key] = ComponentUtil2.toBoolean(component[key]);
        });
        ComponentUtil2.NUMBER_PROPERTIES.filter(keyExists).forEach(function(key) {
          return pGridOptions[key] = ComponentUtil2.toNumber(component[key]);
        });
        return gridOptions;
      };
      ComponentUtil2.getCallbackForEvent = function(eventName) {
        if (!eventName || eventName.length < 2) {
          return eventName;
        }
        return "on" + eventName[0].toUpperCase() + eventName.substr(1);
      };
      ComponentUtil2.processOnChange = function(changes, gridOptions, api, columnApi) {
        if (!changes) {
          return;
        }
        var changesToApply = __assign$h({}, changes);
        var pGridOptions = gridOptions;
        var keyExists = function(key) {
          return changesToApply[key];
        };
        if (keyExists("groupAggFiltering")) {
          if (typeof changesToApply.groupAggFiltering === "function") {
            pGridOptions.groupAggFiltering = changesToApply.groupAggFiltering;
          } else {
            pGridOptions.groupAggFiltering = ComponentUtil2.toBoolean(changesToApply.groupAggFiltering);
          }
          delete changesToApply.groupAggFiltering;
        }
        if (keyExists("groupDisplayType")) {
          if (typeof changesToApply.groupDisplayType.currentValue === "string") {
            api.setGroupDisplayType(changesToApply.groupDisplayType.currentValue);
            delete changesToApply.groupDisplayType;
          }
        }
        if (changesToApply.domLayout) {
          api.setDomLayout(changesToApply.domLayout.currentValue);
          delete changesToApply.domLayout;
        }
        if (changesToApply.rowClass) {
          api.setRowClass(changesToApply.rowClass.currentValue);
          delete changesToApply.rowClass;
        }
        if (changesToApply.paginationPageSize) {
          api.paginationSetPageSize(ComponentUtil2.toNumber(changesToApply.paginationPageSize.currentValue));
          delete changesToApply.paginationPageSize;
        }
        if (changesToApply.rowGroupPanelShow) {
          api.setRowGroupPanelShow(changesToApply.rowGroupPanelShow.currentValue);
          delete changesToApply.rowGroupPanelShow;
        }
        if (changesToApply.groupRemoveSingleChildren) {
          api.setGroupRemoveSingleChildren(ComponentUtil2.toBoolean(changesToApply.groupRemoveSingleChildren.currentValue));
          delete changesToApply.groupRemoveSingleChildren;
        }
        if (changesToApply.groupRemoveLowestSingleChildren) {
          api.setGroupRemoveLowestSingleChildren(ComponentUtil2.toBoolean(changesToApply.groupRemoveLowestSingleChildren.currentValue));
          delete changesToApply.groupRemoveLowestSingleChildren;
        }
        if (changesToApply.suppressRowDrag) {
          api.setSuppressRowDrag(ComponentUtil2.toBoolean(changesToApply.suppressRowDrag.currentValue));
          delete changesToApply.suppressRowDrag;
        }
        if (changesToApply.suppressMoveWhenRowDragging) {
          api.setSuppressMoveWhenRowDragging(ComponentUtil2.toBoolean(changesToApply.suppressMoveWhenRowDragging.currentValue));
          delete changesToApply.suppressMoveWhenRowDragging;
        }
        if (changesToApply.suppressRowClickSelection) {
          api.setSuppressRowClickSelection(ComponentUtil2.toBoolean(changesToApply.suppressRowClickSelection.currentValue));
          delete changesToApply.suppressRowClickSelection;
        }
        if (changesToApply.suppressClipboardPaste) {
          api.setSuppressClipboardPaste(ComponentUtil2.toBoolean(changesToApply.suppressClipboardPaste.currentValue));
          delete changesToApply.suppressClipboardPaste;
        }
        if (changesToApply.headerHeight) {
          api.setHeaderHeight(ComponentUtil2.toNumber(changesToApply.headerHeight.currentValue));
          delete changesToApply.headerHeight;
        }
        if (changesToApply.pivotHeaderHeight) {
          api.setPivotHeaderHeight(ComponentUtil2.toNumber(changesToApply.pivotHeaderHeight.currentValue));
          delete changesToApply.pivotHeaderHeight;
        }
        if (changesToApply.groupHeaderHeight) {
          api.setGroupHeaderHeight(ComponentUtil2.toNumber(changesToApply.groupHeaderHeight.currentValue));
          delete changesToApply.groupHeaderHeight;
        }
        if (changesToApply.pivotGroupHeaderHeight) {
          api.setPivotGroupHeaderHeight(ComponentUtil2.toNumber(changesToApply.pivotGroupHeaderHeight.currentValue));
          delete changesToApply.pivotGroupHeaderHeight;
        }
        if (changesToApply.floatingFiltersHeight) {
          api.setFloatingFiltersHeight(ComponentUtil2.toNumber(changesToApply.floatingFiltersHeight.currentValue));
          delete changesToApply.floatingFiltersHeight;
        }
        if (changesToApply.functionsReadOnly) {
          api.setFunctionsReadOnly(ComponentUtil2.toBoolean(changesToApply.functionsReadOnly.currentValue));
          delete changesToApply.functionsReadOnly;
        }
        __spread$h(ComponentUtil2.ARRAY_PROPERTIES, ComponentUtil2.OBJECT_PROPERTIES, ComponentUtil2.STRING_PROPERTIES, ComponentUtil2.getEventCallbacks()).filter(keyExists).forEach(function(key) {
          return pGridOptions[key] = changesToApply[key].currentValue;
        });
        ComponentUtil2.BOOLEAN_PROPERTIES.filter(keyExists).forEach(function(key) {
          return pGridOptions[key] = ComponentUtil2.toBoolean(changesToApply[key].currentValue);
        });
        ComponentUtil2.NUMBER_PROPERTIES.filter(keyExists).forEach(function(key) {
          return pGridOptions[key] = ComponentUtil2.toNumber(changesToApply[key].currentValue);
        });
        if (changesToApply.enableCellTextSelection) {
          api.setEnableCellTextSelection(ComponentUtil2.toBoolean(changesToApply.enableCellTextSelection.currentValue));
          delete changesToApply.enableCellTextSelection;
        }
        if (changesToApply.quickFilterText) {
          api.setQuickFilter(changesToApply.quickFilterText.currentValue);
          delete changesToApply.quickFilterText;
        }
        if (changesToApply.autoGroupColumnDef) {
          api.setAutoGroupColumnDef(changesToApply.autoGroupColumnDef.currentValue, "gridOptionsChanged");
          delete changesToApply.autoGroupColumnDef;
        }
        if (changesToApply.columnDefs) {
          api.setColumnDefs(changesToApply.columnDefs.currentValue, "gridOptionsChanged");
          delete changesToApply.columnDefs;
        }
        if (changesToApply.defaultColDef) {
          api.setDefaultColDef(changesToApply.defaultColDef.currentValue, "gridOptionsChanged");
          delete changesToApply.defaultColDef;
        }
        if (changesToApply.pivotMode) {
          columnApi.setPivotMode(ComponentUtil2.toBoolean(changesToApply.pivotMode.currentValue));
          delete changesToApply.pivotMode;
        }
        var dynamicApi = api;
        Object.keys(changesToApply).forEach(function(property) {
          var setterName = "set" + property.charAt(0).toUpperCase() + property.substring(1);
          if (dynamicApi[setterName]) {
            dynamicApi[setterName](changes[property].currentValue);
          }
        });
        var event = {
          type: Events.EVENT_COMPONENT_STATE_CHANGED
        };
        iterateObject(changes, function(key, value) {
          event[key] = value;
        });
        api.dispatchEvent(event);
      };
      ComponentUtil2.toBoolean = function(value) {
        if (typeof value === "boolean") {
          return value;
        }
        if (typeof value === "string") {
          return value.toUpperCase() === "TRUE" || value == "";
        }
        return false;
      };
      ComponentUtil2.toNumber = function(value) {
        if (typeof value === "number") {
          return value;
        }
        if (typeof value === "string") {
          return Number(value);
        }
      };
      ComponentUtil2.EVENTS = [];
      ComponentUtil2.PUBLIC_EVENTS = [];
      ComponentUtil2.EXCLUDED_INTERNAL_EVENTS = [];
      ComponentUtil2.STRING_PROPERTIES = PropertyKeys.STRING_PROPERTIES;
      ComponentUtil2.OBJECT_PROPERTIES = PropertyKeys.OBJECT_PROPERTIES;
      ComponentUtil2.ARRAY_PROPERTIES = PropertyKeys.ARRAY_PROPERTIES;
      ComponentUtil2.NUMBER_PROPERTIES = PropertyKeys.NUMBER_PROPERTIES;
      ComponentUtil2.BOOLEAN_PROPERTIES = PropertyKeys.BOOLEAN_PROPERTIES;
      ComponentUtil2.FUNCTION_PROPERTIES = PropertyKeys.FUNCTION_PROPERTIES;
      ComponentUtil2.ALL_PROPERTIES = PropertyKeys.ALL_PROPERTIES;
      return ComponentUtil2;
    }();
    ComponentUtil.EVENTS = values(Events);
    ComponentUtil.EXCLUDED_INTERNAL_EVENTS = [
      Events.EVENT_SCROLLBAR_WIDTH_CHANGED,
      Events.EVENT_CHECKBOX_CHANGED,
      Events.EVENT_HEIGHT_SCALE_CHANGED,
      Events.EVENT_BODY_HEIGHT_CHANGED,
      Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED,
      Events.EVENT_SCROLL_VISIBILITY_CHANGED,
      Events.EVENT_COLUMN_HOVER_CHANGED,
      Events.EVENT_FLASH_CELLS,
      Events.EVENT_PAGINATION_PIXEL_OFFSET_CHANGED,
      Events.EVENT_DISPLAYED_ROWS_CHANGED,
      Events.EVENT_LEFT_PINNED_WIDTH_CHANGED,
      Events.EVENT_RIGHT_PINNED_WIDTH_CHANGED,
      Events.EVENT_ROW_CONTAINER_HEIGHT_CHANGED,
      Events.EVENT_POPUP_TO_FRONT,
      Events.EVENT_KEYBOARD_FOCUS,
      Events.EVENT_MOUSE_FOCUS,
      Events.EVENT_STORE_UPDATED,
      Events.EVENT_COLUMN_PANEL_ITEM_DRAG_START,
      Events.EVENT_COLUMN_PANEL_ITEM_DRAG_END,
      Events.EVENT_FILL_START,
      Events.EVENT_FILL_END,
      Events.EVENT_KEY_SHORTCUT_CHANGED_CELL_START,
      Events.EVENT_KEY_SHORTCUT_CHANGED_CELL_END,
      Events.EVENT_FULL_WIDTH_ROW_FOCUSED,
      Events.EVENT_HEADER_HEIGHT_CHANGED,
      Events.EVENT_COLUMN_HEADER_HEIGHT_CHANGED
    ];
    ComponentUtil.PUBLIC_EVENTS = ComponentUtil.EVENTS.filter(function(e) {
      return !includes(ComponentUtil.EXCLUDED_INTERNAL_EVENTS, e);
    });
    SideBarDefParser = function() {
      function SideBarDefParser2() {
      }
      SideBarDefParser2.parse = function(toParse) {
        if (!toParse) {
          return null;
        }
        if (toParse === true) {
          return {
            toolPanels: [
              SideBarDefParser2.DEFAULT_COLUMN_COMP,
              SideBarDefParser2.DEFAULT_FILTER_COMP
            ],
            defaultToolPanel: "columns"
          };
        }
        if (typeof toParse === "string") {
          return SideBarDefParser2.parse([toParse]);
        }
        if (Array.isArray(toParse)) {
          var comps_1 = [];
          toParse.forEach(function(key) {
            var lookupResult = SideBarDefParser2.DEFAULT_BY_KEY[key];
            if (!lookupResult) {
              console.warn("AG Grid: the key " + key + " is not a valid key for specifying a tool panel, valid keys are: " + Object.keys(SideBarDefParser2.DEFAULT_BY_KEY).join(","));
              return;
            }
            comps_1.push(lookupResult);
          });
          if (comps_1.length === 0) {
            return null;
          }
          return {
            toolPanels: comps_1,
            defaultToolPanel: comps_1[0].id
          };
        }
        var result = {
          toolPanels: SideBarDefParser2.parseComponents(toParse.toolPanels),
          defaultToolPanel: toParse.defaultToolPanel,
          hiddenByDefault: toParse.hiddenByDefault,
          position: toParse.position
        };
        return result;
      };
      SideBarDefParser2.parseComponents = function(from) {
        var result = [];
        if (!from) {
          return result;
        }
        from.forEach(function(it) {
          var toAdd = null;
          if (typeof it === "string") {
            var lookupResult = SideBarDefParser2.DEFAULT_BY_KEY[it];
            if (!lookupResult) {
              console.warn("AG Grid: the key " + it + " is not a valid key for specifying a tool panel, valid keys are: " + Object.keys(SideBarDefParser2.DEFAULT_BY_KEY).join(","));
              return;
            }
            toAdd = lookupResult;
          } else {
            toAdd = it;
          }
          result.push(toAdd);
        });
        return result;
      };
      SideBarDefParser2.DEFAULT_COLUMN_COMP = {
        id: "columns",
        labelDefault: "Columns",
        labelKey: "columns",
        iconKey: "columns",
        toolPanel: "agColumnsToolPanel"
      };
      SideBarDefParser2.DEFAULT_FILTER_COMP = {
        id: "filters",
        labelDefault: "Filters",
        labelKey: "filters",
        iconKey: "filter",
        toolPanel: "agFiltersToolPanel"
      };
      SideBarDefParser2.DEFAULT_BY_KEY = {
        columns: SideBarDefParser2.DEFAULT_COLUMN_COMP,
        filters: SideBarDefParser2.DEFAULT_FILTER_COMP
      };
      return SideBarDefParser2;
    }();
    __values$5 = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    BrowserUtils = Object.freeze({
      __proto__: null,
      getBrowserInfo,
      isBrowserEdge,
      isBrowserSafari,
      isBrowserChrome,
      isBrowserFirefox,
      isMacOsUserAgent,
      isIOSUserAgent,
      browserSupportsPreventScroll,
      getTabIndex,
      getMaxDivHeight,
      getScrollbarWidth,
      isInvisibleScrollbar,
      hasOverflowScrolling,
      getBodyWidth,
      getBodyHeight
    });
    FuzzyMatchUtils = Object.freeze({
      __proto__: null,
      fuzzyCheckStrings,
      fuzzySuggestions,
      get_bigrams,
      string_distances,
      string_weighted_distances
    });
    NumberUtils = Object.freeze({
      __proto__: null,
      padStartWidthZeros,
      createArrayOfNumbers,
      isNumeric,
      cleanNumber,
      decToHex,
      formatNumberTwoDecimalPlacesAndCommas,
      formatNumberCommas,
      sum
    });
    __assign$g = function() {
      __assign$g = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$g.apply(this, arguments);
    };
    __decorate$2v = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param$8 = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    __read$m = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread$g = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read$m(arguments[i]));
      return ar;
    };
    DEFAULT_ROW_HEIGHT = 25;
    DEFAULT_DETAIL_ROW_HEIGHT = 300;
    DEFAULT_VIEWPORT_ROW_MODEL_PAGE_SIZE = 5;
    DEFAULT_VIEWPORT_ROW_MODEL_BUFFER_SIZE = 5;
    DEFAULT_KEEP_DETAIL_ROW_COUNT = 10;
    GridOptionsWrapper = function() {
      function GridOptionsWrapper2() {
        this.propertyEventService = new EventService();
        this.domDataKey = "__AG_" + Math.random().toString();
        this.destroyed = false;
      }
      GridOptionsWrapper_1 = GridOptionsWrapper2;
      GridOptionsWrapper2.prototype.agWire = function(gridApi, columnApi) {
        this.gridOptions.api = gridApi;
        this.gridOptions.columnApi = columnApi;
        this.checkForDeprecated();
        this.checkForViolations();
      };
      GridOptionsWrapper2.prototype.destroy = function() {
        this.gridOptions.api = null;
        this.gridOptions.columnApi = null;
        this.destroyed = true;
      };
      GridOptionsWrapper2.prototype.init = function() {
        var _this = this;
        if (this.gridOptions.suppressPropertyNamesCheck !== true) {
          this.checkGridOptionsProperties();
          this.checkColumnDefProperties();
        }
        if (this.gridOptions.sideBar != null) {
          this.gridOptions.sideBar = SideBarDefParser.parse(this.gridOptions.sideBar);
        }
        var async = this.useAsyncEvents();
        this.eventService.addGlobalListener(this.globalEventHandler.bind(this), async);
        if (this.isGroupSelectsChildren() && this.isSuppressParentsInRowNodes()) {
          console.warn("AG Grid: 'groupSelectsChildren' does not work with 'suppressParentsInRowNodes', this selection method needs the part in rowNode to work");
        }
        if (this.isGroupSelectsChildren()) {
          if (!this.isRowSelectionMulti()) {
            console.warn("AG Grid: rowSelection must be 'multiple' for groupSelectsChildren to make sense");
          }
          if (this.isRowModelServerSide()) {
            console.warn("AG Grid: group selects children is NOT support for Server Side Row Model. This is because the rows are lazy loaded, so selecting a group is not possible asthe grid has no way of knowing what the children are.");
          }
        }
        if (this.isGroupRemoveSingleChildren() && this.isGroupHideOpenParents()) {
          console.warn("AG Grid: groupRemoveSingleChildren and groupHideOpenParents do not work with each other, you need to pick one. And don't ask us how to use these together on our support forum either, you will get the same answer!");
        }
        if (this.isRowModelServerSide()) {
          var msg = function(prop) {
            return "AG Grid: '" + prop + "' is not supported on the Server-Side Row Model";
          };
          if (exists(this.gridOptions.groupDefaultExpanded)) {
            console.warn(msg("groupDefaultExpanded"));
          }
          if (exists(this.gridOptions.groupDefaultExpanded)) {
            console.warn(msg("groupIncludeFooter"));
          }
          if (exists(this.gridOptions.groupDefaultExpanded)) {
            console.warn(msg("groupIncludeTotalFooter"));
          }
        }
        if (isTrue(this.gridOptions.enableRangeSelection)) {
          ModuleRegistry.assertRegistered(ModuleNames.RangeSelectionModule, "enableRangeSelection");
        } else if (this.isEnableRangeHandle() || this.isEnableFillHandle()) {
          console.warn("AG Grid: 'enableRangeHandle' or 'enableFillHandle' will not work unless 'enableRangeSelection' is set to true");
        }
        if (this.isGroupRowsSticky()) {
          if (this.isGroupHideOpenParents()) {
            console.warn("AG Grid: groupRowsSticky and groupHideOpenParents do not work with each other, you need to pick one.");
          }
          if (this.isMasterDetail()) {
            console.warn("AG Grid: groupRowsSticky and masterDetail do not work with each other, you need to pick one.");
          }
          if (this.isPagination()) {
            console.warn("AG Grid: groupRowsSticky and pagination do not work with each other, you need to pick one.");
          }
        }
        var warnOfDeprecaredIcon = function(name) {
          if (_this.gridOptions.icons && _this.gridOptions.icons[name]) {
            console.warn("gridOptions.icons." + name + " is no longer supported. For information on how to style checkboxes and radio buttons, see https://www.ag-grid.com/javascript-grid-icons/");
          }
        };
        warnOfDeprecaredIcon("radioButtonOff");
        warnOfDeprecaredIcon("radioButtonOn");
        warnOfDeprecaredIcon("checkboxChecked");
        warnOfDeprecaredIcon("checkboxUnchecked");
        warnOfDeprecaredIcon("checkboxIndeterminate");
        this.getScrollbarWidth();
      };
      GridOptionsWrapper2.prototype.checkColumnDefProperties = function() {
        var _this = this;
        if (this.gridOptions.columnDefs == null) {
          return;
        }
        this.gridOptions.columnDefs.forEach(function(colDef) {
          var userProperties = Object.getOwnPropertyNames(colDef);
          var validProperties = __spread$g(ColDefUtil.ALL_PROPERTIES, ColDefUtil.FRAMEWORK_PROPERTIES);
          _this.checkProperties(userProperties, validProperties, validProperties, "colDef", "https://www.ag-grid.com/javascript-grid-column-properties/");
        });
      };
      GridOptionsWrapper2.prototype.checkGridOptionsProperties = function() {
        var userProperties = Object.getOwnPropertyNames(this.gridOptions);
        var validProperties = __spread$g(PropertyKeys.ALL_PROPERTIES, PropertyKeys.FRAMEWORK_PROPERTIES, values(Events).map(function(event) {
          return ComponentUtil.getCallbackForEvent(event);
        }));
        var validPropertiesAndExceptions = __spread$g(validProperties, ["api", "columnApi"]);
        this.checkProperties(userProperties, validPropertiesAndExceptions, validProperties, "gridOptions", "https://www.ag-grid.com/javascript-data-grid/grid-options/");
      };
      GridOptionsWrapper2.prototype.checkProperties = function(userProperties, validPropertiesAndExceptions, validProperties, containerName, docsUrl) {
        var invalidProperties = fuzzyCheckStrings(userProperties, validPropertiesAndExceptions, validProperties);
        iterateObject(invalidProperties, function(key, value) {
          console.warn("ag-grid: invalid " + containerName + " property '" + key + "' did you mean any of these: " + value.slice(0, 8).join(", "));
        });
        if (Object.keys(invalidProperties).length > 0) {
          console.warn("ag-grid: to see all the valid " + containerName + " properties please check: " + docsUrl);
        }
      };
      GridOptionsWrapper2.prototype.mergeGridCommonParams = function(callback) {
        var _this = this;
        if (callback) {
          var wrapped = function(callbackParams) {
            var mergedParams = __assign$g(__assign$g({}, callbackParams), { api: _this.getApi(), columnApi: _this.getColumnApi(), context: _this.getContext() });
            return callback(mergedParams);
          };
          return wrapped;
        }
        return callback;
      };
      GridOptionsWrapper2.prototype.getDomDataKey = function() {
        return this.domDataKey;
      };
      GridOptionsWrapper2.prototype.getDomData = function(element, key) {
        var domData = element[this.getDomDataKey()];
        return domData ? domData[key] : void 0;
      };
      GridOptionsWrapper2.prototype.setDomData = function(element, key, value) {
        var domDataKey = this.getDomDataKey();
        var domData = element[domDataKey];
        if (missing(domData)) {
          domData = {};
          element[domDataKey] = domData;
        }
        domData[key] = value;
      };
      GridOptionsWrapper2.prototype.isRowSelection = function() {
        return this.gridOptions.rowSelection === "single" || this.gridOptions.rowSelection === "multiple";
      };
      GridOptionsWrapper2.prototype.isSuppressRowDeselection = function() {
        return isTrue(this.gridOptions.suppressRowDeselection);
      };
      GridOptionsWrapper2.prototype.isRowSelectionMulti = function() {
        return this.gridOptions.rowSelection === "multiple";
      };
      GridOptionsWrapper2.prototype.isRowMultiSelectWithClick = function() {
        return isTrue(this.gridOptions.rowMultiSelectWithClick);
      };
      GridOptionsWrapper2.prototype.getContext = function() {
        return this.gridOptions.context;
      };
      GridOptionsWrapper2.prototype.isPivotMode = function() {
        return isTrue(this.gridOptions.pivotMode);
      };
      GridOptionsWrapper2.prototype.isSuppressExpandablePivotGroups = function() {
        return isTrue(this.gridOptions.suppressExpandablePivotGroups);
      };
      GridOptionsWrapper2.prototype.getPivotColumnGroupTotals = function() {
        return this.gridOptions.pivotColumnGroupTotals;
      };
      GridOptionsWrapper2.prototype.getPivotRowTotals = function() {
        return this.gridOptions.pivotRowTotals;
      };
      GridOptionsWrapper2.prototype.isRowModelInfinite = function() {
        return this.gridOptions.rowModelType === Constants.ROW_MODEL_TYPE_INFINITE;
      };
      GridOptionsWrapper2.prototype.isRowModelViewport = function() {
        return this.gridOptions.rowModelType === Constants.ROW_MODEL_TYPE_VIEWPORT;
      };
      GridOptionsWrapper2.prototype.isRowModelServerSide = function() {
        return this.gridOptions.rowModelType === Constants.ROW_MODEL_TYPE_SERVER_SIDE;
      };
      GridOptionsWrapper2.prototype.isRowModelDefault = function() {
        return missing(this.gridOptions.rowModelType) || this.gridOptions.rowModelType === Constants.ROW_MODEL_TYPE_CLIENT_SIDE;
      };
      GridOptionsWrapper2.prototype.isFullRowEdit = function() {
        return this.gridOptions.editType === "fullRow";
      };
      GridOptionsWrapper2.prototype.isSuppressFocusAfterRefresh = function() {
        return isTrue(this.gridOptions.suppressFocusAfterRefresh);
      };
      GridOptionsWrapper2.prototype.isSuppressBrowserResizeObserver = function() {
        return isTrue(this.gridOptions.suppressBrowserResizeObserver);
      };
      GridOptionsWrapper2.prototype.isSuppressMaintainUnsortedOrder = function() {
        return isTrue(this.gridOptions.suppressMaintainUnsortedOrder);
      };
      GridOptionsWrapper2.prototype.isSuppressClearOnFillReduction = function() {
        return isTrue(this.gridOptions.suppressClearOnFillReduction);
      };
      GridOptionsWrapper2.prototype.isShowToolPanel = function() {
        return isTrue(this.gridOptions.sideBar && Array.isArray(this.getSideBar().toolPanels));
      };
      GridOptionsWrapper2.prototype.getSideBar = function() {
        return this.gridOptions.sideBar;
      };
      GridOptionsWrapper2.prototype.isSuppressTouch = function() {
        return isTrue(this.gridOptions.suppressTouch);
      };
      GridOptionsWrapper2.prototype.isMaintainColumnOrder = function() {
        return isTrue(this.gridOptions.maintainColumnOrder);
      };
      GridOptionsWrapper2.prototype.isSuppressRowTransform = function() {
        return isTrue(this.gridOptions.suppressRowTransform);
      };
      GridOptionsWrapper2.prototype.isSuppressColumnStateEvents = function() {
        return isTrue(this.gridOptions.suppressColumnStateEvents);
      };
      GridOptionsWrapper2.prototype.isAllowDragFromColumnsToolPanel = function() {
        return isTrue(this.gridOptions.allowDragFromColumnsToolPanel);
      };
      GridOptionsWrapper2.prototype.useAsyncEvents = function() {
        return !isTrue(this.gridOptions.suppressAsyncEvents);
      };
      GridOptionsWrapper2.prototype.isEnableCellChangeFlash = function() {
        return isTrue(this.gridOptions.enableCellChangeFlash);
      };
      GridOptionsWrapper2.prototype.getCellFlashDelay = function() {
        return this.gridOptions.cellFlashDelay || 500;
      };
      GridOptionsWrapper2.prototype.getCellFadeDelay = function() {
        return this.gridOptions.cellFadeDelay || 1e3;
      };
      GridOptionsWrapper2.prototype.isGroupSelectsChildren = function() {
        return isTrue(this.gridOptions.groupSelectsChildren);
      };
      GridOptionsWrapper2.prototype.isSuppressRowHoverHighlight = function() {
        return isTrue(this.gridOptions.suppressRowHoverHighlight);
      };
      GridOptionsWrapper2.prototype.isColumnHoverHighlight = function() {
        return isTrue(this.gridOptions.columnHoverHighlight);
      };
      GridOptionsWrapper2.prototype.isGroupSelectsFiltered = function() {
        return isTrue(this.gridOptions.groupSelectsFiltered);
      };
      GridOptionsWrapper2.prototype.isGroupHideOpenParents = function() {
        return isTrue(this.gridOptions.groupHideOpenParents);
      };
      GridOptionsWrapper2.prototype.isGroupMaintainOrder = function() {
        return isTrue(this.gridOptions.groupMaintainOrder);
      };
      GridOptionsWrapper2.prototype.getAutoGroupColumnDef = function() {
        return this.gridOptions.autoGroupColumnDef;
      };
      GridOptionsWrapper2.prototype.isColumnsSortingCoupledToGroup = function() {
        var _a;
        var autoGroupColumnDef = this.getAutoGroupColumnDef();
        var isClientSideRowModel = this.isRowModelDefault();
        return isClientSideRowModel && !((_a = autoGroupColumnDef) === null || _a === void 0 ? void 0 : _a.comparator);
      };
      GridOptionsWrapper2.prototype.isGroupMultiAutoColumn = function() {
        if (this.gridOptions.groupDisplayType) {
          return this.matchesGroupDisplayType("multipleColumns", this.gridOptions.groupDisplayType);
        }
        return isTrue(this.gridOptions.groupHideOpenParents);
      };
      GridOptionsWrapper2.prototype.isGroupUseEntireRow = function(pivotMode) {
        if (pivotMode) {
          return false;
        }
        return this.gridOptions.groupDisplayType ? this.matchesGroupDisplayType("groupRows", this.gridOptions.groupDisplayType) : false;
      };
      GridOptionsWrapper2.prototype.isRowGroupPanelSuppressSort = function() {
        return isTrue(this.gridOptions.rowGroupPanelSuppressSort);
      };
      GridOptionsWrapper2.prototype.isGroupRowsSticky = function() {
        return isTrue(this.gridOptions.groupRowsSticky);
      };
      GridOptionsWrapper2.prototype.isGroupSuppressAutoColumn = function() {
        var isCustomRowGroups = this.gridOptions.groupDisplayType ? this.matchesGroupDisplayType("custom", this.gridOptions.groupDisplayType) : false;
        if (isCustomRowGroups) {
          return true;
        }
        return this.gridOptions.treeDataDisplayType ? this.matchesTreeDataDisplayType("custom", this.gridOptions.treeDataDisplayType) : false;
      };
      GridOptionsWrapper2.prototype.isGroupRemoveSingleChildren = function() {
        return isTrue(this.gridOptions.groupRemoveSingleChildren);
      };
      GridOptionsWrapper2.prototype.isGroupRemoveLowestSingleChildren = function() {
        return isTrue(this.gridOptions.groupRemoveLowestSingleChildren);
      };
      GridOptionsWrapper2.prototype.isGroupIncludeFooter = function() {
        return isTrue(this.gridOptions.groupIncludeFooter);
      };
      GridOptionsWrapper2.prototype.isGroupIncludeTotalFooter = function() {
        return isTrue(this.gridOptions.groupIncludeTotalFooter);
      };
      GridOptionsWrapper2.prototype.isGroupSuppressBlankHeader = function() {
        return isTrue(this.gridOptions.groupSuppressBlankHeader);
      };
      GridOptionsWrapper2.prototype.isSuppressRowClickSelection = function() {
        return isTrue(this.gridOptions.suppressRowClickSelection);
      };
      GridOptionsWrapper2.prototype.isSuppressCellFocus = function() {
        return isTrue(this.gridOptions.suppressCellFocus);
      };
      GridOptionsWrapper2.prototype.isSuppressMultiSort = function() {
        return isTrue(this.gridOptions.suppressMultiSort);
      };
      GridOptionsWrapper2.prototype.isAlwaysMultiSort = function() {
        return isTrue(this.gridOptions.alwaysMultiSort);
      };
      GridOptionsWrapper2.prototype.isMultiSortKeyCtrl = function() {
        return this.gridOptions.multiSortKey === "ctrl";
      };
      GridOptionsWrapper2.prototype.isPivotSuppressAutoColumn = function() {
        return isTrue(this.gridOptions.pivotSuppressAutoColumn);
      };
      GridOptionsWrapper2.prototype.isSuppressDragLeaveHidesColumns = function() {
        return isTrue(this.gridOptions.suppressDragLeaveHidesColumns);
      };
      GridOptionsWrapper2.prototype.isSuppressRowGroupHidesColumns = function() {
        return isTrue(this.gridOptions.suppressRowGroupHidesColumns);
      };
      GridOptionsWrapper2.prototype.isSuppressScrollOnNewData = function() {
        return isTrue(this.gridOptions.suppressScrollOnNewData);
      };
      GridOptionsWrapper2.prototype.isSuppressScrollWhenPopupsAreOpen = function() {
        return isTrue(this.gridOptions.suppressScrollWhenPopupsAreOpen);
      };
      GridOptionsWrapper2.prototype.isRowDragEntireRow = function() {
        return isTrue(this.gridOptions.rowDragEntireRow);
      };
      GridOptionsWrapper2.prototype.getRowDragText = function(column) {
        if (column) {
          var colDef = column.getColDef();
          if (colDef.rowDragText) {
            return colDef.rowDragText;
          }
        }
        return this.gridOptions.rowDragText;
      };
      GridOptionsWrapper2.prototype.isSuppressRowDrag = function() {
        return isTrue(this.gridOptions.suppressRowDrag);
      };
      GridOptionsWrapper2.prototype.isRowDragManaged = function() {
        return isTrue(this.gridOptions.rowDragManaged);
      };
      GridOptionsWrapper2.prototype.isSuppressMoveWhenRowDragging = function() {
        return isTrue(this.gridOptions.suppressMoveWhenRowDragging);
      };
      GridOptionsWrapper2.prototype.isRowDragMultiRow = function() {
        return isTrue(this.gridOptions.rowDragMultiRow);
      };
      GridOptionsWrapper2.prototype.getDomLayout = function() {
        var domLayout = this.gridOptions.domLayout || Constants.DOM_LAYOUT_NORMAL;
        var validLayouts = [
          Constants.DOM_LAYOUT_PRINT,
          Constants.DOM_LAYOUT_AUTO_HEIGHT,
          Constants.DOM_LAYOUT_NORMAL
        ];
        if (validLayouts.indexOf(domLayout) === -1) {
          doOnce(function() {
            return console.warn("AG Grid: " + domLayout + " is not valid for DOM Layout, valid values are " + Constants.DOM_LAYOUT_NORMAL + ", " + Constants.DOM_LAYOUT_AUTO_HEIGHT + " and " + Constants.DOM_LAYOUT_PRINT);
          }, "warn about dom layout values");
          return Constants.DOM_LAYOUT_NORMAL;
        }
        return domLayout;
      };
      GridOptionsWrapper2.prototype.isSuppressHorizontalScroll = function() {
        return isTrue(this.gridOptions.suppressHorizontalScroll);
      };
      GridOptionsWrapper2.prototype.isSuppressMaxRenderedRowRestriction = function() {
        return isTrue(this.gridOptions.suppressMaxRenderedRowRestriction);
      };
      GridOptionsWrapper2.prototype.isExcludeChildrenWhenTreeDataFiltering = function() {
        return isTrue(this.gridOptions.excludeChildrenWhenTreeDataFiltering);
      };
      GridOptionsWrapper2.prototype.isAlwaysShowHorizontalScroll = function() {
        return isTrue(this.gridOptions.alwaysShowHorizontalScroll);
      };
      GridOptionsWrapper2.prototype.isAlwaysShowVerticalScroll = function() {
        return isTrue(this.gridOptions.alwaysShowVerticalScroll);
      };
      GridOptionsWrapper2.prototype.isDebounceVerticalScrollbar = function() {
        return isTrue(this.gridOptions.debounceVerticalScrollbar);
      };
      GridOptionsWrapper2.prototype.isSuppressLoadingOverlay = function() {
        return isTrue(this.gridOptions.suppressLoadingOverlay);
      };
      GridOptionsWrapper2.prototype.isSuppressNoRowsOverlay = function() {
        return isTrue(this.gridOptions.suppressNoRowsOverlay);
      };
      GridOptionsWrapper2.prototype.isSuppressFieldDotNotation = function() {
        return isTrue(this.gridOptions.suppressFieldDotNotation);
      };
      GridOptionsWrapper2.prototype.getPinnedTopRowData = function() {
        return this.gridOptions.pinnedTopRowData;
      };
      GridOptionsWrapper2.prototype.getPinnedBottomRowData = function() {
        return this.gridOptions.pinnedBottomRowData;
      };
      GridOptionsWrapper2.prototype.isFunctionsPassive = function() {
        return isTrue(this.gridOptions.functionsPassive);
      };
      GridOptionsWrapper2.prototype.isSuppressChangeDetection = function() {
        return isTrue(this.gridOptions.suppressChangeDetection);
      };
      GridOptionsWrapper2.prototype.isSuppressAnimationFrame = function() {
        return isTrue(this.gridOptions.suppressAnimationFrame);
      };
      GridOptionsWrapper2.prototype.getQuickFilterText = function() {
        return this.gridOptions.quickFilterText;
      };
      GridOptionsWrapper2.prototype.isCacheQuickFilter = function() {
        return isTrue(this.gridOptions.cacheQuickFilter);
      };
      GridOptionsWrapper2.prototype.isUnSortIcon = function() {
        return isTrue(this.gridOptions.unSortIcon);
      };
      GridOptionsWrapper2.prototype.isSuppressMenuHide = function() {
        return isTrue(this.gridOptions.suppressMenuHide);
      };
      GridOptionsWrapper2.prototype.isEnterMovesDownAfterEdit = function() {
        return isTrue(this.gridOptions.enterMovesDownAfterEdit);
      };
      GridOptionsWrapper2.prototype.isEnterMovesDown = function() {
        return isTrue(this.gridOptions.enterMovesDown);
      };
      GridOptionsWrapper2.prototype.isUndoRedoCellEditing = function() {
        return isTrue(this.gridOptions.undoRedoCellEditing);
      };
      GridOptionsWrapper2.prototype.getUndoRedoCellEditingLimit = function() {
        return toNumber(this.gridOptions.undoRedoCellEditingLimit);
      };
      GridOptionsWrapper2.prototype.isEnableCellEditingOnBackspace = function() {
        return isTrue(this.gridOptions.enableCellEditingOnBackspace);
      };
      GridOptionsWrapper2.prototype.getRowStyle = function() {
        return this.gridOptions.rowStyle;
      };
      GridOptionsWrapper2.prototype.getRowClass = function() {
        return this.gridOptions.rowClass;
      };
      GridOptionsWrapper2.prototype.getRowStyleFunc = function() {
        return this.mergeGridCommonParams(this.gridOptions.getRowStyle);
      };
      GridOptionsWrapper2.prototype.getRowClassFunc = function() {
        return this.mergeGridCommonParams(this.gridOptions.getRowClass);
      };
      GridOptionsWrapper2.prototype.rowClassRules = function() {
        return this.gridOptions.rowClassRules;
      };
      GridOptionsWrapper2.prototype.isServerSideInfiniteScroll = function() {
        return isTrue(this.gridOptions.serverSideInfiniteScroll);
      };
      GridOptionsWrapper2.prototype.getServerSideGroupLevelParamsFunc = function() {
        return this.mergeGridCommonParams(this.gridOptions.getServerSideGroupLevelParams);
      };
      GridOptionsWrapper2.prototype.getCreateChartContainerFunc = function() {
        return this.mergeGridCommonParams(this.gridOptions.createChartContainer);
      };
      GridOptionsWrapper2.prototype.getPopupParent = function() {
        return this.gridOptions.popupParent;
      };
      GridOptionsWrapper2.prototype.getBlockLoadDebounceMillis = function() {
        return this.gridOptions.blockLoadDebounceMillis;
      };
      GridOptionsWrapper2.prototype.getPostProcessPopupFunc = function() {
        return this.mergeGridCommonParams(this.gridOptions.postProcessPopup);
      };
      GridOptionsWrapper2.prototype.getPaginationNumberFormatterFunc = function() {
        return this.mergeGridCommonParams(this.gridOptions.paginationNumberFormatter);
      };
      GridOptionsWrapper2.prototype.getChildCountFunc = function() {
        return this.gridOptions.getChildCount;
      };
      GridOptionsWrapper2.prototype.getIsApplyServerSideTransactionFunc = function() {
        return this.mergeGridCommonParams(this.gridOptions.isApplyServerSideTransaction);
      };
      GridOptionsWrapper2.prototype.getInitialGroupOrderComparator = function() {
        var _a = this.gridOptions, initialGroupOrderComparator = _a.initialGroupOrderComparator, defaultGroupOrderComparator = _a.defaultGroupOrderComparator;
        if (initialGroupOrderComparator) {
          return this.mergeGridCommonParams(initialGroupOrderComparator);
        }
        if (defaultGroupOrderComparator) {
          return function(params) {
            return defaultGroupOrderComparator(params.nodeA, params.nodeB);
          };
        }
      };
      GridOptionsWrapper2.prototype.getIsFullWidthCellFunc = function() {
        var _a = this.gridOptions, isFullWidthRow = _a.isFullWidthRow, isFullWidthCell = _a.isFullWidthCell;
        if (isFullWidthRow) {
          return this.mergeGridCommonParams(isFullWidthRow);
        }
        if (isFullWidthCell) {
          return function(params) {
            return isFullWidthCell(params.rowNode);
          };
        }
      };
      GridOptionsWrapper2.prototype.getFullWidthCellRendererParams = function() {
        return this.gridOptions.fullWidthCellRendererParams;
      };
      GridOptionsWrapper2.prototype.isEmbedFullWidthRows = function() {
        return isTrue(this.gridOptions.embedFullWidthRows) || isTrue(this.gridOptions.deprecatedEmbedFullWidthRows);
      };
      GridOptionsWrapper2.prototype.isDetailRowAutoHeight = function() {
        return isTrue(this.gridOptions.detailRowAutoHeight);
      };
      GridOptionsWrapper2.prototype.getSuppressKeyboardEventFunc = function() {
        return this.gridOptions.suppressKeyboardEvent;
      };
      GridOptionsWrapper2.prototype.getBusinessKeyForNodeFunc = function() {
        return this.gridOptions.getBusinessKeyForNode;
      };
      GridOptionsWrapper2.prototype.getApi = function() {
        return this.gridOptions.api;
      };
      GridOptionsWrapper2.prototype.getColumnApi = function() {
        return this.gridOptions.columnApi;
      };
      GridOptionsWrapper2.prototype.isReadOnlyEdit = function() {
        return isTrue(this.gridOptions.readOnlyEdit);
      };
      GridOptionsWrapper2.prototype.isImmutableData = function() {
        var getRowIdProvided = this.gridOptions.getRowId != null;
        var immutableData = isTrue(this.gridOptions.immutableData);
        var resetRowDataOnUpdate = isTrue(this.gridOptions.resetRowDataOnUpdate);
        if (resetRowDataOnUpdate) {
          return false;
        }
        return getRowIdProvided || immutableData;
      };
      GridOptionsWrapper2.prototype.isEnsureDomOrder = function() {
        return isTrue(this.gridOptions.ensureDomOrder);
      };
      GridOptionsWrapper2.prototype.isEnableCharts = function() {
        if (isTrue(this.gridOptions.enableCharts)) {
          return ModuleRegistry.assertRegistered(ModuleNames.GridChartsModule, "enableCharts");
        }
        return false;
      };
      GridOptionsWrapper2.prototype.isEnableChartToolPanelsButton = function() {
        return isTrue(this.gridOptions.enableChartToolPanelsButton);
      };
      GridOptionsWrapper2.prototype.getColResizeDefault = function() {
        return this.gridOptions.colResizeDefault;
      };
      GridOptionsWrapper2.prototype.isSingleClickEdit = function() {
        return isTrue(this.gridOptions.singleClickEdit);
      };
      GridOptionsWrapper2.prototype.isSuppressClickEdit = function() {
        return isTrue(this.gridOptions.suppressClickEdit);
      };
      GridOptionsWrapper2.prototype.isStopEditingWhenCellsLoseFocus = function() {
        return isTrue(this.gridOptions.stopEditingWhenCellsLoseFocus);
      };
      GridOptionsWrapper2.prototype.getGroupDefaultExpanded = function() {
        return this.gridOptions.groupDefaultExpanded;
      };
      GridOptionsWrapper2.prototype.getMaxConcurrentDatasourceRequests = function() {
        var res = toNumber(this.gridOptions.maxConcurrentDatasourceRequests);
        if (res == null) {
          return 2;
        }
        if (res <= 0) {
          return;
        }
        return res;
      };
      GridOptionsWrapper2.prototype.getMaxBlocksInCache = function() {
        return this.gridOptions.maxBlocksInCache;
      };
      GridOptionsWrapper2.prototype.getCacheOverflowSize = function() {
        return this.gridOptions.cacheOverflowSize;
      };
      GridOptionsWrapper2.prototype.getPaginationPageSize = function() {
        return toNumber(this.gridOptions.paginationPageSize);
      };
      GridOptionsWrapper2.prototype.isPaginateChildRows = function() {
        var shouldPaginate = this.isGroupRemoveSingleChildren() || this.isGroupRemoveLowestSingleChildren();
        if (shouldPaginate) {
          return true;
        }
        return isTrue(this.gridOptions.paginateChildRows);
      };
      GridOptionsWrapper2.prototype.getCacheBlockSize = function() {
        return oneOrGreater(this.gridOptions.cacheBlockSize);
      };
      GridOptionsWrapper2.prototype.getInfiniteInitialRowCount = function() {
        return this.gridOptions.infiniteInitialRowCount;
      };
      GridOptionsWrapper2.prototype.getServerSideInitialRowCount = function() {
        var rowCount = this.gridOptions.serverSideInitialRowCount;
        if (typeof rowCount === "number" && rowCount > 0) {
          return rowCount;
        }
        return 1;
      };
      GridOptionsWrapper2.prototype.isPurgeClosedRowNodes = function() {
        return isTrue(this.gridOptions.purgeClosedRowNodes);
      };
      GridOptionsWrapper2.prototype.isSuppressPaginationPanel = function() {
        return isTrue(this.gridOptions.suppressPaginationPanel);
      };
      GridOptionsWrapper2.prototype.getRowData = function() {
        return this.gridOptions.rowData;
      };
      GridOptionsWrapper2.prototype.isEnableRtl = function() {
        return isTrue(this.gridOptions.enableRtl);
      };
      GridOptionsWrapper2.prototype.getRowGroupPanelShow = function() {
        return this.gridOptions.rowGroupPanelShow;
      };
      GridOptionsWrapper2.prototype.getPivotPanelShow = function() {
        return this.gridOptions.pivotPanelShow;
      };
      GridOptionsWrapper2.prototype.isAngularCompileRows = function() {
        return isTrue(this.gridOptions.angularCompileRows);
      };
      GridOptionsWrapper2.prototype.isAngularCompileFilters = function() {
        return isTrue(this.gridOptions.angularCompileFilters);
      };
      GridOptionsWrapper2.prototype.isDebug = function() {
        return isTrue(this.gridOptions.debug);
      };
      GridOptionsWrapper2.prototype.getColumnDefs = function() {
        return this.gridOptions.columnDefs;
      };
      GridOptionsWrapper2.prototype.getColumnTypes = function() {
        return this.gridOptions.columnTypes;
      };
      GridOptionsWrapper2.prototype.getDatasource = function() {
        return this.gridOptions.datasource;
      };
      GridOptionsWrapper2.prototype.getViewportDatasource = function() {
        return this.gridOptions.viewportDatasource;
      };
      GridOptionsWrapper2.prototype.getServerSideDatasource = function() {
        return this.gridOptions.serverSideDatasource;
      };
      GridOptionsWrapper2.prototype.isAccentedSort = function() {
        return isTrue(this.gridOptions.accentedSort);
      };
      GridOptionsWrapper2.prototype.isEnableBrowserTooltips = function() {
        return isTrue(this.gridOptions.enableBrowserTooltips);
      };
      GridOptionsWrapper2.prototype.isEnableCellExpressions = function() {
        return isTrue(this.gridOptions.enableCellExpressions);
      };
      GridOptionsWrapper2.prototype.isEnableGroupEdit = function() {
        return isTrue(this.gridOptions.enableGroupEdit);
      };
      GridOptionsWrapper2.prototype.isSuppressMiddleClickScrolls = function() {
        return isTrue(this.gridOptions.suppressMiddleClickScrolls);
      };
      GridOptionsWrapper2.prototype.isPreventDefaultOnContextMenu = function() {
        return isTrue(this.gridOptions.preventDefaultOnContextMenu);
      };
      GridOptionsWrapper2.prototype.isSuppressPreventDefaultOnMouseWheel = function() {
        return isTrue(this.gridOptions.suppressPreventDefaultOnMouseWheel);
      };
      GridOptionsWrapper2.prototype.isSuppressColumnVirtualisation = function() {
        return isTrue(this.gridOptions.suppressColumnVirtualisation);
      };
      GridOptionsWrapper2.prototype.isSuppressRowVirtualisation = function() {
        return isTrue(this.gridOptions.suppressRowVirtualisation);
      };
      GridOptionsWrapper2.prototype.isSuppressContextMenu = function() {
        return isTrue(this.gridOptions.suppressContextMenu);
      };
      GridOptionsWrapper2.prototype.isAllowContextMenuWithControlKey = function() {
        return isTrue(this.gridOptions.allowContextMenuWithControlKey);
      };
      GridOptionsWrapper2.prototype.isSuppressCopyRowsToClipboard = function() {
        return isTrue(this.gridOptions.suppressCopyRowsToClipboard);
      };
      GridOptionsWrapper2.prototype.isSuppressCopySingleCellRanges = function() {
        return isTrue(this.gridOptions.suppressCopySingleCellRanges);
      };
      GridOptionsWrapper2.prototype.isCopyHeadersToClipboard = function() {
        return isTrue(this.gridOptions.copyHeadersToClipboard);
      };
      GridOptionsWrapper2.prototype.isCopyGroupHeadersToClipboard = function() {
        return isTrue(this.gridOptions.copyGroupHeadersToClipboard);
      };
      GridOptionsWrapper2.prototype.isSuppressClipboardPaste = function() {
        return isTrue(this.gridOptions.suppressClipboardPaste);
      };
      GridOptionsWrapper2.prototype.isSuppressLastEmptyLineOnPaste = function() {
        return isTrue(this.gridOptions.suppressLastEmptyLineOnPaste);
      };
      GridOptionsWrapper2.prototype.isPagination = function() {
        return isTrue(this.gridOptions.pagination);
      };
      GridOptionsWrapper2.prototype.isSuppressEnterpriseResetOnNewColumns = function() {
        return isTrue(this.gridOptions.suppressEnterpriseResetOnNewColumns);
      };
      GridOptionsWrapper2.prototype.getProcessDataFromClipboardFunc = function() {
        return this.mergeGridCommonParams(this.gridOptions.processDataFromClipboard);
      };
      GridOptionsWrapper2.prototype.getAsyncTransactionWaitMillis = function() {
        return exists(this.gridOptions.asyncTransactionWaitMillis) ? this.gridOptions.asyncTransactionWaitMillis : Constants.BATCH_WAIT_MILLIS;
      };
      GridOptionsWrapper2.prototype.isSuppressMovableColumns = function() {
        return isTrue(this.gridOptions.suppressMovableColumns);
      };
      GridOptionsWrapper2.prototype.isAnimateRows = function() {
        if (this.isEnsureDomOrder()) {
          return false;
        }
        return isTrue(this.gridOptions.animateRows);
      };
      GridOptionsWrapper2.prototype.isSuppressColumnMoveAnimation = function() {
        return isTrue(this.gridOptions.suppressColumnMoveAnimation);
      };
      GridOptionsWrapper2.prototype.isSuppressAggFuncInHeader = function() {
        return isTrue(this.gridOptions.suppressAggFuncInHeader);
      };
      GridOptionsWrapper2.prototype.isSuppressAggAtRootLevel = function() {
        return isTrue(this.gridOptions.suppressAggAtRootLevel);
      };
      GridOptionsWrapper2.prototype.isSuppressAggFilteredOnly = function() {
        var isGroupAggFiltering = this.getGroupAggFiltering() !== void 0;
        return isGroupAggFiltering || isTrue(this.gridOptions.suppressAggFilteredOnly);
      };
      GridOptionsWrapper2.prototype.isRemovePivotHeaderRowWhenSingleValueColumn = function() {
        return isTrue(this.gridOptions.removePivotHeaderRowWhenSingleValueColumn);
      };
      GridOptionsWrapper2.prototype.isShowOpenedGroup = function() {
        return isTrue(this.gridOptions.showOpenedGroup);
      };
      GridOptionsWrapper2.prototype.isReactUi = function() {
        return isTrue(this.gridOptions.reactUi);
      };
      GridOptionsWrapper2.prototype.isSuppressReactUi = function() {
        return isTrue(this.gridOptions.suppressReactUi);
      };
      GridOptionsWrapper2.prototype.isEnableRangeSelection = function() {
        return ModuleRegistry.isRegistered(ModuleNames.RangeSelectionModule) && isTrue(this.gridOptions.enableRangeSelection);
      };
      GridOptionsWrapper2.prototype.isEnableRangeHandle = function() {
        return isTrue(this.gridOptions.enableRangeHandle);
      };
      GridOptionsWrapper2.prototype.isEnableFillHandle = function() {
        return isTrue(this.gridOptions.enableFillHandle);
      };
      GridOptionsWrapper2.prototype.getFillHandleDirection = function() {
        var direction = this.gridOptions.fillHandleDirection;
        if (!direction) {
          return "xy";
        }
        if (direction !== "x" && direction !== "y" && direction !== "xy") {
          doOnce(function() {
            return console.warn("AG Grid: valid values for fillHandleDirection are 'x', 'y' and 'xy'. Default to 'xy'.");
          }, "warn invalid fill direction");
          return "xy";
        }
        return direction;
      };
      GridOptionsWrapper2.prototype.getFillOperation = function() {
        return this.mergeGridCommonParams(this.gridOptions.fillOperation);
      };
      GridOptionsWrapper2.prototype.isSuppressMultiRangeSelection = function() {
        return isTrue(this.gridOptions.suppressMultiRangeSelection);
      };
      GridOptionsWrapper2.prototype.isPaginationAutoPageSize = function() {
        return isTrue(this.gridOptions.paginationAutoPageSize);
      };
      GridOptionsWrapper2.prototype.isRememberGroupStateWhenNewData = function() {
        return isTrue(this.gridOptions.rememberGroupStateWhenNewData);
      };
      GridOptionsWrapper2.prototype.getIcons = function() {
        return this.gridOptions.icons;
      };
      GridOptionsWrapper2.prototype.getGroupAggFiltering = function() {
        var userValue = this.gridOptions.groupAggFiltering;
        if (typeof userValue === "function") {
          return this.mergeGridCommonParams(userValue);
        }
        if (isTrue(userValue)) {
          return function() {
            return true;
          };
        }
        return void 0;
      };
      GridOptionsWrapper2.prototype.getAggFuncs = function() {
        return this.gridOptions.aggFuncs;
      };
      GridOptionsWrapper2.prototype.getSortingOrder = function() {
        return this.gridOptions.sortingOrder;
      };
      GridOptionsWrapper2.prototype.getAlignedGrids = function() {
        return this.gridOptions.alignedGrids;
      };
      GridOptionsWrapper2.prototype.isMasterDetail = function() {
        var masterDetail = isTrue(this.gridOptions.masterDetail);
        if (masterDetail) {
          return ModuleRegistry.assertRegistered(ModuleNames.MasterDetailModule, "masterDetail");
        } else {
          return false;
        }
      };
      GridOptionsWrapper2.prototype.isKeepDetailRows = function() {
        return isTrue(this.gridOptions.keepDetailRows);
      };
      GridOptionsWrapper2.prototype.getKeepDetailRowsCount = function() {
        var keepDetailRowsCount = this.gridOptions.keepDetailRowsCount;
        if (exists(keepDetailRowsCount) && keepDetailRowsCount > 0) {
          return this.gridOptions.keepDetailRowsCount;
        }
        return DEFAULT_KEEP_DETAIL_ROW_COUNT;
      };
      GridOptionsWrapper2.prototype.getIsRowMasterFunc = function() {
        return this.gridOptions.isRowMaster;
      };
      GridOptionsWrapper2.prototype.getIsRowSelectableFunc = function() {
        return this.gridOptions.isRowSelectable;
      };
      GridOptionsWrapper2.prototype.getGroupRowRendererParams = function() {
        return this.gridOptions.groupRowRendererParams;
      };
      GridOptionsWrapper2.prototype.getOverlayLoadingTemplate = function() {
        return this.gridOptions.overlayLoadingTemplate;
      };
      GridOptionsWrapper2.prototype.getOverlayNoRowsTemplate = function() {
        return this.gridOptions.overlayNoRowsTemplate;
      };
      GridOptionsWrapper2.prototype.isSuppressAutoSize = function() {
        return isTrue(this.gridOptions.suppressAutoSize);
      };
      GridOptionsWrapper2.prototype.isEnableCellTextSelection = function() {
        return isTrue(this.gridOptions.enableCellTextSelection);
      };
      GridOptionsWrapper2.prototype.isSuppressParentsInRowNodes = function() {
        return isTrue(this.gridOptions.suppressParentsInRowNodes);
      };
      GridOptionsWrapper2.prototype.isSuppressClipboardApi = function() {
        return isTrue(this.gridOptions.suppressClipboardApi);
      };
      GridOptionsWrapper2.prototype.isFunctionsReadOnly = function() {
        return isTrue(this.gridOptions.functionsReadOnly);
      };
      GridOptionsWrapper2.prototype.isEnableCellTextSelect = function() {
        return isTrue(this.gridOptions.enableCellTextSelection);
      };
      GridOptionsWrapper2.prototype.getDefaultColDef = function() {
        return this.gridOptions.defaultColDef;
      };
      GridOptionsWrapper2.prototype.getDefaultColGroupDef = function() {
        return this.gridOptions.defaultColGroupDef;
      };
      GridOptionsWrapper2.prototype.getDefaultExportParams = function(type) {
        if (this.gridOptions.defaultExportParams) {
          console.warn("AG Grid: Since v25.2 `defaultExportParams`  has been replaced by `default" + capitalise(type) + "ExportParams`'");
          if (type === "csv") {
            return this.gridOptions.defaultExportParams;
          }
          return this.gridOptions.defaultExportParams;
        }
        if (type === "csv" && this.gridOptions.defaultCsvExportParams) {
          return this.gridOptions.defaultCsvExportParams;
        }
        if (type === "excel" && this.gridOptions.defaultExcelExportParams) {
          return this.gridOptions.defaultExcelExportParams;
        }
      };
      GridOptionsWrapper2.prototype.isSuppressCsvExport = function() {
        return isTrue(this.gridOptions.suppressCsvExport);
      };
      GridOptionsWrapper2.prototype.isAllowShowChangeAfterFilter = function() {
        return isTrue(this.gridOptions.allowShowChangeAfterFilter);
      };
      GridOptionsWrapper2.prototype.isSuppressExcelExport = function() {
        return isTrue(this.gridOptions.suppressExcelExport);
      };
      GridOptionsWrapper2.prototype.isSuppressMakeColumnVisibleAfterUnGroup = function() {
        return isTrue(this.gridOptions.suppressMakeColumnVisibleAfterUnGroup);
      };
      GridOptionsWrapper2.prototype.getDataPathFunc = function() {
        return this.gridOptions.getDataPath;
      };
      GridOptionsWrapper2.prototype.getIsServerSideGroupFunc = function() {
        return this.gridOptions.isServerSideGroup;
      };
      GridOptionsWrapper2.prototype.getIsServerSideGroupOpenByDefaultFunc = function() {
        return this.mergeGridCommonParams(this.gridOptions.isServerSideGroupOpenByDefault);
      };
      GridOptionsWrapper2.prototype.getIsGroupOpenByDefaultFunc = function() {
        return this.mergeGridCommonParams(this.gridOptions.isGroupOpenByDefault);
      };
      GridOptionsWrapper2.prototype.getServerSideGroupKeyFunc = function() {
        return this.gridOptions.getServerSideGroupKey;
      };
      GridOptionsWrapper2.prototype.getGroupRowAggFunc = function() {
        var _a = this.gridOptions, getGroupRowAgg = _a.getGroupRowAgg, groupRowAggNodes = _a.groupRowAggNodes;
        if (getGroupRowAgg) {
          return this.mergeGridCommonParams(getGroupRowAgg);
        }
        if (groupRowAggNodes) {
          return function(params) {
            return groupRowAggNodes(params.nodes);
          };
        }
      };
      GridOptionsWrapper2.prototype.getContextMenuItemsFunc = function() {
        return this.mergeGridCommonParams(this.gridOptions.getContextMenuItems);
      };
      GridOptionsWrapper2.prototype.getMainMenuItemsFunc = function() {
        return this.mergeGridCommonParams(this.gridOptions.getMainMenuItems);
      };
      GridOptionsWrapper2.prototype.getRowIdFunc = function() {
        var _a = this.gridOptions, getRowId = _a.getRowId, getRowNodeId = _a.getRowNodeId;
        if (getRowId) {
          return this.mergeGridCommonParams(getRowId);
        }
        if (getRowNodeId) {
          return function(params) {
            return getRowNodeId(params.data);
          };
        }
      };
      GridOptionsWrapper2.prototype.getNavigateToNextHeaderFunc = function() {
        return this.mergeGridCommonParams(this.gridOptions.navigateToNextHeader);
      };
      GridOptionsWrapper2.prototype.getTabToNextHeaderFunc = function() {
        return this.mergeGridCommonParams(this.gridOptions.tabToNextHeader);
      };
      GridOptionsWrapper2.prototype.getNavigateToNextCellFunc = function() {
        return this.mergeGridCommonParams(this.gridOptions.navigateToNextCell);
      };
      GridOptionsWrapper2.prototype.getTabToNextCellFunc = function() {
        return this.mergeGridCommonParams(this.gridOptions.tabToNextCell);
      };
      GridOptionsWrapper2.prototype.getGridTabIndex = function() {
        return (this.gridOptions.tabIndex || 0).toString();
      };
      GridOptionsWrapper2.prototype.isTreeData = function() {
        var usingTreeData = isTrue(this.gridOptions.treeData);
        if (usingTreeData) {
          return ModuleRegistry.assertRegistered(ModuleNames.RowGroupingModule, "Tree Data");
        }
        return false;
      };
      GridOptionsWrapper2.prototype.isValueCache = function() {
        return isTrue(this.gridOptions.valueCache);
      };
      GridOptionsWrapper2.prototype.isValueCacheNeverExpires = function() {
        return isTrue(this.gridOptions.valueCacheNeverExpires);
      };
      GridOptionsWrapper2.prototype.isDeltaSort = function() {
        return isTrue(this.gridOptions.deltaSort);
      };
      GridOptionsWrapper2.prototype.isAggregateOnlyChangedColumns = function() {
        return isTrue(this.gridOptions.aggregateOnlyChangedColumns);
      };
      GridOptionsWrapper2.prototype.getProcessPivotResultColDefFunc = function() {
        return this.gridOptions.processPivotResultColDef || this.gridOptions.processSecondaryColDef;
      };
      GridOptionsWrapper2.prototype.getProcessPivotResultColGroupDefFunc = function() {
        return this.gridOptions.processPivotResultColGroupDef || this.gridOptions.processSecondaryColGroupDef;
      };
      GridOptionsWrapper2.prototype.getSendToClipboardFunc = function() {
        return this.mergeGridCommonParams(this.gridOptions.sendToClipboard);
      };
      GridOptionsWrapper2.prototype.getProcessRowPostCreateFunc = function() {
        return this.mergeGridCommonParams(this.gridOptions.processRowPostCreate);
      };
      GridOptionsWrapper2.prototype.getProcessCellForClipboardFunc = function() {
        return this.mergeGridCommonParams(this.gridOptions.processCellForClipboard);
      };
      GridOptionsWrapper2.prototype.getProcessHeaderForClipboardFunc = function() {
        return this.mergeGridCommonParams(this.gridOptions.processHeaderForClipboard);
      };
      GridOptionsWrapper2.prototype.getProcessGroupHeaderForClipboardFunc = function() {
        return this.mergeGridCommonParams(this.gridOptions.processGroupHeaderForClipboard);
      };
      GridOptionsWrapper2.prototype.getProcessCellFromClipboardFunc = function() {
        return this.mergeGridCommonParams(this.gridOptions.processCellFromClipboard);
      };
      GridOptionsWrapper2.prototype.getViewportRowModelPageSize = function() {
        return oneOrGreater(this.gridOptions.viewportRowModelPageSize, DEFAULT_VIEWPORT_ROW_MODEL_PAGE_SIZE);
      };
      GridOptionsWrapper2.prototype.getViewportRowModelBufferSize = function() {
        return zeroOrGreater(this.gridOptions.viewportRowModelBufferSize, DEFAULT_VIEWPORT_ROW_MODEL_BUFFER_SIZE);
      };
      GridOptionsWrapper2.prototype.isServerSideSortAllLevels = function() {
        var isEnabled = isTrue(this.gridOptions.serverSideSortAllLevels);
        if (!this.isRowModelServerSide() && isEnabled) {
          doOnce(function() {
            return console.warn("AG Grid: The `serverSideSortAllLevels` property can only be used with the server side row model.");
          }, "serverSideSortAllLevels");
          return false;
        }
        return isEnabled;
      };
      GridOptionsWrapper2.prototype.isServerSideFilterAllLevels = function() {
        var isEnabled = isTrue(this.gridOptions.serverSideFilterAllLevels);
        if (!this.isRowModelServerSide() && isEnabled) {
          doOnce(function() {
            return console.warn("AG Grid: The `serverSideFilterAllLevels` property can only be used with the server side row model.");
          }, "serverSideFilterAllLevels");
          return false;
        }
        return isEnabled;
      };
      GridOptionsWrapper2.prototype.isServerSideSortOnServer = function() {
        var isEnabled = isTrue(this.gridOptions.serverSideSortOnServer);
        if (!this.isRowModelServerSide() && isEnabled) {
          doOnce(function() {
            return console.warn("AG Grid: The `serverSideSortOnServer` property can only be used with the server side row model.");
          }, "serverSideSortOnServerRowModel");
          return false;
        }
        if (this.isTreeData() && isEnabled) {
          doOnce(function() {
            return console.warn("AG Grid: The `serverSideSortOnServer` property cannot be used while using tree data.");
          }, "serverSideSortOnServerTreeData");
          return false;
        }
        return isEnabled;
      };
      GridOptionsWrapper2.prototype.isServerSideFilterOnServer = function() {
        var isEnabled = isTrue(this.gridOptions.serverSideFilterOnServer);
        if (!this.isRowModelServerSide() && isEnabled) {
          doOnce(function() {
            return console.warn("AG Grid: The `serverSideFilterOnServer` property can only be used with the server side row model.");
          }, "serverSideFilterOnServerRowModel");
          return false;
        }
        if (this.isTreeData() && isEnabled) {
          doOnce(function() {
            return console.warn("AG Grid: The `serverSideFilterOnServer` property cannot be used while using tree data.");
          }, "serverSideFilterOnServerTreeData");
          return false;
        }
        return isEnabled;
      };
      GridOptionsWrapper2.prototype.getPostSortFunc = function() {
        var _a = this.gridOptions, postSortRows = _a.postSortRows, postSort = _a.postSort;
        if (postSortRows) {
          return this.mergeGridCommonParams(postSortRows);
        }
        if (postSort) {
          return function(params) {
            return postSort(params.nodes);
          };
        }
      };
      GridOptionsWrapper2.prototype.getChartToolbarItemsFunc = function() {
        return this.mergeGridCommonParams(this.gridOptions.getChartToolbarItems);
      };
      GridOptionsWrapper2.prototype.getChartThemeOverrides = function() {
        return this.gridOptions.chartThemeOverrides;
      };
      GridOptionsWrapper2.prototype.getCustomChartThemes = function() {
        return this.gridOptions.customChartThemes;
      };
      GridOptionsWrapper2.prototype.getChartThemes = function() {
        return this.gridOptions.chartThemes || ["ag-default", "ag-material", "ag-pastel", "ag-vivid", "ag-solar"];
      };
      GridOptionsWrapper2.prototype.getChartToolPanelsDef = function() {
        return this.gridOptions.chartToolPanelsDef;
      };
      GridOptionsWrapper2.prototype.getClipboardDelimiter = function() {
        return exists(this.gridOptions.clipboardDelimiter) ? this.gridOptions.clipboardDelimiter : "	";
      };
      GridOptionsWrapper2.prototype.setProperty = function(key, value, force) {
        if (force === void 0) {
          force = false;
        }
        var previousValue = this.gridOptions[key];
        if (force || previousValue !== value) {
          this.gridOptions[key] = value;
          var event_1 = {
            type: key,
            currentValue: value,
            previousValue
          };
          this.propertyEventService.dispatchEvent(event_1);
        }
      };
      GridOptionsWrapper2.prototype.addEventListener = function(key, listener) {
        this.propertyEventService.addEventListener(key, listener);
      };
      GridOptionsWrapper2.prototype.removeEventListener = function(key, listener) {
        this.propertyEventService.removeEventListener(key, listener);
      };
      GridOptionsWrapper2.prototype.isSkipHeaderOnAutoSize = function() {
        return !!this.gridOptions.skipHeaderOnAutoSize;
      };
      GridOptionsWrapper2.prototype.getAutoSizePadding = function() {
        var value = this.gridOptions.autoSizePadding;
        return value != null && value >= 0 ? value : 20;
      };
      GridOptionsWrapper2.prototype.getHeaderHeight = function() {
        if (typeof this.gridOptions.headerHeight === "number") {
          return this.gridOptions.headerHeight;
        }
        return this.getFromTheme(25, "headerHeight");
      };
      GridOptionsWrapper2.prototype.getFloatingFiltersHeight = function() {
        if (typeof this.gridOptions.floatingFiltersHeight === "number") {
          return this.gridOptions.floatingFiltersHeight;
        }
        return this.getFromTheme(25, "headerHeight");
      };
      GridOptionsWrapper2.prototype.getGroupHeaderHeight = function() {
        if (typeof this.gridOptions.groupHeaderHeight === "number") {
          return this.gridOptions.groupHeaderHeight;
        }
        return this.getHeaderHeight();
      };
      GridOptionsWrapper2.prototype.getPivotHeaderHeight = function() {
        if (typeof this.gridOptions.pivotHeaderHeight === "number") {
          return this.gridOptions.pivotHeaderHeight;
        }
        return this.getHeaderHeight();
      };
      GridOptionsWrapper2.prototype.getPivotGroupHeaderHeight = function() {
        if (typeof this.gridOptions.pivotGroupHeaderHeight === "number") {
          return this.gridOptions.pivotGroupHeaderHeight;
        }
        return this.getGroupHeaderHeight();
      };
      GridOptionsWrapper2.prototype.isExternalFilterPresent = function() {
        if (typeof this.gridOptions.isExternalFilterPresent === "function") {
          return this.gridOptions.isExternalFilterPresent({ api: this.getApi(), columnApi: this.getColumnApi(), context: this.getContext() });
        }
        return false;
      };
      GridOptionsWrapper2.prototype.doesExternalFilterPass = function(node) {
        if (typeof this.gridOptions.doesExternalFilterPass === "function") {
          return this.gridOptions.doesExternalFilterPass(node);
        }
        return false;
      };
      GridOptionsWrapper2.prototype.getTooltipDelay = function(type) {
        var _a = this.gridOptions, tooltipShowDelay = _a.tooltipShowDelay, tooltipHideDelay = _a.tooltipHideDelay;
        var delay = type === "show" ? tooltipShowDelay : tooltipHideDelay;
        var capitalisedType = capitalise(type);
        if (exists(delay)) {
          if (delay < 0) {
            doOnce(function() {
              return console.warn("ag-grid: tooltip" + capitalisedType + "Delay should not be lower than 0");
            }, "tooltip" + capitalisedType + "DelayWarn");
          }
          return Math.max(200, delay);
        }
        return null;
      };
      GridOptionsWrapper2.prototype.isTooltipMouseTrack = function() {
        return isTrue(this.gridOptions.tooltipMouseTrack);
      };
      GridOptionsWrapper2.prototype.isSuppressModelUpdateAfterUpdateTransaction = function() {
        return isTrue(this.gridOptions.suppressModelUpdateAfterUpdateTransaction);
      };
      GridOptionsWrapper2.prototype.getDocument = function() {
        var result = null;
        if (this.gridOptions.getDocument && exists(this.gridOptions.getDocument)) {
          result = this.gridOptions.getDocument();
        } else if (this.eGridDiv) {
          result = this.eGridDiv.ownerDocument;
        }
        if (result && exists(result)) {
          return result;
        }
        return document;
      };
      GridOptionsWrapper2.prototype.getMinColWidth = function() {
        var minColWidth = this.gridOptions.minColWidth;
        if (exists(minColWidth) && minColWidth > GridOptionsWrapper_1.MIN_COL_WIDTH) {
          return this.gridOptions.minColWidth;
        }
        var measuredMin = this.getFromTheme(null, "headerCellMinWidth");
        return exists(measuredMin) ? Math.max(measuredMin, GridOptionsWrapper_1.MIN_COL_WIDTH) : GridOptionsWrapper_1.MIN_COL_WIDTH;
      };
      GridOptionsWrapper2.prototype.getMaxColWidth = function() {
        if (this.gridOptions.maxColWidth && this.gridOptions.maxColWidth > GridOptionsWrapper_1.MIN_COL_WIDTH) {
          return this.gridOptions.maxColWidth;
        }
        return null;
      };
      GridOptionsWrapper2.prototype.getColWidth = function() {
        if (typeof this.gridOptions.colWidth !== "number" || this.gridOptions.colWidth < GridOptionsWrapper_1.MIN_COL_WIDTH) {
          return 200;
        }
        return this.gridOptions.colWidth;
      };
      GridOptionsWrapper2.prototype.getRowBuffer = function() {
        var rowBuffer = this.gridOptions.rowBuffer;
        if (typeof rowBuffer === "number") {
          if (rowBuffer < 0) {
            doOnce(function() {
              return console.warn("AG Grid: rowBuffer should not be negative");
            }, "warn rowBuffer negative");
            this.gridOptions.rowBuffer = rowBuffer = 0;
          }
        } else {
          rowBuffer = Constants.ROW_BUFFER_SIZE;
        }
        return rowBuffer;
      };
      GridOptionsWrapper2.prototype.getRowBufferInPixels = function() {
        var rowsToBuffer = this.getRowBuffer();
        var defaultRowHeight = this.getRowHeightAsNumber();
        return rowsToBuffer * defaultRowHeight;
      };
      GridOptionsWrapper2.prototype.getScrollbarWidth = function() {
        if (this.scrollbarWidth == null) {
          var useGridOptions = typeof this.gridOptions.scrollbarWidth === "number" && this.gridOptions.scrollbarWidth >= 0;
          var scrollbarWidth = useGridOptions ? this.gridOptions.scrollbarWidth : getScrollbarWidth();
          if (scrollbarWidth != null) {
            this.scrollbarWidth = scrollbarWidth;
            this.eventService.dispatchEvent({
              type: Events.EVENT_SCROLLBAR_WIDTH_CHANGED
            });
          }
        }
        return this.scrollbarWidth;
      };
      GridOptionsWrapper2.prototype.checkForDeprecated = function() {
        var options = this.gridOptions;
        if (options.deprecatedEmbedFullWidthRows) {
          console.warn("AG Grid: since v21.2, deprecatedEmbedFullWidthRows has been replaced with embedFullWidthRows.");
        }
        if (options.rowDeselection) {
          console.warn("AG Grid: since v24.x, rowDeselection is deprecated and the behaviour is true by default. Please use `suppressRowDeselection` to prevent rows from being deselected.");
        }
        if (options.enableMultiRowDragging) {
          options.rowDragMultiRow = true;
          delete options.enableMultiRowDragging;
          console.warn("AG Grid: since v26.1, `enableMultiRowDragging` is deprecated. Please use `rowDragMultiRow`.");
        }
        var checkRenamedProperty = function(oldProp, newProp, version) {
          if (options[oldProp] != null) {
            console.warn("AG Grid: since version " + version + ", '" + oldProp + "' is deprecated / renamed, please use the new property name '" + newProp + "' instead.");
            if (options[newProp] == null) {
              options[newProp] = options[oldProp];
            }
          }
        };
        checkRenamedProperty("batchUpdateWaitMillis", "asyncTransactionWaitMillis", "23.1.x");
        checkRenamedProperty("deltaRowDataMode", "immutableData", "23.1.x");
        checkRenamedProperty("serverSideFilteringAlwaysResets", "serverSideFilterAllLevels", "28.0.0");
        checkRenamedProperty("serverSideSortingAlwaysResets", "serverSideSortAllLevels", "28.0.0");
        if (options.immutableColumns || options.deltaColumnMode) {
          console.warn("AG Grid: since v24.0, immutableColumns and deltaColumnMode properties are gone. The grid now works like this as default. To keep column order maintained, set grid property applyColumnDefOrder=true");
        }
        checkRenamedProperty("suppressSetColumnStateEvents", "suppressColumnStateEvents", "24.0.x");
        if (options.groupRowInnerRenderer || options.groupRowInnerRendererParams || options.groupRowInnerRendererFramework) {
          console.warn("AG Grid: since v24.0, grid properties groupRowInnerRenderer, groupRowInnerRendererFramework and groupRowInnerRendererParams are no longer used.");
          console.warn("  Instead use the grid properties groupRowRendererParams.innerRenderer, groupRowRendererParams.innerRendererFramework and groupRowRendererParams.innerRendererParams.");
          console.warn("  For example instead of this:");
          console.warn('    groupRowInnerRenderer: "myRenderer"');
          console.warn("    groupRowInnerRendererParams: {x: a}");
          console.warn("  Replace with this:");
          console.warn("    groupRowRendererParams: {");
          console.warn('      innerRenderer: "myRenderer",');
          console.warn("      innerRendererParams: {x: a}");
          console.warn("    }");
          console.warn("  We have copied the properties over for you. However to stop this error message, please change your application code.");
          if (!options.groupRowRendererParams) {
            options.groupRowRendererParams = {};
          }
          var params = options.groupRowRendererParams;
          if (options.groupRowInnerRenderer) {
            params.innerRenderer = options.groupRowInnerRenderer;
          }
          if (options.groupRowInnerRendererParams) {
            params.innerRendererParams = options.groupRowInnerRendererParams;
          }
          if (options.groupRowInnerRendererFramework) {
            params.innerRendererFramework = options.groupRowInnerRendererFramework;
          }
        }
        if (options.rememberGroupStateWhenNewData) {
          console.warn("AG Grid: since v24.0, grid property rememberGroupStateWhenNewData is deprecated. This feature was provided before Transaction Updates worked (which keep group state). Now that transaction updates are possible and they keep group state, this feature is no longer needed.");
        }
        if (options.detailCellRendererParams && options.detailCellRendererParams.autoHeight) {
          console.warn("AG Grid: since v24.1, grid property detailCellRendererParams.autoHeight is replaced with grid property detailRowAutoHeight. This allows this feature to work when you provide a custom DetailCellRenderer");
          options.detailRowAutoHeight = true;
        }
        if (options.suppressKeyboardEvent) {
          console.warn("AG Grid: since v24.1 suppressKeyboardEvent in the gridOptions has been deprecated and will be removed in\n                 future versions of AG Grid. If you need this to be set for every column use the defaultColDef property.");
        }
        if (options.suppressEnterpriseResetOnNewColumns) {
          console.warn("AG Grid: since v25, grid property suppressEnterpriseResetOnNewColumns is deprecated. This was a temporary property to allow changing columns in Server Side Row Model without triggering a reload. Now that it is possible to dynamically change columns in the grid, this is no longer needed.");
        }
        if (options.suppressColumnStateEvents) {
          console.warn('AG Grid: since v25, grid property suppressColumnStateEvents no longer works due to a refactor that we did. It should be possible to achieve similar using event.source, which would be "api" if the event was due to setting column state via the API');
        }
        if (options.defaultExportParams) {
          console.warn("AG Grid: since v25.2, the grid property `defaultExportParams` has been replaced by `defaultCsvExportParams` and `defaultExcelExportParams`.");
        }
        if (options.stopEditingWhenGridLosesFocus) {
          console.warn("AG Grid: since v25.2.2, the grid property `stopEditingWhenGridLosesFocus` has been replaced by `stopEditingWhenCellsLoseFocus`.");
          options.stopEditingWhenCellsLoseFocus = true;
        }
        if (options.applyColumnDefOrder) {
          console.warn("AG Grid: since v26.0, the grid property `applyColumnDefOrder` is no longer needed, as this is the default behaviour. To turn this behaviour off, set maintainColumnOrder=true");
        }
        if (options.groupMultiAutoColumn) {
          console.warn("AG Grid: since v26.0, the grid property `groupMultiAutoColumn` has been replaced by `groupDisplayType = 'multipleColumns'`");
          options.groupDisplayType = "multipleColumns";
        }
        if (options.groupUseEntireRow) {
          console.warn("AG Grid: since v26.0, the grid property `groupUseEntireRow` has been replaced by `groupDisplayType = 'groupRows'`");
          options.groupDisplayType = "groupRows";
        }
        if (options.groupSuppressAutoColumn) {
          var propName = options.treeData ? "treeDataDisplayType" : "groupDisplayType";
          console.warn("AG Grid: since v26.0, the grid property `groupSuppressAutoColumn` has been replaced by `" + propName + " = 'custom'`");
          options.groupDisplayType = "custom";
        }
        if (options.defaultGroupOrderComparator) {
          console.warn("AG Grid: since v27.2, the grid property `defaultGroupOrderComparator` is deprecated and has been replaced by `initialGroupOrderComparator` and now receives a single params object.");
        }
        if (options.defaultGroupSortComparator) {
          console.warn("AG Grid: since v26.0, the grid property `defaultGroupSortComparator` has been replaced by `initialGroupOrderComparator`");
          options.defaultGroupOrderComparator = options.defaultGroupSortComparator;
        }
        if (options.groupRowAggNodes) {
          console.warn("AG Grid: since v27.2, the grid property `groupRowAggNodes` is deprecated and has been replaced by `getGroupRowAgg` and now receives a single params object.");
        }
        if (options.postSort) {
          console.warn("AG Grid: since v27.2, the grid property `postSort` is deprecated and has been replaced by `postSortRows` and now receives a single params object.");
        }
        if (options.isFullWidthCell) {
          console.warn("AG Grid: since v27.2, the grid property `isFullWidthCell` is deprecated and has been replaced by `isFullWidthRow` and now receives a single params object.");
        }
        if (options.localeTextFunc) {
          console.warn("AG Grid: since v27.2, the grid property `localeTextFunc` is deprecated and has been replaced by `getLocaleText` and now receives a single params object.");
        }
        if (options.colWidth) {
          console.warn("AG Grid: since v26.1, the grid property `colWidth` is deprecated and should be set via `defaultColDef.width`.");
        }
        if (options.minColWidth) {
          console.warn("AG Grid: since v26.1, the grid property `minColWidth` is deprecated and should be set via `defaultColDef.minWidth`.");
        }
        if (options.maxColWidth) {
          console.warn("AG Grid: since v26.1, the grid property `maxColWidth` is deprecated and should be set via `defaultColDef.maxWidth`.");
        }
        if (options.reactUi) {
          console.warn("AG Grid: since v27.0, React UI is on by default, so no need for reactUi=true. To turn it off, set suppressReactUi=true.");
        }
        if (options.suppressReactUi) {
          console.warn("AG Grid: The legacy React rendering engine is deprecated and will be removed in the next major version of the grid.");
        }
        if (options.suppressCellSelection) {
          console.warn("AG Grid: since v27.0, `suppressCellSelection` has been replaced by `suppressCellFocus`.");
          options.suppressCellFocus = options.suppressCellSelection;
        }
        if (options.getRowNodeId) {
          console.warn("AG Grid: since v27.1, `getRowNodeId` is deprecated and has been replaced by `getRowId`. The difference: if getRowId() is implemented then immutable data is enabled by default.");
        }
        if (options.immutableData) {
          if (options.getRowId) {
            console.warn("AG Grid: since v27.1, `immutableData` is deprecated. With the `getRowId` callback implemented, immutable data is enabled by default so you can remove `immutableData=true`.");
          } else {
            console.warn("AG Grid: since v27.1, `immutableData` is deprecated. To enable immutable data you must implement the `getRowId()` callback.");
          }
        }
        if (options.clipboardDeliminator) {
          console.warn("AG Grid: since v27.1, `clipboardDeliminator` has been replaced by `clipboardDelimiter`.");
          options.clipboardDelimiter = options.clipboardDeliminator;
        }
        checkRenamedProperty("processSecondaryColDef", "processPivotResultColDef", "28.0.x");
        checkRenamedProperty("processSecondaryColGroupDef", "processPivotResultColGroupDef", "28.0.x");
        if (options.serverSideStoreType) {
          console.warn("AG Grid: since v28.0, `serverSideStoreType` has been replaced by `serverSideInfiniteScroll`. Set to true to use Partial Store, and false to use Full Store.");
          options.serverSideInfiniteScroll = options.serverSideStoreType === "partial";
        }
        checkRenamedProperty("getServerSideStoreParams", "getServerSideGroupLevelParams", "28.0.x");
      };
      GridOptionsWrapper2.prototype.checkForViolations = function() {
        if (this.isTreeData()) {
          this.treeDataViolations();
        }
      };
      GridOptionsWrapper2.prototype.treeDataViolations = function() {
        if (this.isRowModelDefault()) {
          if (missing(this.getDataPathFunc())) {
            console.warn("AG Grid: property usingTreeData=true with rowModel=clientSide, but you did not provide getDataPath function, please provide getDataPath function if using tree data.");
          }
        }
        if (this.isRowModelServerSide()) {
          if (missing(this.getIsServerSideGroupFunc())) {
            console.warn("AG Grid: property usingTreeData=true with rowModel=serverSide, but you did not provide isServerSideGroup function, please provide isServerSideGroup function if using tree data.");
          }
          if (missing(this.getServerSideGroupKeyFunc())) {
            console.warn("AG Grid: property usingTreeData=true with rowModel=serverSide, but you did not provide getServerSideGroupKey function, please provide getServerSideGroupKey function if using tree data.");
          }
        }
      };
      GridOptionsWrapper2.prototype.getLocaleTextFunc = function() {
        var _this = this;
        var _a = this.gridOptions, localeText = _a.localeText, getLocaleText = _a.getLocaleText, localeTextFunc = _a.localeTextFunc;
        if (getLocaleText) {
          return function(key, defaultValue, variableValues) {
            var params = {
              key,
              defaultValue,
              variableValues,
              api: _this.getApi(),
              columnApi: _this.getColumnApi(),
              context: _this.getContext()
            };
            return getLocaleText(params);
          };
        }
        if (localeTextFunc) {
          return localeTextFunc;
        }
        return function(key, defaultValue, variableValues) {
          var localisedText = localeText && localeText[key];
          if (localisedText && variableValues && variableValues.length) {
            var found = 0;
            while (true) {
              if (found >= variableValues.length) {
                break;
              }
              var idx = localisedText.indexOf("${variable}");
              if (idx === -1) {
                break;
              }
              localisedText = localisedText.replace("${variable}", variableValues[found++]);
            }
          }
          return localisedText !== null && localisedText !== void 0 ? localisedText : defaultValue;
        };
      };
      GridOptionsWrapper2.prototype.globalEventHandler = function(eventName, event) {
        if (this.destroyed) {
          return;
        }
        var callbackMethodName = ComponentUtil.getCallbackForEvent(eventName);
        if (typeof this.gridOptions[callbackMethodName] === "function") {
          this.gridOptions[callbackMethodName](event);
        }
      };
      GridOptionsWrapper2.prototype.setRowHeightVariable = function(height) {
        var oldRowHeight = this.eGridDiv.style.getPropertyValue("--ag-line-height").trim();
        var newRowHeight = height + "px";
        if (oldRowHeight != newRowHeight) {
          this.eGridDiv.style.setProperty("--ag-line-height", newRowHeight);
        }
      };
      GridOptionsWrapper2.prototype.getRowHeightAsNumber = function() {
        if (!this.gridOptions.rowHeight || missing(this.gridOptions.rowHeight)) {
          return this.getDefaultRowHeight();
        }
        var rowHeight = this.gridOptions.rowHeight;
        if (rowHeight && this.isNumeric(rowHeight)) {
          this.setRowHeightVariable(rowHeight);
          return rowHeight;
        }
        console.warn("AG Grid row height must be a number if not using standard row model");
        return this.getDefaultRowHeight();
      };
      GridOptionsWrapper2.prototype.isGetRowHeightFunction = function() {
        return typeof this.gridOptions.getRowHeight === "function";
      };
      GridOptionsWrapper2.prototype.getRowHeightForNode = function(rowNode, allowEstimate, defaultRowHeight) {
        if (allowEstimate === void 0) {
          allowEstimate = false;
        }
        if (defaultRowHeight == null) {
          defaultRowHeight = this.getDefaultRowHeight();
        }
        if (this.isGetRowHeightFunction()) {
          if (allowEstimate) {
            return { height: defaultRowHeight, estimated: true };
          }
          var params = {
            node: rowNode,
            data: rowNode.data
          };
          var height = this.mergeGridCommonParams(this.gridOptions.getRowHeight)(params);
          if (this.isNumeric(height)) {
            if (height === 0) {
              doOnce(function() {
                return console.warn("AG Grid: The return of `getRowHeight` cannot be zero. If the intention is to hide rows, use a filter instead.");
              }, "invalidRowHeight");
            }
            return { height: Math.max(1, height), estimated: false };
          }
        }
        if (rowNode.detail && this.isMasterDetail()) {
          if (this.isDetailRowAutoHeight()) {
            return { height: 1, estimated: false };
          }
          if (this.isNumeric(this.gridOptions.detailRowHeight)) {
            return { height: this.gridOptions.detailRowHeight, estimated: false };
          }
          return { height: DEFAULT_DETAIL_ROW_HEIGHT, estimated: false };
        }
        var rowHeight = this.gridOptions.rowHeight && this.isNumeric(this.gridOptions.rowHeight) ? this.gridOptions.rowHeight : defaultRowHeight;
        return { height: rowHeight, estimated: false };
      };
      GridOptionsWrapper2.prototype.isDynamicRowHeight = function() {
        return typeof this.gridOptions.getRowHeight === "function";
      };
      GridOptionsWrapper2.prototype.getListItemHeight = function() {
        return this.getFromTheme(20, "listItemHeight");
      };
      GridOptionsWrapper2.prototype.chartMenuPanelWidth = function() {
        return this.environment.chartMenuPanelWidth();
      };
      GridOptionsWrapper2.prototype.isNumeric = function(value) {
        return !isNaN(value) && typeof value === "number" && isFinite(value);
      };
      GridOptionsWrapper2.prototype.getFromTheme = function(defaultValue, sassVariableName) {
        var theme = this.environment.getTheme().theme;
        if (theme && theme.indexOf("ag-theme") === 0) {
          return this.environment.getSassVariable(theme, sassVariableName);
        }
        return defaultValue;
      };
      GridOptionsWrapper2.prototype.getDefaultRowHeight = function() {
        return this.getFromTheme(DEFAULT_ROW_HEIGHT, "rowHeight");
      };
      GridOptionsWrapper2.prototype.matchesGroupDisplayType = function(toMatch, supplied) {
        var groupDisplayTypeValues = ["groupRows", "multipleColumns", "custom", "singleColumn"];
        if (groupDisplayTypeValues.indexOf(supplied) < 0) {
          console.warn("AG Grid: '" + supplied + "' is not a valid groupDisplayType value - possible values are: '" + groupDisplayTypeValues.join("', '") + "'");
          return false;
        }
        return supplied === toMatch;
      };
      GridOptionsWrapper2.prototype.matchesTreeDataDisplayType = function(toMatch, supplied) {
        var treeDataDisplayTypeValues = ["auto", "custom"];
        if (treeDataDisplayTypeValues.indexOf(supplied) < 0) {
          console.warn("AG Grid: '" + supplied + "' is not a valid treeDataDisplayType value - possible values are: '" + treeDataDisplayTypeValues.join("', '") + "'");
          return false;
        }
        return supplied === toMatch;
      };
      var GridOptionsWrapper_1;
      GridOptionsWrapper2.MIN_COL_WIDTH = 10;
      GridOptionsWrapper2.PROP_HEADER_HEIGHT = "headerHeight";
      GridOptionsWrapper2.PROP_GROUP_REMOVE_SINGLE_CHILDREN = "groupRemoveSingleChildren";
      GridOptionsWrapper2.PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN = "groupRemoveLowestSingleChildren";
      GridOptionsWrapper2.PROP_GROUP_DISPLAY_TYPE = "groupDisplayType";
      GridOptionsWrapper2.PROP_PIVOT_HEADER_HEIGHT = "pivotHeaderHeight";
      GridOptionsWrapper2.PROP_SUPPRESS_CLIPBOARD_PASTE = "suppressClipboardPaste";
      GridOptionsWrapper2.PROP_GROUP_HEADER_HEIGHT = "groupHeaderHeight";
      GridOptionsWrapper2.PROP_PIVOT_GROUP_HEADER_HEIGHT = "pivotGroupHeaderHeight";
      GridOptionsWrapper2.PROP_NAVIGATE_TO_NEXT_CELL = "navigateToNextCell";
      GridOptionsWrapper2.PROP_TAB_TO_NEXT_CELL = "tabToNextCell";
      GridOptionsWrapper2.PROP_NAVIGATE_TO_NEXT_HEADER = "navigateToNextHeader";
      GridOptionsWrapper2.PROP_TAB_TO_NEXT_HEADER = "tabToNextHeader";
      GridOptionsWrapper2.PROP_IS_EXTERNAL_FILTER_PRESENT = "isExternalFilterPresent";
      GridOptionsWrapper2.PROP_DOES_EXTERNAL_FILTER_PASS = "doesExternalFilterPass";
      GridOptionsWrapper2.PROP_FLOATING_FILTERS_HEIGHT = "floatingFiltersHeight";
      GridOptionsWrapper2.PROP_SUPPRESS_ROW_CLICK_SELECTION = "suppressRowClickSelection";
      GridOptionsWrapper2.PROP_SUPPRESS_ROW_DRAG = "suppressRowDrag";
      GridOptionsWrapper2.PROP_SUPPRESS_MOVE_WHEN_ROW_DRAG = "suppressMoveWhenRowDragging";
      GridOptionsWrapper2.PROP_GET_ROW_CLASS = "getRowClass";
      GridOptionsWrapper2.PROP_GET_ROW_STYLE = "getRowStyle";
      GridOptionsWrapper2.PROP_GET_ROW_HEIGHT = "getRowHeight";
      GridOptionsWrapper2.PROP_POPUP_PARENT = "popupParent";
      GridOptionsWrapper2.PROP_DOM_LAYOUT = "domLayout";
      GridOptionsWrapper2.PROP_ROW_CLASS = "rowClass";
      GridOptionsWrapper2.PROP_FILL_HANDLE_DIRECTION = "fillHandleDirection";
      GridOptionsWrapper2.PROP_GROUP_ROW_AGG_NODES = "groupRowAggNodes";
      GridOptionsWrapper2.PROP_GET_GROUP_ROW_AGG = "getGroupRowAgg";
      GridOptionsWrapper2.PROP_GET_BUSINESS_KEY_FOR_NODE = "getBusinessKeyForNode";
      GridOptionsWrapper2.PROP_GET_CHILD_COUNT = "getChildCount";
      GridOptionsWrapper2.PROP_PROCESS_ROW_POST_CREATE = "processRowPostCreate";
      GridOptionsWrapper2.PROP_GET_ROW_NODE_ID = "getRowNodeId";
      GridOptionsWrapper2.PROP_GET_ROW_ID = "getRowId";
      GridOptionsWrapper2.PROP_IS_FULL_WIDTH_CELL = "isFullWidthCell";
      GridOptionsWrapper2.PROP_IS_FULL_WIDTH_ROW = "isFullWidthRow";
      GridOptionsWrapper2.PROP_IS_ROW_SELECTABLE = "isRowSelectable";
      GridOptionsWrapper2.PROP_IS_ROW_MASTER = "isRowMaster";
      GridOptionsWrapper2.PROP_POST_SORT = "postSort";
      GridOptionsWrapper2.PROP_POST_SORT_ROWS = "postSortRows";
      GridOptionsWrapper2.PROP_GET_DOCUMENT = "getDocument";
      GridOptionsWrapper2.PROP_POST_PROCESS_POPUP = "postProcessPopup";
      GridOptionsWrapper2.PROP_DEFAULT_GROUP_ORDER_COMPARATOR = "defaultGroupOrderComparator";
      GridOptionsWrapper2.PROP_INITIAL_GROUP_ORDER_COMPARATOR = "initialGroupOrderComparator";
      GridOptionsWrapper2.PROP_PAGINATION_NUMBER_FORMATTER = "paginationNumberFormatter";
      GridOptionsWrapper2.PROP_GET_CONTEXT_MENU_ITEMS = "getContextMenuItems";
      GridOptionsWrapper2.PROP_GET_MAIN_MENU_ITEMS = "getMainMenuItems";
      GridOptionsWrapper2.PROP_PROCESS_CELL_FOR_CLIPBOARD = "processCellForClipboard";
      GridOptionsWrapper2.PROP_PROCESS_CELL_FROM_CLIPBOARD = "processCellFromClipboard";
      GridOptionsWrapper2.PROP_SEND_TO_CLIPBOARD = "sendToClipboard";
      GridOptionsWrapper2.PROP_PROCESS_PIVOT_RESULT_COL_DEF = "processPivotResultColDef";
      GridOptionsWrapper2.PROP_PROCESS_PIVOT_RESULT_COL_GROUP_DEF = "processPivotResultColGroupDef";
      GridOptionsWrapper2.PROP_GET_CHART_TOOLBAR_ITEMS = "getChartToolbarItems";
      GridOptionsWrapper2.PROP_GET_SERVER_SIDE_GROUP_PARAMS = "getServerSideGroupLevelParams";
      GridOptionsWrapper2.PROP_IS_SERVER_SIDE_GROUPS_OPEN_BY_DEFAULT = "isServerSideGroupOpenByDefault";
      GridOptionsWrapper2.PROP_IS_APPLY_SERVER_SIDE_TRANSACTION = "isApplyServerSideTransaction";
      GridOptionsWrapper2.PROP_IS_SERVER_SIDE_GROUP = "isServerSideGroup";
      GridOptionsWrapper2.PROP_GET_SERVER_SIDE_GROUP_KEY = "getServerSideGroupKey";
      GridOptionsWrapper2.PROP_AUTO_GROUP_COLUMN_DEF = "autoGroupColumnDef";
      GridOptionsWrapper2.PROP_DEFAULT_COL_DEF = "defaultColDef";
      __decorate$2v([
        Autowired("gridOptions")
      ], GridOptionsWrapper2.prototype, "gridOptions", void 0);
      __decorate$2v([
        Autowired("eventService")
      ], GridOptionsWrapper2.prototype, "eventService", void 0);
      __decorate$2v([
        Autowired("environment")
      ], GridOptionsWrapper2.prototype, "environment", void 0);
      __decorate$2v([
        Autowired("eGridDiv")
      ], GridOptionsWrapper2.prototype, "eGridDiv", void 0);
      __decorate$2v([
        __param$8(0, Qualifier("gridApi")),
        __param$8(1, Qualifier("columnApi"))
      ], GridOptionsWrapper2.prototype, "agWire", null);
      __decorate$2v([
        PreDestroy
      ], GridOptionsWrapper2.prototype, "destroy", null);
      __decorate$2v([
        PostConstruct
      ], GridOptionsWrapper2.prototype, "init", null);
      GridOptionsWrapper2 = GridOptionsWrapper_1 = __decorate$2v([
        Bean("gridOptionsWrapper")
      ], GridOptionsWrapper2);
      return GridOptionsWrapper2;
    }();
    __extends$2T = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$2u = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param$7 = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    __rest = function(s, e) {
      var t = {};
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    __values$4 = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read$l = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread$f = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read$l(arguments[i]));
      return ar;
    };
    ColumnModel = function(_super) {
      __extends$2T(ColumnModel2, _super);
      function ColumnModel2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.primaryHeaderRowCount = 0;
        _this.secondaryHeaderRowCount = 0;
        _this.gridHeaderRowCount = 0;
        _this.displayedColumnsLeft = [];
        _this.displayedColumnsRight = [];
        _this.displayedColumnsCenter = [];
        _this.displayedColumns = [];
        _this.displayedColumnsAndGroupsMap = {};
        _this.viewportColumns = [];
        _this.viewportColumnsHash = "";
        _this.headerViewportColumns = [];
        _this.viewportColumnsCenter = [];
        _this.headerViewportColumnsCenter = [];
        _this.autoHeightActiveAtLeastOnce = false;
        _this.rowGroupColumns = [];
        _this.valueColumns = [];
        _this.pivotColumns = [];
        _this.ready = false;
        _this.autoGroupsNeedBuilding = false;
        _this.forceRecreateAutoGroups = false;
        _this.pivotMode = false;
        _this.bodyWidth = 0;
        _this.leftWidth = 0;
        _this.rightWidth = 0;
        _this.bodyWidthDirty = true;
        _this.flexColsCalculatedAtLestOnce = false;
        return _this;
      }
      ColumnModel2.prototype.init = function() {
        var _this = this;
        this.suppressColumnVirtualisation = this.gridOptionsWrapper.isSuppressColumnVirtualisation();
        var pivotMode = this.gridOptionsWrapper.isPivotMode();
        if (this.isPivotSettingAllowed(pivotMode)) {
          this.pivotMode = pivotMode;
        }
        this.usingTreeData = this.gridOptionsWrapper.isTreeData();
        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_GROUP_DISPLAY_TYPE, function() {
          return _this.onAutoGroupColumnDefChanged();
        });
        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_AUTO_GROUP_COLUMN_DEF, function() {
          return _this.onAutoGroupColumnDefChanged();
        });
        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_DEFAULT_COL_DEF, function() {
          return _this.onDefaultColDefChanged();
        });
      };
      ColumnModel2.prototype.onAutoGroupColumnDefChanged = function() {
        this.autoGroupsNeedBuilding = true;
        this.forceRecreateAutoGroups = true;
        this.updateGridColumns();
        this.updateDisplayedColumns("gridOptionsChanged");
      };
      ColumnModel2.prototype.onDefaultColDefChanged = function() {
        this.forceRecreateAutoGroups = true;
        this.createColumnsFromColumnDefs(true);
      };
      ColumnModel2.prototype.setColumnDefs = function(columnDefs, source) {
        if (source === void 0) {
          source = "api";
        }
        var colsPreviouslyExisted = !!this.columnDefs;
        this.columnDefs = columnDefs;
        this.createColumnsFromColumnDefs(colsPreviouslyExisted, source);
      };
      ColumnModel2.prototype.createColumnsFromColumnDefs = function(colsPreviouslyExisted, source) {
        var _this = this;
        if (source === void 0) {
          source = "api";
        }
        var raiseEventsFunc = colsPreviouslyExisted ? this.compareColumnStatesAndRaiseEvents(source) : void 0;
        this.valueCache.expire();
        this.autoGroupsNeedBuilding = true;
        var oldPrimaryColumns = this.primaryColumns;
        var oldPrimaryTree = this.primaryColumnTree;
        var balancedTreeResult = this.columnFactory.createColumnTree(this.columnDefs, true, oldPrimaryTree);
        this.primaryColumnTree = balancedTreeResult.columnTree;
        this.primaryHeaderRowCount = balancedTreeResult.treeDept + 1;
        this.primaryColumns = this.getColumnsFromTree(this.primaryColumnTree);
        this.primaryColumnsMap = {};
        this.primaryColumns.forEach(function(col) {
          return _this.primaryColumnsMap[col.getId()] = col;
        });
        this.extractRowGroupColumns(source, oldPrimaryColumns);
        this.extractPivotColumns(source, oldPrimaryColumns);
        this.extractValueColumns(source, oldPrimaryColumns);
        this.ready = true;
        var gridColsNotProcessed = this.gridColsArePrimary === void 0;
        var processGridCols = this.gridColsArePrimary || gridColsNotProcessed;
        if (processGridCols) {
          this.updateGridColumns();
          if (colsPreviouslyExisted && !this.gridOptionsWrapper.isMaintainColumnOrder()) {
            this.orderGridColumnsLikePrimary();
          }
          this.updateDisplayedColumns(source);
          this.checkViewportColumns();
        }
        this.dispatchEverythingChanged(source);
        if (raiseEventsFunc) {
          raiseEventsFunc();
        }
        this.dispatchNewColumnsLoaded();
      };
      ColumnModel2.prototype.dispatchNewColumnsLoaded = function() {
        var newColumnsLoadedEvent = {
          type: Events.EVENT_NEW_COLUMNS_LOADED
        };
        this.eventService.dispatchEvent(newColumnsLoadedEvent);
      };
      ColumnModel2.prototype.dispatchEverythingChanged = function(source) {
        if (source === void 0) {
          source = "api";
        }
        var eventEverythingChanged = {
          type: Events.EVENT_COLUMN_EVERYTHING_CHANGED,
          source
        };
        this.eventService.dispatchEvent(eventEverythingChanged);
      };
      ColumnModel2.prototype.orderGridColumnsLikePrimary = function() {
        var _this = this;
        var primaryColumns = this.primaryColumns;
        if (!primaryColumns) {
          return;
        }
        this.gridColumns.sort(function(colA, colB) {
          var primaryIndexA = primaryColumns.indexOf(colA);
          var primaryIndexB = primaryColumns.indexOf(colB);
          var indexAPresent = primaryIndexA >= 0;
          var indexBPresent = primaryIndexB >= 0;
          if (indexAPresent && indexBPresent) {
            return primaryIndexA - primaryIndexB;
          }
          if (indexAPresent) {
            return 1;
          }
          if (indexBPresent) {
            return -1;
          }
          var gridIndexA = _this.gridColumns.indexOf(colA);
          var gridIndexB = _this.gridColumns.indexOf(colB);
          return gridIndexA - gridIndexB;
        });
        this.gridColumns = this.placeLockedColumns(this.gridColumns);
      };
      ColumnModel2.prototype.getAllDisplayedAutoHeightCols = function() {
        return this.displayedAutoHeightCols;
      };
      ColumnModel2.prototype.setViewport = function() {
        if (this.gridOptionsWrapper.isEnableRtl()) {
          this.viewportLeft = this.bodyWidth - this.scrollPosition - this.scrollWidth;
          this.viewportRight = this.bodyWidth - this.scrollPosition;
        } else {
          this.viewportLeft = this.scrollPosition;
          this.viewportRight = this.scrollWidth + this.scrollPosition;
        }
      };
      ColumnModel2.prototype.getDisplayedColumnsStartingAt = function(column) {
        var currentColumn = column;
        var columns = [];
        while (currentColumn != null) {
          columns.push(currentColumn);
          currentColumn = this.getDisplayedColAfter(currentColumn);
        }
        return columns;
      };
      ColumnModel2.prototype.checkViewportColumns = function() {
        if (this.displayedColumnsCenter == null) {
          return;
        }
        var viewportColumnsChanged = this.extractViewport();
        if (!viewportColumnsChanged) {
          return;
        }
        var event = {
          type: Events.EVENT_VIRTUAL_COLUMNS_CHANGED
        };
        this.eventService.dispatchEvent(event);
      };
      ColumnModel2.prototype.setViewportPosition = function(scrollWidth, scrollPosition) {
        if (scrollWidth !== this.scrollWidth || scrollPosition !== this.scrollPosition || this.bodyWidthDirty) {
          this.scrollWidth = scrollWidth;
          this.scrollPosition = scrollPosition;
          this.bodyWidthDirty = true;
          this.setViewport();
          if (this.ready) {
            this.checkViewportColumns();
          }
        }
      };
      ColumnModel2.prototype.isPivotMode = function() {
        return this.pivotMode;
      };
      ColumnModel2.prototype.isPivotSettingAllowed = function(pivot) {
        if (pivot && this.gridOptionsWrapper.isTreeData()) {
          console.warn("AG Grid: Pivot mode not available in conjunction Tree Data i.e. 'gridOptions.treeData: true'");
          return false;
        }
        return true;
      };
      ColumnModel2.prototype.setPivotMode = function(pivotMode, source) {
        if (source === void 0) {
          source = "api";
        }
        if (pivotMode === this.pivotMode || !this.isPivotSettingAllowed(this.pivotMode)) {
          return;
        }
        this.pivotMode = pivotMode;
        this.autoGroupsNeedBuilding = true;
        this.updateGridColumns();
        this.updateDisplayedColumns(source);
        var event = {
          type: Events.EVENT_COLUMN_PIVOT_MODE_CHANGED
        };
        this.eventService.dispatchEvent(event);
      };
      ColumnModel2.prototype.getSecondaryPivotColumn = function(pivotKeys, valueColKey) {
        if (missing(this.secondaryColumns)) {
          return null;
        }
        var valueColumnToFind = this.getPrimaryColumn(valueColKey);
        var foundColumn = null;
        this.secondaryColumns.forEach(function(column) {
          var thisPivotKeys = column.getColDef().pivotKeys;
          var pivotValueColumn = column.getColDef().pivotValueColumn;
          var pivotKeyMatches = areEqual(thisPivotKeys, pivotKeys);
          var pivotValueMatches = pivotValueColumn === valueColumnToFind;
          if (pivotKeyMatches && pivotValueMatches) {
            foundColumn = column;
          }
        });
        return foundColumn;
      };
      ColumnModel2.prototype.setBeans = function(loggerFactory) {
        this.logger = loggerFactory.create("columnModel");
      };
      ColumnModel2.prototype.setFirstRightAndLastLeftPinned = function(source) {
        var lastLeft;
        var firstRight;
        if (this.gridOptionsWrapper.isEnableRtl()) {
          lastLeft = this.displayedColumnsLeft ? this.displayedColumnsLeft[0] : null;
          firstRight = this.displayedColumnsRight ? last(this.displayedColumnsRight) : null;
        } else {
          lastLeft = this.displayedColumnsLeft ? last(this.displayedColumnsLeft) : null;
          firstRight = this.displayedColumnsRight ? this.displayedColumnsRight[0] : null;
        }
        this.gridColumns.forEach(function(column) {
          column.setLastLeftPinned(column === lastLeft, source);
          column.setFirstRightPinned(column === firstRight, source);
        });
      };
      ColumnModel2.prototype.autoSizeColumns = function(params) {
        var _this = this;
        var columns = params.columns, skipHeader = params.skipHeader, skipHeaderGroups = params.skipHeaderGroups, stopAtGroup = params.stopAtGroup, _a = params.source, source = _a === void 0 ? "api" : _a;
        this.animationFrameService.flushAllFrames();
        var columnsAutosized = [];
        var changesThisTimeAround = -1;
        var shouldSkipHeader = skipHeader != null ? skipHeader : this.gridOptionsWrapper.isSkipHeaderOnAutoSize();
        var shouldSkipHeaderGroups = skipHeaderGroups != null ? skipHeaderGroups : shouldSkipHeader;
        while (changesThisTimeAround !== 0) {
          changesThisTimeAround = 0;
          this.actionOnGridColumns(columns, function(column) {
            if (columnsAutosized.indexOf(column) >= 0) {
              return false;
            }
            var preferredWidth = _this.autoWidthCalculator.getPreferredWidthForColumn(column, shouldSkipHeader);
            if (preferredWidth > 0) {
              var newWidth = _this.normaliseColumnWidth(column, preferredWidth);
              column.setActualWidth(newWidth, source);
              columnsAutosized.push(column);
              changesThisTimeAround++;
            }
            return true;
          }, source);
        }
        if (!shouldSkipHeaderGroups) {
          this.autoSizeColumnGroupsByColumns(columns, stopAtGroup);
        }
        this.fireColumnResizedEvent(columnsAutosized, true, "autosizeColumns");
      };
      ColumnModel2.prototype.fireColumnResizedEvent = function(columns, finished, source, flexColumns) {
        if (flexColumns === void 0) {
          flexColumns = null;
        }
        if (columns && columns.length) {
          var event_1 = {
            type: Events.EVENT_COLUMN_RESIZED,
            columns,
            column: columns.length === 1 ? columns[0] : null,
            flexColumns,
            finished,
            source
          };
          this.eventService.dispatchEvent(event_1);
        }
      };
      ColumnModel2.prototype.autoSizeColumn = function(key, skipHeader, source) {
        if (source === void 0) {
          source = "api";
        }
        if (key) {
          this.autoSizeColumns({ columns: [key], skipHeader, skipHeaderGroups: true, source });
        }
      };
      ColumnModel2.prototype.autoSizeColumnGroupsByColumns = function(keys2, stopAtGroup) {
        var e_1, _a, e_2, _b;
        var columnGroups = /* @__PURE__ */ new Set();
        var columns = this.getGridColumns(keys2);
        columns.forEach(function(col) {
          var parent = col.getParent();
          while (parent && parent != stopAtGroup) {
            if (!parent.isPadding()) {
              columnGroups.add(parent);
            }
            parent = parent.getParent();
          }
        });
        var headerGroupCtrl;
        var resizedColumns = [];
        try {
          for (var columnGroups_1 = __values$4(columnGroups), columnGroups_1_1 = columnGroups_1.next(); !columnGroups_1_1.done; columnGroups_1_1 = columnGroups_1.next()) {
            var columnGroup = columnGroups_1_1.value;
            try {
              for (var _c = (e_2 = void 0, __values$4(this.ctrlsService.getHeaderRowContainerCtrls())), _d = _c.next(); !_d.done; _d = _c.next()) {
                var headerContainerCtrl = _d.value;
                headerGroupCtrl = headerContainerCtrl.getHeaderCtrlForColumn(columnGroup);
                if (headerGroupCtrl) {
                  break;
                }
              }
            } catch (e_2_1) {
              e_2 = { error: e_2_1 };
            } finally {
              try {
                if (_d && !_d.done && (_b = _c.return))
                  _b.call(_c);
              } finally {
                if (e_2)
                  throw e_2.error;
              }
            }
            if (headerGroupCtrl) {
              headerGroupCtrl.resizeLeafColumnsToFit();
            }
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (columnGroups_1_1 && !columnGroups_1_1.done && (_a = columnGroups_1.return))
              _a.call(columnGroups_1);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        return resizedColumns;
      };
      ColumnModel2.prototype.autoSizeAllColumns = function(skipHeader, source) {
        if (source === void 0) {
          source = "api";
        }
        var allDisplayedColumns = this.getAllDisplayedColumns();
        this.autoSizeColumns({ columns: allDisplayedColumns, skipHeader, source });
      };
      ColumnModel2.prototype.getColumnsFromTree = function(rootColumns) {
        var result = [];
        var recursiveFindColumns = function(childColumns) {
          for (var i = 0; i < childColumns.length; i++) {
            var child = childColumns[i];
            if (child instanceof Column) {
              result.push(child);
            } else if (child instanceof ProvidedColumnGroup) {
              recursiveFindColumns(child.getChildren());
            }
          }
        };
        recursiveFindColumns(rootColumns);
        return result;
      };
      ColumnModel2.prototype.getAllDisplayedTrees = function() {
        if (this.displayedTreeLeft && this.displayedTreeRight && this.displayedTreeCentre) {
          return this.displayedTreeLeft.concat(this.displayedTreeCentre).concat(this.displayedTreeRight);
        }
        return null;
      };
      ColumnModel2.prototype.getPrimaryColumnTree = function() {
        return this.primaryColumnTree;
      };
      ColumnModel2.prototype.getHeaderRowCount = function() {
        return this.gridHeaderRowCount;
      };
      ColumnModel2.prototype.getDisplayedTreeLeft = function() {
        return this.displayedTreeLeft;
      };
      ColumnModel2.prototype.getDisplayedTreeRight = function() {
        return this.displayedTreeRight;
      };
      ColumnModel2.prototype.getDisplayedTreeCentre = function() {
        return this.displayedTreeCentre;
      };
      ColumnModel2.prototype.isColumnDisplayed = function(column) {
        return this.getAllDisplayedColumns().indexOf(column) >= 0;
      };
      ColumnModel2.prototype.getAllDisplayedColumns = function() {
        return this.displayedColumns;
      };
      ColumnModel2.prototype.getViewportColumns = function() {
        return this.viewportColumns;
      };
      ColumnModel2.prototype.getDisplayedLeftColumnsForRow = function(rowNode) {
        if (!this.colSpanActive) {
          return this.displayedColumnsLeft;
        }
        return this.getDisplayedColumnsForRow(rowNode, this.displayedColumnsLeft);
      };
      ColumnModel2.prototype.getDisplayedRightColumnsForRow = function(rowNode) {
        if (!this.colSpanActive) {
          return this.displayedColumnsRight;
        }
        return this.getDisplayedColumnsForRow(rowNode, this.displayedColumnsRight);
      };
      ColumnModel2.prototype.getDisplayedColumnsForRow = function(rowNode, displayedColumns, filterCallback, emptySpaceBeforeColumn) {
        var result = [];
        var lastConsideredCol = null;
        var _loop_1 = function(i2) {
          var col = displayedColumns[i2];
          var maxAllowedColSpan = displayedColumns.length - i2;
          var colSpan = Math.min(col.getColSpan(rowNode), maxAllowedColSpan);
          var columnsToCheckFilter = [col];
          if (colSpan > 1) {
            var colsToRemove = colSpan - 1;
            for (var j = 1; j <= colsToRemove; j++) {
              columnsToCheckFilter.push(displayedColumns[i2 + j]);
            }
            i2 += colsToRemove;
          }
          var filterPasses;
          if (filterCallback) {
            filterPasses = false;
            columnsToCheckFilter.forEach(function(colForFilter) {
              if (filterCallback(colForFilter)) {
                filterPasses = true;
              }
            });
          } else {
            filterPasses = true;
          }
          if (filterPasses) {
            if (result.length === 0 && lastConsideredCol) {
              var gapBeforeColumn = emptySpaceBeforeColumn ? emptySpaceBeforeColumn(col) : false;
              if (gapBeforeColumn) {
                result.push(lastConsideredCol);
              }
            }
            result.push(col);
          }
          lastConsideredCol = col;
          out_i_1 = i2;
        };
        var out_i_1;
        for (var i = 0; i < displayedColumns.length; i++) {
          _loop_1(i);
          i = out_i_1;
        }
        return result;
      };
      ColumnModel2.prototype.getViewportCenterColumnsForRow = function(rowNode) {
        var _this = this;
        if (!this.colSpanActive) {
          return this.viewportColumnsCenter;
        }
        var emptySpaceBeforeColumn = function(col) {
          var left = col.getLeft();
          return exists(left) && left > _this.viewportLeft;
        };
        var filterCallback = this.suppressColumnVirtualisation ? null : this.isColumnInRowViewport.bind(this);
        return this.getDisplayedColumnsForRow(rowNode, this.displayedColumnsCenter, filterCallback, emptySpaceBeforeColumn);
      };
      ColumnModel2.prototype.getAriaColumnIndex = function(col) {
        return this.getAllGridColumns().indexOf(col) + 1;
      };
      ColumnModel2.prototype.isColumnInHeaderViewport = function(col) {
        if (col.isAutoHeaderHeight()) {
          return true;
        }
        return this.isColumnInRowViewport(col);
      };
      ColumnModel2.prototype.isColumnInRowViewport = function(col) {
        if (col.isAutoHeight()) {
          return true;
        }
        var columnLeft = col.getLeft() || 0;
        var columnRight = columnLeft + col.getActualWidth();
        var leftBounds = this.viewportLeft - 200;
        var rightBounds = this.viewportRight + 200;
        var columnToMuchLeft = columnLeft < leftBounds && columnRight < leftBounds;
        var columnToMuchRight = columnLeft > rightBounds && columnRight > rightBounds;
        return !columnToMuchLeft && !columnToMuchRight;
      };
      ColumnModel2.prototype.getDisplayedColumnsLeftWidth = function() {
        return this.getWidthOfColsInList(this.displayedColumnsLeft);
      };
      ColumnModel2.prototype.getDisplayedColumnsRightWidth = function() {
        return this.getWidthOfColsInList(this.displayedColumnsRight);
      };
      ColumnModel2.prototype.updatePrimaryColumnList = function(keys2, masterList, actionIsAdd, columnCallback, eventType, source) {
        var _this = this;
        if (source === void 0) {
          source = "api";
        }
        if (!keys2 || missingOrEmpty(keys2)) {
          return;
        }
        var atLeastOne = false;
        keys2.forEach(function(key) {
          var columnToAdd = _this.getPrimaryColumn(key);
          if (!columnToAdd) {
            return;
          }
          if (actionIsAdd) {
            if (masterList.indexOf(columnToAdd) >= 0) {
              return;
            }
            masterList.push(columnToAdd);
          } else {
            if (masterList.indexOf(columnToAdd) < 0) {
              return;
            }
            removeFromArray(masterList, columnToAdd);
          }
          columnCallback(columnToAdd);
          atLeastOne = true;
        });
        if (!atLeastOne) {
          return;
        }
        if (this.autoGroupsNeedBuilding) {
          this.updateGridColumns();
        }
        this.updateDisplayedColumns(source);
        var event = {
          type: eventType,
          columns: masterList,
          column: masterList.length === 1 ? masterList[0] : null,
          source
        };
        this.eventService.dispatchEvent(event);
      };
      ColumnModel2.prototype.setRowGroupColumns = function(colKeys, source) {
        if (source === void 0) {
          source = "api";
        }
        this.autoGroupsNeedBuilding = true;
        this.setPrimaryColumnList(colKeys, this.rowGroupColumns, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.setRowGroupActive.bind(this), source);
      };
      ColumnModel2.prototype.setRowGroupActive = function(active, column, source) {
        if (active === column.isRowGroupActive()) {
          return;
        }
        column.setRowGroupActive(active, source);
        if (active && !this.gridOptionsWrapper.isSuppressRowGroupHidesColumns()) {
          this.setColumnVisible(column, false, source);
        }
        if (!active && !this.gridOptionsWrapper.isSuppressMakeColumnVisibleAfterUnGroup()) {
          this.setColumnVisible(column, true, source);
        }
      };
      ColumnModel2.prototype.addRowGroupColumn = function(key, source) {
        if (source === void 0) {
          source = "api";
        }
        if (key) {
          this.addRowGroupColumns([key], source);
        }
      };
      ColumnModel2.prototype.addRowGroupColumns = function(keys2, source) {
        if (source === void 0) {
          source = "api";
        }
        this.autoGroupsNeedBuilding = true;
        this.updatePrimaryColumnList(keys2, this.rowGroupColumns, true, this.setRowGroupActive.bind(this, true), Events.EVENT_COLUMN_ROW_GROUP_CHANGED, source);
      };
      ColumnModel2.prototype.removeRowGroupColumns = function(keys2, source) {
        if (source === void 0) {
          source = "api";
        }
        this.autoGroupsNeedBuilding = true;
        this.updatePrimaryColumnList(keys2, this.rowGroupColumns, false, this.setRowGroupActive.bind(this, false), Events.EVENT_COLUMN_ROW_GROUP_CHANGED, source);
      };
      ColumnModel2.prototype.removeRowGroupColumn = function(key, source) {
        if (source === void 0) {
          source = "api";
        }
        if (key) {
          this.removeRowGroupColumns([key], source);
        }
      };
      ColumnModel2.prototype.addPivotColumns = function(keys2, source) {
        if (source === void 0) {
          source = "api";
        }
        this.updatePrimaryColumnList(keys2, this.pivotColumns, true, function(column) {
          return column.setPivotActive(true, source);
        }, Events.EVENT_COLUMN_PIVOT_CHANGED, source);
      };
      ColumnModel2.prototype.setPivotColumns = function(colKeys, source) {
        if (source === void 0) {
          source = "api";
        }
        this.setPrimaryColumnList(colKeys, this.pivotColumns, Events.EVENT_COLUMN_PIVOT_CHANGED, function(added, column) {
          column.setPivotActive(added, source);
        }, source);
      };
      ColumnModel2.prototype.addPivotColumn = function(key, source) {
        if (source === void 0) {
          source = "api";
        }
        this.addPivotColumns([key], source);
      };
      ColumnModel2.prototype.removePivotColumns = function(keys2, source) {
        if (source === void 0) {
          source = "api";
        }
        this.updatePrimaryColumnList(keys2, this.pivotColumns, false, function(column) {
          return column.setPivotActive(false, source);
        }, Events.EVENT_COLUMN_PIVOT_CHANGED, source);
      };
      ColumnModel2.prototype.removePivotColumn = function(key, source) {
        if (source === void 0) {
          source = "api";
        }
        this.removePivotColumns([key], source);
      };
      ColumnModel2.prototype.setPrimaryColumnList = function(colKeys, masterList, eventName, columnCallback, source) {
        var _this = this;
        masterList.length = 0;
        if (exists(colKeys)) {
          colKeys.forEach(function(key) {
            var column = _this.getPrimaryColumn(key);
            if (column) {
              masterList.push(column);
            }
          });
        }
        (this.primaryColumns || []).forEach(function(column) {
          var added = masterList.indexOf(column) >= 0;
          columnCallback(added, column);
        });
        if (this.autoGroupsNeedBuilding) {
          this.updateGridColumns();
        }
        this.updateDisplayedColumns(source);
        this.fireColumnEvent(eventName, masterList, source);
      };
      ColumnModel2.prototype.setValueColumns = function(colKeys, source) {
        if (source === void 0) {
          source = "api";
        }
        this.setPrimaryColumnList(colKeys, this.valueColumns, Events.EVENT_COLUMN_VALUE_CHANGED, this.setValueActive.bind(this), source);
      };
      ColumnModel2.prototype.setValueActive = function(active, column, source) {
        if (active === column.isValueActive()) {
          return;
        }
        column.setValueActive(active, source);
        if (active && !column.getAggFunc()) {
          var initialAggFunc = this.aggFuncService.getDefaultAggFunc(column);
          column.setAggFunc(initialAggFunc);
        }
      };
      ColumnModel2.prototype.addValueColumns = function(keys2, source) {
        if (source === void 0) {
          source = "api";
        }
        this.updatePrimaryColumnList(keys2, this.valueColumns, true, this.setValueActive.bind(this, true), Events.EVENT_COLUMN_VALUE_CHANGED, source);
      };
      ColumnModel2.prototype.addValueColumn = function(colKey, source) {
        if (source === void 0) {
          source = "api";
        }
        if (colKey) {
          this.addValueColumns([colKey], source);
        }
      };
      ColumnModel2.prototype.removeValueColumn = function(colKey, source) {
        if (source === void 0) {
          source = "api";
        }
        this.removeValueColumns([colKey], source);
      };
      ColumnModel2.prototype.removeValueColumns = function(keys2, source) {
        if (source === void 0) {
          source = "api";
        }
        this.updatePrimaryColumnList(keys2, this.valueColumns, false, this.setValueActive.bind(this, false), Events.EVENT_COLUMN_VALUE_CHANGED, source);
      };
      ColumnModel2.prototype.normaliseColumnWidth = function(column, newWidth) {
        var minWidth = column.getMinWidth();
        if (exists(minWidth) && newWidth < minWidth) {
          newWidth = minWidth;
        }
        var maxWidth = column.getMaxWidth();
        if (exists(maxWidth) && column.isGreaterThanMax(newWidth)) {
          newWidth = maxWidth;
        }
        return newWidth;
      };
      ColumnModel2.prototype.getPrimaryOrGridColumn = function(key) {
        var column = this.getPrimaryColumn(key);
        return column || this.getGridColumn(key);
      };
      ColumnModel2.prototype.setColumnWidths = function(columnWidths, shiftKey, finished, source) {
        var _this = this;
        if (source === void 0) {
          source = "api";
        }
        var sets = [];
        columnWidths.forEach(function(columnWidth) {
          var col = _this.getPrimaryOrGridColumn(columnWidth.key);
          if (!col) {
            return;
          }
          sets.push({
            width: columnWidth.newWidth,
            ratios: [1],
            columns: [col]
          });
          var defaultIsShift = _this.gridOptionsWrapper.getColResizeDefault() === "shift";
          if (defaultIsShift) {
            shiftKey = !shiftKey;
          }
          if (shiftKey) {
            var otherCol = _this.getDisplayedColAfter(col);
            if (!otherCol) {
              return;
            }
            var widthDiff = col.getActualWidth() - columnWidth.newWidth;
            var otherColWidth = otherCol.getActualWidth() + widthDiff;
            sets.push({
              width: otherColWidth,
              ratios: [1],
              columns: [otherCol]
            });
          }
        });
        if (sets.length === 0) {
          return;
        }
        this.resizeColumnSets({
          resizeSets: sets,
          finished,
          source
        });
      };
      ColumnModel2.prototype.checkMinAndMaxWidthsForSet = function(columnResizeSet) {
        var columns = columnResizeSet.columns, width = columnResizeSet.width;
        var minWidthAccumulated = 0;
        var maxWidthAccumulated = 0;
        var maxWidthActive = true;
        columns.forEach(function(col) {
          var minWidth = col.getMinWidth();
          minWidthAccumulated += minWidth || 0;
          var maxWidth = col.getMaxWidth();
          if (exists(maxWidth) && maxWidth > 0) {
            maxWidthAccumulated += maxWidth;
          } else {
            maxWidthActive = false;
          }
        });
        var minWidthPasses = width >= minWidthAccumulated;
        var maxWidthPasses = !maxWidthActive || width <= maxWidthAccumulated;
        return minWidthPasses && maxWidthPasses;
      };
      ColumnModel2.prototype.resizeColumnSets = function(params) {
        var _this = this;
        var resizeSets = params.resizeSets, finished = params.finished, source = params.source;
        var passMinMaxCheck = !resizeSets || resizeSets.every(function(columnResizeSet) {
          return _this.checkMinAndMaxWidthsForSet(columnResizeSet);
        });
        if (!passMinMaxCheck) {
          if (finished) {
            var columns = resizeSets && resizeSets.length > 0 ? resizeSets[0].columns : null;
            this.fireColumnResizedEvent(columns, finished, source);
          }
          return;
        }
        var changedCols = [];
        var allResizedCols = [];
        resizeSets.forEach(function(set2) {
          var width = set2.width, columns2 = set2.columns, ratios = set2.ratios;
          var newWidths = {};
          var finishedCols = {};
          columns2.forEach(function(col) {
            return allResizedCols.push(col);
          });
          var finishedColsGrew = true;
          var loopCount = 0;
          var _loop_2 = function() {
            loopCount++;
            if (loopCount > 1e3) {
              console.error("AG Grid: infinite loop in resizeColumnSets");
              return "break";
            }
            finishedColsGrew = false;
            var subsetCols = [];
            var subsetRatioTotal = 0;
            var pixelsToDistribute = width;
            columns2.forEach(function(col, index) {
              var thisColFinished = finishedCols[col.getId()];
              if (thisColFinished) {
                pixelsToDistribute -= newWidths[col.getId()];
              } else {
                subsetCols.push(col);
                var ratioThisCol = ratios[index];
                subsetRatioTotal += ratioThisCol;
              }
            });
            var ratioScale = 1 / subsetRatioTotal;
            subsetCols.forEach(function(col, index) {
              var lastCol = index === subsetCols.length - 1;
              var colNewWidth;
              if (lastCol) {
                colNewWidth = pixelsToDistribute;
              } else {
                colNewWidth = Math.round(ratios[index] * width * ratioScale);
                pixelsToDistribute -= colNewWidth;
              }
              var minWidth = col.getMinWidth();
              var maxWidth = col.getMaxWidth();
              if (exists(minWidth) && colNewWidth < minWidth) {
                colNewWidth = minWidth;
                finishedCols[col.getId()] = true;
                finishedColsGrew = true;
              } else if (exists(maxWidth) && maxWidth > 0 && colNewWidth > maxWidth) {
                colNewWidth = maxWidth;
                finishedCols[col.getId()] = true;
                finishedColsGrew = true;
              }
              newWidths[col.getId()] = colNewWidth;
            });
          };
          while (finishedColsGrew) {
            var state_1 = _loop_2();
            if (state_1 === "break")
              break;
          }
          columns2.forEach(function(col) {
            var newWidth = newWidths[col.getId()];
            var actualWidth = col.getActualWidth();
            if (actualWidth !== newWidth) {
              col.setActualWidth(newWidth, source);
              changedCols.push(col);
            }
          });
        });
        var atLeastOneColChanged = changedCols.length > 0;
        var flexedCols = [];
        if (atLeastOneColChanged) {
          flexedCols = this.refreshFlexedColumns({ resizingCols: allResizedCols, skipSetLeft: true });
          this.setLeftValues(source);
          this.updateBodyWidths();
          this.checkViewportColumns();
        }
        var colsForEvent = allResizedCols.concat(flexedCols);
        if (atLeastOneColChanged || finished) {
          this.fireColumnResizedEvent(colsForEvent, finished, source, flexedCols);
        }
      };
      ColumnModel2.prototype.setColumnAggFunc = function(key, aggFunc, source) {
        if (source === void 0) {
          source = "api";
        }
        if (!key) {
          return;
        }
        var column = this.getPrimaryColumn(key);
        if (!column) {
          return;
        }
        column.setAggFunc(aggFunc);
        this.fireColumnEvent(Events.EVENT_COLUMN_VALUE_CHANGED, [column], source);
      };
      ColumnModel2.prototype.fireColumnEvent = function(type, columns, source) {
        var event = {
          type,
          columns,
          column: columns && columns.length == 1 ? columns[0] : null,
          source
        };
        this.eventService.dispatchEvent(event);
      };
      ColumnModel2.prototype.moveRowGroupColumn = function(fromIndex, toIndex, source) {
        if (source === void 0) {
          source = "api";
        }
        var column = this.rowGroupColumns[fromIndex];
        this.rowGroupColumns.splice(fromIndex, 1);
        this.rowGroupColumns.splice(toIndex, 0, column);
        var event = {
          type: Events.EVENT_COLUMN_ROW_GROUP_CHANGED,
          columns: this.rowGroupColumns,
          column: this.rowGroupColumns.length === 1 ? this.rowGroupColumns[0] : null,
          source
        };
        this.eventService.dispatchEvent(event);
      };
      ColumnModel2.prototype.moveColumns = function(columnsToMoveKeys, toIndex, source) {
        if (source === void 0) {
          source = "api";
        }
        this.columnAnimationService.start();
        if (toIndex > this.gridColumns.length - columnsToMoveKeys.length) {
          console.warn("AG Grid: tried to insert columns in invalid location, toIndex = " + toIndex);
          console.warn("AG Grid: remember that you should not count the moving columns when calculating the new index");
          return;
        }
        var columnsToMove = this.getGridColumns(columnsToMoveKeys);
        var failedRules = !this.doesMovePassRules(columnsToMove, toIndex);
        if (failedRules) {
          return;
        }
        moveInArray(this.gridColumns, columnsToMove, toIndex);
        this.updateDisplayedColumns(source);
        var event = {
          type: Events.EVENT_COLUMN_MOVED,
          columns: columnsToMove,
          column: columnsToMove.length === 1 ? columnsToMove[0] : null,
          toIndex,
          source
        };
        this.eventService.dispatchEvent(event);
        this.columnAnimationService.finish();
      };
      ColumnModel2.prototype.doesMovePassRules = function(columnsToMove, toIndex) {
        var proposedColumnOrder = this.getProposedColumnOrder(columnsToMove, toIndex);
        return this.doesOrderPassRules(proposedColumnOrder);
      };
      ColumnModel2.prototype.doesOrderPassRules = function(gridOrder) {
        if (!this.doesMovePassMarryChildren(gridOrder)) {
          return false;
        }
        if (!this.doesMovePassLockedPositions(gridOrder)) {
          return false;
        }
        return true;
      };
      ColumnModel2.prototype.getProposedColumnOrder = function(columnsToMove, toIndex) {
        var proposedColumnOrder = this.gridColumns.slice();
        moveInArray(proposedColumnOrder, columnsToMove, toIndex);
        return proposedColumnOrder;
      };
      ColumnModel2.prototype.sortColumnsLikeGridColumns = function(cols) {
        var _this = this;
        if (!cols || cols.length <= 1) {
          return;
        }
        var notAllColsInGridColumns = cols.filter(function(c) {
          return _this.gridColumns.indexOf(c) < 0;
        }).length > 0;
        if (notAllColsInGridColumns) {
          return;
        }
        cols.sort(function(a, b) {
          var indexA = _this.gridColumns.indexOf(a);
          var indexB = _this.gridColumns.indexOf(b);
          return indexA - indexB;
        });
      };
      ColumnModel2.prototype.doesMovePassLockedPositions = function(proposedColumnOrder) {
        var lastPlacement = 0;
        var rulePassed = true;
        var lockPositionToPlacement = function(position) {
          if (!position) {
            return 1;
          }
          if (position === true) {
            return 0;
          }
          return position === "left" ? 0 : 2;
        };
        proposedColumnOrder.forEach(function(col) {
          var placement = lockPositionToPlacement(col.getColDef().lockPosition);
          if (placement < lastPlacement) {
            rulePassed = false;
          }
          lastPlacement = placement;
        });
        return rulePassed;
      };
      ColumnModel2.prototype.doesMovePassMarryChildren = function(allColumnsCopy) {
        var rulePassed = true;
        this.columnUtils.depthFirstOriginalTreeSearch(null, this.gridBalancedTree, function(child) {
          if (!(child instanceof ProvidedColumnGroup)) {
            return;
          }
          var columnGroup = child;
          var colGroupDef = columnGroup.getColGroupDef();
          var marryChildren = colGroupDef && colGroupDef.marryChildren;
          if (!marryChildren) {
            return;
          }
          var newIndexes = [];
          columnGroup.getLeafColumns().forEach(function(col) {
            var newColIndex = allColumnsCopy.indexOf(col);
            newIndexes.push(newColIndex);
          });
          var maxIndex = Math.max.apply(Math, newIndexes);
          var minIndex = Math.min.apply(Math, newIndexes);
          var spread = maxIndex - minIndex;
          var maxSpread = columnGroup.getLeafColumns().length - 1;
          if (spread > maxSpread) {
            rulePassed = false;
          }
        });
        return rulePassed;
      };
      ColumnModel2.prototype.moveColumn = function(key, toIndex, source) {
        if (source === void 0) {
          source = "api";
        }
        this.moveColumns([key], toIndex, source);
      };
      ColumnModel2.prototype.moveColumnByIndex = function(fromIndex, toIndex, source) {
        if (source === void 0) {
          source = "api";
        }
        var column = this.gridColumns[fromIndex];
        this.moveColumn(column, toIndex, source);
      };
      ColumnModel2.prototype.getColumnDefs = function() {
        var _this = this;
        if (!this.primaryColumns) {
          return;
        }
        var cols = this.primaryColumns.slice();
        if (this.gridColsArePrimary) {
          cols.sort(function(a, b) {
            return _this.gridColumns.indexOf(a) - _this.gridColumns.indexOf(b);
          });
        } else if (this.lastPrimaryOrder) {
          cols.sort(function(a, b) {
            return _this.lastPrimaryOrder.indexOf(a) - _this.lastPrimaryOrder.indexOf(b);
          });
        }
        return this.columnDefFactory.buildColumnDefs(cols, this.rowGroupColumns, this.pivotColumns);
      };
      ColumnModel2.prototype.getBodyContainerWidth = function() {
        return this.bodyWidth;
      };
      ColumnModel2.prototype.getContainerWidth = function(pinned) {
        switch (pinned) {
          case Constants.PINNED_LEFT:
            return this.leftWidth;
          case Constants.PINNED_RIGHT:
            return this.rightWidth;
          default:
            return this.bodyWidth;
        }
      };
      ColumnModel2.prototype.updateBodyWidths = function() {
        var newBodyWidth = this.getWidthOfColsInList(this.displayedColumnsCenter);
        var newLeftWidth = this.getWidthOfColsInList(this.displayedColumnsLeft);
        var newRightWidth = this.getWidthOfColsInList(this.displayedColumnsRight);
        this.bodyWidthDirty = this.bodyWidth !== newBodyWidth;
        var atLeastOneChanged = this.bodyWidth !== newBodyWidth || this.leftWidth !== newLeftWidth || this.rightWidth !== newRightWidth;
        if (atLeastOneChanged) {
          this.bodyWidth = newBodyWidth;
          this.leftWidth = newLeftWidth;
          this.rightWidth = newRightWidth;
          var event_2 = {
            type: Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED
          };
          this.eventService.dispatchEvent(event_2);
        }
      };
      ColumnModel2.prototype.getValueColumns = function() {
        return this.valueColumns ? this.valueColumns : [];
      };
      ColumnModel2.prototype.getPivotColumns = function() {
        return this.pivotColumns ? this.pivotColumns : [];
      };
      ColumnModel2.prototype.isPivotActive = function() {
        return this.pivotColumns && this.pivotColumns.length > 0 && this.pivotMode;
      };
      ColumnModel2.prototype.getRowGroupColumns = function() {
        return this.rowGroupColumns ? this.rowGroupColumns : [];
      };
      ColumnModel2.prototype.getDisplayedCenterColumns = function() {
        return this.displayedColumnsCenter;
      };
      ColumnModel2.prototype.getDisplayedLeftColumns = function() {
        return this.displayedColumnsLeft;
      };
      ColumnModel2.prototype.getDisplayedRightColumns = function() {
        return this.displayedColumnsRight;
      };
      ColumnModel2.prototype.getDisplayedColumns = function(type) {
        switch (type) {
          case Constants.PINNED_LEFT:
            return this.getDisplayedLeftColumns();
          case Constants.PINNED_RIGHT:
            return this.getDisplayedRightColumns();
          default:
            return this.getDisplayedCenterColumns();
        }
      };
      ColumnModel2.prototype.getAllPrimaryColumns = function() {
        return this.primaryColumns ? this.primaryColumns.slice() : null;
      };
      ColumnModel2.prototype.getSecondaryColumns = function() {
        return this.secondaryColumns ? this.secondaryColumns.slice() : null;
      };
      ColumnModel2.prototype.getAllColumnsForQuickFilter = function() {
        return this.columnsForQuickFilter;
      };
      ColumnModel2.prototype.getAllGridColumns = function() {
        return this.gridColumns;
      };
      ColumnModel2.prototype.isEmpty = function() {
        return missingOrEmpty(this.gridColumns);
      };
      ColumnModel2.prototype.isRowGroupEmpty = function() {
        return missingOrEmpty(this.rowGroupColumns);
      };
      ColumnModel2.prototype.setColumnVisible = function(key, visible, source) {
        if (source === void 0) {
          source = "api";
        }
        this.setColumnsVisible([key], visible, source);
      };
      ColumnModel2.prototype.setColumnsVisible = function(keys2, visible, source) {
        if (visible === void 0) {
          visible = false;
        }
        if (source === void 0) {
          source = "api";
        }
        this.applyColumnState({
          state: keys2.map(function(key) {
            return {
              colId: typeof key === "string" ? key : key.getColId(),
              hide: !visible
            };
          })
        }, source);
      };
      ColumnModel2.prototype.setColumnPinned = function(key, pinned, source) {
        if (source === void 0) {
          source = "api";
        }
        if (key) {
          this.setColumnsPinned([key], pinned, source);
        }
      };
      ColumnModel2.prototype.setColumnsPinned = function(keys2, pinned, source) {
        if (source === void 0) {
          source = "api";
        }
        if (this.gridOptionsWrapper.getDomLayout() === "print") {
          console.warn("Changing the column pinning status is not allowed with domLayout='print'");
          return;
        }
        this.columnAnimationService.start();
        var actualPinned;
        if (pinned === true || pinned === Constants.PINNED_LEFT) {
          actualPinned = Constants.PINNED_LEFT;
        } else if (pinned === Constants.PINNED_RIGHT) {
          actualPinned = Constants.PINNED_RIGHT;
        } else {
          actualPinned = null;
        }
        this.actionOnGridColumns(keys2, function(col) {
          if (col.getPinned() !== actualPinned) {
            col.setPinned(actualPinned);
            return true;
          }
          return false;
        }, source, function() {
          var event = {
            type: Events.EVENT_COLUMN_PINNED,
            pinned: actualPinned,
            column: null,
            columns: null,
            source
          };
          return event;
        });
        this.columnAnimationService.finish();
      };
      ColumnModel2.prototype.actionOnGridColumns = function(keys2, action, source, createEvent) {
        var _this = this;
        if (missingOrEmpty(keys2)) {
          return;
        }
        var updatedColumns = [];
        keys2.forEach(function(key) {
          var column = _this.getGridColumn(key);
          if (!column) {
            return;
          }
          var resultOfAction = action(column);
          if (resultOfAction !== false) {
            updatedColumns.push(column);
          }
        });
        if (!updatedColumns.length) {
          return;
        }
        this.updateDisplayedColumns(source);
        if (exists(createEvent) && createEvent) {
          var event_3 = createEvent();
          event_3.columns = updatedColumns;
          event_3.column = updatedColumns.length === 1 ? updatedColumns[0] : null;
          this.eventService.dispatchEvent(event_3);
        }
      };
      ColumnModel2.prototype.getDisplayedColBefore = function(col) {
        var allDisplayedColumns = this.getAllDisplayedColumns();
        var oldIndex = allDisplayedColumns.indexOf(col);
        if (oldIndex > 0) {
          return allDisplayedColumns[oldIndex - 1];
        }
        return null;
      };
      ColumnModel2.prototype.getDisplayedColAfter = function(col) {
        var allDisplayedColumns = this.getAllDisplayedColumns();
        var oldIndex = allDisplayedColumns.indexOf(col);
        if (oldIndex < allDisplayedColumns.length - 1) {
          return allDisplayedColumns[oldIndex + 1];
        }
        return null;
      };
      ColumnModel2.prototype.getDisplayedGroupAfter = function(columnGroup) {
        return this.getDisplayedGroupAtDirection(columnGroup, "After");
      };
      ColumnModel2.prototype.getDisplayedGroupBefore = function(columnGroup) {
        return this.getDisplayedGroupAtDirection(columnGroup, "Before");
      };
      ColumnModel2.prototype.getDisplayedGroupAtDirection = function(columnGroup, direction) {
        var requiredLevel = columnGroup.getProvidedColumnGroup().getLevel() + columnGroup.getPaddingLevel();
        var colGroupLeafColumns = columnGroup.getDisplayedLeafColumns();
        var col = direction === "After" ? last(colGroupLeafColumns) : colGroupLeafColumns[0];
        var getDisplayColMethod = "getDisplayedCol" + direction;
        while (true) {
          var column = this[getDisplayColMethod](col);
          if (!column) {
            return null;
          }
          var groupPointer = this.getColumnGroupAtLevel(column, requiredLevel);
          if (groupPointer !== columnGroup) {
            return groupPointer;
          }
        }
      };
      ColumnModel2.prototype.getColumnGroupAtLevel = function(column, level) {
        var groupPointer = column.getParent();
        var originalGroupLevel;
        var groupPointerLevel;
        while (true) {
          var groupPointerProvidedColumnGroup = groupPointer.getProvidedColumnGroup();
          originalGroupLevel = groupPointerProvidedColumnGroup.getLevel();
          groupPointerLevel = groupPointer.getPaddingLevel();
          if (originalGroupLevel + groupPointerLevel <= level) {
            break;
          }
          groupPointer = groupPointer.getParent();
        }
        return groupPointer;
      };
      ColumnModel2.prototype.isPinningLeft = function() {
        return this.displayedColumnsLeft.length > 0;
      };
      ColumnModel2.prototype.isPinningRight = function() {
        return this.displayedColumnsRight.length > 0;
      };
      ColumnModel2.prototype.getPrimaryAndSecondaryAndAutoColumns = function() {
        var _a;
        return (_a = []).concat.apply(_a, __spread$f([
          this.primaryColumns || [],
          this.groupAutoColumns || [],
          this.secondaryColumns || []
        ]));
      };
      ColumnModel2.prototype.getPrimaryAndAutoGroupCols = function() {
        var _a;
        return (_a = []).concat.apply(_a, __spread$f([
          this.primaryColumns || [],
          this.groupAutoColumns || []
        ]));
      };
      ColumnModel2.prototype.getPrimaryAndSecondaryColumns = function() {
        var _a;
        return (_a = []).concat.apply(_a, __spread$f([
          this.primaryColumns || [],
          this.secondaryColumns || []
        ]));
      };
      ColumnModel2.prototype.createStateItemFromColumn = function(column) {
        var rowGroupIndex = column.isRowGroupActive() ? this.rowGroupColumns.indexOf(column) : null;
        var pivotIndex = column.isPivotActive() ? this.pivotColumns.indexOf(column) : null;
        var aggFunc = column.isValueActive() ? column.getAggFunc() : null;
        var sort = column.getSort() != null ? column.getSort() : null;
        var sortIndex = column.getSortIndex() != null ? column.getSortIndex() : null;
        var flex = column.getFlex() != null && column.getFlex() > 0 ? column.getFlex() : null;
        var res = {
          colId: column.getColId(),
          width: column.getActualWidth(),
          hide: !column.isVisible(),
          pinned: column.getPinned(),
          sort,
          sortIndex,
          aggFunc,
          rowGroup: column.isRowGroupActive(),
          rowGroupIndex,
          pivot: column.isPivotActive(),
          pivotIndex,
          flex
        };
        return res;
      };
      ColumnModel2.prototype.getColumnState = function() {
        if (missing(this.primaryColumns) || !this.isAlive()) {
          return [];
        }
        var colsForState = this.getPrimaryAndSecondaryAndAutoColumns();
        var res = colsForState.map(this.createStateItemFromColumn.bind(this));
        this.orderColumnStateList(res);
        return res;
      };
      ColumnModel2.prototype.orderColumnStateList = function(columnStateList) {
        var colIdToGridIndexMap = convertToMap(this.gridColumns.map(function(col, index) {
          return [col.getColId(), index];
        }));
        columnStateList.sort(function(itemA, itemB) {
          var posA = colIdToGridIndexMap.has(itemA.colId) ? colIdToGridIndexMap.get(itemA.colId) : -1;
          var posB = colIdToGridIndexMap.has(itemB.colId) ? colIdToGridIndexMap.get(itemB.colId) : -1;
          return posA - posB;
        });
      };
      ColumnModel2.prototype.resetColumnState = function(source) {
        if (source === void 0) {
          source = "api";
        }
        var primaryColumns = this.getColumnsFromTree(this.primaryColumnTree);
        var columnStates = [];
        var letRowGroupIndex = 1e3;
        var letPivotIndex = 1e3;
        var colsToProcess = [];
        if (this.groupAutoColumns) {
          colsToProcess = colsToProcess.concat(this.groupAutoColumns);
        }
        if (primaryColumns) {
          colsToProcess = colsToProcess.concat(primaryColumns);
        }
        colsToProcess.forEach(function(column) {
          var getValueOrNull = function(a, b) {
            return a != null ? a : b != null ? b : null;
          };
          var colDef = column.getColDef();
          var sort = getValueOrNull(colDef.sort, colDef.initialSort);
          var sortIndex = getValueOrNull(colDef.sortIndex, colDef.initialSortIndex);
          var hide = getValueOrNull(colDef.hide, colDef.initialHide);
          var pinned = getValueOrNull(colDef.pinned, colDef.initialPinned);
          var width = getValueOrNull(colDef.width, colDef.initialWidth);
          var flex = getValueOrNull(colDef.flex, colDef.initialFlex);
          var rowGroupIndex = getValueOrNull(colDef.rowGroupIndex, colDef.initialRowGroupIndex);
          var rowGroup = getValueOrNull(colDef.rowGroup, colDef.initialRowGroup);
          if (rowGroupIndex == null && (rowGroup == null || rowGroup == false)) {
            rowGroupIndex = null;
            rowGroup = null;
          }
          var pivotIndex = getValueOrNull(colDef.pivotIndex, colDef.initialPivotIndex);
          var pivot = getValueOrNull(colDef.pivot, colDef.initialPivot);
          if (pivotIndex == null && (pivot == null || pivot == false)) {
            pivotIndex = null;
            pivot = null;
          }
          var aggFunc = getValueOrNull(colDef.aggFunc, colDef.initialAggFunc);
          var stateItem = {
            colId: column.getColId(),
            sort,
            sortIndex,
            hide,
            pinned,
            width,
            flex,
            rowGroup,
            rowGroupIndex,
            pivot,
            pivotIndex,
            aggFunc
          };
          if (missing(rowGroupIndex) && rowGroup) {
            stateItem.rowGroupIndex = letRowGroupIndex++;
          }
          if (missing(pivotIndex) && pivot) {
            stateItem.pivotIndex = letPivotIndex++;
          }
          columnStates.push(stateItem);
        });
        this.applyColumnState({ state: columnStates, applyOrder: true }, source);
      };
      ColumnModel2.prototype.applyColumnState = function(params, source) {
        var _this = this;
        if (missingOrEmpty(this.primaryColumns)) {
          return false;
        }
        if (params && params.state && !params.state.forEach) {
          console.warn("AG Grid: applyColumnState() - the state attribute should be an array, however an array was not found. Please provide an array of items (one for each col you want to change) for state.");
          return false;
        }
        var applyStates = function(states, existingColumns, getById) {
          var raiseEventsFunc = _this.compareColumnStatesAndRaiseEvents(source);
          _this.autoGroupsNeedBuilding = true;
          var columnsWithNoState = existingColumns.slice();
          var rowGroupIndexes = {};
          var pivotIndexes = {};
          var autoGroupColumnStates = [];
          var unmatchedAndAutoStates2 = [];
          var unmatchedCount2 = 0;
          var previousRowGroupCols = _this.rowGroupColumns.slice();
          var previousPivotCols = _this.pivotColumns.slice();
          states.forEach(function(state) {
            var colId = state.colId || "";
            var isAutoGroupColumn = colId.startsWith(Constants.GROUP_AUTO_COLUMN_ID);
            if (isAutoGroupColumn) {
              autoGroupColumnStates.push(state);
              unmatchedAndAutoStates2.push(state);
              return;
            }
            var column = getById(colId);
            if (!column) {
              unmatchedAndAutoStates2.push(state);
              unmatchedCount2 += 1;
            } else {
              _this.syncColumnWithStateItem(column, state, params.defaultState, rowGroupIndexes, pivotIndexes, false, source);
              removeFromArray(columnsWithNoState, column);
            }
          });
          var applyDefaultsFunc = function(col) {
            return _this.syncColumnWithStateItem(col, null, params.defaultState, rowGroupIndexes, pivotIndexes, false, source);
          };
          columnsWithNoState.forEach(applyDefaultsFunc);
          var comparator = function(indexes, oldList, colA, colB) {
            var indexA = indexes[colA.getId()];
            var indexB = indexes[colB.getId()];
            var aHasIndex = indexA != null;
            var bHasIndex = indexB != null;
            if (aHasIndex && bHasIndex) {
              return indexA - indexB;
            }
            if (aHasIndex) {
              return -1;
            }
            if (bHasIndex) {
              return 1;
            }
            var oldIndexA = oldList.indexOf(colA);
            var oldIndexB = oldList.indexOf(colB);
            var aHasOldIndex = oldIndexA >= 0;
            var bHasOldIndex = oldIndexB >= 0;
            if (aHasOldIndex && bHasOldIndex) {
              return oldIndexA - oldIndexB;
            }
            if (aHasOldIndex) {
              return -1;
            }
            return 1;
          };
          _this.rowGroupColumns.sort(comparator.bind(_this, rowGroupIndexes, previousRowGroupCols));
          _this.pivotColumns.sort(comparator.bind(_this, pivotIndexes, previousPivotCols));
          _this.updateGridColumns();
          var autoGroupColsCopy = _this.groupAutoColumns ? _this.groupAutoColumns.slice() : [];
          autoGroupColumnStates.forEach(function(stateItem) {
            var autoCol = _this.getAutoColumn(stateItem.colId);
            removeFromArray(autoGroupColsCopy, autoCol);
            _this.syncColumnWithStateItem(autoCol, stateItem, params.defaultState, null, null, true, source);
          });
          autoGroupColsCopy.forEach(applyDefaultsFunc);
          _this.applyOrderAfterApplyState(params);
          _this.updateDisplayedColumns(source);
          _this.dispatchEverythingChanged(source);
          raiseEventsFunc();
          return { unmatchedAndAutoStates: unmatchedAndAutoStates2, unmatchedCount: unmatchedCount2 };
        };
        this.columnAnimationService.start();
        var _a = applyStates(params.state || [], this.primaryColumns || [], function(id) {
          return _this.getPrimaryColumn(id);
        }), unmatchedAndAutoStates = _a.unmatchedAndAutoStates, unmatchedCount = _a.unmatchedCount;
        if (unmatchedAndAutoStates.length > 0 || exists(params.defaultState)) {
          unmatchedCount = applyStates(unmatchedAndAutoStates, this.secondaryColumns || [], function(id) {
            return _this.getSecondaryColumn(id);
          }).unmatchedCount;
        }
        this.columnAnimationService.finish();
        return unmatchedCount === 0;
      };
      ColumnModel2.prototype.applyOrderAfterApplyState = function(params) {
        var _this = this;
        if (!params.applyOrder || !params.state) {
          return;
        }
        var newOrder = [];
        var processedColIds = {};
        params.state.forEach(function(item) {
          if (!item.colId || processedColIds[item.colId]) {
            return;
          }
          var col = _this.gridColumnsMap[item.colId];
          if (col) {
            newOrder.push(col);
            processedColIds[item.colId] = true;
          }
        });
        var autoGroupInsertIndex = 0;
        this.gridColumns.forEach(function(col) {
          var colId = col.getColId();
          var alreadyProcessed = processedColIds[colId] != null;
          if (alreadyProcessed) {
            return;
          }
          var isAutoGroupCol = colId.startsWith(Constants.GROUP_AUTO_COLUMN_ID);
          if (isAutoGroupCol) {
            insertIntoArray(newOrder, col, autoGroupInsertIndex++);
          } else {
            newOrder.push(col);
          }
        });
        newOrder = this.placeLockedColumns(newOrder);
        if (!this.doesMovePassMarryChildren(newOrder)) {
          console.warn("AG Grid: Applying column order broke a group where columns should be married together. Applying new order has been discarded.");
          return;
        }
        this.gridColumns = newOrder;
      };
      ColumnModel2.prototype.compareColumnStatesAndRaiseEvents = function(source) {
        var _this = this;
        var startState = {
          rowGroupColumns: this.rowGroupColumns.slice(),
          pivotColumns: this.pivotColumns.slice(),
          valueColumns: this.valueColumns.slice()
        };
        var columnStateBefore = this.getColumnState();
        var columnStateBeforeMap = {};
        columnStateBefore.forEach(function(col) {
          columnStateBeforeMap[col.colId] = col;
        });
        return function() {
          if (_this.gridOptionsWrapper.isSuppressColumnStateEvents()) {
            return;
          }
          var colsForState = _this.getPrimaryAndSecondaryAndAutoColumns();
          var raiseWhenListsDifferent = function(eventType, colsBefore, colsAfter, idMapper) {
            var beforeList = colsBefore.map(idMapper);
            var afterList = colsAfter.map(idMapper);
            var unchanged = areEqual(beforeList, afterList);
            if (unchanged) {
              return;
            }
            var event = {
              type: eventType,
              columns: colsAfter,
              column: colsAfter.length === 1 ? colsAfter[0] : null,
              source
            };
            _this.eventService.dispatchEvent(event);
          };
          var getChangedColumns = function(changedPredicate) {
            var changedColumns = [];
            colsForState.forEach(function(column) {
              var colStateBefore = columnStateBeforeMap[column.getColId()];
              if (colStateBefore && changedPredicate(colStateBefore, column)) {
                changedColumns.push(column);
              }
            });
            return changedColumns;
          };
          var columnIdMapper = function(c) {
            return c.getColId();
          };
          raiseWhenListsDifferent(Events.EVENT_COLUMN_ROW_GROUP_CHANGED, startState.rowGroupColumns, _this.rowGroupColumns, columnIdMapper);
          raiseWhenListsDifferent(Events.EVENT_COLUMN_PIVOT_CHANGED, startState.pivotColumns, _this.pivotColumns, columnIdMapper);
          var valueChangePredicate = function(cs, c) {
            var oldActive = cs.aggFunc != null;
            var activeChanged = oldActive != c.isValueActive();
            var aggFuncChanged = oldActive && cs.aggFunc != c.getAggFunc();
            return activeChanged || aggFuncChanged;
          };
          var changedValues = getChangedColumns(valueChangePredicate);
          if (changedValues.length > 0) {
            _this.fireColumnEvent(Events.EVENT_COLUMN_VALUE_CHANGED, _this.valueColumns, source);
          }
          var resizeChangePredicate = function(cs, c) {
            return cs.width != c.getActualWidth();
          };
          _this.fireColumnResizedEvent(getChangedColumns(resizeChangePredicate), true, source);
          var pinnedChangePredicate = function(cs, c) {
            return cs.pinned != c.getPinned();
          };
          _this.raiseColumnPinnedEvent(getChangedColumns(pinnedChangePredicate), source);
          var visibilityChangePredicate = function(cs, c) {
            return cs.hide == c.isVisible();
          };
          _this.raiseColumnVisibleEvent(getChangedColumns(visibilityChangePredicate), source);
          var sortChangePredicate = function(cs, c) {
            return cs.sort != c.getSort() || cs.sortIndex != c.getSortIndex();
          };
          if (getChangedColumns(sortChangePredicate).length > 0) {
            _this.sortController.dispatchSortChangedEvents(source);
          }
          _this.raiseColumnMovedEvent(columnStateBefore, source);
        };
      };
      ColumnModel2.prototype.raiseColumnPinnedEvent = function(changedColumns, source) {
        if (!changedColumns.length) {
          return;
        }
        var column = changedColumns.length === 1 ? changedColumns[0] : null;
        var pinned = this.getCommonValue(changedColumns, function(col) {
          return col.getPinned();
        });
        var event = {
          type: Events.EVENT_COLUMN_PINNED,
          pinned: pinned != null ? pinned : null,
          columns: changedColumns,
          column,
          source
        };
        this.eventService.dispatchEvent(event);
      };
      ColumnModel2.prototype.getCommonValue = function(cols, valueGetter) {
        if (!cols || cols.length == 0) {
          return void 0;
        }
        var firstValue = valueGetter(cols[0]);
        for (var i = 1; i < cols.length; i++) {
          if (firstValue !== valueGetter(cols[i])) {
            return void 0;
          }
        }
        return firstValue;
      };
      ColumnModel2.prototype.raiseColumnVisibleEvent = function(changedColumns, source) {
        if (!changedColumns.length) {
          return;
        }
        var column = changedColumns.length === 1 ? changedColumns[0] : null;
        var visible = this.getCommonValue(changedColumns, function(col) {
          return col.isVisible();
        });
        var event = {
          type: Events.EVENT_COLUMN_VISIBLE,
          visible,
          columns: changedColumns,
          column,
          source
        };
        this.eventService.dispatchEvent(event);
      };
      ColumnModel2.prototype.raiseColumnMovedEvent = function(colStateBefore, source) {
        var _this = this;
        var colStateAfter = this.getColumnState();
        var colStateAfterMapped = {};
        colStateAfter.forEach(function(s) {
          return colStateAfterMapped[s.colId] = s;
        });
        var colsIntersectIds = {};
        colStateBefore.forEach(function(s) {
          if (colStateAfterMapped[s.colId]) {
            colsIntersectIds[s.colId] = true;
          }
        });
        var beforeFiltered = colStateBefore.filter(function(c) {
          return colsIntersectIds[c.colId];
        });
        var afterFiltered = colStateAfter.filter(function(c) {
          return colsIntersectIds[c.colId];
        });
        var movedColumns = [];
        afterFiltered.forEach(function(csAfter, index) {
          var csBefore = beforeFiltered && beforeFiltered[index];
          if (csBefore && csBefore.colId !== csAfter.colId) {
            var gridCol = _this.getGridColumn(csBefore.colId);
            if (gridCol) {
              movedColumns.push(gridCol);
            }
          }
        });
        if (!movedColumns.length) {
          return;
        }
        var event = {
          type: Events.EVENT_COLUMN_MOVED,
          columns: movedColumns,
          column: null,
          source
        };
        this.eventService.dispatchEvent(event);
      };
      ColumnModel2.prototype.syncColumnWithStateItem = function(column, stateItem, defaultState, rowGroupIndexes, pivotIndexes, autoCol, source) {
        if (!column) {
          return;
        }
        var getValue = function(key1, key2) {
          var obj = { value1: void 0, value2: void 0 };
          var calculated = false;
          if (stateItem) {
            if (stateItem[key1] !== void 0) {
              obj.value1 = stateItem[key1];
              calculated = true;
            }
            if (exists(key2) && stateItem[key2] !== void 0) {
              obj.value2 = stateItem[key2];
              calculated = true;
            }
          }
          if (!calculated && defaultState) {
            if (defaultState[key1] !== void 0) {
              obj.value1 = defaultState[key1];
            }
            if (exists(key2) && defaultState[key2] !== void 0) {
              obj.value2 = defaultState[key2];
            }
          }
          return obj;
        };
        var hide = getValue("hide").value1;
        if (hide !== void 0) {
          column.setVisible(!hide, source);
        }
        var pinned = getValue("pinned").value1;
        if (pinned !== void 0) {
          column.setPinned(pinned);
        }
        var minColWidth = this.columnUtils.calculateColMinWidth(column.getColDef());
        var flex = getValue("flex").value1;
        if (flex !== void 0) {
          column.setFlex(flex);
        }
        var noFlexThisCol = column.getFlex() <= 0;
        if (noFlexThisCol) {
          var width = getValue("width").value1;
          if (width != null) {
            if (minColWidth != null && width >= minColWidth) {
              column.setActualWidth(width, source);
            }
          }
        }
        var sort = getValue("sort").value1;
        if (sort !== void 0) {
          if (sort === Constants.SORT_DESC || sort === Constants.SORT_ASC) {
            column.setSort(sort, source);
          } else {
            column.setSort(void 0, source);
          }
        }
        var sortIndex = getValue("sortIndex").value1;
        if (sortIndex !== void 0) {
          column.setSortIndex(sortIndex);
        }
        if (autoCol || !column.isPrimary()) {
          return;
        }
        var aggFunc = getValue("aggFunc").value1;
        if (aggFunc !== void 0) {
          if (typeof aggFunc === "string") {
            column.setAggFunc(aggFunc);
            if (!column.isValueActive()) {
              column.setValueActive(true, source);
              this.valueColumns.push(column);
            }
          } else {
            if (exists(aggFunc)) {
              console.warn("AG Grid: stateItem.aggFunc must be a string. if using your own aggregation functions, register the functions first before using them in get/set state. This is because it is intended for the column state to be stored and retrieved as simple JSON.");
            }
            if (column.isValueActive()) {
              column.setValueActive(false, source);
              removeFromArray(this.valueColumns, column);
            }
          }
        }
        var _a = getValue("rowGroup", "rowGroupIndex"), rowGroup = _a.value1, rowGroupIndex = _a.value2;
        if (rowGroup !== void 0 || rowGroupIndex !== void 0) {
          if (typeof rowGroupIndex === "number" || rowGroup) {
            if (!column.isRowGroupActive()) {
              column.setRowGroupActive(true, source);
              this.rowGroupColumns.push(column);
            }
            if (rowGroupIndexes && typeof rowGroupIndex === "number") {
              rowGroupIndexes[column.getId()] = rowGroupIndex;
            }
          } else {
            if (column.isRowGroupActive()) {
              column.setRowGroupActive(false, source);
              removeFromArray(this.rowGroupColumns, column);
            }
          }
        }
        var _b = getValue("pivot", "pivotIndex"), pivot = _b.value1, pivotIndex = _b.value2;
        if (pivot !== void 0 || pivotIndex !== void 0) {
          if (typeof pivotIndex === "number" || pivot) {
            if (!column.isPivotActive()) {
              column.setPivotActive(true, source);
              this.pivotColumns.push(column);
            }
            if (pivotIndexes && typeof pivotIndex === "number") {
              pivotIndexes[column.getId()] = pivotIndex;
            }
          } else {
            if (column.isPivotActive()) {
              column.setPivotActive(false, source);
              removeFromArray(this.pivotColumns, column);
            }
          }
        }
      };
      ColumnModel2.prototype.getGridColumns = function(keys2) {
        return this.getColumns(keys2, this.getGridColumn.bind(this));
      };
      ColumnModel2.prototype.getColumns = function(keys2, columnLookupCallback) {
        var foundColumns = [];
        if (keys2) {
          keys2.forEach(function(key) {
            var column = columnLookupCallback(key);
            if (column) {
              foundColumns.push(column);
            }
          });
        }
        return foundColumns;
      };
      ColumnModel2.prototype.getColumnWithValidation = function(key) {
        if (key == null) {
          return null;
        }
        var column = this.getGridColumn(key);
        if (!column) {
          console.warn("AG Grid: could not find column " + key);
        }
        return column;
      };
      ColumnModel2.prototype.getPrimaryColumn = function(key) {
        if (!this.primaryColumns) {
          return null;
        }
        return this.getColumn(key, this.primaryColumns, this.primaryColumnsMap);
      };
      ColumnModel2.prototype.getGridColumn = function(key) {
        return this.getColumn(key, this.gridColumns, this.gridColumnsMap);
      };
      ColumnModel2.prototype.getSecondaryColumn = function(key) {
        if (!this.secondaryColumns) {
          return null;
        }
        return this.getColumn(key, this.secondaryColumns, this.secondaryColumnsMap);
      };
      ColumnModel2.prototype.getColumn = function(key, columnList, columnMap) {
        if (!key) {
          return null;
        }
        if (typeof key == "string" && columnMap[key]) {
          return columnMap[key];
        }
        for (var i = 0; i < columnList.length; i++) {
          if (this.columnsMatch(columnList[i], key)) {
            return columnList[i];
          }
        }
        return this.getAutoColumn(key);
      };
      ColumnModel2.prototype.getSourceColumnsForGroupColumn = function(groupCol) {
        var sourceColumnId = groupCol.getColDef().showRowGroup;
        if (!sourceColumnId) {
          return null;
        }
        if (sourceColumnId === true) {
          return this.rowGroupColumns.slice(0);
        }
        var column = this.getPrimaryColumn(sourceColumnId);
        return column ? [column] : null;
      };
      ColumnModel2.prototype.getAutoColumn = function(key) {
        var _this = this;
        if (!this.groupAutoColumns || !exists(this.groupAutoColumns) || missing(this.groupAutoColumns)) {
          return null;
        }
        return this.groupAutoColumns.find(function(groupCol) {
          return _this.columnsMatch(groupCol, key);
        }) || null;
      };
      ColumnModel2.prototype.columnsMatch = function(column, key) {
        var columnMatches = column === key;
        var colDefMatches = column.getColDef() === key;
        var idMatches = column.getColId() == key;
        return columnMatches || colDefMatches || idMatches;
      };
      ColumnModel2.prototype.getDisplayNameForColumn = function(column, location, includeAggFunc) {
        if (includeAggFunc === void 0) {
          includeAggFunc = false;
        }
        if (!column) {
          return null;
        }
        var headerName = this.getHeaderName(column.getColDef(), column, null, null, location);
        if (includeAggFunc) {
          return this.wrapHeaderNameWithAggFunc(column, headerName);
        }
        return headerName;
      };
      ColumnModel2.prototype.getDisplayNameForProvidedColumnGroup = function(columnGroup, providedColumnGroup, location) {
        var colGroupDef = providedColumnGroup ? providedColumnGroup.getColGroupDef() : null;
        if (colGroupDef) {
          return this.getHeaderName(colGroupDef, null, columnGroup, providedColumnGroup, location);
        }
        return null;
      };
      ColumnModel2.prototype.getDisplayNameForColumnGroup = function(columnGroup, location) {
        return this.getDisplayNameForProvidedColumnGroup(columnGroup, columnGroup.getProvidedColumnGroup(), location);
      };
      ColumnModel2.prototype.getHeaderName = function(colDef, column, columnGroup, providedColumnGroup, location) {
        var headerValueGetter = colDef.headerValueGetter;
        if (headerValueGetter) {
          var params = {
            colDef,
            column,
            columnGroup,
            providedColumnGroup,
            location,
            api: this.gridOptionsWrapper.getApi(),
            columnApi: this.gridOptionsWrapper.getColumnApi(),
            context: this.gridOptionsWrapper.getContext()
          };
          if (typeof headerValueGetter === "function") {
            return headerValueGetter(params);
          } else if (typeof headerValueGetter === "string") {
            return this.expressionService.evaluate(headerValueGetter, params);
          }
          console.warn("ag-grid: headerValueGetter must be a function or a string");
          return "";
        } else if (colDef.headerName != null) {
          return colDef.headerName;
        } else if (colDef.field) {
          return camelCaseToHumanText(colDef.field);
        }
        return "";
      };
      ColumnModel2.prototype.wrapHeaderNameWithAggFunc = function(column, headerName) {
        if (this.gridOptionsWrapper.isSuppressAggFuncInHeader()) {
          return headerName;
        }
        var pivotValueColumn = column.getColDef().pivotValueColumn;
        var pivotActiveOnThisColumn = exists(pivotValueColumn);
        var aggFunc = null;
        var aggFuncFound;
        if (pivotActiveOnThisColumn) {
          var isCollapsedHeaderEnabled = this.gridOptionsWrapper.isRemovePivotHeaderRowWhenSingleValueColumn() && this.valueColumns.length === 1;
          var isTotalColumn = column.getColDef().pivotTotalColumnIds !== void 0;
          if (isCollapsedHeaderEnabled && !isTotalColumn) {
            return headerName;
          }
          aggFunc = pivotValueColumn ? pivotValueColumn.getAggFunc() : null;
          aggFuncFound = true;
        } else {
          var measureActive = column.isValueActive();
          var aggregationPresent = this.pivotMode || !this.isRowGroupEmpty();
          if (measureActive && aggregationPresent) {
            aggFunc = column.getAggFunc();
            aggFuncFound = true;
          } else {
            aggFuncFound = false;
          }
        }
        if (aggFuncFound) {
          var aggFuncString = typeof aggFunc === "string" ? aggFunc : "func";
          var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
          var aggFuncStringTranslated = localeTextFunc(aggFuncString, aggFuncString);
          return aggFuncStringTranslated + "(" + headerName + ")";
        }
        return headerName;
      };
      ColumnModel2.prototype.getColumnGroup = function(colId, instanceId) {
        if (!colId) {
          return null;
        }
        if (colId instanceof ColumnGroup) {
          return colId;
        }
        var allColumnGroups = this.getAllDisplayedTrees();
        var checkInstanceId = typeof instanceId === "number";
        var result = null;
        this.columnUtils.depthFirstAllColumnTreeSearch(allColumnGroups, function(child) {
          if (child instanceof ColumnGroup) {
            var columnGroup = child;
            var matched = void 0;
            if (checkInstanceId) {
              matched = colId === columnGroup.getGroupId() && instanceId === columnGroup.getInstanceId();
            } else {
              matched = colId === columnGroup.getGroupId();
            }
            if (matched) {
              result = columnGroup;
            }
          }
        });
        return result;
      };
      ColumnModel2.prototype.isReady = function() {
        return this.ready;
      };
      ColumnModel2.prototype.extractValueColumns = function(source, oldPrimaryColumns) {
        this.valueColumns = this.extractColumns(oldPrimaryColumns, this.valueColumns, function(col, flag) {
          return col.setValueActive(flag, source);
        }, function() {
          return void 0;
        }, function() {
          return void 0;
        }, function(colDef) {
          var aggFunc = colDef.aggFunc;
          if (aggFunc === null || aggFunc === "") {
            return null;
          }
          if (aggFunc === void 0) {
            return;
          }
          return !!aggFunc;
        }, function(colDef) {
          return colDef.initialAggFunc != null && colDef.initialAggFunc != "";
        });
        this.valueColumns.forEach(function(col) {
          var colDef = col.getColDef();
          if (colDef.aggFunc != null && colDef.aggFunc != "") {
            col.setAggFunc(colDef.aggFunc);
          } else {
            if (!col.getAggFunc()) {
              col.setAggFunc(colDef.initialAggFunc);
            }
          }
        });
      };
      ColumnModel2.prototype.extractRowGroupColumns = function(source, oldPrimaryColumns) {
        this.rowGroupColumns = this.extractColumns(oldPrimaryColumns, this.rowGroupColumns, function(col, flag) {
          return col.setRowGroupActive(flag, source);
        }, function(colDef) {
          return colDef.rowGroupIndex;
        }, function(colDef) {
          return colDef.initialRowGroupIndex;
        }, function(colDef) {
          return colDef.rowGroup;
        }, function(colDef) {
          return colDef.initialRowGroup;
        });
      };
      ColumnModel2.prototype.extractColumns = function(oldPrimaryColumns, previousCols, setFlagFunc, getIndexFunc, getInitialIndexFunc, getValueFunc, getInitialValueFunc) {
        if (oldPrimaryColumns === void 0) {
          oldPrimaryColumns = [];
        }
        if (previousCols === void 0) {
          previousCols = [];
        }
        var colsWithIndex = [];
        var colsWithValue = [];
        (this.primaryColumns || []).forEach(function(col) {
          var colIsNew = oldPrimaryColumns.indexOf(col) < 0;
          var colDef = col.getColDef();
          var value = attrToBoolean(getValueFunc(colDef));
          var initialValue = attrToBoolean(getInitialValueFunc(colDef));
          var index = attrToNumber(getIndexFunc(colDef));
          var initialIndex = attrToNumber(getInitialIndexFunc(colDef));
          var include;
          var valuePresent = value !== void 0;
          var indexPresent = index !== void 0;
          var initialValuePresent = initialValue !== void 0;
          var initialIndexPresent = initialIndex !== void 0;
          if (valuePresent) {
            include = value;
          } else if (indexPresent) {
            if (index === null) {
              include = false;
            } else {
              include = index >= 0;
            }
          } else {
            if (colIsNew) {
              if (initialValuePresent) {
                include = initialValue;
              } else if (initialIndexPresent) {
                include = initialIndex != null && initialIndex >= 0;
              } else {
                include = false;
              }
            } else {
              include = previousCols.indexOf(col) >= 0;
            }
          }
          if (include) {
            var useIndex = colIsNew ? index != null || initialIndex != null : index != null;
            useIndex ? colsWithIndex.push(col) : colsWithValue.push(col);
          }
        });
        var getIndexForCol = function(col) {
          var index = getIndexFunc(col.getColDef());
          var defaultIndex = getInitialIndexFunc(col.getColDef());
          return index != null ? index : defaultIndex;
        };
        colsWithIndex.sort(function(colA, colB) {
          var indexA = getIndexForCol(colA);
          var indexB = getIndexForCol(colB);
          if (indexA === indexB) {
            return 0;
          }
          if (indexA < indexB) {
            return -1;
          }
          return 1;
        });
        var res = [].concat(colsWithIndex);
        previousCols.forEach(function(col) {
          if (colsWithValue.indexOf(col) >= 0) {
            res.push(col);
          }
        });
        colsWithValue.forEach(function(col) {
          if (res.indexOf(col) < 0) {
            res.push(col);
          }
        });
        previousCols.forEach(function(col) {
          if (res.indexOf(col) < 0) {
            setFlagFunc(col, false);
          }
        });
        res.forEach(function(col) {
          if (previousCols.indexOf(col) < 0) {
            setFlagFunc(col, true);
          }
        });
        return res;
      };
      ColumnModel2.prototype.extractPivotColumns = function(source, oldPrimaryColumns) {
        this.pivotColumns = this.extractColumns(oldPrimaryColumns, this.pivotColumns, function(col, flag) {
          return col.setPivotActive(flag, source);
        }, function(colDef) {
          return colDef.pivotIndex;
        }, function(colDef) {
          return colDef.initialPivotIndex;
        }, function(colDef) {
          return colDef.pivot;
        }, function(colDef) {
          return colDef.initialPivot;
        });
      };
      ColumnModel2.prototype.resetColumnGroupState = function(source) {
        if (source === void 0) {
          source = "api";
        }
        var stateItems = [];
        this.columnUtils.depthFirstOriginalTreeSearch(null, this.primaryColumnTree, function(child) {
          if (child instanceof ProvidedColumnGroup) {
            var colGroupDef = child.getColGroupDef();
            var groupState = {
              groupId: child.getGroupId(),
              open: !colGroupDef ? void 0 : colGroupDef.openByDefault
            };
            stateItems.push(groupState);
          }
        });
        this.setColumnGroupState(stateItems, source);
      };
      ColumnModel2.prototype.getColumnGroupState = function() {
        var columnGroupState = [];
        this.columnUtils.depthFirstOriginalTreeSearch(null, this.gridBalancedTree, function(node) {
          if (node instanceof ProvidedColumnGroup) {
            columnGroupState.push({
              groupId: node.getGroupId(),
              open: node.isExpanded()
            });
          }
        });
        return columnGroupState;
      };
      ColumnModel2.prototype.setColumnGroupState = function(stateItems, source) {
        var _this = this;
        if (source === void 0) {
          source = "api";
        }
        this.columnAnimationService.start();
        var impactedGroups = [];
        stateItems.forEach(function(stateItem) {
          var groupKey = stateItem.groupId;
          var newValue = stateItem.open;
          var providedColumnGroup = _this.getProvidedColumnGroup(groupKey);
          if (!providedColumnGroup) {
            return;
          }
          if (providedColumnGroup.isExpanded() === newValue) {
            return;
          }
          _this.logger.log("columnGroupOpened(" + providedColumnGroup.getGroupId() + "," + newValue + ")");
          providedColumnGroup.setExpanded(newValue);
          impactedGroups.push(providedColumnGroup);
        });
        this.updateGroupsAndDisplayedColumns(source);
        this.setFirstRightAndLastLeftPinned(source);
        impactedGroups.forEach(function(providedColumnGroup) {
          var event = {
            type: Events.EVENT_COLUMN_GROUP_OPENED,
            columnGroup: providedColumnGroup
          };
          _this.eventService.dispatchEvent(event);
        });
        this.columnAnimationService.finish();
      };
      ColumnModel2.prototype.setColumnGroupOpened = function(key, newValue, source) {
        if (source === void 0) {
          source = "api";
        }
        var keyAsString;
        if (key instanceof ProvidedColumnGroup) {
          keyAsString = key.getId();
        } else {
          keyAsString = key || "";
        }
        this.setColumnGroupState([{ groupId: keyAsString, open: newValue }], source);
      };
      ColumnModel2.prototype.getProvidedColumnGroup = function(key) {
        if (typeof key !== "string") {
          console.error("AG Grid: group key must be a string");
        }
        var res = null;
        this.columnUtils.depthFirstOriginalTreeSearch(null, this.gridBalancedTree, function(node) {
          if (node instanceof ProvidedColumnGroup) {
            if (node.getId() === key) {
              res = node;
            }
          }
        });
        return res;
      };
      ColumnModel2.prototype.calculateColumnsForDisplay = function() {
        var _this = this;
        var columnsForDisplay;
        if (this.pivotMode && missing(this.secondaryColumns)) {
          columnsForDisplay = this.gridColumns.filter(function(column) {
            var isAutoGroupCol = _this.groupAutoColumns && includes(_this.groupAutoColumns, column);
            var isValueCol = _this.valueColumns && includes(_this.valueColumns, column);
            return isAutoGroupCol || isValueCol;
          });
        } else {
          columnsForDisplay = this.gridColumns.filter(function(column) {
            var isAutoGroupCol = _this.groupAutoColumns && includes(_this.groupAutoColumns, column);
            return isAutoGroupCol || column.isVisible();
          });
        }
        return columnsForDisplay;
      };
      ColumnModel2.prototype.checkColSpanActiveInCols = function(columns) {
        var result = false;
        columns.forEach(function(col) {
          if (exists(col.getColDef().colSpan)) {
            result = true;
          }
        });
        return result;
      };
      ColumnModel2.prototype.calculateColumnsForGroupDisplay = function() {
        var _this = this;
        this.groupDisplayColumns = [];
        this.groupDisplayColumnsMap = {};
        var checkFunc = function(col) {
          var colDef = col.getColDef();
          var underlyingColumn = colDef.showRowGroup;
          if (colDef && exists(underlyingColumn)) {
            _this.groupDisplayColumns.push(col);
            if (typeof underlyingColumn === "string") {
              _this.groupDisplayColumnsMap[underlyingColumn] = col;
            } else if (underlyingColumn === true) {
              _this.getRowGroupColumns().forEach(function(rowGroupCol) {
                _this.groupDisplayColumnsMap[rowGroupCol.getId()] = col;
              });
            }
          }
        };
        this.gridColumns.forEach(checkFunc);
        if (this.groupAutoColumns) {
          this.groupAutoColumns.forEach(checkFunc);
        }
      };
      ColumnModel2.prototype.getGroupDisplayColumns = function() {
        return this.groupDisplayColumns;
      };
      ColumnModel2.prototype.getGroupDisplayColumnForGroup = function(rowGroupColumnId) {
        return this.groupDisplayColumnsMap[rowGroupColumnId];
      };
      ColumnModel2.prototype.updateDisplayedColumns = function(source) {
        var columnsForDisplay = this.calculateColumnsForDisplay();
        this.buildDisplayedTrees(columnsForDisplay);
        this.calculateColumnsForGroupDisplay();
        this.updateGroupsAndDisplayedColumns(source);
        this.setFirstRightAndLastLeftPinned(source);
      };
      ColumnModel2.prototype.isSecondaryColumnsPresent = function() {
        return exists(this.secondaryColumns);
      };
      ColumnModel2.prototype.setSecondaryColumns = function(colDefs, source) {
        var _this = this;
        if (source === void 0) {
          source = "api";
        }
        var newColsPresent = colDefs && colDefs.length > 0;
        if (!newColsPresent && missing(this.secondaryColumns)) {
          return;
        }
        if (newColsPresent) {
          this.processSecondaryColumnDefinitions(colDefs);
          var balancedTreeResult = this.columnFactory.createColumnTree(colDefs, false, this.secondaryBalancedTree || this.previousSecondaryColumns || void 0);
          this.secondaryBalancedTree = balancedTreeResult.columnTree;
          this.secondaryHeaderRowCount = balancedTreeResult.treeDept + 1;
          this.secondaryColumns = this.getColumnsFromTree(this.secondaryBalancedTree);
          this.secondaryColumnsMap = {};
          this.secondaryColumns.forEach(function(col) {
            return _this.secondaryColumnsMap[col.getId()] = col;
          });
          this.previousSecondaryColumns = null;
        } else {
          this.previousSecondaryColumns = this.secondaryBalancedTree;
          this.secondaryBalancedTree = null;
          this.secondaryHeaderRowCount = -1;
          this.secondaryColumns = null;
          this.secondaryColumnsMap = {};
        }
        this.updateGridColumns();
        this.updateDisplayedColumns(source);
      };
      ColumnModel2.prototype.processSecondaryColumnDefinitions = function(colDefs) {
        var columnCallback = this.gridOptionsWrapper.getProcessPivotResultColDefFunc();
        var groupCallback = this.gridOptionsWrapper.getProcessPivotResultColGroupDefFunc();
        if (!columnCallback && !groupCallback) {
          return void 0;
        }
        var searchForColDefs = function(colDefs2) {
          colDefs2.forEach(function(abstractColDef) {
            var isGroup = exists(abstractColDef.children);
            if (isGroup) {
              var colGroupDef = abstractColDef;
              if (groupCallback) {
                groupCallback(colGroupDef);
              }
              searchForColDefs(colGroupDef.children);
            } else {
              var colDef = abstractColDef;
              if (columnCallback) {
                columnCallback(colDef);
              }
            }
          });
        };
        if (colDefs) {
          searchForColDefs(colDefs);
        }
      };
      ColumnModel2.prototype.updateGridColumns = function() {
        var _this = this;
        var prevGridCols = this.gridBalancedTree;
        if (this.gridColsArePrimary) {
          this.lastPrimaryOrder = this.gridColumns;
        } else {
          this.lastSecondaryOrder = this.gridColumns;
        }
        var sortOrderToRecover = void 0;
        if (this.secondaryColumns && this.secondaryBalancedTree) {
          var hasSameColumns = this.secondaryColumns.every(function(col) {
            return _this.gridColumnsMap[col.getColId()] !== void 0;
          });
          this.gridBalancedTree = this.secondaryBalancedTree.slice();
          this.gridHeaderRowCount = this.secondaryHeaderRowCount;
          this.gridColumns = this.secondaryColumns.slice();
          this.gridColsArePrimary = false;
          if (hasSameColumns) {
            sortOrderToRecover = this.lastSecondaryOrder;
          }
        } else if (this.primaryColumns) {
          this.gridBalancedTree = this.primaryColumnTree.slice();
          this.gridHeaderRowCount = this.primaryHeaderRowCount;
          this.gridColumns = this.primaryColumns.slice();
          this.gridColsArePrimary = true;
          sortOrderToRecover = this.lastPrimaryOrder;
        }
        var areAutoColsChanged = this.createGroupAutoColumnsIfNeeded();
        if (areAutoColsChanged && sortOrderToRecover) {
          var groupAutoColsMap_1 = convertToMap(this.groupAutoColumns.map(function(col) {
            return [col, true];
          }));
          sortOrderToRecover = sortOrderToRecover.filter(function(col) {
            return !groupAutoColsMap_1.has(col);
          });
          sortOrderToRecover = __spread$f(this.groupAutoColumns, sortOrderToRecover);
        }
        this.addAutoGroupToGridColumns();
        this.orderGridColsLike(sortOrderToRecover);
        this.gridColumns = this.placeLockedColumns(this.gridColumns);
        this.setupQuickFilterColumns();
        this.clearDisplayedAndViewportColumns();
        this.colSpanActive = this.checkColSpanActiveInCols(this.gridColumns);
        this.gridColumnsMap = {};
        this.gridColumns.forEach(function(col) {
          return _this.gridColumnsMap[col.getId()] = col;
        });
        this.setAutoHeightActive();
        if (!areEqual(prevGridCols, this.gridBalancedTree)) {
          var event_4 = {
            type: Events.EVENT_GRID_COLUMNS_CHANGED
          };
          this.eventService.dispatchEvent(event_4);
        }
      };
      ColumnModel2.prototype.setAutoHeightActive = function() {
        this.autoHeightActive = this.gridColumns.filter(function(col) {
          return col.isAutoHeight();
        }).length > 0;
        if (this.autoHeightActive) {
          this.autoHeightActiveAtLeastOnce = true;
          var rowModelType = this.rowModel.getType();
          var supportedRowModel = rowModelType === Constants.ROW_MODEL_TYPE_CLIENT_SIDE || rowModelType === Constants.ROW_MODEL_TYPE_SERVER_SIDE;
          if (!supportedRowModel) {
            var message_1 = "AG Grid - autoHeight columns only work with Client Side Row Model and Server Side Row Model.";
            doOnce(function() {
              return console.warn(message_1);
            }, "autoHeightActive.wrongRowModel");
          }
        }
      };
      ColumnModel2.prototype.orderGridColsLike = function(colsOrder) {
        if (missing(colsOrder)) {
          return;
        }
        var lastOrderMapped = convertToMap(colsOrder.map(function(col, index) {
          return [col, index];
        }));
        var noColsFound = true;
        this.gridColumns.forEach(function(col) {
          if (lastOrderMapped.has(col)) {
            noColsFound = false;
          }
        });
        if (noColsFound) {
          return;
        }
        var gridColsMap = convertToMap(this.gridColumns.map(function(col) {
          return [col, true];
        }));
        var oldColsOrdered = colsOrder.filter(function(col) {
          return gridColsMap.has(col);
        });
        var oldColsMap = convertToMap(oldColsOrdered.map(function(col) {
          return [col, true];
        }));
        var newColsOrdered = this.gridColumns.filter(function(col) {
          return !oldColsMap.has(col);
        });
        var newGridColumns = oldColsOrdered.slice();
        newColsOrdered.forEach(function(newCol) {
          var parent = newCol.getOriginalParent();
          if (!parent) {
            newGridColumns.push(newCol);
            return;
          }
          var siblings = [];
          while (!siblings.length && parent) {
            var leafCols = parent.getLeafColumns();
            leafCols.forEach(function(leafCol) {
              var presentInNewGriColumns = newGridColumns.indexOf(leafCol) >= 0;
              var noYetInSiblings = siblings.indexOf(leafCol) < 0;
              if (presentInNewGriColumns && noYetInSiblings) {
                siblings.push(leafCol);
              }
            });
            parent = parent.getOriginalParent();
          }
          if (!siblings.length) {
            newGridColumns.push(newCol);
            return;
          }
          var indexes = siblings.map(function(col) {
            return newGridColumns.indexOf(col);
          });
          var lastIndex = Math.max.apply(Math, __spread$f(indexes));
          insertIntoArray(newGridColumns, newCol, lastIndex + 1);
        });
        this.gridColumns = newGridColumns;
      };
      ColumnModel2.prototype.isPrimaryColumnGroupsPresent = function() {
        return this.primaryHeaderRowCount > 1;
      };
      ColumnModel2.prototype.setupQuickFilterColumns = function() {
        if (this.groupAutoColumns) {
          this.columnsForQuickFilter = (this.primaryColumns || []).concat(this.groupAutoColumns);
        } else if (this.primaryColumns) {
          this.columnsForQuickFilter = this.primaryColumns;
        }
      };
      ColumnModel2.prototype.placeLockedColumns = function(cols) {
        var left = [];
        var normal = [];
        var right = [];
        cols.forEach(function(col) {
          var position = col.getColDef().lockPosition;
          if (position === "right") {
            right.push(col);
          } else if (position === "left" || position === true) {
            left.push(col);
          } else {
            normal.push(col);
          }
        });
        return __spread$f(left, normal, right);
      };
      ColumnModel2.prototype.addAutoGroupToGridColumns = function() {
        if (missing(this.groupAutoColumns)) {
          return;
        }
        this.gridColumns = this.groupAutoColumns ? this.groupAutoColumns.concat(this.gridColumns) : this.gridColumns;
        var autoColBalancedTree = this.columnFactory.createForAutoGroups(this.groupAutoColumns, this.gridBalancedTree);
        this.gridBalancedTree = autoColBalancedTree.concat(this.gridBalancedTree);
      };
      ColumnModel2.prototype.clearDisplayedAndViewportColumns = function() {
        this.viewportRowLeft = {};
        this.viewportRowRight = {};
        this.viewportRowCenter = {};
        this.displayedColumnsLeft = [];
        this.displayedColumnsRight = [];
        this.displayedColumnsCenter = [];
        this.displayedColumns = [];
        this.viewportColumns = [];
        this.headerViewportColumns = [];
        this.viewportColumnsHash = "";
      };
      ColumnModel2.prototype.updateGroupsAndDisplayedColumns = function(source) {
        this.updateOpenClosedVisibilityInColumnGroups();
        this.deriveDisplayedColumns(source);
        this.refreshFlexedColumns();
        this.extractViewport();
        this.updateBodyWidths();
        var event = {
          type: Events.EVENT_DISPLAYED_COLUMNS_CHANGED
        };
        this.eventService.dispatchEvent(event);
      };
      ColumnModel2.prototype.deriveDisplayedColumns = function(source) {
        this.derivedDisplayedColumnsFromDisplayedTree(this.displayedTreeLeft, this.displayedColumnsLeft);
        this.derivedDisplayedColumnsFromDisplayedTree(this.displayedTreeCentre, this.displayedColumnsCenter);
        this.derivedDisplayedColumnsFromDisplayedTree(this.displayedTreeRight, this.displayedColumnsRight);
        this.joinDisplayedColumns();
        this.setLeftValues(source);
        this.displayedAutoHeightCols = this.displayedColumns.filter(function(col) {
          return col.isAutoHeight();
        });
      };
      ColumnModel2.prototype.isAutoRowHeightActive = function() {
        return this.autoHeightActive;
      };
      ColumnModel2.prototype.wasAutoRowHeightEverActive = function() {
        return this.autoHeightActiveAtLeastOnce;
      };
      ColumnModel2.prototype.joinDisplayedColumns = function() {
        if (this.gridOptionsWrapper.isEnableRtl()) {
          this.displayedColumns = this.displayedColumnsRight.concat(this.displayedColumnsCenter).concat(this.displayedColumnsLeft);
        } else {
          this.displayedColumns = this.displayedColumnsLeft.concat(this.displayedColumnsCenter).concat(this.displayedColumnsRight);
        }
      };
      ColumnModel2.prototype.setLeftValues = function(source) {
        this.setLeftValuesOfColumns(source);
        this.setLeftValuesOfGroups();
      };
      ColumnModel2.prototype.setLeftValuesOfColumns = function(source) {
        var _this = this;
        if (!this.primaryColumns) {
          return;
        }
        var allColumns = this.primaryColumns.slice(0);
        var doingRtl = this.gridOptionsWrapper.isEnableRtl();
        [
          this.displayedColumnsLeft,
          this.displayedColumnsRight,
          this.displayedColumnsCenter
        ].forEach(function(columns) {
          if (doingRtl) {
            var left_1 = _this.getWidthOfColsInList(columns);
            columns.forEach(function(column) {
              left_1 -= column.getActualWidth();
              column.setLeft(left_1, source);
            });
          } else {
            var left_2 = 0;
            columns.forEach(function(column) {
              column.setLeft(left_2, source);
              left_2 += column.getActualWidth();
            });
          }
          removeAllFromArray(allColumns, columns);
        });
        allColumns.forEach(function(column) {
          column.setLeft(null, source);
        });
      };
      ColumnModel2.prototype.setLeftValuesOfGroups = function() {
        [
          this.displayedTreeLeft,
          this.displayedTreeRight,
          this.displayedTreeCentre
        ].forEach(function(columns) {
          columns.forEach(function(column) {
            if (column instanceof ColumnGroup) {
              var columnGroup = column;
              columnGroup.checkLeft();
            }
          });
        });
      };
      ColumnModel2.prototype.derivedDisplayedColumnsFromDisplayedTree = function(tree, columns) {
        columns.length = 0;
        this.columnUtils.depthFirstDisplayedColumnTreeSearch(tree, function(child) {
          if (child instanceof Column) {
            columns.push(child);
          }
        });
      };
      ColumnModel2.prototype.extractViewportColumns = function() {
        if (this.suppressColumnVirtualisation) {
          this.viewportColumnsCenter = this.displayedColumnsCenter;
          this.headerViewportColumnsCenter = this.displayedColumnsCenter;
        } else {
          this.viewportColumnsCenter = this.displayedColumnsCenter.filter(this.isColumnInRowViewport.bind(this));
          this.headerViewportColumnsCenter = this.displayedColumnsCenter.filter(this.isColumnInHeaderViewport.bind(this));
        }
        this.viewportColumns = this.viewportColumnsCenter.concat(this.displayedColumnsLeft).concat(this.displayedColumnsRight);
        this.headerViewportColumns = this.headerViewportColumnsCenter.concat(this.displayedColumnsLeft).concat(this.displayedColumnsRight);
      };
      ColumnModel2.prototype.getVirtualHeaderGroupRow = function(type, dept) {
        var result;
        switch (type) {
          case Constants.PINNED_LEFT:
            result = this.viewportRowLeft[dept];
            break;
          case Constants.PINNED_RIGHT:
            result = this.viewportRowRight[dept];
            break;
          default:
            result = this.viewportRowCenter[dept];
            break;
        }
        if (missing(result)) {
          result = [];
        }
        return result;
      };
      ColumnModel2.prototype.calculateHeaderRows = function() {
        this.viewportRowLeft = {};
        this.viewportRowRight = {};
        this.viewportRowCenter = {};
        var virtualColIds = {};
        this.headerViewportColumns.forEach(function(col) {
          return virtualColIds[col.getId()] = true;
        });
        var testGroup = function(children, result, dept) {
          var returnValue = false;
          for (var i = 0; i < children.length; i++) {
            var child = children[i];
            var addThisItem = false;
            if (child instanceof Column) {
              addThisItem = virtualColIds[child.getId()] === true;
            } else {
              var columnGroup = child;
              var displayedChildren = columnGroup.getDisplayedChildren();
              if (displayedChildren) {
                addThisItem = testGroup(displayedChildren, result, dept + 1);
              }
            }
            if (addThisItem) {
              returnValue = true;
              if (!result[dept]) {
                result[dept] = [];
              }
              result[dept].push(child);
            }
          }
          return returnValue;
        };
        testGroup(this.displayedTreeLeft, this.viewportRowLeft, 0);
        testGroup(this.displayedTreeRight, this.viewportRowRight, 0);
        testGroup(this.displayedTreeCentre, this.viewportRowCenter, 0);
      };
      ColumnModel2.prototype.extractViewport = function() {
        var hashColumn = function(c) {
          return c.getId() + "-" + (c.getPinned() || "normal");
        };
        this.extractViewportColumns();
        var newHash = this.viewportColumns.map(hashColumn).join("#");
        var changed = this.viewportColumnsHash !== newHash;
        if (changed) {
          this.viewportColumnsHash = newHash;
          this.calculateHeaderRows();
        }
        return changed;
      };
      ColumnModel2.prototype.refreshFlexedColumns = function(params) {
        var _this = this;
        if (params === void 0) {
          params = {};
        }
        var source = params.source ? params.source : "flex";
        if (params.viewportWidth != null) {
          this.flexViewportWidth = params.viewportWidth;
        }
        if (!this.flexViewportWidth) {
          return [];
        }
        var flexAfterDisplayIndex = -1;
        if (params.resizingCols) {
          params.resizingCols.forEach(function(col2) {
            var indexOfCol = _this.displayedColumnsCenter.indexOf(col2);
            if (flexAfterDisplayIndex < indexOfCol) {
              flexAfterDisplayIndex = indexOfCol;
            }
          });
        }
        var isColFlex = function(col2) {
          var afterResizingCols = _this.displayedColumnsCenter.indexOf(col2) > flexAfterDisplayIndex;
          return col2.getFlex() && afterResizingCols;
        };
        var knownWidthColumns = this.displayedColumnsCenter.filter(function(col2) {
          return !isColFlex(col2);
        });
        var flexingColumns = this.displayedColumnsCenter.filter(function(col2) {
          return isColFlex(col2);
        });
        var changedColumns = [];
        if (!flexingColumns.length) {
          return [];
        }
        var flexingColumnSizes = [];
        var spaceForFlexingColumns;
        outer:
          while (true) {
            var totalFlex = flexingColumns.reduce(function(count, col2) {
              return count + col2.getFlex();
            }, 0);
            spaceForFlexingColumns = this.flexViewportWidth - this.getWidthOfColsInList(knownWidthColumns);
            for (var i = 0; i < flexingColumns.length; i++) {
              var col = flexingColumns[i];
              var widthByFlexRule = spaceForFlexingColumns * col.getFlex() / totalFlex;
              var constrainedWidth = 0;
              var minWidth = col.getMinWidth();
              var maxWidth = col.getMaxWidth();
              if (exists(minWidth) && widthByFlexRule < minWidth) {
                constrainedWidth = minWidth;
              } else if (exists(maxWidth) && widthByFlexRule > maxWidth) {
                constrainedWidth = maxWidth;
              }
              if (constrainedWidth) {
                col.setActualWidth(constrainedWidth, source);
                removeFromArray(flexingColumns, col);
                changedColumns.push(col);
                knownWidthColumns.push(col);
                continue outer;
              }
              flexingColumnSizes[i] = Math.round(widthByFlexRule);
            }
            break;
          }
        var remainingSpace = spaceForFlexingColumns;
        flexingColumns.forEach(function(col2, i2) {
          col2.setActualWidth(Math.min(flexingColumnSizes[i2], remainingSpace), source);
          changedColumns.push(col2);
          remainingSpace -= flexingColumnSizes[i2];
        });
        if (!params.skipSetLeft) {
          this.setLeftValues(source);
        }
        if (params.updateBodyWidths) {
          this.updateBodyWidths();
        }
        if (params.fireResizedEvent) {
          this.fireColumnResizedEvent(changedColumns, true, source, flexingColumns);
        }
        if (!this.flexColsCalculatedAtLestOnce) {
          if (this.gridOptionsWrapper.isRowModelDefault()) {
            this.rowModel.resetRowHeights();
          }
          this.flexColsCalculatedAtLestOnce = true;
        }
        return flexingColumns;
      };
      ColumnModel2.prototype.sizeColumnsToFit = function(gridWidth, source, silent, params) {
        if (source === void 0) {
          source = "sizeColumnsToFit";
        }
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        var limitsMap = {};
        if (params) {
          (_b = (_a = params) === null || _a === void 0 ? void 0 : _a.columnLimits) === null || _b === void 0 ? void 0 : _b.forEach(function(_a2) {
            var key = _a2.key, dimensions = __rest(_a2, ["key"]);
            limitsMap[typeof key === "string" ? key : key.getColId()] = dimensions;
          });
        }
        var allDisplayedColumns = this.getAllDisplayedColumns();
        var doColumnsAlreadyFit = gridWidth === this.getWidthOfColsInList(allDisplayedColumns);
        if (gridWidth <= 0 || !allDisplayedColumns.length || doColumnsAlreadyFit) {
          return;
        }
        var colsToSpread = [];
        var colsToNotSpread = [];
        allDisplayedColumns.forEach(function(column2) {
          if (column2.getColDef().suppressSizeToFit === true) {
            colsToNotSpread.push(column2);
          } else {
            colsToSpread.push(column2);
          }
        });
        var colsToFireEventFor = colsToSpread.slice(0);
        var finishedResizing = false;
        var moveToNotSpread = function(column2) {
          removeFromArray(colsToSpread, column2);
          colsToNotSpread.push(column2);
        };
        colsToSpread.forEach(function(column2) {
          return column2.resetActualWidth(source);
        });
        while (!finishedResizing) {
          finishedResizing = true;
          var availablePixels = gridWidth - this.getWidthOfColsInList(colsToNotSpread);
          if (availablePixels <= 0) {
            colsToSpread.forEach(function(column2) {
              var _a2, _b2, _c2, _d2;
              var widthOverride2 = (_c2 = (_b2 = (_a2 = limitsMap) === null || _a2 === void 0 ? void 0 : _a2[column2.getId()]) === null || _b2 === void 0 ? void 0 : _b2.minWidth, _c2 !== null && _c2 !== void 0 ? _c2 : (_d2 = params) === null || _d2 === void 0 ? void 0 : _d2.defaultMinWidth);
              if (typeof widthOverride2 === "number") {
                column2.setActualWidth(widthOverride2);
                return;
              }
              column2.setMinimum(source);
            });
          } else {
            var scale = availablePixels / this.getWidthOfColsInList(colsToSpread);
            var pixelsForLastCol = availablePixels;
            for (var i = colsToSpread.length - 1; i >= 0; i--) {
              var column = colsToSpread[i];
              var widthOverride = (_c = limitsMap) === null || _c === void 0 ? void 0 : _c[column.getId()];
              var minOverride = (_e = (_d = widthOverride) === null || _d === void 0 ? void 0 : _d.minWidth, _e !== null && _e !== void 0 ? _e : (_f = params) === null || _f === void 0 ? void 0 : _f.defaultMinWidth);
              var maxOverride = (_h = (_g = widthOverride) === null || _g === void 0 ? void 0 : _g.maxWidth, _h !== null && _h !== void 0 ? _h : (_j = params) === null || _j === void 0 ? void 0 : _j.defaultMaxWidth);
              var colMinWidth = (_k = column.getMinWidth(), _k !== null && _k !== void 0 ? _k : 0);
              var colMaxWidth = (_l = column.getMaxWidth(), _l !== null && _l !== void 0 ? _l : Number.MAX_VALUE);
              var minWidth = typeof minOverride === "number" && minOverride > colMinWidth ? minOverride : column.getMinWidth();
              var maxWidth = typeof maxOverride === "number" && maxOverride < colMaxWidth ? maxOverride : column.getMaxWidth();
              var newWidth = Math.round(column.getActualWidth() * scale);
              if (exists(minWidth) && newWidth < minWidth) {
                newWidth = minWidth;
                moveToNotSpread(column);
                finishedResizing = false;
              } else if (exists(maxWidth) && newWidth > maxWidth) {
                newWidth = maxWidth;
                moveToNotSpread(column);
                finishedResizing = false;
              } else if (i === 0) {
                newWidth = pixelsForLastCol;
              }
              column.setActualWidth(newWidth, source, true);
              pixelsForLastCol -= newWidth;
            }
          }
        }
        colsToFireEventFor.forEach(function(col) {
          col.fireColumnWidthChangedEvent(source);
        });
        this.setLeftValues(source);
        this.updateBodyWidths();
        if (silent) {
          return;
        }
        this.fireColumnResizedEvent(colsToFireEventFor, true, source);
      };
      ColumnModel2.prototype.buildDisplayedTrees = function(visibleColumns) {
        var leftVisibleColumns = [];
        var rightVisibleColumns = [];
        var centerVisibleColumns = [];
        visibleColumns.forEach(function(column) {
          switch (column.getPinned()) {
            case "left":
              leftVisibleColumns.push(column);
              break;
            case "right":
              rightVisibleColumns.push(column);
              break;
            default:
              centerVisibleColumns.push(column);
              break;
          }
        });
        var groupInstanceIdCreator = new GroupInstanceIdCreator();
        this.displayedTreeLeft = this.displayedGroupCreator.createDisplayedGroups(leftVisibleColumns, this.gridBalancedTree, groupInstanceIdCreator, Constants.PINNED_LEFT, this.displayedTreeLeft);
        this.displayedTreeRight = this.displayedGroupCreator.createDisplayedGroups(rightVisibleColumns, this.gridBalancedTree, groupInstanceIdCreator, Constants.PINNED_RIGHT, this.displayedTreeRight);
        this.displayedTreeCentre = this.displayedGroupCreator.createDisplayedGroups(centerVisibleColumns, this.gridBalancedTree, groupInstanceIdCreator, null, this.displayedTreeCentre);
        this.updateDisplayedMap();
      };
      ColumnModel2.prototype.updateDisplayedMap = function() {
        var _this = this;
        this.displayedColumnsAndGroupsMap = {};
        var func = function(child) {
          _this.displayedColumnsAndGroupsMap[child.getUniqueId()] = child;
        };
        this.columnUtils.depthFirstAllColumnTreeSearch(this.displayedTreeCentre, func);
        this.columnUtils.depthFirstAllColumnTreeSearch(this.displayedTreeLeft, func);
        this.columnUtils.depthFirstAllColumnTreeSearch(this.displayedTreeRight, func);
      };
      ColumnModel2.prototype.isDisplayed = function(item) {
        var fromMap = this.displayedColumnsAndGroupsMap[item.getUniqueId()];
        return fromMap === item;
      };
      ColumnModel2.prototype.updateOpenClosedVisibilityInColumnGroups = function() {
        var allColumnGroups = this.getAllDisplayedTrees();
        this.columnUtils.depthFirstAllColumnTreeSearch(allColumnGroups, function(child) {
          if (child instanceof ColumnGroup) {
            var columnGroup = child;
            columnGroup.calculateDisplayedColumns();
          }
        });
      };
      ColumnModel2.prototype.getGroupAutoColumns = function() {
        return this.groupAutoColumns;
      };
      ColumnModel2.prototype.createGroupAutoColumnsIfNeeded = function() {
        if (!this.autoGroupsNeedBuilding) {
          return false;
        }
        this.autoGroupsNeedBuilding = false;
        var groupFullWidthRow = this.gridOptionsWrapper.isGroupUseEntireRow(this.pivotMode);
        var suppressAutoColumn = this.pivotMode ? this.gridOptionsWrapper.isPivotSuppressAutoColumn() : this.gridOptionsWrapper.isGroupSuppressAutoColumn();
        var groupingActive = this.rowGroupColumns.length > 0 || this.usingTreeData;
        var needAutoColumns = groupingActive && !suppressAutoColumn && !groupFullWidthRow;
        if (needAutoColumns) {
          var existingCols = this.groupAutoColumns || [];
          var newAutoGroupCols = this.autoGroupColService.createAutoGroupColumns(existingCols, this.rowGroupColumns);
          var autoColsDifferent = !this.autoColsEqual(newAutoGroupCols, this.groupAutoColumns);
          if (autoColsDifferent || this.forceRecreateAutoGroups) {
            this.groupAutoColumns = newAutoGroupCols;
            return true;
          }
        } else {
          this.groupAutoColumns = null;
        }
        return false;
      };
      ColumnModel2.prototype.autoColsEqual = function(colsA, colsB) {
        return areEqual(colsA, colsB, function(a, b) {
          return a.getColId() === b.getColId();
        });
      };
      ColumnModel2.prototype.getWidthOfColsInList = function(columnList) {
        return columnList.reduce(function(width, col) {
          return width + col.getActualWidth();
        }, 0);
      };
      ColumnModel2.prototype.getGridBalancedTree = function() {
        return this.gridBalancedTree;
      };
      ColumnModel2.prototype.hasFloatingFilters = function() {
        if (!this.gridColumns) {
          return false;
        }
        var res = this.gridColumns.some(function(col) {
          return col.getColDef().floatingFilter;
        });
        return res;
      };
      ColumnModel2.prototype.getFirstDisplayedColumn = function() {
        var isRtl = this.gridOptionsWrapper.isEnableRtl();
        var queryOrder = [
          "getDisplayedLeftColumns",
          "getDisplayedCenterColumns",
          "getDisplayedRightColumns"
        ];
        if (isRtl) {
          queryOrder.reverse();
        }
        for (var i = 0; i < queryOrder.length; i++) {
          var container = this[queryOrder[i]]();
          if (container.length) {
            return isRtl ? last(container) : container[0];
          }
        }
        return null;
      };
      ColumnModel2.prototype.setColumnHeaderHeight = function(col, height) {
        var changed = col.setAutoHeaderHeight(height);
        if (changed) {
          var event_5 = {
            type: Events.EVENT_COLUMN_HEADER_HEIGHT_CHANGED,
            column: col,
            columns: [col],
            source: "autosizeColumnHeaderHeight"
          };
          this.eventService.dispatchEvent(event_5);
        }
      };
      ColumnModel2.prototype.getColumnGroupHeaderRowHeight = function() {
        if (this.isPivotMode()) {
          return this.gridOptionsWrapper.getPivotGroupHeaderHeight();
        } else {
          return this.gridOptionsWrapper.getGroupHeaderHeight();
        }
      };
      ColumnModel2.prototype.getColumnHeaderRowHeight = function() {
        var defaultHeight = this.isPivotMode() ? this.gridOptionsWrapper.getPivotHeaderHeight() : this.gridOptionsWrapper.getHeaderHeight();
        var displayedHeights = this.getAllDisplayedColumns().filter(function(col) {
          return col.isAutoHeaderHeight();
        }).map(function(col) {
          return col.getAutoHeaderHeight() || 0;
        });
        return Math.max.apply(Math, __spread$f([defaultHeight], displayedHeights));
      };
      __decorate$2u([
        Autowired("expressionService")
      ], ColumnModel2.prototype, "expressionService", void 0);
      __decorate$2u([
        Autowired("columnFactory")
      ], ColumnModel2.prototype, "columnFactory", void 0);
      __decorate$2u([
        Autowired("displayedGroupCreator")
      ], ColumnModel2.prototype, "displayedGroupCreator", void 0);
      __decorate$2u([
        Autowired("ctrlsService")
      ], ColumnModel2.prototype, "ctrlsService", void 0);
      __decorate$2u([
        Autowired("autoWidthCalculator")
      ], ColumnModel2.prototype, "autoWidthCalculator", void 0);
      __decorate$2u([
        Autowired("columnUtils")
      ], ColumnModel2.prototype, "columnUtils", void 0);
      __decorate$2u([
        Autowired("columnAnimationService")
      ], ColumnModel2.prototype, "columnAnimationService", void 0);
      __decorate$2u([
        Autowired("autoGroupColService")
      ], ColumnModel2.prototype, "autoGroupColService", void 0);
      __decorate$2u([
        Optional("aggFuncService")
      ], ColumnModel2.prototype, "aggFuncService", void 0);
      __decorate$2u([
        Optional("valueCache")
      ], ColumnModel2.prototype, "valueCache", void 0);
      __decorate$2u([
        Optional("animationFrameService")
      ], ColumnModel2.prototype, "animationFrameService", void 0);
      __decorate$2u([
        Autowired("rowModel")
      ], ColumnModel2.prototype, "rowModel", void 0);
      __decorate$2u([
        Autowired("sortController")
      ], ColumnModel2.prototype, "sortController", void 0);
      __decorate$2u([
        Autowired("columnDefFactory")
      ], ColumnModel2.prototype, "columnDefFactory", void 0);
      __decorate$2u([
        PostConstruct
      ], ColumnModel2.prototype, "init", null);
      __decorate$2u([
        __param$7(0, Qualifier("loggerFactory"))
      ], ColumnModel2.prototype, "setBeans", null);
      ColumnModel2 = __decorate$2u([
        Bean("columnModel")
      ], ColumnModel2);
      return ColumnModel2;
    }(BeanStub);
    __extends$2S = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$2t = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    ColumnUtils = function(_super) {
      __extends$2S(ColumnUtils2, _super);
      function ColumnUtils2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      ColumnUtils2.prototype.calculateColMinWidth = function(colDef) {
        return colDef.minWidth != null ? colDef.minWidth : this.gridOptionsWrapper.getMinColWidth();
      };
      ColumnUtils2.prototype.calculateColMaxWidth = function(colDef) {
        return colDef.maxWidth != null ? colDef.maxWidth : this.gridOptionsWrapper.getMaxColWidth() || Number.MAX_SAFE_INTEGER;
      };
      ColumnUtils2.prototype.calculateColInitialWidth = function(colDef) {
        var minColWidth = this.calculateColMinWidth(colDef);
        var maxColWidth = this.calculateColMaxWidth(colDef);
        var width;
        var colDefWidth = attrToNumber(colDef.width);
        var colDefInitialWidth = attrToNumber(colDef.initialWidth);
        if (colDefWidth != null) {
          width = colDefWidth;
        } else if (colDefInitialWidth != null) {
          width = colDefInitialWidth;
        } else {
          width = this.gridOptionsWrapper.getColWidth();
        }
        return Math.max(Math.min(width, maxColWidth), minColWidth);
      };
      ColumnUtils2.prototype.getOriginalPathForColumn = function(column, originalBalancedTree) {
        var result = [];
        var found = false;
        var recursePath = function(balancedColumnTree, dept) {
          for (var i = 0; i < balancedColumnTree.length; i++) {
            if (found) {
              return;
            }
            var node = balancedColumnTree[i];
            if (node instanceof ProvidedColumnGroup) {
              var nextNode = node;
              recursePath(nextNode.getChildren(), dept + 1);
              result[dept] = node;
            } else if (node === column) {
              found = true;
            }
          }
        };
        recursePath(originalBalancedTree, 0);
        return found ? result : null;
      };
      ColumnUtils2.prototype.depthFirstOriginalTreeSearch = function(parent, tree, callback) {
        var _this = this;
        if (!tree) {
          return;
        }
        tree.forEach(function(child) {
          if (child instanceof ProvidedColumnGroup) {
            _this.depthFirstOriginalTreeSearch(child, child.getChildren(), callback);
          }
          callback(child, parent);
        });
      };
      ColumnUtils2.prototype.depthFirstAllColumnTreeSearch = function(tree, callback) {
        var _this = this;
        if (!tree) {
          return;
        }
        tree.forEach(function(child) {
          if (child instanceof ColumnGroup) {
            _this.depthFirstAllColumnTreeSearch(child.getChildren(), callback);
          }
          callback(child);
        });
      };
      ColumnUtils2.prototype.depthFirstDisplayedColumnTreeSearch = function(tree, callback) {
        var _this = this;
        if (!tree) {
          return;
        }
        tree.forEach(function(child) {
          if (child instanceof ColumnGroup) {
            _this.depthFirstDisplayedColumnTreeSearch(child.getDisplayedChildren(), callback);
          }
          callback(child);
        });
      };
      ColumnUtils2 = __decorate$2t([
        Bean("columnUtils")
      ], ColumnUtils2);
      return ColumnUtils2;
    }(BeanStub);
    __extends$2R = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$2s = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    DisplayedGroupCreator = function(_super) {
      __extends$2R(DisplayedGroupCreator2, _super);
      function DisplayedGroupCreator2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      DisplayedGroupCreator2.prototype.createDisplayedGroups = function(sortedVisibleColumns, balancedColumnTree, groupInstanceIdCreator, pinned, oldDisplayedGroups) {
        var _this = this;
        var result = [];
        var previousRealPath;
        var previousOriginalPath;
        var oldColumnsMapped = this.mapOldGroupsById(oldDisplayedGroups);
        sortedVisibleColumns.forEach(function(currentColumn) {
          var currentOriginalPath = _this.getOriginalPathForColumn(balancedColumnTree, currentColumn);
          var currentRealPath = [];
          var firstColumn = !previousOriginalPath;
          for (var i = 0; i < currentOriginalPath.length; i++) {
            if (firstColumn || currentOriginalPath[i] !== previousOriginalPath[i]) {
              var newGroup = _this.createColumnGroup(currentOriginalPath[i], groupInstanceIdCreator, oldColumnsMapped, pinned);
              currentRealPath[i] = newGroup;
              if (i == 0) {
                result.push(newGroup);
              } else {
                currentRealPath[i - 1].addChild(newGroup);
              }
            } else {
              currentRealPath[i] = previousRealPath[i];
            }
          }
          var noColumnGroups = currentRealPath.length === 0;
          if (noColumnGroups) {
            result.push(currentColumn);
          } else {
            var leafGroup = last(currentRealPath);
            leafGroup.addChild(currentColumn);
          }
          previousRealPath = currentRealPath;
          previousOriginalPath = currentOriginalPath;
        });
        this.setupParentsIntoColumns(result, null);
        return result;
      };
      DisplayedGroupCreator2.prototype.createColumnGroup = function(providedGroup, groupInstanceIdCreator, oldColumnsMapped, pinned) {
        var groupId = providedGroup.getGroupId();
        var instanceId = groupInstanceIdCreator.getInstanceIdForKey(groupId);
        var uniqueId = ColumnGroup.createUniqueId(groupId, instanceId);
        var columnGroup = oldColumnsMapped[uniqueId];
        if (columnGroup && columnGroup.getProvidedColumnGroup() !== providedGroup) {
          columnGroup = null;
        }
        if (exists(columnGroup)) {
          columnGroup.reset();
        } else {
          columnGroup = new ColumnGroup(providedGroup, groupId, instanceId, pinned);
          this.context.createBean(columnGroup);
        }
        return columnGroup;
      };
      DisplayedGroupCreator2.prototype.mapOldGroupsById = function(displayedGroups) {
        var result = {};
        var recursive = function(columnsOrGroups) {
          columnsOrGroups.forEach(function(columnOrGroup) {
            if (columnOrGroup instanceof ColumnGroup) {
              var columnGroup = columnOrGroup;
              result[columnOrGroup.getUniqueId()] = columnGroup;
              recursive(columnGroup.getChildren());
            }
          });
        };
        if (displayedGroups) {
          recursive(displayedGroups);
        }
        return result;
      };
      DisplayedGroupCreator2.prototype.setupParentsIntoColumns = function(columnsOrGroups, parent) {
        var _this = this;
        columnsOrGroups.forEach(function(columnsOrGroup) {
          columnsOrGroup.setParent(parent);
          if (columnsOrGroup instanceof ColumnGroup) {
            var columnGroup = columnsOrGroup;
            _this.setupParentsIntoColumns(columnGroup.getChildren(), columnGroup);
          }
        });
      };
      DisplayedGroupCreator2.prototype.getOriginalPathForColumn = function(balancedColumnTree, column) {
        var result = [];
        var found = false;
        var recursePath = function(columnTree, dept) {
          for (var i = 0; i < columnTree.length; i++) {
            if (found) {
              return;
            }
            var node = columnTree[i];
            if (node instanceof ProvidedColumnGroup) {
              recursePath(node.getChildren(), dept + 1);
              result[dept] = node;
            } else if (node === column) {
              found = true;
            }
          }
        };
        recursePath(balancedColumnTree, 0);
        if (found) {
          return result;
        }
        console.warn("AG Grid: could not get path");
        return null;
      };
      DisplayedGroupCreator2 = __decorate$2s([
        Bean("displayedGroupCreator")
      ], DisplayedGroupCreator2);
      return DisplayedGroupCreator2;
    }(BeanStub);
    __extends$2Q = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$2r = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    AgStackComponentsRegistry = function(_super) {
      __extends$2Q(AgStackComponentsRegistry2, _super);
      function AgStackComponentsRegistry2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.componentsMappedByName = {};
        return _this;
      }
      AgStackComponentsRegistry2.prototype.setupComponents = function(components) {
        var _this = this;
        if (components) {
          components.forEach(function(componentMeta) {
            return _this.addComponent(componentMeta);
          });
        }
      };
      AgStackComponentsRegistry2.prototype.addComponent = function(componentMeta) {
        var classEscaped = componentMeta.componentName.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
        var classUpperCase = classEscaped.toUpperCase();
        this.componentsMappedByName[classUpperCase] = componentMeta.componentClass;
      };
      AgStackComponentsRegistry2.prototype.getComponentClass = function(htmlTag) {
        return this.componentsMappedByName[htmlTag];
      };
      AgStackComponentsRegistry2 = __decorate$2r([
        Bean("agStackComponentsRegistry")
      ], AgStackComponentsRegistry2);
      return AgStackComponentsRegistry2;
    }(BeanStub);
    __read$k = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    Color = function() {
      function Color2(r, g, b, a) {
        if (a === void 0) {
          a = 1;
        }
        this.r = Math.min(1, Math.max(0, r || 0));
        this.g = Math.min(1, Math.max(0, g || 0));
        this.b = Math.min(1, Math.max(0, b || 0));
        this.a = Math.min(1, Math.max(0, a || 0));
      }
      Color2.fromString = function(str) {
        if (str.indexOf("#") >= 0) {
          return Color2.fromHexString(str);
        }
        var hex = Color2.nameToHex[str];
        if (hex) {
          return Color2.fromHexString(hex);
        }
        if (str.indexOf("rgb") >= 0) {
          return Color2.fromRgbaString(str);
        }
        throw new Error("Invalid color string: '" + str + "'");
      };
      Color2.parseHex = function(input) {
        input = input.replace(/ /g, "").slice(1);
        var parts;
        switch (input.length) {
          case 6:
          case 8:
            parts = [];
            for (var i = 0; i < input.length; i += 2) {
              parts.push(parseInt("" + input[i] + input[i + 1], 16));
            }
            break;
          case 3:
          case 4:
            parts = input.split("").map(function(p) {
              return parseInt(p, 16);
            }).map(function(p) {
              return p + p * 16;
            });
            break;
        }
        if (parts.length >= 3) {
          if (parts.every(function(p) {
            return p >= 0;
          })) {
            if (parts.length === 3) {
              parts.push(255);
            }
            return parts;
          }
        }
      };
      Color2.fromHexString = function(str) {
        var values2 = Color2.parseHex(str);
        if (values2) {
          var _a = __read$k(values2, 4), r = _a[0], g = _a[1], b = _a[2], a = _a[3];
          return new Color2(r / 255, g / 255, b / 255, a / 255);
        }
        throw new Error("Malformed hexadecimal color string: '" + str + "'");
      };
      Color2.stringToRgba = function(str) {
        var _a = __read$k([NaN, NaN], 2), po = _a[0], pc = _a[1];
        for (var i = 0; i < str.length; i++) {
          var c = str[i];
          if (!po && c === "(") {
            po = i;
          } else if (c === ")") {
            pc = i;
            break;
          }
        }
        var contents = po && pc && str.substring(po + 1, pc);
        if (!contents) {
          return;
        }
        var parts = contents.split(",");
        var rgba = [];
        for (var i = 0; i < parts.length; i++) {
          var part = parts[i];
          var value = parseFloat(part);
          if (isNaN(value)) {
            return;
          }
          if (part.indexOf("%") >= 0) {
            value = Math.max(0, Math.min(100, value));
            value /= 100;
          } else {
            if (i === 3) {
              value = Math.max(0, Math.min(1, value));
            } else {
              value = Math.max(0, Math.min(255, value));
              value /= 255;
            }
          }
          rgba.push(value);
        }
        return rgba;
      };
      Color2.fromRgbaString = function(str) {
        var rgba = Color2.stringToRgba(str);
        if (rgba) {
          if (rgba.length === 3) {
            return new Color2(rgba[0], rgba[1], rgba[2]);
          } else if (rgba.length === 4) {
            return new Color2(rgba[0], rgba[1], rgba[2], rgba[3]);
          }
        }
        throw new Error("Malformed rgb/rgba color string: '" + str + "'");
      };
      Color2.fromArray = function(arr) {
        if (arr.length === 4) {
          return new Color2(arr[0], arr[1], arr[2], arr[3]);
        }
        if (arr.length === 3) {
          return new Color2(arr[0], arr[1], arr[2]);
        }
        throw new Error("The given array should contain 3 or 4 color components (numbers).");
      };
      Color2.fromHSB = function(h, s, b, alpha) {
        if (alpha === void 0) {
          alpha = 1;
        }
        var rgb = Color2.HSBtoRGB(h, s, b);
        return new Color2(rgb[0], rgb[1], rgb[2], alpha);
      };
      Color2.padHex = function(str) {
        return str.length === 1 ? "0" + str : str;
      };
      Color2.prototype.toHexString = function() {
        var hex = "#" + Color2.padHex(Math.round(this.r * 255).toString(16)) + Color2.padHex(Math.round(this.g * 255).toString(16)) + Color2.padHex(Math.round(this.b * 255).toString(16));
        if (this.a < 1) {
          hex += Color2.padHex(Math.round(this.a * 255).toString(16));
        }
        return hex;
      };
      Color2.prototype.toRgbaString = function(fractionDigits) {
        if (fractionDigits === void 0) {
          fractionDigits = 3;
        }
        var components = [
          Math.round(this.r * 255),
          Math.round(this.g * 255),
          Math.round(this.b * 255)
        ];
        var k = Math.pow(10, fractionDigits);
        if (this.a !== 1) {
          components.push(Math.round(this.a * k) / k);
          return "rgba(" + components.join(", ") + ")";
        }
        return "rgb(" + components.join(", ") + ")";
      };
      Color2.prototype.toString = function() {
        if (this.a === 1) {
          return this.toHexString();
        }
        return this.toRgbaString();
      };
      Color2.prototype.toHSB = function() {
        return Color2.RGBtoHSB(this.r, this.g, this.b);
      };
      Color2.RGBtoHSB = function(r, g, b) {
        var min = Math.min(r, g, b);
        var max = Math.max(r, g, b);
        var S = max !== 0 ? (max - min) / max : 0;
        var H = NaN;
        if (min !== max) {
          var delta = max - min;
          var rc = (max - r) / delta;
          var gc = (max - g) / delta;
          var bc = (max - b) / delta;
          if (r === max) {
            H = bc - gc;
          } else if (g === max) {
            H = 2 + rc - bc;
          } else {
            H = 4 + gc - rc;
          }
          H /= 6;
          if (H < 0) {
            H = H + 1;
          }
        }
        return [H * 360, S, max];
      };
      Color2.HSBtoRGB = function(H, S, B) {
        if (isNaN(H)) {
          H = 0;
        }
        H = (H % 360 + 360) % 360 / 360;
        var r = 0;
        var g = 0;
        var b = 0;
        if (S === 0) {
          r = g = b = B;
        } else {
          var h = (H - Math.floor(H)) * 6;
          var f = h - Math.floor(h);
          var p = B * (1 - S);
          var q = B * (1 - S * f);
          var t = B * (1 - S * (1 - f));
          switch (h >> 0) {
            case 0:
              r = B;
              g = t;
              b = p;
              break;
            case 1:
              r = q;
              g = B;
              b = p;
              break;
            case 2:
              r = p;
              g = B;
              b = t;
              break;
            case 3:
              r = p;
              g = q;
              b = B;
              break;
            case 4:
              r = t;
              g = p;
              b = B;
              break;
            case 5:
              r = B;
              g = p;
              b = q;
              break;
          }
        }
        return [r, g, b];
      };
      Color2.prototype.derive = function(hueShift, saturationFactor, brightnessFactor, opacityFactor) {
        var hsb = Color2.RGBtoHSB(this.r, this.g, this.b);
        var b = hsb[2];
        if (b == 0 && brightnessFactor > 1) {
          b = 0.05;
        }
        var h = ((hsb[0] + hueShift) % 360 + 360) % 360;
        var s = Math.max(Math.min(hsb[1] * saturationFactor, 1), 0);
        b = Math.max(Math.min(b * brightnessFactor, 1), 0);
        var a = Math.max(Math.min(this.a * opacityFactor, 1), 0);
        var rgba = Color2.HSBtoRGB(h, s, b);
        rgba.push(a);
        return Color2.fromArray(rgba);
      };
      Color2.prototype.brighter = function() {
        return this.derive(0, 1, 1 / 0.7, 1);
      };
      Color2.prototype.darker = function() {
        return this.derive(0, 1, 0.7, 1);
      };
      Color2.nameToHex = Object.freeze({
        aliceblue: "#F0F8FF",
        antiquewhite: "#FAEBD7",
        aqua: "#00FFFF",
        aquamarine: "#7FFFD4",
        azure: "#F0FFFF",
        beige: "#F5F5DC",
        bisque: "#FFE4C4",
        black: "#000000",
        blanchedalmond: "#FFEBCD",
        blue: "#0000FF",
        blueviolet: "#8A2BE2",
        brown: "#A52A2A",
        burlywood: "#DEB887",
        cadetblue: "#5F9EA0",
        chartreuse: "#7FFF00",
        chocolate: "#D2691E",
        coral: "#FF7F50",
        cornflowerblue: "#6495ED",
        cornsilk: "#FFF8DC",
        crimson: "#DC143C",
        cyan: "#00FFFF",
        darkblue: "#00008B",
        darkcyan: "#008B8B",
        darkgoldenrod: "#B8860B",
        darkgray: "#A9A9A9",
        darkgreen: "#006400",
        darkgrey: "#A9A9A9",
        darkkhaki: "#BDB76B",
        darkmagenta: "#8B008B",
        darkolivegreen: "#556B2F",
        darkorange: "#FF8C00",
        darkorchid: "#9932CC",
        darkred: "#8B0000",
        darksalmon: "#E9967A",
        darkseagreen: "#8FBC8F",
        darkslateblue: "#483D8B",
        darkslategray: "#2F4F4F",
        darkslategrey: "#2F4F4F",
        darkturquoise: "#00CED1",
        darkviolet: "#9400D3",
        deeppink: "#FF1493",
        deepskyblue: "#00BFFF",
        dimgray: "#696969",
        dimgrey: "#696969",
        dodgerblue: "#1E90FF",
        firebrick: "#B22222",
        floralwhite: "#FFFAF0",
        forestgreen: "#228B22",
        fuchsia: "#FF00FF",
        gainsboro: "#DCDCDC",
        ghostwhite: "#F8F8FF",
        gold: "#FFD700",
        goldenrod: "#DAA520",
        gray: "#808080",
        green: "#008000",
        greenyellow: "#ADFF2F",
        grey: "#808080",
        honeydew: "#F0FFF0",
        hotpink: "#FF69B4",
        indianred: "#CD5C5C",
        indigo: "#4B0082",
        ivory: "#FFFFF0",
        khaki: "#F0E68C",
        lavender: "#E6E6FA",
        lavenderblush: "#FFF0F5",
        lawngreen: "#7CFC00",
        lemonchiffon: "#FFFACD",
        lightblue: "#ADD8E6",
        lightcoral: "#F08080",
        lightcyan: "#E0FFFF",
        lightgoldenrodyellow: "#FAFAD2",
        lightgray: "#D3D3D3",
        lightgreen: "#90EE90",
        lightgrey: "#D3D3D3",
        lightpink: "#FFB6C1",
        lightsalmon: "#FFA07A",
        lightseagreen: "#20B2AA",
        lightskyblue: "#87CEFA",
        lightslategray: "#778899",
        lightslategrey: "#778899",
        lightsteelblue: "#B0C4DE",
        lightyellow: "#FFFFE0",
        lime: "#00FF00",
        limegreen: "#32CD32",
        linen: "#FAF0E6",
        magenta: "#FF00FF",
        maroon: "#800000",
        mediumaquamarine: "#66CDAA",
        mediumblue: "#0000CD",
        mediumorchid: "#BA55D3",
        mediumpurple: "#9370DB",
        mediumseagreen: "#3CB371",
        mediumslateblue: "#7B68EE",
        mediumspringgreen: "#00FA9A",
        mediumturquoise: "#48D1CC",
        mediumvioletred: "#C71585",
        midnightblue: "#191970",
        mintcream: "#F5FFFA",
        mistyrose: "#FFE4E1",
        moccasin: "#FFE4B5",
        navajowhite: "#FFDEAD",
        navy: "#000080",
        oldlace: "#FDF5E6",
        olive: "#808000",
        olivedrab: "#6B8E23",
        orange: "#FFA500",
        orangered: "#FF4500",
        orchid: "#DA70D6",
        palegoldenrod: "#EEE8AA",
        palegreen: "#98FB98",
        paleturquoise: "#AFEEEE",
        palevioletred: "#DB7093",
        papayawhip: "#FFEFD5",
        peachpuff: "#FFDAB9",
        peru: "#CD853F",
        pink: "#FFC0CB",
        plum: "#DDA0DD",
        powderblue: "#B0E0E6",
        purple: "#800080",
        rebeccapurple: "#663399",
        red: "#FF0000",
        rosybrown: "#BC8F8F",
        royalblue: "#4169E1",
        saddlebrown: "#8B4513",
        salmon: "#FA8072",
        sandybrown: "#F4A460",
        seagreen: "#2E8B57",
        seashell: "#FFF5EE",
        sienna: "#A0522D",
        silver: "#C0C0C0",
        skyblue: "#87CEEB",
        slateblue: "#6A5ACD",
        slategray: "#708090",
        slategrey: "#708090",
        snow: "#FFFAFA",
        springgreen: "#00FF7F",
        steelblue: "#4682B4",
        tan: "#D2B48C",
        teal: "#008080",
        thistle: "#D8BFD8",
        tomato: "#FF6347",
        turquoise: "#40E0D0",
        violet: "#EE82EE",
        wheat: "#F5DEB3",
        white: "#FFFFFF",
        whitesmoke: "#F5F5F5",
        yellow: "#FFFF00",
        yellowgreen: "#9ACD32"
      });
      return Color2;
    }();
    CsvUtils = Object.freeze({
      __proto__: null,
      stringToArray
    });
    DomUtils = Object.freeze({
      __proto__: null,
      radioCssClass,
      isFocusableFormField,
      setDisplayed,
      setVisible,
      setDisabled,
      isElementChildOfClass,
      getElementSize,
      getInnerHeight,
      getInnerWidth,
      getAbsoluteHeight,
      getAbsoluteWidth,
      isRtlNegativeScroll,
      getScrollLeft,
      setScrollLeft,
      clearElement,
      removeElement,
      removeFromParent,
      isVisible,
      loadTemplate,
      appendHtml,
      getElementAttribute,
      offsetHeight,
      offsetWidth,
      ensureDomOrder,
      setDomChildOrder,
      insertWithDomOrder,
      prependDC,
      addStylesToElement,
      isHorizontalScrollShowing,
      isVerticalScrollShowing,
      setElementWidth,
      setFixedWidth,
      setElementHeight,
      setFixedHeight,
      formatSize,
      isNode,
      isElement,
      isNodeOrElement,
      copyNodeList,
      iterateNamedNodeMap,
      setCheckboxState,
      addOrRemoveAttribute,
      nodeListForEach
    });
    GeneralUtils = Object.freeze({
      __proto__: null,
      getNameOfClass,
      findLineByLeastSquares,
      cssStyleObjectToMarkup,
      message,
      bindCellRendererToHtmlElement
    });
    AriaUtils = Object.freeze({
      __proto__: null,
      setAriaRole,
      getAriaSortState,
      getAriaLevel,
      getAriaPosInSet,
      getAriaDescribedBy,
      setAriaLabel,
      setAriaLabelledBy,
      setAriaDescription,
      setAriaDescribedBy,
      setAriaLevel,
      setAriaDisabled,
      setAriaHidden,
      setAriaExpanded,
      removeAriaExpanded,
      setAriaSetSize,
      setAriaPosInSet,
      setAriaMultiSelectable,
      setAriaRowCount,
      setAriaRowIndex,
      setAriaColCount,
      setAriaColIndex,
      setAriaColSpan,
      setAriaSort,
      removeAriaSort,
      setAriaSelected,
      setAriaChecked
    });
    __read$j = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    calculateOrdinal = function(value) {
      if (value > 3 && value < 21) {
        return "th";
      }
      var remainder = value % 10;
      switch (remainder) {
        case 1:
          return "st";
        case 2:
          return "nd";
        case 3:
          return "rd";
      }
      return "th";
    };
    DateUtils = Object.freeze({
      __proto__: null,
      serialiseDate,
      dateToFormattedString,
      parseDateTimeFromString
    });
    iconNameClassMap = {
      columnGroupOpened: "expanded",
      columnGroupClosed: "contracted",
      columnSelectClosed: "tree-closed",
      columnSelectOpen: "tree-open",
      columnSelectIndeterminate: "tree-indeterminate",
      columnMovePin: "pin",
      columnMoveHide: "eye-slash",
      columnMoveMove: "arrows",
      columnMoveLeft: "left",
      columnMoveRight: "right",
      columnMoveGroup: "group",
      columnMoveValue: "aggregation",
      columnMovePivot: "pivot",
      dropNotAllowed: "not-allowed",
      groupContracted: "tree-closed",
      groupExpanded: "tree-open",
      chart: "chart",
      close: "cross",
      cancel: "cancel",
      check: "tick",
      first: "first",
      previous: "previous",
      next: "next",
      last: "last",
      linked: "linked",
      unlinked: "unlinked",
      colorPicker: "color-picker",
      groupLoading: "loading",
      menu: "menu",
      filter: "filter",
      columns: "columns",
      maximize: "maximize",
      minimize: "minimize",
      menuPin: "pin",
      menuValue: "aggregation",
      menuAddRowGroup: "group",
      menuRemoveRowGroup: "group",
      clipboardCopy: "copy",
      clipboardPaste: "paste",
      pivotPanel: "pivot",
      rowGroupPanel: "group",
      valuePanel: "aggregation",
      columnDrag: "grip",
      rowDrag: "grip",
      save: "save",
      csvExport: "csv",
      excelExport: "excel",
      smallDown: "small-down",
      smallLeft: "small-left",
      smallRight: "small-right",
      smallUp: "small-up",
      sortAscending: "asc",
      sortDescending: "desc",
      sortUnSort: "none"
    };
    IconUtils = Object.freeze({
      __proto__: null,
      iconNameClassMap,
      createIcon,
      createIconNoSpan
    });
    KeyCode = function() {
      function KeyCode2() {
      }
      KeyCode2.BACKSPACE = "Backspace";
      KeyCode2.TAB = "Tab";
      KeyCode2.ENTER = "Enter";
      KeyCode2.ESCAPE = "Escape";
      KeyCode2.SPACE = " ";
      KeyCode2.LEFT = "ArrowLeft";
      KeyCode2.UP = "ArrowUp";
      KeyCode2.RIGHT = "ArrowRight";
      KeyCode2.DOWN = "ArrowDown";
      KeyCode2.DELETE = "Delete";
      KeyCode2.F2 = "F2";
      KeyCode2.PAGE_UP = "PageUp";
      KeyCode2.PAGE_DOWN = "PageDown";
      KeyCode2.PAGE_HOME = "Home";
      KeyCode2.PAGE_END = "End";
      KeyCode2.A = "KeyA";
      KeyCode2.C = "KeyC";
      KeyCode2.V = "KeyV";
      KeyCode2.D = "KeyD";
      KeyCode2.Z = "KeyZ";
      KeyCode2.Y = "KeyY";
      return KeyCode2;
    }();
    NUMPAD_DEL_NUMLOCK_ON_KEY = "Del";
    NUMPAD_DEL_NUMLOCK_ON_KEYCODE = 46;
    A_KEYCODE = 65;
    C_KEYCODE = 67;
    V_KEYCODE = 86;
    D_KEYCODE = 68;
    Z_KEYCODE = 90;
    Y_KEYCODE = 89;
    KeyboardUtils = Object.freeze({
      __proto__: null,
      isEventFromPrintableCharacter,
      isUserSuppressingKeyboardEvent,
      isUserSuppressingHeaderKeyboardEvent,
      normaliseQwertyAzerty,
      isDeleteKey
    });
    MouseUtils = Object.freeze({
      __proto__: null,
      areEventsNear
    });
    RowNodeUtils = Object.freeze({
      __proto__: null,
      sortRowNodesByOrder,
      traverseNodesWithKey
    });
    SetUtils = Object.freeze({
      __proto__: null,
      convertToSet
    });
    __assign$f = function() {
      __assign$f = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$f.apply(this, arguments);
    };
    utils = __assign$f(__assign$f(__assign$f(__assign$f(__assign$f(__assign$f(__assign$f(__assign$f(__assign$f(__assign$f(__assign$f(__assign$f(__assign$f(__assign$f(__assign$f(__assign$f(__assign$f(__assign$f(__assign$f(__assign$f({}, GeneralUtils), AriaUtils), ArrayUtils), BrowserUtils), CsvUtils), DateUtils), DomUtils), EventUtils), FunctionUtils), FuzzyMatchUtils), GenericUtils), IconUtils), KeyboardUtils), MapUtils), MouseUtils), NumberUtils), ObjectUtils), RowNodeUtils), SetUtils), StringUtils);
    _ = utils;
    NumberSequence = function() {
      function NumberSequence2(initValue, step) {
        if (initValue === void 0) {
          initValue = 0;
        }
        if (step === void 0) {
          step = 1;
        }
        this.nextValue = initValue;
        this.step = step;
      }
      NumberSequence2.prototype.next = function() {
        var valToReturn = this.nextValue;
        this.nextValue += this.step;
        return valToReturn;
      };
      NumberSequence2.prototype.peek = function() {
        return this.nextValue;
      };
      NumberSequence2.prototype.skip = function(count) {
        this.nextValue += count;
      };
      return NumberSequence2;
    }();
    (function(AgPromiseStatus2) {
      AgPromiseStatus2[AgPromiseStatus2["IN_PROGRESS"] = 0] = "IN_PROGRESS";
      AgPromiseStatus2[AgPromiseStatus2["RESOLVED"] = 1] = "RESOLVED";
    })(AgPromiseStatus || (AgPromiseStatus = {}));
    AgPromise = function() {
      function AgPromise2(callback) {
        var _this = this;
        this.status = AgPromiseStatus.IN_PROGRESS;
        this.resolution = null;
        this.waiters = [];
        callback(function(value) {
          return _this.onDone(value);
        }, function(params) {
          return _this.onReject(params);
        });
      }
      AgPromise2.all = function(promises) {
        return new AgPromise2(function(resolve) {
          var remainingToResolve = promises.length;
          var combinedValues = new Array(remainingToResolve);
          promises.forEach(function(promise, index) {
            promise.then(function(value) {
              combinedValues[index] = value;
              remainingToResolve--;
              if (remainingToResolve === 0) {
                resolve(combinedValues);
              }
            });
          });
        });
      };
      AgPromise2.resolve = function(value) {
        if (value === void 0) {
          value = null;
        }
        return new AgPromise2(function(resolve) {
          return resolve(value);
        });
      };
      AgPromise2.prototype.then = function(func) {
        var _this = this;
        return new AgPromise2(function(resolve) {
          if (_this.status === AgPromiseStatus.RESOLVED) {
            resolve(func(_this.resolution));
          } else {
            _this.waiters.push(function(value) {
              return resolve(func(value));
            });
          }
        });
      };
      AgPromise2.prototype.resolveNow = function(ifNotResolvedValue, ifResolved) {
        return this.status === AgPromiseStatus.RESOLVED ? ifResolved(this.resolution) : ifNotResolvedValue;
      };
      AgPromise2.prototype.onDone = function(value) {
        this.status = AgPromiseStatus.RESOLVED;
        this.resolution = value;
        this.waiters.forEach(function(waiter) {
          return waiter(value);
        });
      };
      AgPromise2.prototype.onReject = function(params) {
        console.warn("TBI");
      };
      return AgPromise2;
    }();
    Timer = function() {
      function Timer2() {
        this.timestamp = new Date().getTime();
      }
      Timer2.prototype.print = function(msg) {
        var duration = new Date().getTime() - this.timestamp;
        console.info(msg + " = " + duration);
        this.timestamp = new Date().getTime();
      };
      return Timer2;
    }();
    __extends$2P = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign$e = function() {
      __assign$e = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$e.apply(this, arguments);
    };
    __decorate$2q = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    (function(TooltipStates2) {
      TooltipStates2[TooltipStates2["NOTHING"] = 0] = "NOTHING";
      TooltipStates2[TooltipStates2["WAITING_TO_SHOW"] = 1] = "WAITING_TO_SHOW";
      TooltipStates2[TooltipStates2["SHOWING"] = 2] = "SHOWING";
    })(TooltipStates || (TooltipStates = {}));
    CustomTooltipFeature = function(_super) {
      __extends$2P(CustomTooltipFeature2, _super);
      function CustomTooltipFeature2(parentComp) {
        var _this = _super.call(this) || this;
        _this.DEFAULT_SHOW_TOOLTIP_DELAY = 2e3;
        _this.DEFAULT_HIDE_TOOLTIP_DELAY = 1e4;
        _this.SHOW_QUICK_TOOLTIP_DIFF = 1e3;
        _this.FADE_OUT_TOOLTIP_TIMEOUT = 1e3;
        _this.state = TooltipStates.NOTHING;
        _this.tooltipInstanceCount = 0;
        _this.tooltipMouseTrack = false;
        _this.parentComp = parentComp;
        return _this;
      }
      CustomTooltipFeature2.prototype.postConstruct = function() {
        this.tooltipShowDelay = this.gridOptionsWrapper.getTooltipDelay("show") || this.DEFAULT_SHOW_TOOLTIP_DELAY;
        this.tooltipHideDelay = this.gridOptionsWrapper.getTooltipDelay("hide") || this.DEFAULT_HIDE_TOOLTIP_DELAY;
        this.tooltipMouseTrack = this.gridOptionsWrapper.isTooltipMouseTrack();
        var el = this.parentComp.getGui();
        this.addManagedListener(el, "mouseenter", this.onMouseEnter.bind(this));
        this.addManagedListener(el, "mouseleave", this.onMouseLeave.bind(this));
        this.addManagedListener(el, "mousemove", this.onMouseMove.bind(this));
        this.addManagedListener(el, "mousedown", this.onMouseDown.bind(this));
        this.addManagedListener(el, "keydown", this.onKeyDown.bind(this));
      };
      CustomTooltipFeature2.prototype.destroy = function() {
        this.setToDoNothing();
        _super.prototype.destroy.call(this);
      };
      CustomTooltipFeature2.prototype.onMouseEnter = function(e) {
        if (isIOSUserAgent()) {
          return;
        }
        if (this.state != TooltipStates.NOTHING) {
          return;
        }
        var delay = this.isLastTooltipHiddenRecently() ? 200 : this.tooltipShowDelay;
        this.showTooltipTimeoutId = window.setTimeout(this.showTooltip.bind(this), delay);
        this.lastMouseEvent = e;
        this.state = TooltipStates.WAITING_TO_SHOW;
      };
      CustomTooltipFeature2.prototype.onMouseLeave = function() {
        this.setToDoNothing();
      };
      CustomTooltipFeature2.prototype.onKeyDown = function() {
        this.setToDoNothing();
      };
      CustomTooltipFeature2.prototype.setToDoNothing = function() {
        if (this.state === TooltipStates.SHOWING) {
          this.hideTooltip();
        }
        this.clearTimeouts();
        this.state = TooltipStates.NOTHING;
      };
      CustomTooltipFeature2.prototype.onMouseMove = function(e) {
        this.lastMouseEvent = e;
        if (this.tooltipMouseTrack && this.state === TooltipStates.SHOWING && this.tooltipComp) {
          this.positionTooltipUnderLastMouseEvent();
        }
      };
      CustomTooltipFeature2.prototype.onMouseDown = function() {
        this.setToDoNothing();
      };
      CustomTooltipFeature2.prototype.hideTooltip = function() {
        if (this.tooltipComp) {
          this.destroyTooltipComp();
          CustomTooltipFeature2.lastTooltipHideTime = new Date().getTime();
        }
        this.state = TooltipStates.NOTHING;
      };
      CustomTooltipFeature2.prototype.destroyTooltipComp = function() {
        var _this = this;
        this.tooltipComp.getGui().classList.add("ag-tooltip-hiding");
        var tooltipPopupDestroyFunc = this.tooltipPopupDestroyFunc;
        var tooltipComp = this.tooltipComp;
        window.setTimeout(function() {
          tooltipPopupDestroyFunc();
          _this.getContext().destroyBean(tooltipComp);
        }, this.FADE_OUT_TOOLTIP_TIMEOUT);
        this.tooltipPopupDestroyFunc = void 0;
        this.tooltipComp = void 0;
      };
      CustomTooltipFeature2.prototype.isLastTooltipHiddenRecently = function() {
        var now = new Date().getTime();
        var then = CustomTooltipFeature2.lastTooltipHideTime;
        return now - then < this.SHOW_QUICK_TOOLTIP_DIFF;
      };
      CustomTooltipFeature2.prototype.showTooltip = function() {
        var params = __assign$e({}, this.parentComp.getTooltipParams());
        if (!exists(params.value)) {
          this.setToDoNothing();
          return;
        }
        this.state = TooltipStates.SHOWING;
        this.tooltipInstanceCount++;
        var callback = this.newTooltipComponentCallback.bind(this, this.tooltipInstanceCount);
        var userDetails = this.userComponentFactory.getTooltipCompDetails(params);
        userDetails.newAgStackInstance().then(callback);
      };
      CustomTooltipFeature2.prototype.newTooltipComponentCallback = function(tooltipInstanceCopy, tooltipComp) {
        var compNoLongerNeeded = this.state !== TooltipStates.SHOWING || this.tooltipInstanceCount !== tooltipInstanceCopy;
        if (compNoLongerNeeded) {
          this.getContext().destroyBean(tooltipComp);
          return;
        }
        var eGui = tooltipComp.getGui();
        this.tooltipComp = tooltipComp;
        if (!eGui.classList.contains("ag-tooltip")) {
          eGui.classList.add("ag-tooltip-custom");
        }
        var translate = this.gridOptionsWrapper.getLocaleTextFunc();
        var addPopupRes = this.popupService.addPopup({
          eChild: eGui,
          ariaLabel: translate("ariaLabelTooltip", "Tooltip")
        });
        if (addPopupRes) {
          this.tooltipPopupDestroyFunc = addPopupRes.hideFunc;
        }
        this.positionTooltipUnderLastMouseEvent();
        this.hideTooltipTimeoutId = window.setTimeout(this.hideTooltip.bind(this), this.tooltipHideDelay);
      };
      CustomTooltipFeature2.prototype.positionTooltipUnderLastMouseEvent = function() {
        this.popupService.positionPopupUnderMouseEvent({
          type: "tooltip",
          mouseEvent: this.lastMouseEvent,
          ePopup: this.tooltipComp.getGui(),
          nudgeY: 18,
          skipObserver: this.tooltipMouseTrack
        });
      };
      CustomTooltipFeature2.prototype.clearTimeouts = function() {
        if (this.showTooltipTimeoutId) {
          window.clearTimeout(this.showTooltipTimeoutId);
          this.showTooltipTimeoutId = void 0;
        }
        if (this.hideTooltipTimeoutId) {
          window.clearTimeout(this.hideTooltipTimeoutId);
          this.hideTooltipTimeoutId = void 0;
        }
      };
      __decorate$2q([
        Autowired("popupService")
      ], CustomTooltipFeature2.prototype, "popupService", void 0);
      __decorate$2q([
        Autowired("userComponentFactory")
      ], CustomTooltipFeature2.prototype, "userComponentFactory", void 0);
      __decorate$2q([
        Autowired("columnApi")
      ], CustomTooltipFeature2.prototype, "columnApi", void 0);
      __decorate$2q([
        Autowired("gridApi")
      ], CustomTooltipFeature2.prototype, "gridApi", void 0);
      __decorate$2q([
        PostConstruct
      ], CustomTooltipFeature2.prototype, "postConstruct", null);
      return CustomTooltipFeature2;
    }(BeanStub);
    CssClassManager = function() {
      function CssClassManager2(getGui) {
        this.cssClassStates = {};
        this.getGui = getGui;
      }
      CssClassManager2.prototype.addCssClass = function(className) {
        var _this = this;
        var list = (className || "").split(" ");
        if (list.length > 1) {
          list.forEach(function(cls) {
            return _this.addCssClass(cls);
          });
          return;
        }
        var updateNeeded = this.cssClassStates[className] !== true;
        if (updateNeeded && className.length) {
          var eGui = this.getGui();
          if (eGui) {
            eGui.classList.add(className);
          }
          this.cssClassStates[className] = true;
        }
      };
      CssClassManager2.prototype.removeCssClass = function(className) {
        var _this = this;
        var list = (className || "").split(" ");
        if (list.length > 1) {
          list.forEach(function(cls) {
            return _this.removeCssClass(cls);
          });
          return;
        }
        var updateNeeded = this.cssClassStates[className] !== false;
        if (updateNeeded && className.length) {
          var eGui = this.getGui();
          if (eGui) {
            eGui.classList.remove(className);
          }
          this.cssClassStates[className] = false;
        }
      };
      CssClassManager2.prototype.containsCssClass = function(className) {
        var eGui = this.getGui();
        if (!eGui) {
          return false;
        }
        return eGui.classList.contains(className);
      };
      CssClassManager2.prototype.addOrRemoveCssClass = function(className, addOrRemove) {
        var _this = this;
        if (!className) {
          return;
        }
        if (className.indexOf(" ") >= 0) {
          var list = (className || "").split(" ");
          if (list.length > 1) {
            list.forEach(function(cls) {
              return _this.addOrRemoveCssClass(cls, addOrRemove);
            });
            return;
          }
        }
        var updateNeeded = this.cssClassStates[className] !== addOrRemove;
        if (updateNeeded && className.length) {
          var eGui = this.getGui();
          if (eGui) {
            eGui.classList.toggle(className, addOrRemove);
          }
          this.cssClassStates[className] = addOrRemove;
        }
      };
      return CssClassManager2;
    }();
    __extends$2O = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$2p = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    compIdSequence = new NumberSequence();
    Component = function(_super) {
      __extends$2O(Component2, _super);
      function Component2(template) {
        var _this = _super.call(this) || this;
        _this.displayed = true;
        _this.visible = true;
        _this.compId = compIdSequence.next();
        _this.cssClassManager = new CssClassManager(function() {
          return _this.eGui;
        });
        if (template) {
          _this.setTemplate(template);
        }
        return _this;
      }
      Component2.prototype.preConstructOnComponent = function() {
        this.usingBrowserTooltips = this.gridOptionsWrapper.isEnableBrowserTooltips();
      };
      Component2.prototype.getCompId = function() {
        return this.compId;
      };
      Component2.prototype.getTooltipParams = function() {
        return {
          value: this.tooltipText,
          location: "UNKNOWN"
        };
      };
      Component2.prototype.setTooltip = function(newTooltipText) {
        var _this = this;
        var removeTooltip = function() {
          if (_this.usingBrowserTooltips) {
            _this.getGui().removeAttribute("title");
          } else {
            _this.tooltipFeature = _this.destroyBean(_this.tooltipFeature);
          }
        };
        var addTooltip = function() {
          if (_this.usingBrowserTooltips) {
            _this.getGui().setAttribute("title", _this.tooltipText);
          } else {
            _this.tooltipFeature = _this.createBean(new CustomTooltipFeature(_this));
          }
        };
        if (this.tooltipText != newTooltipText) {
          if (this.tooltipText) {
            removeTooltip();
          }
          if (newTooltipText != null) {
            this.tooltipText = newTooltipText;
            if (this.tooltipText) {
              addTooltip();
            }
          }
        }
      };
      Component2.prototype.createChildComponentsFromTags = function(parentNode, paramsMap) {
        var _this = this;
        var childNodeList = copyNodeList(parentNode.childNodes);
        childNodeList.forEach(function(childNode) {
          if (!(childNode instanceof HTMLElement)) {
            return;
          }
          var childComp = _this.createComponentFromElement(childNode, function(childComp2) {
            var childGui = childComp2.getGui();
            if (childGui) {
              _this.copyAttributesFromNode(childNode, childComp2.getGui());
            }
          }, paramsMap);
          if (childComp) {
            if (childComp.addItems && childNode.children.length) {
              _this.createChildComponentsFromTags(childNode, paramsMap);
              var items = Array.prototype.slice.call(childNode.children);
              childComp.addItems(items);
            }
            _this.swapComponentForNode(childComp, parentNode, childNode);
          } else if (childNode.childNodes) {
            _this.createChildComponentsFromTags(childNode, paramsMap);
          }
        });
      };
      Component2.prototype.createComponentFromElement = function(element, afterPreCreateCallback, paramsMap) {
        var key = element.nodeName;
        var componentParams = paramsMap ? paramsMap[element.getAttribute("ref")] : void 0;
        var ComponentClass = this.agStackComponentsRegistry.getComponentClass(key);
        if (ComponentClass) {
          Component2.elementGettingCreated = element;
          var newComponent = new ComponentClass(componentParams);
          newComponent.setParentComponent(this);
          this.createBean(newComponent, null, afterPreCreateCallback);
          return newComponent;
        }
        return null;
      };
      Component2.prototype.copyAttributesFromNode = function(source, dest) {
        iterateNamedNodeMap(source.attributes, function(name, value) {
          return dest.setAttribute(name, value);
        });
      };
      Component2.prototype.swapComponentForNode = function(newComponent, parentNode, childNode) {
        var eComponent = newComponent.getGui();
        parentNode.replaceChild(eComponent, childNode);
        parentNode.insertBefore(document.createComment(childNode.nodeName), eComponent);
        this.addDestroyFunc(this.destroyBean.bind(this, newComponent));
        this.swapInComponentForQuerySelectors(newComponent, childNode);
      };
      Component2.prototype.swapInComponentForQuerySelectors = function(newComponent, childNode) {
        var thisNoType = this;
        this.iterateOverQuerySelectors(function(querySelector) {
          if (thisNoType[querySelector.attributeName] === childNode) {
            thisNoType[querySelector.attributeName] = newComponent;
          }
        });
      };
      Component2.prototype.iterateOverQuerySelectors = function(action) {
        var thisPrototype = Object.getPrototypeOf(this);
        while (thisPrototype != null) {
          var metaData = thisPrototype.__agComponentMetaData;
          var currentProtoName = getFunctionName(thisPrototype.constructor);
          if (metaData && metaData[currentProtoName] && metaData[currentProtoName].querySelectors) {
            metaData[currentProtoName].querySelectors.forEach(function(querySelector) {
              return action(querySelector);
            });
          }
          thisPrototype = Object.getPrototypeOf(thisPrototype);
        }
      };
      Component2.prototype.setTemplate = function(template, paramsMap) {
        var eGui = loadTemplate(template);
        this.setTemplateFromElement(eGui, paramsMap);
      };
      Component2.prototype.setTemplateFromElement = function(element, paramsMap) {
        this.eGui = element;
        this.eGui.__agComponent = this;
        this.wireQuerySelectors();
        if (!!this.getContext()) {
          this.createChildComponentsFromTags(this.getGui(), paramsMap);
        }
      };
      Component2.prototype.createChildComponentsPreConstruct = function() {
        if (!!this.getGui()) {
          this.createChildComponentsFromTags(this.getGui());
        }
      };
      Component2.prototype.wireQuerySelectors = function() {
        var _this = this;
        if (!this.eGui) {
          return;
        }
        var thisNoType = this;
        this.iterateOverQuerySelectors(function(querySelector) {
          var setResult = function(result) {
            return thisNoType[querySelector.attributeName] = result;
          };
          var topLevelRefMatch = querySelector.refSelector && _this.eGui.getAttribute("ref") === querySelector.refSelector;
          if (topLevelRefMatch) {
            setResult(_this.eGui);
          } else {
            var resultOfQuery = _this.eGui.querySelector(querySelector.querySelector);
            if (resultOfQuery) {
              setResult(resultOfQuery.__agComponent || resultOfQuery);
            }
          }
        });
      };
      Component2.prototype.getGui = function() {
        return this.eGui;
      };
      Component2.prototype.getFocusableElement = function() {
        return this.eGui;
      };
      Component2.prototype.setParentComponent = function(component) {
        this.parentComponent = component;
      };
      Component2.prototype.getParentComponent = function() {
        return this.parentComponent;
      };
      Component2.prototype.setGui = function(eGui) {
        this.eGui = eGui;
      };
      Component2.prototype.queryForHtmlElement = function(cssSelector) {
        return this.eGui.querySelector(cssSelector);
      };
      Component2.prototype.queryForHtmlInputElement = function(cssSelector) {
        return this.eGui.querySelector(cssSelector);
      };
      Component2.prototype.appendChild = function(newChild, container) {
        if (newChild == null) {
          return;
        }
        if (!container) {
          container = this.eGui;
        }
        if (isNodeOrElement(newChild)) {
          container.appendChild(newChild);
        } else {
          var childComponent = newChild;
          container.appendChild(childComponent.getGui());
        }
      };
      Component2.prototype.isDisplayed = function() {
        return this.displayed;
      };
      Component2.prototype.setVisible = function(visible) {
        if (visible !== this.visible) {
          this.visible = visible;
          setVisible(this.eGui, visible);
        }
      };
      Component2.prototype.setDisplayed = function(displayed) {
        if (displayed !== this.displayed) {
          this.displayed = displayed;
          setDisplayed(this.eGui, displayed);
          var event_1 = {
            type: Component2.EVENT_DISPLAYED_CHANGED,
            visible: this.displayed
          };
          this.dispatchEvent(event_1);
        }
      };
      Component2.prototype.destroy = function() {
        if (this.tooltipFeature) {
          this.tooltipFeature = this.destroyBean(this.tooltipFeature);
        }
        _super.prototype.destroy.call(this);
      };
      Component2.prototype.addGuiEventListener = function(event, listener) {
        var _this = this;
        this.eGui.addEventListener(event, listener);
        this.addDestroyFunc(function() {
          return _this.eGui.removeEventListener(event, listener);
        });
      };
      Component2.prototype.addCssClass = function(className) {
        this.cssClassManager.addCssClass(className);
      };
      Component2.prototype.removeCssClass = function(className) {
        this.cssClassManager.removeCssClass(className);
      };
      Component2.prototype.containsCssClass = function(className) {
        return this.cssClassManager.containsCssClass(className);
      };
      Component2.prototype.addOrRemoveCssClass = function(className, addOrRemove) {
        this.cssClassManager.addOrRemoveCssClass(className, addOrRemove);
      };
      Component2.prototype.getAttribute = function(key) {
        var eGui = this.eGui;
        return eGui ? eGui.getAttribute(key) : null;
      };
      Component2.prototype.getRefElement = function(refName) {
        return this.queryForHtmlElement('[ref="' + refName + '"]');
      };
      Component2.EVENT_DISPLAYED_CHANGED = "displayedChanged";
      __decorate$2p([
        Autowired("agStackComponentsRegistry")
      ], Component2.prototype, "agStackComponentsRegistry", void 0);
      __decorate$2p([
        PreConstruct
      ], Component2.prototype, "preConstructOnComponent", null);
      __decorate$2p([
        PreConstruct
      ], Component2.prototype, "createChildComponentsPreConstruct", null);
      return Component2;
    }(BeanStub);
    __extends$2N = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$2o = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    ReadOnlyFloatingFilter = function(_super) {
      __extends$2N(ReadOnlyFloatingFilter2, _super);
      function ReadOnlyFloatingFilter2() {
        return _super.call(this, '\n            <div class="ag-floating-filter-input" role="presentation">\n                <ag-input-text-field ref="eFloatingFilterText"></ag-input-text-field>\n            </div>') || this;
      }
      ReadOnlyFloatingFilter2.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
      };
      ReadOnlyFloatingFilter2.prototype.init = function(params) {
        this.params = params;
        var displayName = this.columnModel.getDisplayNameForColumn(params.column, "header", true);
        var translate = this.gridOptionsWrapper.getLocaleTextFunc();
        this.eFloatingFilterText.setDisabled(true).setInputAriaLabel(displayName + " " + translate("ariaFilterInput", "Filter Input"));
      };
      ReadOnlyFloatingFilter2.prototype.onParentModelChanged = function(parentModel) {
        var _this = this;
        if (!parentModel) {
          this.eFloatingFilterText.setValue("");
          return;
        }
        this.params.parentFilterInstance(function(filterInstance) {
          if (filterInstance.getModelAsString) {
            var modelAsString = filterInstance.getModelAsString(parentModel);
            _this.eFloatingFilterText.setValue(modelAsString);
          }
        });
      };
      __decorate$2o([
        RefSelector("eFloatingFilterText")
      ], ReadOnlyFloatingFilter2.prototype, "eFloatingFilterText", void 0);
      __decorate$2o([
        Autowired("columnModel")
      ], ReadOnlyFloatingFilter2.prototype, "columnModel", void 0);
      return ReadOnlyFloatingFilter2;
    }(Component);
    DateCompWrapper = function() {
      function DateCompWrapper2(context, userComponentFactory, dateComponentParams, eParent) {
        var _this = this;
        this.alive = true;
        this.context = context;
        this.eParent = eParent;
        var compDetails = userComponentFactory.getDateCompDetails(dateComponentParams);
        var promise = compDetails.newAgStackInstance();
        promise.then(function(dateComp) {
          if (!_this.alive) {
            context.destroyBean(dateComp);
            return;
          }
          _this.dateComp = dateComp;
          if (!dateComp) {
            return;
          }
          eParent.appendChild(dateComp.getGui());
          if (dateComp.afterGuiAttached) {
            dateComp.afterGuiAttached();
          }
          if (_this.tempValue) {
            dateComp.setDate(_this.tempValue);
          }
          if (_this.disabled != null) {
            _this.setDateCompDisabled(_this.disabled);
          }
        });
      }
      DateCompWrapper2.prototype.destroy = function() {
        this.alive = false;
        this.dateComp = this.context.destroyBean(this.dateComp);
      };
      DateCompWrapper2.prototype.getDate = function() {
        return this.dateComp ? this.dateComp.getDate() : this.tempValue;
      };
      DateCompWrapper2.prototype.setDate = function(value) {
        if (this.dateComp) {
          this.dateComp.setDate(value);
        } else {
          this.tempValue = value;
        }
      };
      DateCompWrapper2.prototype.setDisabled = function(disabled) {
        if (this.dateComp) {
          this.setDateCompDisabled(disabled);
        } else {
          this.disabled = disabled;
        }
      };
      DateCompWrapper2.prototype.setDisplayed = function(displayed) {
        setDisplayed(this.eParent, displayed);
      };
      DateCompWrapper2.prototype.setInputPlaceholder = function(placeholder) {
        if (this.dateComp && this.dateComp.setInputPlaceholder) {
          this.dateComp.setInputPlaceholder(placeholder);
        }
      };
      DateCompWrapper2.prototype.setInputAriaLabel = function(label) {
        if (this.dateComp && this.dateComp.setInputAriaLabel) {
          this.dateComp.setInputAriaLabel(label);
        }
      };
      DateCompWrapper2.prototype.afterGuiAttached = function(params) {
        if (this.dateComp && typeof this.dateComp.afterGuiAttached === "function") {
          this.dateComp.afterGuiAttached(params);
        }
      };
      DateCompWrapper2.prototype.setDateCompDisabled = function(disabled) {
        if (this.dateComp == null) {
          return;
        }
        if (this.dateComp.setDisabled == null) {
          return;
        }
        this.dateComp.setDisabled(disabled);
      };
      return DateCompWrapper2;
    }();
    __assign$d = function() {
      __assign$d = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$d.apply(this, arguments);
    };
    OptionsFactory = function() {
      function OptionsFactory2() {
        this.customFilterOptions = {};
      }
      OptionsFactory2.prototype.init = function(params, defaultOptions) {
        this.filterOptions = params.filterOptions || defaultOptions;
        this.mapCustomOptions();
        this.selectDefaultItem(params);
        this.checkForDeprecatedParams();
      };
      OptionsFactory2.prototype.checkForDeprecatedParams = function() {
        if (this.filterOptions.some(function(opt) {
          return typeof opt != "string" && opt.test != null;
        })) {
          console.warn("AG Grid: [IFilterOptionDef] since v26.2.0, test() has been replaced with predicate().");
        }
        if (this.filterOptions.some(function(opt) {
          return typeof opt != "string" && opt.hideFilterInput != null;
        })) {
          console.warn("AG Grid: [IFilterOptionDef] since v26.2.0, useOfHideFilterInput has been replaced with numberOfInputs.");
        }
      };
      OptionsFactory2.prototype.getFilterOptions = function() {
        return this.filterOptions;
      };
      OptionsFactory2.prototype.mapCustomOptions = function() {
        var _this = this;
        if (!this.filterOptions) {
          return;
        }
        this.filterOptions.forEach(function(filterOption) {
          if (typeof filterOption === "string") {
            return;
          }
          var requiredProperties = [["displayKey"], ["displayName"], ["predicate", "test"]];
          var propertyCheck = function(keys2) {
            if (!keys2.some(function(key) {
              return filterOption[key] != null;
            })) {
              console.warn("AG Grid: ignoring FilterOptionDef as it doesn't contain one of '" + keys2 + "'");
              return false;
            }
            return true;
          };
          if (!requiredProperties.every(propertyCheck)) {
            _this.filterOptions = _this.filterOptions.filter(function(v) {
              return v === filterOption;
            }) || [];
            return;
          }
          var test = filterOption.test;
          var mutatedFilterOptions = __assign$d({}, filterOption);
          if (test != null && filterOption.predicate == null) {
            mutatedFilterOptions.predicate = function(v, cv) {
              return test(v[0], cv);
            };
            delete mutatedFilterOptions.test;
          }
          if (mutatedFilterOptions.hideFilterInput && mutatedFilterOptions.numberOfInputs == null) {
            mutatedFilterOptions.numberOfInputs = 0;
            delete mutatedFilterOptions.hideFilterInput;
          }
          _this.customFilterOptions[filterOption.displayKey] = mutatedFilterOptions;
        });
      };
      OptionsFactory2.prototype.selectDefaultItem = function(params) {
        if (params.defaultOption) {
          this.defaultOption = params.defaultOption;
        } else if (this.filterOptions.length >= 1) {
          var firstFilterOption = this.filterOptions[0];
          if (typeof firstFilterOption === "string") {
            this.defaultOption = firstFilterOption;
          } else if (firstFilterOption.displayKey) {
            this.defaultOption = firstFilterOption.displayKey;
          } else {
            console.warn("AG Grid: invalid FilterOptionDef supplied as it doesn't contain a 'displayKey'");
          }
        } else {
          console.warn("AG Grid: no filter options for filter");
        }
      };
      OptionsFactory2.prototype.getDefaultOption = function() {
        return this.defaultOption;
      };
      OptionsFactory2.prototype.getCustomOption = function(name) {
        return this.customFilterOptions[name];
      };
      return OptionsFactory2;
    }();
    DEFAULT_FILTER_LOCALE_TEXT = {
      applyFilter: "Apply",
      clearFilter: "Clear",
      resetFilter: "Reset",
      cancelFilter: "Cancel",
      textFilter: "Text Filter",
      numberFilter: "Number Filter",
      dateFilter: "Date Filter",
      setFilter: "Set Filter",
      filterOoo: "Filter...",
      empty: "Choose One",
      equals: "Equals",
      notEqual: "Not equal",
      lessThan: "Less than",
      greaterThan: "Greater than",
      inRange: "In range",
      inRangeStart: "From",
      inRangeEnd: "To",
      lessThanOrEqual: "Less than or equals",
      greaterThanOrEqual: "Greater than or equals",
      contains: "Contains",
      notContains: "Not contains",
      startsWith: "Starts with",
      endsWith: "Ends with",
      blank: "Blank",
      notBlank: "Not blank",
      andCondition: "AND",
      orCondition: "OR",
      dateFormatOoo: "yyyy-mm-dd"
    };
    __extends$2M = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign$c = function() {
      __assign$c = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$c.apply(this, arguments);
    };
    __decorate$2n = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    ManagedFocusFeature = function(_super) {
      __extends$2M(ManagedFocusFeature2, _super);
      function ManagedFocusFeature2(eFocusableElement, callbacks) {
        if (callbacks === void 0) {
          callbacks = {};
        }
        var _this = _super.call(this) || this;
        _this.eFocusableElement = eFocusableElement;
        _this.callbacks = callbacks;
        _this.callbacks = __assign$c({ shouldStopEventPropagation: function() {
          return false;
        }, onTabKeyDown: function(e) {
          if (e.defaultPrevented) {
            return;
          }
          var nextRoot = _this.focusService.findNextFocusableElement(_this.eFocusableElement, false, e.shiftKey);
          if (!nextRoot) {
            return;
          }
          nextRoot.focus();
          e.preventDefault();
        } }, callbacks);
        return _this;
      }
      ManagedFocusFeature2.prototype.postConstruct = function() {
        this.eFocusableElement.classList.add(ManagedFocusFeature2.FOCUS_MANAGED_CLASS);
        this.addKeyDownListeners(this.eFocusableElement);
        if (this.callbacks.onFocusIn) {
          this.addManagedListener(this.eFocusableElement, "focusin", this.callbacks.onFocusIn);
        }
        if (this.callbacks.onFocusOut) {
          this.addManagedListener(this.eFocusableElement, "focusout", this.callbacks.onFocusOut);
        }
      };
      ManagedFocusFeature2.prototype.addKeyDownListeners = function(eGui) {
        var _this = this;
        this.addManagedListener(eGui, "keydown", function(e) {
          if (e.defaultPrevented || isStopPropagationForAgGrid(e)) {
            return;
          }
          if (_this.callbacks.shouldStopEventPropagation(e)) {
            stopPropagationForAgGrid(e);
            return;
          }
          if (e.key === KeyCode.TAB) {
            _this.callbacks.onTabKeyDown(e);
          } else if (_this.callbacks.handleKeyDown) {
            _this.callbacks.handleKeyDown(e);
          }
        });
      };
      ManagedFocusFeature2.FOCUS_MANAGED_CLASS = "ag-focus-managed";
      __decorate$2n([
        Autowired("focusService")
      ], ManagedFocusFeature2.prototype, "focusService", void 0);
      __decorate$2n([
        PostConstruct
      ], ManagedFocusFeature2.prototype, "postConstruct", null);
      return ManagedFocusFeature2;
    }(BeanStub);
    __extends$2L = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$2m = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    ProvidedFilter = function(_super) {
      __extends$2L(ProvidedFilter2, _super);
      function ProvidedFilter2(filterNameKey) {
        var _this = _super.call(this) || this;
        _this.filterNameKey = filterNameKey;
        _this.applyActive = false;
        _this.hidePopup = null;
        _this.appliedModel = null;
        return _this;
      }
      ProvidedFilter2.prototype.postConstruct = function() {
        this.resetTemplate();
        this.createManagedBean(new ManagedFocusFeature(this.getFocusableElement(), {
          handleKeyDown: this.handleKeyDown.bind(this)
        }));
      };
      ProvidedFilter2.prototype.handleKeyDown = function(e) {
      };
      ProvidedFilter2.prototype.getFilterTitle = function() {
        return this.translate(this.filterNameKey);
      };
      ProvidedFilter2.prototype.isFilterActive = function() {
        return !!this.appliedModel;
      };
      ProvidedFilter2.prototype.resetTemplate = function(paramsMap) {
        var eGui = this.getGui();
        if (eGui) {
          eGui.removeEventListener("submit", this.onFormSubmit);
        }
        var templateString = '\n            <form class="ag-filter-wrapper">\n                <div class="ag-filter-body-wrapper ag-' + this.getCssIdentifier() + '-body-wrapper">\n                    ' + this.createBodyTemplate() + "\n                </div>\n            </form>";
        this.setTemplate(templateString, paramsMap);
        eGui = this.getGui();
        if (eGui) {
          eGui.addEventListener("submit", this.onFormSubmit);
        }
      };
      ProvidedFilter2.prototype.isReadOnly = function() {
        return !!this.providedFilterParams.readOnly;
      };
      ProvidedFilter2.prototype.init = function(params) {
        var _this = this;
        this.setParams(params);
        this.resetUiToDefaults(true).then(function() {
          _this.updateUiVisibility();
          _this.setupOnBtApplyDebounce();
        });
      };
      ProvidedFilter2.prototype.setParams = function(params) {
        this.providedFilterParams = params;
        this.applyActive = ProvidedFilter2.isUseApplyButton(params);
        this.createButtonPanel();
      };
      ProvidedFilter2.prototype.createButtonPanel = function() {
        var _this = this;
        var buttons = this.providedFilterParams.buttons;
        if (!buttons || buttons.length < 1 || this.isReadOnly()) {
          return;
        }
        var eButtonsPanel = document.createElement("div");
        eButtonsPanel.classList.add("ag-filter-apply-panel");
        var addButton = function(type) {
          var text;
          var clickListener;
          switch (type) {
            case "apply":
              text = _this.translate("applyFilter");
              clickListener = function(e) {
                return _this.onBtApply(false, false, e);
              };
              break;
            case "clear":
              text = _this.translate("clearFilter");
              clickListener = function() {
                return _this.onBtClear();
              };
              break;
            case "reset":
              text = _this.translate("resetFilter");
              clickListener = function() {
                return _this.onBtReset();
              };
              break;
            case "cancel":
              text = _this.translate("cancelFilter");
              clickListener = function(e) {
                _this.onBtCancel(e);
              };
              break;
            default:
              console.warn("AG Grid: Unknown button type specified");
              return;
          }
          var buttonType = type === "apply" ? "submit" : "button";
          var button = loadTemplate('<button\n                    type="' + buttonType + '"\n                    ref="' + type + 'FilterButton"\n                    class="ag-standard-button ag-filter-apply-panel-button"\n                >' + text + "\n                </button>");
          eButtonsPanel.appendChild(button);
          _this.addManagedListener(button, "click", clickListener);
        };
        convertToSet(buttons).forEach(function(type) {
          return addButton(type);
        });
        this.getGui().appendChild(eButtonsPanel);
      };
      ProvidedFilter2.prototype.getDefaultDebounceMs = function() {
        return 0;
      };
      ProvidedFilter2.prototype.setupOnBtApplyDebounce = function() {
        var debounceMs = ProvidedFilter2.getDebounceMs(this.providedFilterParams, this.getDefaultDebounceMs());
        this.onBtApplyDebounce = debounce(this.onBtApply.bind(this), debounceMs);
      };
      ProvidedFilter2.prototype.getModel = function() {
        return this.appliedModel ? this.appliedModel : null;
      };
      ProvidedFilter2.prototype.setModel = function(model) {
        var _this = this;
        var promise = model != null ? this.setModelIntoUi(model) : this.resetUiToDefaults();
        return promise.then(function() {
          _this.updateUiVisibility();
          _this.applyModel();
        });
      };
      ProvidedFilter2.prototype.onBtCancel = function(e) {
        var _this = this;
        var currentModel = this.getModel();
        var afterAppliedFunc = function() {
          _this.onUiChanged(false, "prevent");
          if (_this.providedFilterParams.closeOnApply) {
            _this.close(e);
          }
        };
        if (currentModel != null) {
          this.setModelIntoUi(currentModel).then(afterAppliedFunc);
        } else {
          this.resetUiToDefaults().then(afterAppliedFunc);
        }
      };
      ProvidedFilter2.prototype.onBtClear = function() {
        var _this = this;
        this.resetUiToDefaults().then(function() {
          return _this.onUiChanged();
        });
      };
      ProvidedFilter2.prototype.onBtReset = function() {
        this.onBtClear();
        this.onBtApply();
      };
      ProvidedFilter2.prototype.applyModel = function() {
        var newModel = this.getModelFromUi();
        if (!this.isModelValid(newModel)) {
          return false;
        }
        var previousModel = this.appliedModel;
        this.appliedModel = newModel;
        return !this.areModelsEqual(previousModel, newModel);
      };
      ProvidedFilter2.prototype.isModelValid = function(model) {
        return true;
      };
      ProvidedFilter2.prototype.onFormSubmit = function(e) {
        e.preventDefault();
      };
      ProvidedFilter2.prototype.onBtApply = function(afterFloatingFilter, afterDataChange, e) {
        if (afterFloatingFilter === void 0) {
          afterFloatingFilter = false;
        }
        if (afterDataChange === void 0) {
          afterDataChange = false;
        }
        if (e) {
          e.preventDefault();
        }
        if (this.applyModel()) {
          this.providedFilterParams.filterChangedCallback({ afterFloatingFilter, afterDataChange });
        }
        var closeOnApply = this.providedFilterParams.closeOnApply;
        if (closeOnApply && this.applyActive && !afterFloatingFilter && !afterDataChange) {
          this.close(e);
        }
      };
      ProvidedFilter2.prototype.onNewRowsLoaded = function() {
      };
      ProvidedFilter2.prototype.close = function(e) {
        if (!this.hidePopup) {
          return;
        }
        var keyboardEvent = e;
        var key = keyboardEvent && keyboardEvent.key;
        var params;
        if (key === "Enter" || key === "Space") {
          params = { keyboardEvent };
        }
        this.hidePopup(params);
        this.hidePopup = null;
      };
      ProvidedFilter2.prototype.onUiChanged = function(fromFloatingFilter, apply) {
        if (fromFloatingFilter === void 0) {
          fromFloatingFilter = false;
        }
        this.updateUiVisibility();
        this.providedFilterParams.filterModifiedCallback();
        if (this.applyActive && !this.isReadOnly) {
          var isValid = this.isModelValid(this.getModelFromUi());
          setDisabled(this.getRefElement("applyFilterButton"), !isValid);
        }
        if (fromFloatingFilter && !apply || apply === "immediately") {
          this.onBtApply(fromFloatingFilter);
        } else if (!this.applyActive && !apply || apply === "debounce") {
          this.onBtApplyDebounce();
        }
      };
      ProvidedFilter2.prototype.afterGuiAttached = function(params) {
        if (params == null) {
          return;
        }
        this.hidePopup = params.hidePopup;
      };
      ProvidedFilter2.getDebounceMs = function(params, debounceDefault) {
        if (ProvidedFilter2.isUseApplyButton(params)) {
          if (params.debounceMs != null) {
            console.warn("AG Grid: debounceMs is ignored when apply button is present");
          }
          return 0;
        }
        return params.debounceMs != null ? params.debounceMs : debounceDefault;
      };
      ProvidedFilter2.isUseApplyButton = function(params) {
        return !!params.buttons && params.buttons.indexOf("apply") >= 0;
      };
      ProvidedFilter2.prototype.destroy = function() {
        var eGui = this.getGui();
        if (eGui) {
          eGui.removeEventListener("submit", this.onFormSubmit);
        }
        this.hidePopup = null;
        _super.prototype.destroy.call(this);
      };
      ProvidedFilter2.prototype.translate = function(key) {
        var translate = this.gridOptionsWrapper.getLocaleTextFunc();
        return translate(key, DEFAULT_FILTER_LOCALE_TEXT[key]);
      };
      ProvidedFilter2.prototype.getCellValue = function(rowNode) {
        var _a = this.providedFilterParams, api = _a.api, colDef = _a.colDef, column = _a.column, columnApi = _a.columnApi, context = _a.context;
        return this.providedFilterParams.valueGetter({
          api,
          colDef,
          column,
          columnApi,
          context,
          data: rowNode.data,
          getValue: function(field) {
            return rowNode.data[field];
          },
          node: rowNode
        });
      };
      __decorate$2m([
        Autowired("rowModel")
      ], ProvidedFilter2.prototype, "rowModel", void 0);
      __decorate$2m([
        PostConstruct
      ], ProvidedFilter2.prototype, "postConstruct", null);
      return ProvidedFilter2;
    }(Component);
    __extends$2K = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$2l = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    AgAbstractLabel = function(_super) {
      __extends$2K(AgAbstractLabel2, _super);
      function AgAbstractLabel2(config, template) {
        var _this = _super.call(this, template) || this;
        _this.labelSeparator = "";
        _this.labelAlignment = "left";
        _this.disabled = false;
        _this.label = "";
        _this.config = config || {};
        return _this;
      }
      AgAbstractLabel2.prototype.postConstruct = function() {
        this.addCssClass("ag-labeled");
        this.eLabel.classList.add("ag-label");
        var _a = this.config, labelSeparator = _a.labelSeparator, label = _a.label, labelWidth = _a.labelWidth, labelAlignment = _a.labelAlignment;
        if (labelSeparator != null) {
          this.setLabelSeparator(labelSeparator);
        }
        if (label != null) {
          this.setLabel(label);
        }
        if (labelWidth != null) {
          this.setLabelWidth(labelWidth);
        }
        this.setLabelAlignment(labelAlignment || this.labelAlignment);
        this.refreshLabel();
      };
      AgAbstractLabel2.prototype.refreshLabel = function() {
        clearElement(this.eLabel);
        if (typeof this.label === "string") {
          this.eLabel.innerText = this.label + this.labelSeparator;
        } else if (this.label) {
          this.eLabel.appendChild(this.label);
        }
        if (this.label === "") {
          this.eLabel.classList.add("ag-hidden");
          setAriaRole(this.eLabel, "presentation");
        } else {
          this.eLabel.classList.remove("ag-hidden");
          setAriaRole(this.eLabel, null);
        }
      };
      AgAbstractLabel2.prototype.setLabelSeparator = function(labelSeparator) {
        if (this.labelSeparator === labelSeparator) {
          return this;
        }
        this.labelSeparator = labelSeparator;
        if (this.label != null) {
          this.refreshLabel();
        }
        return this;
      };
      AgAbstractLabel2.prototype.getLabelId = function() {
        this.eLabel.id = this.eLabel.id || "ag-" + this.getCompId() + "-label";
        return this.eLabel.id;
      };
      AgAbstractLabel2.prototype.getLabel = function() {
        return this.label;
      };
      AgAbstractLabel2.prototype.setLabel = function(label) {
        if (this.label === label) {
          return this;
        }
        this.label = label;
        this.refreshLabel();
        return this;
      };
      AgAbstractLabel2.prototype.setLabelAlignment = function(alignment) {
        var eGui = this.getGui();
        var eGuiClassList = eGui.classList;
        eGuiClassList.toggle("ag-label-align-left", alignment === "left");
        eGuiClassList.toggle("ag-label-align-right", alignment === "right");
        eGuiClassList.toggle("ag-label-align-top", alignment === "top");
        return this;
      };
      AgAbstractLabel2.prototype.setLabelWidth = function(width) {
        if (this.label == null) {
          return this;
        }
        setElementWidth(this.eLabel, width);
        return this;
      };
      AgAbstractLabel2.prototype.setDisabled = function(disabled) {
        disabled = !!disabled;
        var element = this.getGui();
        setDisabled(element, disabled);
        element.classList.toggle("ag-disabled", disabled);
        this.disabled = disabled;
        return this;
      };
      AgAbstractLabel2.prototype.isDisabled = function() {
        return !!this.disabled;
      };
      __decorate$2l([
        PostConstruct
      ], AgAbstractLabel2.prototype, "postConstruct", null);
      return AgAbstractLabel2;
    }(Component);
    __extends$2J = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    AgAbstractField = function(_super) {
      __extends$2J(AgAbstractField2, _super);
      function AgAbstractField2(config, template, className) {
        var _this = _super.call(this, config, template) || this;
        _this.className = className;
        return _this;
      }
      AgAbstractField2.prototype.postConstruct = function() {
        _super.prototype.postConstruct.call(this);
        if (this.className) {
          this.addCssClass(this.className);
        }
      };
      AgAbstractField2.prototype.onValueChange = function(callbackFn) {
        var _this = this;
        this.addManagedListener(this, AgAbstractField2.EVENT_CHANGED, function() {
          return callbackFn(_this.getValue());
        });
        return this;
      };
      AgAbstractField2.prototype.getWidth = function() {
        return this.getGui().clientWidth;
      };
      AgAbstractField2.prototype.setWidth = function(width) {
        setFixedWidth(this.getGui(), width);
        return this;
      };
      AgAbstractField2.prototype.getPreviousValue = function() {
        return this.previousValue;
      };
      AgAbstractField2.prototype.getValue = function() {
        return this.value;
      };
      AgAbstractField2.prototype.setValue = function(value, silent) {
        if (this.value === value) {
          return this;
        }
        this.previousValue = this.value;
        this.value = value;
        if (!silent) {
          this.dispatchEvent({ type: AgAbstractField2.EVENT_CHANGED });
        }
        return this;
      };
      AgAbstractField2.EVENT_CHANGED = "valueChange";
      return AgAbstractField2;
    }(AgAbstractLabel);
    __extends$2I = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$2k = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    AgPickerField = function(_super) {
      __extends$2I(AgPickerField2, _super);
      function AgPickerField2(config, className, pickerIcon, ariaRole) {
        var _this = _super.call(this, config, '<div class="ag-picker-field" role="presentation">\n                <div ref="eLabel"></div>\n                <div ref="eWrapper"\n                    class="ag-wrapper ag-picker-field-wrapper"\n                    tabIndex="-1"\n                    aria-expanded="false"\n                    ' + (ariaRole ? 'role="' + ariaRole + '"' : "") + '\n                >\n                    <div ref="eDisplayField" class="ag-picker-field-display"></div>\n                    <div ref="eIcon" class="ag-picker-field-icon" aria-hidden="true"></div>\n                </div>\n            </div>', className) || this;
        _this.pickerIcon = pickerIcon;
        _this.isPickerDisplayed = false;
        _this.isDestroyingPicker = false;
        _this.skipClick = false;
        return _this;
      }
      AgPickerField2.prototype.postConstruct = function() {
        var _this = this;
        _super.prototype.postConstruct.call(this);
        var displayId = this.getCompId() + "-display";
        this.eDisplayField.setAttribute("id", displayId);
        setAriaDescribedBy(this.eWrapper, displayId);
        var clickHandler = function() {
          if (_this.skipClick) {
            _this.skipClick = false;
            return;
          }
          if (_this.isDisabled()) {
            return;
          }
          _this.pickerComponent = _this.showPicker();
        };
        var eGui = this.getGui();
        this.addManagedListener(eGui, "mousedown", function(e) {
          if (!_this.skipClick && _this.pickerComponent && _this.pickerComponent.isAlive() && isVisible(_this.pickerComponent.getGui()) && eGui.contains(e.target)) {
            _this.skipClick = true;
          }
        });
        this.addManagedListener(eGui, "keydown", function(e) {
          switch (e.key) {
            case KeyCode.UP:
            case KeyCode.DOWN:
            case KeyCode.ENTER:
            case KeyCode.SPACE:
              clickHandler();
            case KeyCode.ESCAPE:
              if (_this.isPickerDisplayed) {
                e.preventDefault();
              }
              break;
          }
        });
        this.addManagedListener(this.eWrapper, "click", clickHandler);
        this.addManagedListener(this.eLabel, "click", clickHandler);
        if (this.pickerIcon) {
          var icon = createIconNoSpan(this.pickerIcon, this.gridOptionsWrapper);
          if (icon) {
            this.eIcon.appendChild(icon);
          }
        }
      };
      AgPickerField2.prototype.refreshLabel = function() {
        if (exists(this.getLabel())) {
          setAriaLabelledBy(this.eWrapper, this.getLabelId());
        } else {
          this.eWrapper.removeAttribute("aria-labelledby");
        }
        _super.prototype.refreshLabel.call(this);
      };
      AgPickerField2.prototype.setAriaLabel = function(label) {
        setAriaLabel(this.eWrapper, label);
        return this;
      };
      AgPickerField2.prototype.setInputWidth = function(width) {
        setElementWidth(this.eWrapper, width);
        return this;
      };
      AgPickerField2.prototype.getFocusableElement = function() {
        return this.eWrapper;
      };
      __decorate$2k([
        RefSelector("eLabel")
      ], AgPickerField2.prototype, "eLabel", void 0);
      __decorate$2k([
        RefSelector("eWrapper")
      ], AgPickerField2.prototype, "eWrapper", void 0);
      __decorate$2k([
        RefSelector("eDisplayField")
      ], AgPickerField2.prototype, "eDisplayField", void 0);
      __decorate$2k([
        RefSelector("eIcon")
      ], AgPickerField2.prototype, "eIcon", void 0);
      return AgPickerField2;
    }(AgAbstractField);
    __extends$2H = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$2j = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    AgList = function(_super) {
      __extends$2H(AgList2, _super);
      function AgList2(cssIdentifier) {
        if (cssIdentifier === void 0) {
          cssIdentifier = "default";
        }
        var _this = _super.call(this, '<div class="ag-list ag-' + cssIdentifier + '-list" role="listbox"></div>') || this;
        _this.cssIdentifier = cssIdentifier;
        _this.options = [];
        _this.itemEls = [];
        return _this;
      }
      AgList2.prototype.init = function() {
        this.addManagedListener(this.getGui(), "keydown", this.handleKeyDown.bind(this));
      };
      AgList2.prototype.handleKeyDown = function(e) {
        var key = e.key;
        switch (key) {
          case KeyCode.ENTER:
            if (!this.highlightedEl) {
              this.setValue(this.getValue());
            } else {
              var pos = this.itemEls.indexOf(this.highlightedEl);
              this.setValueByIndex(pos);
            }
            break;
          case KeyCode.DOWN:
          case KeyCode.UP:
            var isDown = key === KeyCode.DOWN;
            var itemToHighlight = void 0;
            e.preventDefault();
            if (!this.highlightedEl) {
              itemToHighlight = this.itemEls[isDown ? 0 : this.itemEls.length - 1];
            } else {
              var currentIdx = this.itemEls.indexOf(this.highlightedEl);
              var nextPos = currentIdx + (isDown ? 1 : -1);
              nextPos = Math.min(Math.max(nextPos, 0), this.itemEls.length - 1);
              itemToHighlight = this.itemEls[nextPos];
            }
            this.highlightItem(itemToHighlight);
            break;
        }
      };
      AgList2.prototype.addOptions = function(listOptions) {
        var _this = this;
        listOptions.forEach(function(listOption) {
          return _this.addOption(listOption);
        });
        return this;
      };
      AgList2.prototype.addOption = function(listOption) {
        var value = listOption.value, text = listOption.text;
        var sanitisedText = escapeString(text || value);
        this.options.push({ value, text: sanitisedText });
        this.renderOption(value, sanitisedText);
        this.updateIndices();
        return this;
      };
      AgList2.prototype.updateIndices = function() {
        var options = this.getGui().querySelectorAll(".ag-list-item");
        options.forEach(function(option, idx) {
          setAriaPosInSet(option, idx + 1);
          setAriaSetSize(option, options.length);
        });
      };
      AgList2.prototype.renderOption = function(value, text) {
        var _this = this;
        var itemEl = document.createElement("div");
        setAriaRole(itemEl, "option");
        itemEl.classList.add("ag-list-item", "ag-" + this.cssIdentifier + "-list-item");
        itemEl.innerHTML = "<span>" + text + "</span>";
        itemEl.tabIndex = -1;
        this.itemEls.push(itemEl);
        this.addManagedListener(itemEl, "mouseover", function() {
          return _this.highlightItem(itemEl);
        });
        this.addManagedListener(itemEl, "mouseleave", function() {
          return _this.clearHighlighted();
        });
        this.addManagedListener(itemEl, "click", function() {
          return _this.setValue(value);
        });
        this.getGui().appendChild(itemEl);
      };
      AgList2.prototype.setValue = function(value, silent) {
        if (this.value === value) {
          this.fireItemSelected();
          return this;
        }
        if (value == null) {
          this.reset();
          return this;
        }
        var idx = this.options.findIndex(function(option2) {
          return option2.value === value;
        });
        if (idx !== -1) {
          var option = this.options[idx];
          this.value = option.value;
          this.displayValue = option.text != null ? option.text : option.value;
          this.highlightItem(this.itemEls[idx]);
          if (!silent) {
            this.fireChangeEvent();
          }
        }
        return this;
      };
      AgList2.prototype.setValueByIndex = function(idx) {
        return this.setValue(this.options[idx].value);
      };
      AgList2.prototype.getValue = function() {
        return this.value;
      };
      AgList2.prototype.getDisplayValue = function() {
        return this.displayValue;
      };
      AgList2.prototype.refreshHighlighted = function() {
        var _this = this;
        this.clearHighlighted();
        var idx = this.options.findIndex(function(option) {
          return option.value === _this.value;
        });
        if (idx !== -1) {
          this.highlightItem(this.itemEls[idx]);
        }
      };
      AgList2.prototype.reset = function() {
        this.value = null;
        this.displayValue = null;
        this.clearHighlighted();
        this.fireChangeEvent();
      };
      AgList2.prototype.highlightItem = function(el) {
        if (!el.offsetParent) {
          return;
        }
        this.clearHighlighted();
        this.highlightedEl = el;
        this.highlightedEl.classList.add(AgList2.ACTIVE_CLASS);
        setAriaSelected(this.highlightedEl, true);
        this.highlightedEl.focus();
      };
      AgList2.prototype.clearHighlighted = function() {
        if (!this.highlightedEl || !this.highlightedEl.offsetParent) {
          return;
        }
        this.highlightedEl.classList.remove(AgList2.ACTIVE_CLASS);
        setAriaSelected(this.highlightedEl, false);
        this.highlightedEl = null;
      };
      AgList2.prototype.fireChangeEvent = function() {
        this.dispatchEvent({ type: AgAbstractField.EVENT_CHANGED });
        this.fireItemSelected();
      };
      AgList2.prototype.fireItemSelected = function() {
        this.dispatchEvent({ type: AgList2.EVENT_ITEM_SELECTED });
      };
      AgList2.EVENT_ITEM_SELECTED = "selectedItem";
      AgList2.ACTIVE_CLASS = "ag-active-item";
      __decorate$2j([
        PostConstruct
      ], AgList2.prototype, "init", null);
      return AgList2;
    }(Component);
    __extends$2G = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$2i = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    AgSelect = function(_super) {
      __extends$2G(AgSelect2, _super);
      function AgSelect2(config) {
        return _super.call(this, config, "ag-select", "smallDown", "listbox") || this;
      }
      AgSelect2.prototype.init = function() {
        var _this = this;
        this.listComponent = this.createBean(new AgList("select"));
        this.listComponent.setParentComponent(this);
        this.eWrapper.tabIndex = 0;
        this.listComponent.addManagedListener(this.listComponent, AgList.EVENT_ITEM_SELECTED, function() {
          if (_this.hideList) {
            _this.hideList();
          }
        });
        this.listComponent.addManagedListener(this.listComponent, AgAbstractField.EVENT_CHANGED, function() {
          _this.setValue(_this.listComponent.getValue(), false, true);
          if (_this.hideList) {
            _this.hideList();
          }
        });
      };
      AgSelect2.prototype.showPicker = function() {
        var _this = this;
        var listGui = this.listComponent.getGui();
        var eDocument = this.gridOptionsWrapper.getDocument();
        var destroyMouseWheelFunc = this.addManagedListener(eDocument.body, "wheel", function(e) {
          if (!listGui.contains(e.target) && _this.hideList) {
            _this.hideList();
          }
        });
        var destroyFocusOutFunc = this.addManagedListener(listGui, "focusout", function(e) {
          if (!listGui.contains(e.relatedTarget) && _this.hideList) {
            _this.hideList();
          }
        });
        var translate = this.gridOptionsWrapper.getLocaleTextFunc();
        var addPopupRes = this.popupService.addPopup({
          modal: true,
          eChild: listGui,
          closeOnEsc: true,
          closedCallback: function() {
            _this.hideList = null;
            _this.isPickerDisplayed = false;
            destroyFocusOutFunc();
            destroyMouseWheelFunc();
            if (_this.isAlive()) {
              setAriaExpanded(_this.eWrapper, false);
              _this.getFocusableElement().focus();
            }
          },
          ariaLabel: translate("ariaLabelSelectField", "Select Field")
        });
        if (addPopupRes) {
          this.hideList = addPopupRes.hideFunc;
        }
        this.isPickerDisplayed = true;
        setElementWidth(listGui, getAbsoluteWidth(this.eWrapper));
        setAriaExpanded(this.eWrapper, true);
        listGui.style.maxHeight = getInnerHeight(this.popupService.getPopupParent()) + "px";
        listGui.style.position = "absolute";
        this.popupService.positionPopupUnderComponent({
          type: "ag-list",
          eventSource: this.eWrapper,
          ePopup: listGui,
          keepWithinBounds: true
        });
        this.listComponent.refreshHighlighted();
        return this.listComponent;
      };
      AgSelect2.prototype.addOptions = function(options) {
        var _this = this;
        options.forEach(function(option) {
          return _this.addOption(option);
        });
        return this;
      };
      AgSelect2.prototype.addOption = function(option) {
        this.listComponent.addOption(option);
        return this;
      };
      AgSelect2.prototype.setValue = function(value, silent, fromPicker) {
        if (this.value === value) {
          return this;
        }
        if (!fromPicker) {
          this.listComponent.setValue(value, true);
        }
        var newValue = this.listComponent.getValue();
        if (newValue === this.getValue()) {
          return this;
        }
        this.eDisplayField.innerHTML = this.listComponent.getDisplayValue();
        return _super.prototype.setValue.call(this, value, silent);
      };
      AgSelect2.prototype.destroy = function() {
        if (this.hideList) {
          this.hideList();
        }
        this.destroyBean(this.listComponent);
        _super.prototype.destroy.call(this);
      };
      __decorate$2i([
        Autowired("popupService")
      ], AgSelect2.prototype, "popupService", void 0);
      __decorate$2i([
        PostConstruct
      ], AgSelect2.prototype, "init", null);
      return AgSelect2;
    }(AgPickerField);
    __extends$2F = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$2h = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    AgAbstractInputField = function(_super) {
      __extends$2F(AgAbstractInputField2, _super);
      function AgAbstractInputField2(config, className, inputType, displayFieldTag) {
        if (inputType === void 0) {
          inputType = "text";
        }
        if (displayFieldTag === void 0) {
          displayFieldTag = "input";
        }
        var _this = _super.call(this, config, '\n            <div role="presentation">\n                <div ref="eLabel" class="ag-input-field-label"></div>\n                <div ref="eWrapper" class="ag-wrapper ag-input-wrapper" role="presentation">\n                    <' + displayFieldTag + ' ref="eInput" class="ag-input-field-input"></' + displayFieldTag + ">\n                </div>\n            </div>", className) || this;
        _this.inputType = inputType;
        _this.displayFieldTag = displayFieldTag;
        return _this;
      }
      AgAbstractInputField2.prototype.postConstruct = function() {
        _super.prototype.postConstruct.call(this);
        this.setInputType();
        this.eLabel.classList.add(this.className + "-label");
        this.eWrapper.classList.add(this.className + "-input-wrapper");
        this.eInput.classList.add(this.className + "-input");
        this.addCssClass("ag-input-field");
        this.eInput.id = this.eInput.id || "ag-" + this.getCompId() + "-input";
        var _a = this.config, width = _a.width, value = _a.value;
        if (width != null) {
          this.setWidth(width);
        }
        if (value != null) {
          this.setValue(value);
        }
        this.addInputListeners();
      };
      AgAbstractInputField2.prototype.refreshLabel = function() {
        if (exists(this.getLabel())) {
          setAriaLabelledBy(this.eInput, this.getLabelId());
        } else {
          this.eInput.removeAttribute("aria-labelledby");
        }
        _super.prototype.refreshLabel.call(this);
      };
      AgAbstractInputField2.prototype.addInputListeners = function() {
        var _this = this;
        this.addManagedListener(this.eInput, "input", function(e) {
          return _this.setValue(e.target.value);
        });
      };
      AgAbstractInputField2.prototype.setInputType = function() {
        if (this.displayFieldTag === "input") {
          this.eInput.setAttribute("type", this.inputType);
        }
      };
      AgAbstractInputField2.prototype.getInputElement = function() {
        return this.eInput;
      };
      AgAbstractInputField2.prototype.setInputWidth = function(width) {
        setElementWidth(this.eWrapper, width);
        return this;
      };
      AgAbstractInputField2.prototype.setInputName = function(name) {
        this.getInputElement().setAttribute("name", name);
        return this;
      };
      AgAbstractInputField2.prototype.getFocusableElement = function() {
        return this.eInput;
      };
      AgAbstractInputField2.prototype.setMaxLength = function(length) {
        var eInput = this.eInput;
        eInput.maxLength = length;
        return this;
      };
      AgAbstractInputField2.prototype.setInputPlaceholder = function(placeholder) {
        addOrRemoveAttribute(this.eInput, "placeholder", placeholder);
        return this;
      };
      AgAbstractInputField2.prototype.setInputAriaLabel = function(label) {
        setAriaLabel(this.eInput, label);
        return this;
      };
      AgAbstractInputField2.prototype.setDisabled = function(disabled) {
        setDisabled(this.eInput, disabled);
        return _super.prototype.setDisabled.call(this, disabled);
      };
      __decorate$2h([
        RefSelector("eLabel")
      ], AgAbstractInputField2.prototype, "eLabel", void 0);
      __decorate$2h([
        RefSelector("eWrapper")
      ], AgAbstractInputField2.prototype, "eWrapper", void 0);
      __decorate$2h([
        RefSelector("eInput")
      ], AgAbstractInputField2.prototype, "eInput", void 0);
      return AgAbstractInputField2;
    }(AgAbstractField);
    __extends$2E = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$2g = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    (function(ConditionPosition2) {
      ConditionPosition2[ConditionPosition2["One"] = 0] = "One";
      ConditionPosition2[ConditionPosition2["Two"] = 1] = "Two";
    })(ConditionPosition || (ConditionPosition = {}));
    SimpleFilter = function(_super) {
      __extends$2E(SimpleFilter2, _super);
      function SimpleFilter2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      SimpleFilter2.prototype.getNumberOfInputs = function(type) {
        var customOpts = this.optionsFactory.getCustomOption(type);
        if (customOpts) {
          var numberOfInputs = customOpts.numberOfInputs;
          return numberOfInputs != null ? numberOfInputs : 1;
        }
        var zeroInputTypes = [
          SimpleFilter2.EMPTY,
          SimpleFilter2.NOT_BLANK,
          SimpleFilter2.BLANK
        ];
        if (type && zeroInputTypes.indexOf(type) >= 0) {
          return 0;
        } else if (type === SimpleFilter2.IN_RANGE) {
          return 2;
        }
        return 1;
      };
      SimpleFilter2.prototype.onFloatingFilterChanged = function(type, value) {
        this.setTypeFromFloatingFilter(type);
        this.setValueFromFloatingFilter(value);
        this.onUiChanged(true);
      };
      SimpleFilter2.prototype.setTypeFromFloatingFilter = function(type) {
        this.eType1.setValue(type);
        this.eType2.setValue(this.optionsFactory.getDefaultOption());
        (this.isDefaultOperator("AND") ? this.eJoinOperatorAnd : this.eJoinOperatorOr).setValue(true);
      };
      SimpleFilter2.prototype.getModelFromUi = function() {
        if (!this.isConditionUiComplete(ConditionPosition.One)) {
          return null;
        }
        if (this.isAllowTwoConditions() && this.isConditionUiComplete(ConditionPosition.Two)) {
          return {
            filterType: this.getFilterType(),
            operator: this.getJoinOperator(),
            condition1: this.createCondition(ConditionPosition.One),
            condition2: this.createCondition(ConditionPosition.Two)
          };
        }
        return this.createCondition(ConditionPosition.One);
      };
      SimpleFilter2.prototype.getConditionTypes = function() {
        return [
          this.eType1.getValue(),
          this.eType2.getValue()
        ];
      };
      SimpleFilter2.prototype.getJoinOperator = function() {
        return this.eJoinOperatorOr.getValue() === true ? "OR" : "AND";
      };
      SimpleFilter2.prototype.areModelsEqual = function(a, b) {
        if (!a && !b) {
          return true;
        }
        if (!a && b || a && !b) {
          return false;
        }
        var aIsSimple = !a.operator;
        var bIsSimple = !b.operator;
        var oneSimpleOneCombined = !aIsSimple && bIsSimple || aIsSimple && !bIsSimple;
        if (oneSimpleOneCombined) {
          return false;
        }
        var res;
        if (aIsSimple) {
          var aSimple = a;
          var bSimple = b;
          res = this.areSimpleModelsEqual(aSimple, bSimple);
        } else {
          var aCombined = a;
          var bCombined = b;
          res = aCombined.operator === bCombined.operator && this.areSimpleModelsEqual(aCombined.condition1, bCombined.condition1) && this.areSimpleModelsEqual(aCombined.condition2, bCombined.condition2);
        }
        return res;
      };
      SimpleFilter2.prototype.setModelIntoUi = function(model) {
        var isCombined = model.operator;
        if (isCombined) {
          var combinedModel = model;
          var orChecked = combinedModel.operator === "OR";
          this.eJoinOperatorAnd.setValue(!orChecked);
          this.eJoinOperatorOr.setValue(orChecked);
          this.eType1.setValue(combinedModel.condition1.type);
          this.eType2.setValue(combinedModel.condition2.type);
          this.setConditionIntoUi(combinedModel.condition1, ConditionPosition.One);
          this.setConditionIntoUi(combinedModel.condition2, ConditionPosition.Two);
        } else {
          var simpleModel = model;
          this.eJoinOperatorAnd.setValue(this.isDefaultOperator("AND"));
          this.eJoinOperatorOr.setValue(this.isDefaultOperator("OR"));
          this.eType1.setValue(simpleModel.type);
          this.eType2.setValue(this.optionsFactory.getDefaultOption());
          this.setConditionIntoUi(simpleModel, ConditionPosition.One);
          this.setConditionIntoUi(null, ConditionPosition.Two);
        }
        return AgPromise.resolve();
      };
      SimpleFilter2.prototype.doesFilterPass = function(params) {
        var _this = this;
        var model = this.getModel();
        if (model == null) {
          return true;
        }
        var operator = model.operator;
        var models = [];
        if (operator) {
          var combinedModel = model;
          models.push(combinedModel.condition1, combinedModel.condition2);
        } else {
          models.push(model);
        }
        var combineFunction = operator && operator === "OR" ? "some" : "every";
        return models[combineFunction](function(m) {
          return _this.individualConditionPasses(params, m);
        });
      };
      SimpleFilter2.prototype.setParams = function(params) {
        _super.prototype.setParams.call(this, params);
        this.optionsFactory = new OptionsFactory();
        this.optionsFactory.init(params, this.getDefaultFilterOptions());
        this.allowTwoConditions = !params.suppressAndOrCondition;
        this.alwaysShowBothConditions = !!params.alwaysShowBothConditions;
        this.defaultJoinOperator = this.getDefaultJoinOperator(params.defaultJoinOperator);
        this.filterPlaceholder = params.filterPlaceholder;
        this.putOptionsIntoDropdown();
        this.addChangedListeners();
      };
      SimpleFilter2.prototype.getDefaultJoinOperator = function(defaultJoinOperator) {
        return includes(["AND", "OR"], defaultJoinOperator) ? defaultJoinOperator : "AND";
      };
      SimpleFilter2.prototype.putOptionsIntoDropdown = function() {
        var _this = this;
        var filterOptions = this.optionsFactory.getFilterOptions();
        var eTypes = [this.eType1, this.eType2];
        filterOptions.forEach(function(option) {
          var listOption = typeof option === "string" ? _this.createBoilerplateListOption(option) : _this.createCustomListOption(option);
          eTypes.forEach(function(eType) {
            return eType.addOption(listOption);
          });
        });
        eTypes.forEach(function(eType) {
          return eType.setDisabled(filterOptions.length <= 1);
        });
      };
      SimpleFilter2.prototype.createBoilerplateListOption = function(option) {
        return { value: option, text: this.translate(option) };
      };
      SimpleFilter2.prototype.createCustomListOption = function(option) {
        var displayKey = option.displayKey;
        var customOption = this.optionsFactory.getCustomOption(option.displayKey);
        return {
          value: displayKey,
          text: customOption ? this.gridOptionsWrapper.getLocaleTextFunc()(customOption.displayKey, customOption.displayName) : this.translate(displayKey)
        };
      };
      SimpleFilter2.prototype.isAllowTwoConditions = function() {
        return this.allowTwoConditions;
      };
      SimpleFilter2.prototype.createBodyTemplate = function() {
        return '\n            <ag-select class="ag-filter-select" ref="eOptions1"></ag-select>\n            ' + this.createValueTemplate(ConditionPosition.One) + '\n            <div class="ag-filter-condition" ref="eJoinOperatorPanel">\n               <ag-radio-button ref="eJoinOperatorAnd" class="ag-filter-condition-operator ag-filter-condition-operator-and"></ag-radio-button>\n               <ag-radio-button ref="eJoinOperatorOr" class="ag-filter-condition-operator ag-filter-condition-operator-or"></ag-radio-button>\n            </div>\n            <ag-select class="ag-filter-select" ref="eOptions2"></ag-select>\n            ' + this.createValueTemplate(ConditionPosition.Two);
      };
      SimpleFilter2.prototype.getCssIdentifier = function() {
        return "simple-filter";
      };
      SimpleFilter2.prototype.updateUiVisibility = function() {
        var _this = this;
        var elementConditionGroups = [
          [this.eType1],
          [this.eType2, this.eJoinOperatorPanel, this.eJoinOperatorAnd, this.eJoinOperatorOr]
        ];
        var elementBodies = [this.eCondition1Body, this.eCondition2Body];
        elementConditionGroups.forEach(function(group, position) {
          var visible = _this.isConditionVisible(position);
          var disabled = _this.isConditionDisabled(position);
          group.forEach(function(element) {
            if (element instanceof AgAbstractInputField || element instanceof AgSelect) {
              element.setDisabled(disabled);
              element.setDisplayed(visible);
            } else {
              setDisabled(element, disabled);
              setDisplayed(element, visible);
            }
          });
        });
        elementBodies.forEach(function(element, index) {
          setDisplayed(element, _this.isConditionBodyVisible(index));
        });
        this.forEachInput(function(element, index, position, numberOfInputs) {
          _this.setElementDisplayed(element, index < numberOfInputs);
          _this.setElementDisabled(element, _this.isConditionDisabled(position));
        });
        this.resetPlaceholder();
      };
      SimpleFilter2.prototype.afterGuiAttached = function(params) {
        _super.prototype.afterGuiAttached.call(this, params);
        this.resetPlaceholder();
        if (!params || !params.suppressFocus && !this.isReadOnly()) {
          var firstInput = this.getInputs()[0][0];
          if (!firstInput) {
            return;
          }
          if (firstInput instanceof AgAbstractInputField) {
            firstInput.getInputElement().focus();
          }
        }
      };
      SimpleFilter2.prototype.getPlaceholderText = function(defaultPlaceholder, position) {
        var placeholder = this.translate(defaultPlaceholder);
        if (isFunction(this.filterPlaceholder)) {
          var filterPlaceholderFn = this.filterPlaceholder;
          var filterOptionKey = position === 0 ? this.eType1.getValue() : this.eType2.getValue();
          var filterOption = this.translate(filterOptionKey);
          placeholder = filterPlaceholderFn({
            filterOptionKey,
            filterOption,
            placeholder
          });
        } else if (typeof this.filterPlaceholder === "string") {
          placeholder = this.filterPlaceholder;
        }
        return placeholder;
      };
      SimpleFilter2.prototype.resetPlaceholder = function() {
        var _this = this;
        var globalTranslate = this.gridOptionsWrapper.getLocaleTextFunc();
        this.forEachInput(function(element, index, position, numberOfInputs) {
          if (!(element instanceof AgAbstractInputField)) {
            return;
          }
          var placeholder = index === 0 && numberOfInputs > 1 ? "inRangeStart" : index === 0 ? "filterOoo" : "inRangeEnd";
          var ariaLabel = index === 0 && numberOfInputs > 1 ? globalTranslate("ariaFilterFromValue", "Filter from value") : index === 0 ? globalTranslate("ariaFilterValue", "Filter Value") : globalTranslate("ariaFilterToValue", "Filter to Value");
          element.setInputPlaceholder(_this.getPlaceholderText(placeholder, position));
          element.setInputAriaLabel(ariaLabel);
        });
      };
      SimpleFilter2.prototype.setElementValue = function(element, value, silent) {
        if (element instanceof AgAbstractInputField) {
          element.setValue(value != null ? String(value) : null, silent);
        }
      };
      SimpleFilter2.prototype.setElementDisplayed = function(element, displayed) {
        if (element instanceof Component) {
          setDisplayed(element.getGui(), displayed);
        }
      };
      SimpleFilter2.prototype.setElementDisabled = function(element, disabled) {
        if (element instanceof Component) {
          setDisabled(element.getGui(), disabled);
        }
      };
      SimpleFilter2.prototype.attachElementOnChange = function(element, listener) {
        if (element instanceof AgAbstractInputField) {
          element.onValueChange(listener);
        }
      };
      SimpleFilter2.prototype.forEachInput = function(cb) {
        var _this = this;
        var inputs = this.getInputs();
        this.getConditionTypes().forEach(function(type, position) {
          var numberOfInputs = _this.getNumberOfInputs(type);
          for (var index = 0; index < inputs[position].length; index++) {
            var input = inputs[position][index];
            if (input != null) {
              cb(input, index, position, numberOfInputs);
            }
          }
        });
      };
      SimpleFilter2.prototype.isConditionVisible = function(position) {
        if (position === 0) {
          return true;
        }
        if (!this.allowTwoConditions) {
          return false;
        }
        if (this.isReadOnly()) {
          return this.isConditionUiComplete(position);
        }
        if (this.alwaysShowBothConditions) {
          return true;
        }
        return this.isConditionUiComplete(position - 1);
      };
      SimpleFilter2.prototype.isConditionDisabled = function(position) {
        if (this.isReadOnly()) {
          return true;
        }
        if (!this.isConditionVisible(position)) {
          return true;
        }
        if (position === 0) {
          return false;
        }
        return !this.isConditionUiComplete(position - 1);
      };
      SimpleFilter2.prototype.isConditionBodyVisible = function(position) {
        if (!this.isConditionVisible(position)) {
          return false;
        }
        var type = this.getConditionTypes()[position];
        var numberOfInputs = this.getNumberOfInputs(type);
        return numberOfInputs > 0;
      };
      SimpleFilter2.prototype.isConditionUiComplete = function(position) {
        var type = this.getConditionTypes()[position];
        if (type === SimpleFilter2.EMPTY) {
          return false;
        }
        if (this.getValues(position).some(function(v) {
          return v == null;
        })) {
          return false;
        }
        return true;
      };
      SimpleFilter2.prototype.resetUiToDefaults = function(silent) {
        var _this = this;
        var translate = this.gridOptionsWrapper.getLocaleTextFunc();
        var filteringLabel = translate("ariaFilteringOperator", "Filtering operator");
        var uniqueGroupId = "ag-simple-filter-and-or-" + this.getCompId();
        var defaultOption = this.optionsFactory.getDefaultOption();
        this.eType1.setValue(defaultOption, silent).setAriaLabel(filteringLabel).setDisabled(this.isReadOnly());
        this.eType2.setValue(this.optionsFactory.getDefaultOption(), silent).setAriaLabel(filteringLabel).setDisabled(this.isReadOnly());
        this.eJoinOperatorAnd.setValue(this.isDefaultOperator("AND"), silent).setName(uniqueGroupId).setLabel(this.translate("andCondition")).setDisabled(this.isReadOnly());
        this.eJoinOperatorOr.setValue(this.isDefaultOperator("OR"), silent).setName(uniqueGroupId).setLabel(this.translate("orCondition")).setDisabled(this.isReadOnly());
        this.forEachInput(function(element) {
          _this.setElementValue(element, null, silent);
          _this.setElementDisabled(element, _this.isReadOnly());
        });
        this.resetPlaceholder();
        return AgPromise.resolve();
      };
      SimpleFilter2.prototype.setConditionIntoUi = function(model, position) {
        var _this = this;
        var values2 = this.mapValuesFromModel(model);
        this.forEachInput(function(element, index, elPosition, _2) {
          if (elPosition !== position) {
            return;
          }
          _this.setElementValue(element, values2[index] != null ? values2[index] : null);
        });
      };
      SimpleFilter2.prototype.setValueFromFloatingFilter = function(value) {
        var _this = this;
        this.forEachInput(function(element, index, position, _2) {
          _this.setElementValue(element, index === 0 && position === 0 ? value : null);
        });
      };
      SimpleFilter2.prototype.isDefaultOperator = function(operator) {
        return operator === this.defaultJoinOperator;
      };
      SimpleFilter2.prototype.addChangedListeners = function() {
        var _this = this;
        if (this.isReadOnly()) {
          return;
        }
        var listener = function() {
          return _this.onUiChanged();
        };
        this.eType1.onValueChange(listener);
        this.eType2.onValueChange(listener);
        this.eJoinOperatorOr.onValueChange(listener);
        this.eJoinOperatorAnd.onValueChange(listener);
        this.forEachInput(function(element) {
          _this.attachElementOnChange(element, listener);
        });
      };
      SimpleFilter2.prototype.individualConditionPasses = function(params, filterModel) {
        var cellValue = this.getCellValue(params.node);
        var values2 = this.mapValuesFromModel(filterModel);
        var customFilterOption = this.optionsFactory.getCustomOption(filterModel.type);
        var customFilterResult = this.evaluateCustomFilter(customFilterOption, values2, cellValue);
        if (customFilterResult != null) {
          return customFilterResult;
        }
        if (cellValue == null) {
          return this.evaluateNullValue(filterModel.type);
        }
        return this.evaluateNonNullValue(values2, cellValue, filterModel, params);
      };
      SimpleFilter2.prototype.evaluateCustomFilter = function(customFilterOption, values2, cellValue) {
        if (customFilterOption == null) {
          return;
        }
        var predicate = customFilterOption.predicate;
        if (predicate != null && !values2.some(function(v) {
          return v == null;
        })) {
          return predicate(values2, cellValue);
        }
        return;
      };
      SimpleFilter2.prototype.isBlank = function(cellValue) {
        return cellValue == null || typeof cellValue === "string" && cellValue.trim().length === 0;
      };
      SimpleFilter2.EMPTY = "empty";
      SimpleFilter2.BLANK = "blank";
      SimpleFilter2.NOT_BLANK = "notBlank";
      SimpleFilter2.EQUALS = "equals";
      SimpleFilter2.NOT_EQUAL = "notEqual";
      SimpleFilter2.LESS_THAN = "lessThan";
      SimpleFilter2.LESS_THAN_OR_EQUAL = "lessThanOrEqual";
      SimpleFilter2.GREATER_THAN = "greaterThan";
      SimpleFilter2.GREATER_THAN_OR_EQUAL = "greaterThanOrEqual";
      SimpleFilter2.IN_RANGE = "inRange";
      SimpleFilter2.CONTAINS = "contains";
      SimpleFilter2.NOT_CONTAINS = "notContains";
      SimpleFilter2.STARTS_WITH = "startsWith";
      SimpleFilter2.ENDS_WITH = "endsWith";
      __decorate$2g([
        RefSelector("eOptions1")
      ], SimpleFilter2.prototype, "eType1", void 0);
      __decorate$2g([
        RefSelector("eOptions2")
      ], SimpleFilter2.prototype, "eType2", void 0);
      __decorate$2g([
        RefSelector("eJoinOperatorPanel")
      ], SimpleFilter2.prototype, "eJoinOperatorPanel", void 0);
      __decorate$2g([
        RefSelector("eJoinOperatorAnd")
      ], SimpleFilter2.prototype, "eJoinOperatorAnd", void 0);
      __decorate$2g([
        RefSelector("eJoinOperatorOr")
      ], SimpleFilter2.prototype, "eJoinOperatorOr", void 0);
      __decorate$2g([
        RefSelector("eCondition1Body")
      ], SimpleFilter2.prototype, "eCondition1Body", void 0);
      __decorate$2g([
        RefSelector("eCondition2Body")
      ], SimpleFilter2.prototype, "eCondition2Body", void 0);
      return SimpleFilter2;
    }(ProvidedFilter);
    __extends$2D = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    ScalarFilter = function(_super) {
      __extends$2D(ScalarFilter2, _super);
      function ScalarFilter2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      ScalarFilter2.prototype.setParams = function(params) {
        _super.prototype.setParams.call(this, params);
        this.scalarFilterParams = params;
      };
      ScalarFilter2.prototype.evaluateNullValue = function(filterType) {
        switch (filterType) {
          case ScalarFilter2.EQUALS:
          case ScalarFilter2.NOT_EQUAL:
            if (this.scalarFilterParams.includeBlanksInEquals) {
              return true;
            }
            break;
          case ScalarFilter2.GREATER_THAN:
          case ScalarFilter2.GREATER_THAN_OR_EQUAL:
            if (this.scalarFilterParams.includeBlanksInGreaterThan) {
              return true;
            }
            break;
          case ScalarFilter2.LESS_THAN:
          case ScalarFilter2.LESS_THAN_OR_EQUAL:
            if (this.scalarFilterParams.includeBlanksInLessThan) {
              return true;
            }
            break;
          case ScalarFilter2.IN_RANGE:
            if (this.scalarFilterParams.includeBlanksInRange) {
              return true;
            }
            break;
          case ScalarFilter2.BLANK:
            return true;
          case ScalarFilter2.NOT_BLANK:
            return false;
        }
        return false;
      };
      ScalarFilter2.prototype.evaluateNonNullValue = function(values2, cellValue, filterModel) {
        var comparator = this.comparator();
        var compareResult = values2[0] != null ? comparator(values2[0], cellValue) : 0;
        switch (filterModel.type) {
          case ScalarFilter2.EQUALS:
            return compareResult === 0;
          case ScalarFilter2.NOT_EQUAL:
            return compareResult !== 0;
          case ScalarFilter2.GREATER_THAN:
            return compareResult > 0;
          case ScalarFilter2.GREATER_THAN_OR_EQUAL:
            return compareResult >= 0;
          case ScalarFilter2.LESS_THAN:
            return compareResult < 0;
          case ScalarFilter2.LESS_THAN_OR_EQUAL:
            return compareResult <= 0;
          case ScalarFilter2.IN_RANGE: {
            var compareToResult = comparator(values2[1], cellValue);
            return this.scalarFilterParams.inRangeInclusive ? compareResult >= 0 && compareToResult <= 0 : compareResult > 0 && compareToResult < 0;
          }
          case ScalarFilter2.BLANK:
            return this.isBlank(cellValue);
          case ScalarFilter2.NOT_BLANK:
            return !this.isBlank(cellValue);
          default:
            console.warn('AG Grid: Unexpected type of filter "' + filterModel.type + '", it looks like the filter was configured with incorrect Filter Options');
            return true;
        }
      };
      return ScalarFilter2;
    }(SimpleFilter);
    __extends$2C = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign$b = function() {
      __assign$b = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$b.apply(this, arguments);
    };
    __decorate$2f = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    DEFAULT_MIN_YEAR = 1e3;
    DEFAULT_MAX_YEAR = Infinity;
    DateFilter = function(_super) {
      __extends$2C(DateFilter2, _super);
      function DateFilter2() {
        var _this = _super.call(this, "dateFilter") || this;
        _this.minValidYear = DEFAULT_MIN_YEAR;
        _this.maxValidYear = DEFAULT_MAX_YEAR;
        return _this;
      }
      DateFilter2.prototype.afterGuiAttached = function(params) {
        _super.prototype.afterGuiAttached.call(this, params);
        this.dateCondition1FromComp.afterGuiAttached(params);
      };
      DateFilter2.prototype.mapValuesFromModel = function(filterModel) {
        var _a = filterModel || {}, dateFrom = _a.dateFrom, dateTo = _a.dateTo, type = _a.type;
        return [
          dateFrom && parseDateTimeFromString(dateFrom) || null,
          dateTo && parseDateTimeFromString(dateTo) || null
        ].slice(0, this.getNumberOfInputs(type));
      };
      DateFilter2.prototype.comparator = function() {
        return this.dateFilterParams.comparator ? this.dateFilterParams.comparator : this.defaultComparator.bind(this);
      };
      DateFilter2.prototype.defaultComparator = function(filterDate, cellValue) {
        var cellAsDate = cellValue;
        if (cellValue == null || cellAsDate < filterDate) {
          return -1;
        }
        if (cellAsDate > filterDate) {
          return 1;
        }
        return 0;
      };
      DateFilter2.prototype.setParams = function(params) {
        _super.prototype.setParams.call(this, params);
        this.dateFilterParams = params;
        var yearParser = function(param, fallback) {
          if (params[param] != null) {
            if (!isNaN(params[param])) {
              return params[param] == null ? fallback : Number(params[param]);
            } else {
              console.warn("AG Grid: DateFilter " + param + " is not a number");
            }
          }
          return fallback;
        };
        this.minValidYear = yearParser("minValidYear", DEFAULT_MIN_YEAR);
        this.maxValidYear = yearParser("maxValidYear", DEFAULT_MAX_YEAR);
        if (this.minValidYear > this.maxValidYear) {
          console.warn("AG Grid: DateFilter minValidYear should be <= maxValidYear");
        }
        this.createDateComponents();
      };
      DateFilter2.prototype.createDateComponents = function() {
        var _this = this;
        var createDateCompWrapper = function(element) {
          return new DateCompWrapper(_this.getContext(), _this.userComponentFactory, {
            onDateChanged: function() {
              return _this.onUiChanged();
            },
            filterParams: _this.dateFilterParams
          }, element);
        };
        this.dateCondition1FromComp = createDateCompWrapper(this.eCondition1PanelFrom);
        this.dateCondition1ToComp = createDateCompWrapper(this.eCondition1PanelTo);
        this.dateCondition2FromComp = createDateCompWrapper(this.eCondition2PanelFrom);
        this.dateCondition2ToComp = createDateCompWrapper(this.eCondition2PanelTo);
        this.addDestroyFunc(function() {
          _this.forEachInput(function(element) {
            return element.destroy();
          });
        });
      };
      DateFilter2.prototype.setElementValue = function(element, value, silent) {
        element.setDate(value);
      };
      DateFilter2.prototype.setElementDisplayed = function(element, displayed) {
        element.setDisplayed(displayed);
      };
      DateFilter2.prototype.setElementDisabled = function(element, disabled) {
        element.setDisabled(disabled);
      };
      DateFilter2.prototype.getDefaultFilterOptions = function() {
        return DateFilter2.DEFAULT_FILTER_OPTIONS;
      };
      DateFilter2.prototype.createValueTemplate = function(position) {
        var pos = position === ConditionPosition.One ? "1" : "2";
        return '\n            <div class="ag-filter-body" ref="eCondition' + pos + 'Body">\n                <div class="ag-filter-from ag-filter-date-from" ref="eCondition' + pos + 'PanelFrom"></div>\n                <div class="ag-filter-to ag-filter-date-to" ref="eCondition' + pos + 'PanelTo"></div>\n            </div>';
      };
      DateFilter2.prototype.isConditionUiComplete = function(position) {
        var _this = this;
        if (!_super.prototype.isConditionUiComplete.call(this, position)) {
          return false;
        }
        var isValidDate = function(value) {
          return value != null && value.getUTCFullYear() >= _this.minValidYear && value.getUTCFullYear() <= _this.maxValidYear;
        };
        var valid = true;
        this.forEachInput(function(element, index, elPosition, numberOfInputs) {
          if (elPosition !== position || !valid || index >= numberOfInputs) {
            return;
          }
          valid = valid && isValidDate(element.getDate());
        });
        return valid;
      };
      DateFilter2.prototype.areSimpleModelsEqual = function(aSimple, bSimple) {
        return aSimple.dateFrom === bSimple.dateFrom && aSimple.dateTo === bSimple.dateTo && aSimple.type === bSimple.type;
      };
      DateFilter2.prototype.getFilterType = function() {
        return "date";
      };
      DateFilter2.prototype.createCondition = function(position) {
        var type = this.getConditionTypes()[position];
        var model = {};
        var values2 = this.getValues(position);
        if (values2.length > 0) {
          model.dateFrom = serialiseDate(values2[0]);
        }
        if (values2.length > 1) {
          model.dateTo = serialiseDate(values2[1]);
        }
        return __assign$b({ dateFrom: null, dateTo: null, filterType: this.getFilterType(), type }, model);
      };
      DateFilter2.prototype.resetPlaceholder = function() {
        var globalTranslate = this.gridOptionsWrapper.getLocaleTextFunc();
        var placeholder = this.translate("dateFormatOoo");
        var ariaLabel = globalTranslate("ariaFilterValue", "Filter Value");
        this.forEachInput(function(element) {
          element.setInputPlaceholder(placeholder);
          element.setInputAriaLabel(ariaLabel);
        });
      };
      DateFilter2.prototype.getInputs = function() {
        return [
          [this.dateCondition1FromComp, this.dateCondition1ToComp],
          [this.dateCondition2FromComp, this.dateCondition2ToComp]
        ];
      };
      DateFilter2.prototype.getValues = function(position) {
        var result = [];
        this.forEachInput(function(element, index, elPosition, numberOfInputs) {
          if (position === elPosition && index < numberOfInputs) {
            result.push(element.getDate());
          }
        });
        return result;
      };
      DateFilter2.DEFAULT_FILTER_OPTIONS = [
        ScalarFilter.EQUALS,
        ScalarFilter.GREATER_THAN,
        ScalarFilter.LESS_THAN,
        ScalarFilter.NOT_EQUAL,
        ScalarFilter.IN_RANGE,
        ScalarFilter.BLANK,
        ScalarFilter.NOT_BLANK
      ];
      __decorate$2f([
        RefSelector("eCondition1PanelFrom")
      ], DateFilter2.prototype, "eCondition1PanelFrom", void 0);
      __decorate$2f([
        RefSelector("eCondition1PanelTo")
      ], DateFilter2.prototype, "eCondition1PanelTo", void 0);
      __decorate$2f([
        RefSelector("eCondition2PanelFrom")
      ], DateFilter2.prototype, "eCondition2PanelFrom", void 0);
      __decorate$2f([
        RefSelector("eCondition2PanelTo")
      ], DateFilter2.prototype, "eCondition2PanelTo", void 0);
      __decorate$2f([
        Autowired("userComponentFactory")
      ], DateFilter2.prototype, "userComponentFactory", void 0);
      return DateFilter2;
    }(ScalarFilter);
    __extends$2B = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    SimpleFloatingFilter = function(_super) {
      __extends$2B(SimpleFloatingFilter2, _super);
      function SimpleFloatingFilter2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      SimpleFloatingFilter2.prototype.getDefaultDebounceMs = function() {
        return 0;
      };
      SimpleFloatingFilter2.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
      };
      SimpleFloatingFilter2.prototype.getTextFromModel = function(model) {
        if (!model) {
          return null;
        }
        var isCombined = model.operator != null;
        if (isCombined) {
          var combinedModel = model;
          var _a = combinedModel || {}, condition1 = _a.condition1, condition2 = _a.condition2;
          var customOption1 = this.getTextFromModel(condition1);
          var customOption2 = this.getTextFromModel(condition2);
          return [
            customOption1,
            combinedModel.operator,
            customOption2
          ].join(" ");
        } else if (model.type === SimpleFilter.BLANK || model.type === SimpleFilter.NOT_BLANK) {
          var translate = this.gridOptionsWrapper.getLocaleTextFunc();
          return translate(model.type, model.type);
        } else {
          var condition = model;
          var customOption = this.optionsFactory.getCustomOption(condition.type);
          var _b = customOption || {}, displayKey = _b.displayKey, displayName = _b.displayName, numberOfInputs = _b.numberOfInputs;
          if (displayKey && displayName && numberOfInputs === 0) {
            this.gridOptionsWrapper.getLocaleTextFunc()(displayKey, displayName);
            return displayName;
          }
          return this.conditionToString(condition, customOption);
        }
      };
      SimpleFloatingFilter2.prototype.isEventFromFloatingFilter = function(event) {
        return event && event.afterFloatingFilter;
      };
      SimpleFloatingFilter2.prototype.getLastType = function() {
        return this.lastType;
      };
      SimpleFloatingFilter2.prototype.isReadOnly = function() {
        return this.readOnly;
      };
      SimpleFloatingFilter2.prototype.setLastTypeFromModel = function(model) {
        if (!model) {
          this.lastType = this.optionsFactory.getDefaultOption();
          return;
        }
        var isCombined = model.operator;
        var condition;
        if (isCombined) {
          var combinedModel = model;
          condition = combinedModel.condition1;
        } else {
          condition = model;
        }
        this.lastType = condition.type;
      };
      SimpleFloatingFilter2.prototype.canWeEditAfterModelFromParentFilter = function(model) {
        if (!model) {
          return this.isTypeEditable(this.lastType);
        }
        var isCombined = model.operator;
        if (isCombined) {
          return false;
        }
        var simpleModel = model;
        return this.isTypeEditable(simpleModel.type);
      };
      SimpleFloatingFilter2.prototype.init = function(params) {
        this.optionsFactory = new OptionsFactory();
        this.optionsFactory.init(params.filterParams, this.getDefaultFilterOptions());
        this.lastType = this.optionsFactory.getDefaultOption();
        this.readOnly = !!params.filterParams.readOnly;
        var editable = this.isTypeEditable(this.lastType);
        this.setEditable(editable);
      };
      SimpleFloatingFilter2.prototype.doesFilterHaveSingleInput = function(filterType) {
        var customFilterOption = this.optionsFactory.getCustomOption(filterType);
        var numberOfInputs = (customFilterOption || {}).numberOfInputs;
        return numberOfInputs == null || numberOfInputs == 1;
      };
      SimpleFloatingFilter2.prototype.isTypeEditable = function(type) {
        var uneditableTypes = [
          SimpleFilter.IN_RANGE,
          SimpleFilter.EMPTY,
          SimpleFilter.BLANK,
          SimpleFilter.NOT_BLANK
        ];
        return !!type && !this.isReadOnly() && this.doesFilterHaveSingleInput(type) && uneditableTypes.indexOf(type) < 0;
      };
      return SimpleFloatingFilter2;
    }(Component);
    __extends$2A = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$2e = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    DateFloatingFilter = function(_super) {
      __extends$2A(DateFloatingFilter2, _super);
      function DateFloatingFilter2() {
        return _super.call(this, '\n            <div class="ag-floating-filter-input" role="presentation">\n                <ag-input-text-field ref="eReadOnlyText"></ag-input-text-field>\n                <div ref="eDateWrapper" style="display: flex;"></div>\n            </div>') || this;
      }
      DateFloatingFilter2.prototype.getDefaultFilterOptions = function() {
        return DateFilter.DEFAULT_FILTER_OPTIONS;
      };
      DateFloatingFilter2.prototype.conditionToString = function(condition, options) {
        var type = condition.type;
        var numberOfInputs = (options || {}).numberOfInputs;
        var isRange = type == SimpleFilter.IN_RANGE || numberOfInputs === 2;
        var dateFrom = parseDateTimeFromString(condition.dateFrom);
        var dateTo = parseDateTimeFromString(condition.dateTo);
        var format = this.filterParams.inRangeFloatingFilterDateFormat;
        if (isRange) {
          var formattedFrom = dateFrom !== null ? dateToFormattedString(dateFrom, format) : "null";
          var formattedTo = dateTo !== null ? dateToFormattedString(dateTo, format) : "null";
          return formattedFrom + "-" + formattedTo;
        }
        if (dateFrom != null) {
          return dateToFormattedString(dateFrom, format);
        }
        return "" + type;
      };
      DateFloatingFilter2.prototype.init = function(params) {
        _super.prototype.init.call(this, params);
        this.params = params;
        this.filterParams = params.filterParams;
        this.createDateComponent();
        var translate = this.gridOptionsWrapper.getLocaleTextFunc();
        this.eReadOnlyText.setDisabled(true).setInputAriaLabel(translate("ariaDateFilterInput", "Date Filter Input"));
      };
      DateFloatingFilter2.prototype.setEditable = function(editable) {
        setDisplayed(this.eDateWrapper, editable);
        setDisplayed(this.eReadOnlyText.getGui(), !editable);
      };
      DateFloatingFilter2.prototype.onParentModelChanged = function(model, event) {
        if (this.isEventFromFloatingFilter(event)) {
          return;
        }
        _super.prototype.setLastTypeFromModel.call(this, model);
        var allowEditing = !this.isReadOnly() && this.canWeEditAfterModelFromParentFilter(model);
        this.setEditable(allowEditing);
        if (allowEditing) {
          if (model) {
            var dateModel = model;
            this.dateComp.setDate(parseDateTimeFromString(dateModel.dateFrom));
          } else {
            this.dateComp.setDate(null);
          }
          this.eReadOnlyText.setValue("");
        } else {
          this.eReadOnlyText.setValue(this.getTextFromModel(model));
          this.dateComp.setDate(null);
        }
      };
      DateFloatingFilter2.prototype.onDateChanged = function() {
        var _this = this;
        var filterValueDate = this.dateComp.getDate();
        var filterValueText = serialiseDate(filterValueDate);
        this.params.parentFilterInstance(function(filterInstance) {
          if (filterInstance) {
            var date = parseDateTimeFromString(filterValueText);
            filterInstance.onFloatingFilterChanged(_this.getLastType() || null, date);
          }
        });
      };
      DateFloatingFilter2.prototype.createDateComponent = function() {
        var _this = this;
        var debounceMs = ProvidedFilter.getDebounceMs(this.params.filterParams, this.getDefaultDebounceMs());
        var dateComponentParams = {
          onDateChanged: debounce(this.onDateChanged.bind(this), debounceMs),
          filterParams: this.params.column.getColDef().filterParams
        };
        this.dateComp = new DateCompWrapper(this.getContext(), this.userComponentFactory, dateComponentParams, this.eDateWrapper);
        this.addDestroyFunc(function() {
          return _this.dateComp.destroy();
        });
      };
      __decorate$2e([
        Autowired("userComponentFactory")
      ], DateFloatingFilter2.prototype, "userComponentFactory", void 0);
      __decorate$2e([
        RefSelector("eReadOnlyText")
      ], DateFloatingFilter2.prototype, "eReadOnlyText", void 0);
      __decorate$2e([
        RefSelector("eDateWrapper")
      ], DateFloatingFilter2.prototype, "eDateWrapper", void 0);
      return DateFloatingFilter2;
    }(SimpleFloatingFilter);
    __extends$2z = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$2d = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    DefaultDateComponent = function(_super) {
      __extends$2z(DefaultDateComponent2, _super);
      function DefaultDateComponent2() {
        return _super.call(this, '\n            <div class="ag-filter-filter">\n                <ag-input-text-field class="ag-date-filter" ref="eDateInput"></ag-input-text-field>\n            </div>') || this;
      }
      DefaultDateComponent2.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
      };
      DefaultDateComponent2.prototype.init = function(params) {
        var _this = this;
        var eDocument = this.gridOptionsWrapper.getDocument();
        var inputElement = this.eDateInput.getInputElement();
        if (this.shouldUseBrowserDatePicker(params)) {
          inputElement.type = "date";
        }
        this.addManagedListener(inputElement, "mousedown", function() {
          if (_this.eDateInput.isDisabled()) {
            return;
          }
          inputElement.focus();
        });
        this.addManagedListener(inputElement, "input", function(e) {
          if (e.target !== eDocument.activeElement) {
            return;
          }
          if (_this.eDateInput.isDisabled()) {
            return;
          }
          params.onDateChanged();
        });
        var _a = params.filterParams || {}, minValidYear = _a.minValidYear, maxValidYear = _a.maxValidYear;
        if (minValidYear) {
          inputElement.min = minValidYear + "-01-01";
        }
        if (maxValidYear) {
          inputElement.max = maxValidYear + "-12-31";
        }
      };
      DefaultDateComponent2.prototype.getDate = function() {
        return parseDateTimeFromString(this.eDateInput.getValue());
      };
      DefaultDateComponent2.prototype.setDate = function(date) {
        this.eDateInput.setValue(serialiseDate(date, false));
      };
      DefaultDateComponent2.prototype.setInputPlaceholder = function(placeholder) {
        this.eDateInput.setInputPlaceholder(placeholder);
      };
      DefaultDateComponent2.prototype.setDisabled = function(disabled) {
        this.eDateInput.setDisabled(disabled);
      };
      DefaultDateComponent2.prototype.afterGuiAttached = function(params) {
        if (!params || !params.suppressFocus) {
          this.eDateInput.getInputElement().focus();
        }
      };
      DefaultDateComponent2.prototype.shouldUseBrowserDatePicker = function(params) {
        if (params.filterParams && params.filterParams.browserDatePicker != null) {
          return params.filterParams.browserDatePicker;
        }
        return isBrowserChrome() || isBrowserFirefox();
      };
      __decorate$2d([
        RefSelector("eDateInput")
      ], DefaultDateComponent2.prototype, "eDateInput", void 0);
      return DefaultDateComponent2;
    }(Component);
    __extends$2y = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$2c = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    NumberFilter = function(_super) {
      __extends$2y(NumberFilter2, _super);
      function NumberFilter2() {
        return _super.call(this, "numberFilter") || this;
      }
      NumberFilter2.prototype.mapValuesFromModel = function(filterModel) {
        var _a = filterModel || {}, filter = _a.filter, filterTo = _a.filterTo, type = _a.type;
        return [
          filter == null ? null : filter,
          filterTo == null ? null : filterTo
        ].slice(0, this.getNumberOfInputs(type));
      };
      NumberFilter2.prototype.getDefaultDebounceMs = function() {
        return 500;
      };
      NumberFilter2.prototype.comparator = function() {
        return function(left, right) {
          if (left === right) {
            return 0;
          }
          return left < right ? 1 : -1;
        };
      };
      NumberFilter2.prototype.setParams = function(params) {
        this.numberFilterParams = params;
        var allowedCharPattern = this.getAllowedCharPattern();
        if (allowedCharPattern) {
          var config = { allowedCharPattern };
          this.resetTemplate({
            "eValue-index0-1": config,
            "eValue-index1-1": config,
            "eValue-index0-2": config,
            "eValue-index1-2": config
          });
        }
        _super.prototype.setParams.call(this, params);
      };
      NumberFilter2.prototype.getDefaultFilterOptions = function() {
        return NumberFilter2.DEFAULT_FILTER_OPTIONS;
      };
      NumberFilter2.prototype.createValueTemplate = function(position) {
        var pos = position === ConditionPosition.One ? "1" : "2";
        var allowedCharPattern = this.getAllowedCharPattern();
        var agElementTag = allowedCharPattern ? "ag-input-text-field" : "ag-input-number-field";
        return '\n            <div class="ag-filter-body" ref="eCondition' + pos + 'Body" role="presentation">\n                <' + agElementTag + ' class="ag-filter-from ag-filter-filter" ref="eValue-index0-' + pos + '"></' + agElementTag + ">\n                <" + agElementTag + ' class="ag-filter-to ag-filter-filter" ref="eValue-index1-' + pos + '"></' + agElementTag + ">\n            </div>";
      };
      NumberFilter2.prototype.getValues = function(position) {
        var _this = this;
        var result = [];
        this.forEachInput(function(element, index, elPosition, numberOfInputs) {
          if (position === elPosition && index < numberOfInputs) {
            result.push(_this.stringToFloat(element.getValue()));
          }
        });
        return result;
      };
      NumberFilter2.prototype.areSimpleModelsEqual = function(aSimple, bSimple) {
        return aSimple.filter === bSimple.filter && aSimple.filterTo === bSimple.filterTo && aSimple.type === bSimple.type;
      };
      NumberFilter2.prototype.getFilterType = function() {
        return "number";
      };
      NumberFilter2.prototype.stringToFloat = function(value) {
        if (typeof value === "number") {
          return value;
        }
        var filterText = makeNull(value);
        if (filterText != null && filterText.trim() === "") {
          filterText = null;
        }
        if (this.numberFilterParams.numberParser) {
          return this.numberFilterParams.numberParser(filterText);
        }
        return filterText == null || filterText.trim() === "-" ? null : parseFloat(filterText);
      };
      NumberFilter2.prototype.createCondition = function(position) {
        var type = this.getConditionTypes()[position];
        var model = {
          filterType: this.getFilterType(),
          type
        };
        var values2 = this.getValues(position);
        if (values2.length > 0) {
          model.filter = values2[0];
        }
        if (values2.length > 1) {
          model.filterTo = values2[1];
        }
        return model;
      };
      NumberFilter2.prototype.getInputs = function() {
        return [
          [this.eValueFrom1, this.eValueTo1],
          [this.eValueFrom2, this.eValueTo2]
        ];
      };
      NumberFilter2.prototype.getAllowedCharPattern = function() {
        var allowedCharPattern = (this.numberFilterParams || {}).allowedCharPattern;
        if (allowedCharPattern) {
          return allowedCharPattern;
        }
        if (!isBrowserChrome() && !isBrowserEdge()) {
          return "\\d\\-\\.";
        }
        return null;
      };
      NumberFilter2.DEFAULT_FILTER_OPTIONS = [
        ScalarFilter.EQUALS,
        ScalarFilter.NOT_EQUAL,
        ScalarFilter.LESS_THAN,
        ScalarFilter.LESS_THAN_OR_EQUAL,
        ScalarFilter.GREATER_THAN,
        ScalarFilter.GREATER_THAN_OR_EQUAL,
        ScalarFilter.IN_RANGE,
        ScalarFilter.BLANK,
        ScalarFilter.NOT_BLANK
      ];
      __decorate$2c([
        RefSelector("eValue-index0-1")
      ], NumberFilter2.prototype, "eValueFrom1", void 0);
      __decorate$2c([
        RefSelector("eValue-index1-1")
      ], NumberFilter2.prototype, "eValueTo1", void 0);
      __decorate$2c([
        RefSelector("eValue-index0-2")
      ], NumberFilter2.prototype, "eValueFrom2", void 0);
      __decorate$2c([
        RefSelector("eValue-index1-2")
      ], NumberFilter2.prototype, "eValueTo2", void 0);
      return NumberFilter2;
    }(ScalarFilter);
    __extends$2x = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign$a = function() {
      __assign$a = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$a.apply(this, arguments);
    };
    __decorate$2b = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    TextFilter = function(_super) {
      __extends$2x(TextFilter2, _super);
      function TextFilter2() {
        return _super.call(this, "textFilter") || this;
      }
      TextFilter2.trimInput = function(value) {
        var trimmedInput = value && value.trim();
        return trimmedInput === "" ? value : trimmedInput;
      };
      TextFilter2.prototype.getDefaultDebounceMs = function() {
        return 500;
      };
      TextFilter2.prototype.setParams = function(params) {
        _super.prototype.setParams.call(this, params);
        this.textFilterParams = params;
        this.matcher = this.getTextMatcher();
        this.formatter = this.textFilterParams.textFormatter || (this.textFilterParams.caseSensitive ? TextFilter2.DEFAULT_FORMATTER : TextFilter2.DEFAULT_LOWERCASE_FORMATTER);
      };
      TextFilter2.prototype.getTextMatcher = function() {
        var legacyComparator = this.textFilterParams.textCustomComparator;
        if (legacyComparator) {
          _.doOnce(function() {
            return console.warn("AG Grid - textCustomComparator is deprecated, use textMatcher instead.");
          }, "textCustomComparator.deprecated");
          return function(_a) {
            var filterOption = _a.filterOption, value = _a.value, filterText = _a.filterText;
            return legacyComparator(filterOption, value, filterText);
          };
        }
        return this.textFilterParams.textMatcher || TextFilter2.DEFAULT_MATCHER;
      };
      TextFilter2.prototype.createCondition = function(position) {
        var type = this.getConditionTypes()[position];
        var model = {
          filterType: this.getFilterType(),
          type
        };
        var values2 = this.getValues(position);
        if (values2.length > 0) {
          model.filter = values2[0];
        }
        if (values2.length > 1) {
          model.filterTo = values2[1];
        }
        return model;
      };
      TextFilter2.prototype.getFilterType = function() {
        return "text";
      };
      TextFilter2.prototype.areSimpleModelsEqual = function(aSimple, bSimple) {
        return aSimple.filter === bSimple.filter && aSimple.filterTo === bSimple.filterTo && aSimple.type === bSimple.type;
      };
      TextFilter2.prototype.getInputs = function() {
        return [
          [this.eValueFrom1, this.eValueTo1],
          [this.eValueFrom2, this.eValueTo2]
        ];
      };
      TextFilter2.prototype.getValues = function(position) {
        var _this = this;
        var result = [];
        this.forEachInput(function(element, index, elPosition, numberOfInputs) {
          if (position === elPosition && index < numberOfInputs) {
            var value = makeNull(element.getValue());
            var cleanValue = (_this.textFilterParams.trimInput ? TextFilter2.trimInput(value) : value) || null;
            result.push(cleanValue);
            element.setValue(cleanValue, true);
          }
        });
        return result;
      };
      TextFilter2.prototype.getDefaultFilterOptions = function() {
        return TextFilter2.DEFAULT_FILTER_OPTIONS;
      };
      TextFilter2.prototype.createValueTemplate = function(position) {
        var pos = position === ConditionPosition.One ? "1" : "2";
        return '\n            <div class="ag-filter-body" ref="eCondition' + pos + 'Body" role="presentation">\n                <ag-input-text-field class=".ag-filter-from ag-filter-filter" ref="eValue-index0-' + pos + '"></ag-input-text-field>\n                <ag-input-text-field class="ag-filter-to ag-filter-filter" ref="eValue-index1-' + pos + '"></ag-input-text-field>\n            </div>';
      };
      TextFilter2.prototype.mapValuesFromModel = function(filterModel) {
        var _a = filterModel || {}, filter = _a.filter, filterTo = _a.filterTo, type = _a.type;
        return [
          filter || null,
          filterTo || null
        ].slice(0, this.getNumberOfInputs(type));
      };
      TextFilter2.prototype.evaluateNullValue = function(filterType) {
        var filterTypesAllowNulls = [
          SimpleFilter.NOT_EQUAL,
          SimpleFilter.NOT_CONTAINS,
          SimpleFilter.BLANK
        ];
        return filterType ? filterTypesAllowNulls.indexOf(filterType) >= 0 : false;
      };
      TextFilter2.prototype.evaluateNonNullValue = function(values2, cellValue, filterModel, params) {
        var _this = this;
        var formattedValues = values2.map(function(v) {
          return _this.formatter(v);
        }) || [];
        var cellValueFormatted = this.formatter(cellValue);
        var _a = this.textFilterParams, api = _a.api, colDef = _a.colDef, column = _a.column, columnApi = _a.columnApi, context = _a.context, textFormatter = _a.textFormatter;
        if (filterModel.type === SimpleFilter.BLANK) {
          return this.isBlank(cellValue);
        } else if (filterModel.type === SimpleFilter.NOT_BLANK) {
          return !this.isBlank(cellValue);
        }
        var matcherParams = {
          api,
          colDef,
          column,
          columnApi,
          context,
          node: params.node,
          data: params.data,
          filterOption: filterModel.type,
          value: cellValueFormatted,
          textFormatter
        };
        return formattedValues.some(function(v) {
          return _this.matcher(__assign$a(__assign$a({}, matcherParams), { filterText: v }));
        });
      };
      TextFilter2.DEFAULT_FILTER_OPTIONS = [
        SimpleFilter.CONTAINS,
        SimpleFilter.NOT_CONTAINS,
        SimpleFilter.EQUALS,
        SimpleFilter.NOT_EQUAL,
        SimpleFilter.STARTS_WITH,
        SimpleFilter.ENDS_WITH,
        SimpleFilter.BLANK,
        SimpleFilter.NOT_BLANK
      ];
      TextFilter2.DEFAULT_FORMATTER = function(from) {
        return from;
      };
      TextFilter2.DEFAULT_LOWERCASE_FORMATTER = function(from) {
        return from == null ? null : from.toString().toLowerCase();
      };
      TextFilter2.DEFAULT_MATCHER = function(_a) {
        var filterOption = _a.filterOption, value = _a.value, filterText = _a.filterText;
        if (filterText == null) {
          return false;
        }
        switch (filterOption) {
          case TextFilter2.CONTAINS:
            return value.indexOf(filterText) >= 0;
          case TextFilter2.NOT_CONTAINS:
            return value.indexOf(filterText) < 0;
          case TextFilter2.EQUALS:
            return value === filterText;
          case TextFilter2.NOT_EQUAL:
            return value != filterText;
          case TextFilter2.STARTS_WITH:
            return value.indexOf(filterText) === 0;
          case TextFilter2.ENDS_WITH:
            var index = value.lastIndexOf(filterText);
            return index >= 0 && index === value.length - filterText.length;
          default:
            return false;
        }
      };
      __decorate$2b([
        RefSelector("eValue-index0-1")
      ], TextFilter2.prototype, "eValueFrom1", void 0);
      __decorate$2b([
        RefSelector("eValue-index1-1")
      ], TextFilter2.prototype, "eValueTo1", void 0);
      __decorate$2b([
        RefSelector("eValue-index0-2")
      ], TextFilter2.prototype, "eValueFrom2", void 0);
      __decorate$2b([
        RefSelector("eValue-index1-2")
      ], TextFilter2.prototype, "eValueTo2", void 0);
      return TextFilter2;
    }(SimpleFilter);
    __extends$2w = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$2a = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    TextInputFloatingFilter = function(_super) {
      __extends$2w(TextInputFloatingFilter2, _super);
      function TextInputFloatingFilter2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      TextInputFloatingFilter2.prototype.postConstruct = function() {
        this.resetTemplate();
      };
      TextInputFloatingFilter2.prototype.resetTemplate = function(paramsMap) {
        this.setTemplate('\n            <div class="ag-floating-filter-input" role="presentation">\n                <ag-input-text-field ref="eFloatingFilterInput"></ag-input-text-field>\n            </div>\n        ', paramsMap);
      };
      TextInputFloatingFilter2.prototype.getDefaultDebounceMs = function() {
        return 500;
      };
      TextInputFloatingFilter2.prototype.onParentModelChanged = function(model, event) {
        if (this.isEventFromFloatingFilter(event)) {
          return;
        }
        this.setLastTypeFromModel(model);
        this.eFloatingFilterInput.setValue(this.getTextFromModel(model));
        this.setEditable(this.canWeEditAfterModelFromParentFilter(model));
      };
      TextInputFloatingFilter2.prototype.init = function(params) {
        _super.prototype.init.call(this, params);
        this.params = params;
        this.applyActive = ProvidedFilter.isUseApplyButton(this.params.filterParams);
        var allowedCharPattern = this.params.filterParams.allowedCharPattern;
        if (allowedCharPattern != null) {
          this.resetTemplate({ eFloatingFilterInput: { allowedCharPattern } });
        }
        if (!this.isReadOnly()) {
          var debounceMs = ProvidedFilter.getDebounceMs(this.params.filterParams, this.getDefaultDebounceMs());
          var toDebounce = debounce(this.syncUpWithParentFilter.bind(this), debounceMs);
          var filterGui = this.eFloatingFilterInput.getGui();
          this.addManagedListener(filterGui, "input", toDebounce);
          this.addManagedListener(filterGui, "keypress", toDebounce);
          this.addManagedListener(filterGui, "keydown", toDebounce);
        }
        var columnDef = params.column.getDefinition();
        if (this.isReadOnly() || columnDef.filterParams && columnDef.filterParams.filterOptions && columnDef.filterParams.filterOptions.length === 1 && columnDef.filterParams.filterOptions[0] === "inRange") {
          this.eFloatingFilterInput.setDisabled(true);
        }
        var displayName = this.columnModel.getDisplayNameForColumn(params.column, "header", true);
        var translate = this.gridOptionsWrapper.getLocaleTextFunc();
        this.eFloatingFilterInput.setInputAriaLabel(displayName + " " + translate("ariaFilterInput", "Filter Input"));
      };
      TextInputFloatingFilter2.prototype.syncUpWithParentFilter = function(e) {
        var _this = this;
        var enterKeyPressed = e.key === KeyCode.ENTER;
        if (this.applyActive && !enterKeyPressed) {
          return;
        }
        var value = this.eFloatingFilterInput.getValue();
        if (this.params.filterParams.trimInput) {
          value = TextFilter.trimInput(value);
          this.eFloatingFilterInput.setValue(value, true);
        }
        this.params.parentFilterInstance(function(filterInstance) {
          if (filterInstance) {
            filterInstance.onFloatingFilterChanged(_this.getLastType() || null, value || null);
          }
        });
      };
      TextInputFloatingFilter2.prototype.conditionToString = function(condition, options) {
        var numberOfInputs = (options || {}).numberOfInputs;
        var isRange = condition.type == SimpleFilter.IN_RANGE || numberOfInputs === 2;
        if (isRange) {
          return condition.filter + "-" + condition.filterTo;
        }
        if (condition.filter != null) {
          return "" + condition.filter;
        }
        return "" + condition.type;
      };
      TextInputFloatingFilter2.prototype.setEditable = function(editable) {
        this.eFloatingFilterInput.setDisabled(!editable);
      };
      __decorate$2a([
        Autowired("columnModel")
      ], TextInputFloatingFilter2.prototype, "columnModel", void 0);
      __decorate$2a([
        RefSelector("eFloatingFilterInput")
      ], TextInputFloatingFilter2.prototype, "eFloatingFilterInput", void 0);
      __decorate$2a([
        PostConstruct
      ], TextInputFloatingFilter2.prototype, "postConstruct", null);
      return TextInputFloatingFilter2;
    }(SimpleFloatingFilter);
    __extends$2v = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    NumberFloatingFilter = function(_super) {
      __extends$2v(NumberFloatingFilter2, _super);
      function NumberFloatingFilter2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      NumberFloatingFilter2.prototype.getDefaultFilterOptions = function() {
        return NumberFilter.DEFAULT_FILTER_OPTIONS;
      };
      return NumberFloatingFilter2;
    }(TextInputFloatingFilter);
    __extends$2u = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    TextFloatingFilter = function(_super) {
      __extends$2u(TextFloatingFilter2, _super);
      function TextFloatingFilter2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      TextFloatingFilter2.prototype.getDefaultFilterOptions = function() {
        return TextFilter.DEFAULT_FILTER_OPTIONS;
      };
      return TextFloatingFilter2;
    }(TextInputFloatingFilter);
    TouchListener = function() {
      function TouchListener2(eElement, preventMouseClick) {
        var _this = this;
        if (preventMouseClick === void 0) {
          preventMouseClick = false;
        }
        this.destroyFuncs = [];
        this.touching = false;
        this.eventService = new EventService();
        this.eElement = eElement;
        this.preventMouseClick = preventMouseClick;
        var startListener = this.onTouchStart.bind(this);
        var moveListener = this.onTouchMove.bind(this);
        var endListener = this.onTouchEnd.bind(this);
        this.eElement.addEventListener("touchstart", startListener, { passive: true });
        this.eElement.addEventListener("touchmove", moveListener, { passive: true });
        this.eElement.addEventListener("touchend", endListener, { passive: false });
        this.destroyFuncs.push(function() {
          _this.eElement.removeEventListener("touchstart", startListener, { passive: true });
          _this.eElement.removeEventListener("touchmove", moveListener, { passive: true });
          _this.eElement.removeEventListener("touchend", endListener, { passive: false });
        });
      }
      TouchListener2.prototype.getActiveTouch = function(touchList) {
        for (var i = 0; i < touchList.length; i++) {
          var matches = touchList[i].identifier === this.touchStart.identifier;
          if (matches) {
            return touchList[i];
          }
        }
        return null;
      };
      TouchListener2.prototype.addEventListener = function(eventType, listener) {
        this.eventService.addEventListener(eventType, listener);
      };
      TouchListener2.prototype.removeEventListener = function(eventType, listener) {
        this.eventService.removeEventListener(eventType, listener);
      };
      TouchListener2.prototype.onTouchStart = function(touchEvent) {
        var _this = this;
        if (this.touching) {
          return;
        }
        this.touchStart = touchEvent.touches[0];
        this.touching = true;
        this.moved = false;
        var touchStartCopy = this.touchStart;
        window.setTimeout(function() {
          var touchesMatch = _this.touchStart === touchStartCopy;
          if (_this.touching && touchesMatch && !_this.moved) {
            _this.moved = true;
            var event_1 = {
              type: TouchListener2.EVENT_LONG_TAP,
              touchStart: _this.touchStart,
              touchEvent
            };
            _this.eventService.dispatchEvent(event_1);
          }
        }, 500);
      };
      TouchListener2.prototype.onTouchMove = function(touchEvent) {
        if (!this.touching) {
          return;
        }
        var touch = this.getActiveTouch(touchEvent.touches);
        if (!touch) {
          return;
        }
        var eventIsFarAway = !areEventsNear(touch, this.touchStart, 4);
        if (eventIsFarAway) {
          this.moved = true;
        }
      };
      TouchListener2.prototype.onTouchEnd = function(touchEvent) {
        if (!this.touching) {
          return;
        }
        if (!this.moved) {
          var event_2 = {
            type: TouchListener2.EVENT_TAP,
            touchStart: this.touchStart
          };
          this.eventService.dispatchEvent(event_2);
          this.checkForDoubleTap();
        }
        if (this.preventMouseClick && touchEvent.cancelable) {
          touchEvent.preventDefault();
        }
        this.touching = false;
      };
      TouchListener2.prototype.checkForDoubleTap = function() {
        var now = new Date().getTime();
        if (this.lastTapTime && this.lastTapTime > 0) {
          var interval = now - this.lastTapTime;
          if (interval > TouchListener2.DOUBLE_TAP_MILLIS) {
            var event_3 = {
              type: TouchListener2.EVENT_DOUBLE_TAP,
              touchStart: this.touchStart
            };
            this.eventService.dispatchEvent(event_3);
            this.lastTapTime = null;
          } else {
            this.lastTapTime = now;
          }
        } else {
          this.lastTapTime = now;
        }
      };
      TouchListener2.prototype.destroy = function() {
        this.destroyFuncs.forEach(function(func) {
          return func();
        });
      };
      TouchListener2.EVENT_TAP = "tap";
      TouchListener2.EVENT_DOUBLE_TAP = "doubleTap";
      TouchListener2.EVENT_LONG_TAP = "longTap";
      TouchListener2.DOUBLE_TAP_MILLIS = 500;
      return TouchListener2;
    }();
    __extends$2t = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$29 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    SortIndicatorComp = function(_super) {
      __extends$2t(SortIndicatorComp2, _super);
      function SortIndicatorComp2(skipTemplate) {
        var _this = _super.call(this) || this;
        if (!skipTemplate) {
          _this.setTemplate(SortIndicatorComp2.TEMPLATE);
        }
        return _this;
      }
      SortIndicatorComp2.prototype.attachCustomElements = function(eSortOrder, eSortAsc, eSortDesc, eSortMixed, eSortNone) {
        this.eSortOrder = eSortOrder;
        this.eSortAsc = eSortAsc;
        this.eSortDesc = eSortDesc;
        this.eSortMixed = eSortMixed;
        this.eSortNone = eSortNone;
      };
      SortIndicatorComp2.prototype.setupSort = function(column, suppressOrder) {
        var _this = this;
        if (suppressOrder === void 0) {
          suppressOrder = false;
        }
        this.column = column;
        this.suppressOrder = suppressOrder;
        this.setupMultiSortIndicator();
        var canSort = !!this.column.getColDef().sortable;
        if (!canSort) {
          return;
        }
        this.addInIcon("sortAscending", this.eSortAsc, column);
        this.addInIcon("sortDescending", this.eSortDesc, column);
        this.addInIcon("sortUnSort", this.eSortNone, column);
        this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, function() {
          return _this.onSortChanged();
        });
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, function() {
          return _this.onSortChanged();
        });
        this.onSortChanged();
      };
      SortIndicatorComp2.prototype.addInIcon = function(iconName, eParent, column) {
        if (eParent == null) {
          return;
        }
        var eIcon = createIconNoSpan(iconName, this.gridOptionsWrapper, column);
        if (eIcon) {
          eParent.appendChild(eIcon);
        }
      };
      SortIndicatorComp2.prototype.onSortChanged = function() {
        this.updateIcons();
        if (!this.suppressOrder) {
          this.updateSortOrder();
        }
      };
      SortIndicatorComp2.prototype.updateIcons = function() {
        var sortDirection = this.sortController.getDisplaySortForColumn(this.column);
        if (this.eSortAsc) {
          var isAscending = sortDirection === "asc";
          this.eSortAsc.classList.toggle("ag-hidden", !isAscending);
        }
        if (this.eSortDesc) {
          var isDescending = sortDirection === "desc";
          this.eSortDesc.classList.toggle("ag-hidden", !isDescending);
        }
        if (this.eSortNone) {
          var alwaysHideNoSort = !this.column.getColDef().unSortIcon && !this.gridOptionsWrapper.isUnSortIcon();
          var isNone = sortDirection === null || sortDirection === void 0;
          this.eSortNone.classList.toggle("ag-hidden", alwaysHideNoSort || !isNone);
        }
      };
      SortIndicatorComp2.prototype.setupMultiSortIndicator = function() {
        var _this = this;
        this.addInIcon("sortUnSort", this.eSortMixed, this.column);
        var isColumnShowingRowGroup = this.column.getColDef().showRowGroup;
        var areGroupsCoupled = this.gridOptionsWrapper.isColumnsSortingCoupledToGroup();
        if (areGroupsCoupled && isColumnShowingRowGroup) {
          this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, function() {
            return _this.updateMultiSortIndicator();
          });
          this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, function() {
            return _this.updateMultiSortIndicator();
          });
          this.updateMultiSortIndicator();
        }
      };
      SortIndicatorComp2.prototype.updateMultiSortIndicator = function() {
        if (this.eSortMixed) {
          var isMixedSort = this.sortController.getDisplaySortForColumn(this.column) === "mixed";
          this.eSortMixed.classList.toggle("ag-hidden", !isMixedSort);
        }
      };
      SortIndicatorComp2.prototype.updateSortOrder = function() {
        var _this = this;
        var _a;
        if (!this.eSortOrder) {
          return;
        }
        var allColumnsWithSorting = this.sortController.getColumnsWithSortingOrdered();
        var indexThisCol = (_a = this.sortController.getDisplaySortIndexForColumn(this.column), _a !== null && _a !== void 0 ? _a : -1);
        var moreThanOneColSorting = allColumnsWithSorting.some(function(col) {
          var _a2;
          return _a2 = _this.sortController.getDisplaySortIndexForColumn(col), _a2 !== null && _a2 !== void 0 ? _a2 : -1 >= 1;
        });
        var showIndex = indexThisCol >= 0 && moreThanOneColSorting;
        setDisplayed(this.eSortOrder, showIndex);
        if (indexThisCol >= 0) {
          this.eSortOrder.innerHTML = (indexThisCol + 1).toString();
        } else {
          clearElement(this.eSortOrder);
        }
      };
      SortIndicatorComp2.TEMPLATE = '<span class="ag-sort-indicator-container">\n            <span ref="eSortOrder" class="ag-sort-indicator-icon ag-sort-order ag-hidden" aria-hidden="true"></span>\n            <span ref="eSortAsc" class="ag-sort-indicator-icon ag-sort-ascending-icon ag-hidden" aria-hidden="true"></span>\n            <span ref="eSortDesc" class="ag-sort-indicator-icon ag-sort-descending-icon ag-hidden" aria-hidden="true"></span>\n            <span ref="eSortMixed" class="ag-sort-indicator-icon ag-sort-mixed-icon ag-hidden" aria-hidden="true"></span>\n            <span ref="eSortNone" class="ag-sort-indicator-icon ag-sort-none-icon ag-hidden" aria-hidden="true"></span>\n        </span>';
      __decorate$29([
        RefSelector("eSortOrder")
      ], SortIndicatorComp2.prototype, "eSortOrder", void 0);
      __decorate$29([
        RefSelector("eSortAsc")
      ], SortIndicatorComp2.prototype, "eSortAsc", void 0);
      __decorate$29([
        RefSelector("eSortDesc")
      ], SortIndicatorComp2.prototype, "eSortDesc", void 0);
      __decorate$29([
        RefSelector("eSortMixed")
      ], SortIndicatorComp2.prototype, "eSortMixed", void 0);
      __decorate$29([
        RefSelector("eSortNone")
      ], SortIndicatorComp2.prototype, "eSortNone", void 0);
      __decorate$29([
        Autowired("columnModel")
      ], SortIndicatorComp2.prototype, "columnModel", void 0);
      __decorate$29([
        Autowired("sortController")
      ], SortIndicatorComp2.prototype, "sortController", void 0);
      return SortIndicatorComp2;
    }(Component);
    __extends$2s = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$28 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    HeaderComp = function(_super) {
      __extends$2s(HeaderComp2, _super);
      function HeaderComp2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.lastMovingChanged = 0;
        return _this;
      }
      HeaderComp2.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
      };
      HeaderComp2.prototype.refresh = function(params) {
        this.params = params;
        if (this.workOutTemplate() != this.currentTemplate) {
          return false;
        }
        if (this.workOutShowMenu() != this.currentShowMenu) {
          return false;
        }
        if (this.workOutSort() != this.currentSort) {
          return false;
        }
        this.setDisplayName(params);
        return true;
      };
      HeaderComp2.prototype.workOutTemplate = function() {
        var template = firstExistingValue(this.params.template, HeaderComp2.TEMPLATE);
        template = template && template.trim ? template.trim() : template;
        return template;
      };
      HeaderComp2.prototype.init = function(params) {
        this.params = params;
        this.currentTemplate = this.workOutTemplate();
        this.setTemplate(this.currentTemplate);
        this.setupTap();
        this.setupIcons(params.column);
        this.setMenu();
        this.setupSort();
        this.setupFilterIcon();
        this.setDisplayName(params);
      };
      HeaderComp2.prototype.setDisplayName = function(params) {
        if (this.currentDisplayName != params.displayName) {
          this.currentDisplayName = params.displayName;
          var displayNameSanitised = escapeString(this.currentDisplayName);
          if (this.eText) {
            this.eText.innerHTML = displayNameSanitised;
          }
        }
      };
      HeaderComp2.prototype.setupIcons = function(column) {
        this.addInIcon("menu", this.eMenu, column);
        this.addInIcon("filter", this.eFilter, column);
      };
      HeaderComp2.prototype.addInIcon = function(iconName, eParent, column) {
        if (eParent == null) {
          return;
        }
        var eIcon = createIconNoSpan(iconName, this.gridOptionsWrapper, column);
        if (eIcon) {
          eParent.appendChild(eIcon);
        }
      };
      HeaderComp2.prototype.setupTap = function() {
        var _this = this;
        var options = this.gridOptionsWrapper;
        if (options.isSuppressTouch()) {
          return;
        }
        var touchListener = new TouchListener(this.getGui(), true);
        var suppressMenuHide = options.isSuppressMenuHide();
        var tapMenuButton = suppressMenuHide && exists(this.eMenu);
        var menuTouchListener = tapMenuButton ? new TouchListener(this.eMenu, true) : touchListener;
        if (this.params.enableMenu) {
          var eventType = tapMenuButton ? "EVENT_TAP" : "EVENT_LONG_TAP";
          var showMenuFn = function(event) {
            options.getApi().showColumnMenuAfterMouseClick(_this.params.column, event.touchStart);
          };
          this.addManagedListener(menuTouchListener, TouchListener[eventType], showMenuFn);
        }
        if (this.params.enableSorting) {
          var tapListener = function(event) {
            var target = event.touchStart.target;
            if (suppressMenuHide && _this.eMenu.contains(target)) {
              return;
            }
            _this.sortController.progressSort(_this.params.column, false, "uiColumnSorted");
          };
          this.addManagedListener(touchListener, TouchListener.EVENT_TAP, tapListener);
        }
        this.addDestroyFunc(function() {
          return touchListener.destroy();
        });
        if (tapMenuButton) {
          this.addDestroyFunc(function() {
            return menuTouchListener.destroy();
          });
        }
      };
      HeaderComp2.prototype.workOutShowMenu = function() {
        var menuHides = !this.gridOptionsWrapper.isSuppressMenuHide();
        var onIpadAndMenuHides = isIOSUserAgent() && menuHides;
        var showMenu = this.params.enableMenu && !onIpadAndMenuHides;
        return showMenu;
      };
      HeaderComp2.prototype.setMenu = function() {
        var _this = this;
        if (!this.eMenu) {
          return;
        }
        this.currentShowMenu = this.workOutShowMenu();
        if (!this.currentShowMenu) {
          removeFromParent(this.eMenu);
          return;
        }
        var suppressMenuHide = this.gridOptionsWrapper.isSuppressMenuHide();
        this.addManagedListener(this.eMenu, "click", function() {
          return _this.showMenu(_this.eMenu);
        });
        this.eMenu.classList.toggle("ag-header-menu-always-show", suppressMenuHide);
      };
      HeaderComp2.prototype.showMenu = function(eventSource) {
        if (!eventSource) {
          eventSource = this.eMenu;
        }
        this.menuFactory.showMenuAfterButtonClick(this.params.column, eventSource, "columnMenu");
      };
      HeaderComp2.prototype.workOutSort = function() {
        return this.params.enableSorting;
      };
      HeaderComp2.prototype.setupSort = function() {
        var _this = this;
        this.currentSort = this.params.enableSorting;
        if (!this.eSortIndicator) {
          this.eSortIndicator = this.context.createBean(new SortIndicatorComp(true));
          this.eSortIndicator.attachCustomElements(this.eSortOrder, this.eSortAsc, this.eSortDesc, this.eSortMixed, this.eSortNone);
        }
        this.eSortIndicator.setupSort(this.params.column);
        if (!this.currentSort) {
          return;
        }
        var sortUsingCtrl = this.gridOptionsWrapper.isMultiSortKeyCtrl();
        this.addManagedListener(this.params.column, Column.EVENT_MOVING_CHANGED, function() {
          _this.lastMovingChanged = new Date().getTime();
        });
        if (this.eLabel) {
          this.addManagedListener(this.eLabel, "click", function(event) {
            var moving = _this.params.column.isMoving();
            var nowTime = new Date().getTime();
            var movedRecently = nowTime - _this.lastMovingChanged < 50;
            var columnMoving = moving || movedRecently;
            if (!columnMoving) {
              var multiSort = sortUsingCtrl ? event.ctrlKey || event.metaKey : event.shiftKey;
              _this.params.progressSort(multiSort);
            }
          });
        }
        var onSortingChanged = function() {
          var _a;
          _this.addOrRemoveCssClass("ag-header-cell-sorted-asc", _this.params.column.isSortAscending());
          _this.addOrRemoveCssClass("ag-header-cell-sorted-desc", _this.params.column.isSortDescending());
          _this.addOrRemoveCssClass("ag-header-cell-sorted-none", _this.params.column.isSortNone());
          if (_this.params.column.getColDef().showRowGroup) {
            var sourceColumns = _this.columnModel.getSourceColumnsForGroupColumn(_this.params.column);
            var sortDirectionsMatch = (_a = sourceColumns) === null || _a === void 0 ? void 0 : _a.every(function(sourceCol) {
              return _this.params.column.getSort() == sourceCol.getSort();
            });
            var isMultiSorting = !sortDirectionsMatch;
            _this.addOrRemoveCssClass("ag-header-cell-sorted-mixed", isMultiSorting);
          }
        };
        this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, onSortingChanged);
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, onSortingChanged);
      };
      HeaderComp2.prototype.setupFilterIcon = function() {
        if (!this.eFilter) {
          return;
        }
        this.addManagedListener(this.params.column, Column.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
        this.onFilterChanged();
      };
      HeaderComp2.prototype.onFilterChanged = function() {
        var filterPresent = this.params.column.isFilterActive();
        this.eFilter.classList.toggle("ag-hidden", !filterPresent);
      };
      HeaderComp2.TEMPLATE = '<div class="ag-cell-label-container" role="presentation">\n            <span ref="eMenu" class="ag-header-icon ag-header-cell-menu-button" aria-hidden="true"></span>\n            <div ref="eLabel" class="ag-header-cell-label" role="presentation">\n                <span ref="eText" class="ag-header-cell-text"></span>\n                <span ref="eFilter" class="ag-header-icon ag-header-label-icon ag-filter-icon" aria-hidden="true"></span>\n                <ag-sort-indicator ref="eSortIndicator"></ag-sort-indicator>\n            </div>\n        </div>';
      __decorate$28([
        Autowired("sortController")
      ], HeaderComp2.prototype, "sortController", void 0);
      __decorate$28([
        Autowired("menuFactory")
      ], HeaderComp2.prototype, "menuFactory", void 0);
      __decorate$28([
        Autowired("columnModel")
      ], HeaderComp2.prototype, "columnModel", void 0);
      __decorate$28([
        RefSelector("eFilter")
      ], HeaderComp2.prototype, "eFilter", void 0);
      __decorate$28([
        RefSelector("eSortIndicator")
      ], HeaderComp2.prototype, "eSortIndicator", void 0);
      __decorate$28([
        RefSelector("eMenu")
      ], HeaderComp2.prototype, "eMenu", void 0);
      __decorate$28([
        RefSelector("eLabel")
      ], HeaderComp2.prototype, "eLabel", void 0);
      __decorate$28([
        RefSelector("eText")
      ], HeaderComp2.prototype, "eText", void 0);
      __decorate$28([
        RefSelector("eSortOrder")
      ], HeaderComp2.prototype, "eSortOrder", void 0);
      __decorate$28([
        RefSelector("eSortAsc")
      ], HeaderComp2.prototype, "eSortAsc", void 0);
      __decorate$28([
        RefSelector("eSortDesc")
      ], HeaderComp2.prototype, "eSortDesc", void 0);
      __decorate$28([
        RefSelector("eSortMixed")
      ], HeaderComp2.prototype, "eSortMixed", void 0);
      __decorate$28([
        RefSelector("eSortNone")
      ], HeaderComp2.prototype, "eSortNone", void 0);
      return HeaderComp2;
    }(Component);
    __extends$2r = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$27 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    HeaderGroupComp = function(_super) {
      __extends$2r(HeaderGroupComp2, _super);
      function HeaderGroupComp2() {
        return _super.call(this, HeaderGroupComp2.TEMPLATE) || this;
      }
      HeaderGroupComp2.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
      };
      HeaderGroupComp2.prototype.init = function(params) {
        this.params = params;
        this.checkWarnings();
        this.setupLabel();
        this.addGroupExpandIcon();
        this.setupExpandIcons();
      };
      HeaderGroupComp2.prototype.checkWarnings = function() {
        var paramsAny = this.params;
        if (paramsAny.template) {
          var message_1 = "AG Grid: A template was provided for Header Group Comp - templates are only supported for Header Comps (not groups)";
          doOnce(function() {
            return console.warn(message_1);
          }, "HeaderGroupComp.templateNotSupported");
        }
      };
      HeaderGroupComp2.prototype.setupExpandIcons = function() {
        var _this = this;
        this.addInIcon("columnGroupOpened", "agOpened");
        this.addInIcon("columnGroupClosed", "agClosed");
        var expandAction = function(event) {
          if (isStopPropagationForAgGrid(event)) {
            return;
          }
          var newExpandedValue = !_this.params.columnGroup.isExpanded();
          _this.columnModel.setColumnGroupOpened(_this.params.columnGroup.getProvidedColumnGroup(), newExpandedValue, "uiColumnExpanded");
        };
        this.addTouchAndClickListeners(this.eCloseIcon, expandAction);
        this.addTouchAndClickListeners(this.eOpenIcon, expandAction);
        var stopPropagationAction = function(event) {
          stopPropagationForAgGrid(event);
        };
        this.addManagedListener(this.eCloseIcon, "dblclick", stopPropagationAction);
        this.addManagedListener(this.eOpenIcon, "dblclick", stopPropagationAction);
        this.addManagedListener(this.getGui(), "dblclick", expandAction);
        this.updateIconVisibility();
        var providedColumnGroup = this.params.columnGroup.getProvidedColumnGroup();
        this.addManagedListener(providedColumnGroup, ProvidedColumnGroup.EVENT_EXPANDED_CHANGED, this.updateIconVisibility.bind(this));
        this.addManagedListener(providedColumnGroup, ProvidedColumnGroup.EVENT_EXPANDABLE_CHANGED, this.updateIconVisibility.bind(this));
      };
      HeaderGroupComp2.prototype.addTouchAndClickListeners = function(eElement, action) {
        var touchListener = new TouchListener(eElement, true);
        this.addManagedListener(touchListener, TouchListener.EVENT_TAP, action);
        this.addDestroyFunc(function() {
          return touchListener.destroy();
        });
        this.addManagedListener(eElement, "click", action);
      };
      HeaderGroupComp2.prototype.updateIconVisibility = function() {
        var columnGroup = this.params.columnGroup;
        if (columnGroup.isExpandable()) {
          var expanded = this.params.columnGroup.isExpanded();
          setDisplayed(this.eOpenIcon, expanded);
          setDisplayed(this.eCloseIcon, !expanded);
        } else {
          setDisplayed(this.eOpenIcon, false);
          setDisplayed(this.eCloseIcon, false);
        }
      };
      HeaderGroupComp2.prototype.addInIcon = function(iconName, refName) {
        var eIcon = createIconNoSpan(iconName, this.gridOptionsWrapper, null);
        if (eIcon) {
          this.getRefElement(refName).appendChild(eIcon);
        }
      };
      HeaderGroupComp2.prototype.addGroupExpandIcon = function() {
        if (!this.params.columnGroup.isExpandable()) {
          setDisplayed(this.eOpenIcon, false);
          setDisplayed(this.eCloseIcon, false);
          return;
        }
      };
      HeaderGroupComp2.prototype.setupLabel = function() {
        var displayName = this.params.displayName;
        if (exists(displayName)) {
          var displayNameSanitised = escapeString(displayName);
          this.getRefElement("agLabel").innerHTML = displayNameSanitised;
        }
      };
      HeaderGroupComp2.TEMPLATE = '<div class="ag-header-group-cell-label" ref="agContainer" role="presentation">\n            <span ref="agLabel" class="ag-header-group-text" role="presentation"></span>\n            <span ref="agOpened" class="ag-header-icon ag-header-expand-icon ag-header-expand-icon-expanded"></span>\n            <span ref="agClosed" class="ag-header-icon ag-header-expand-icon ag-header-expand-icon-collapsed"></span>\n        </div>';
      __decorate$27([
        Autowired("columnModel")
      ], HeaderGroupComp2.prototype, "columnModel", void 0);
      __decorate$27([
        RefSelector("agOpened")
      ], HeaderGroupComp2.prototype, "eOpenIcon", void 0);
      __decorate$27([
        RefSelector("agClosed")
      ], HeaderGroupComp2.prototype, "eCloseIcon", void 0);
      return HeaderGroupComp2;
    }(Component);
    __extends$2q = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    PopupComponent = function(_super) {
      __extends$2q(PopupComponent2, _super);
      function PopupComponent2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      PopupComponent2.prototype.isPopup = function() {
        return true;
      };
      PopupComponent2.prototype.setParentComponent = function(container) {
        container.addCssClass("ag-has-popup");
        _super.prototype.setParentComponent.call(this, container);
      };
      PopupComponent2.prototype.destroy = function() {
        var parentComp = this.parentComponent;
        var hasParent = parentComp && parentComp.isAlive();
        if (hasParent) {
          parentComp.getGui().classList.remove("ag-has-popup");
        }
        _super.prototype.destroy.call(this);
      };
      return PopupComponent2;
    }(Component);
    __extends$2p = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$26 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    LargeTextCellEditor = function(_super) {
      __extends$2p(LargeTextCellEditor2, _super);
      function LargeTextCellEditor2() {
        return _super.call(this, LargeTextCellEditor2.TEMPLATE) || this;
      }
      LargeTextCellEditor2.prototype.init = function(params) {
        this.params = params;
        this.focusAfterAttached = params.cellStartedEdit;
        this.eTextArea.setMaxLength(params.maxLength || 200).setCols(params.cols || 60).setRows(params.rows || 10);
        if (exists(params.value)) {
          this.eTextArea.setValue(params.value.toString(), true);
        }
        this.addGuiEventListener("keydown", this.onKeyDown.bind(this));
      };
      LargeTextCellEditor2.prototype.onKeyDown = function(event) {
        var key = event.key;
        if (key === KeyCode.LEFT || key === KeyCode.UP || key === KeyCode.RIGHT || key === KeyCode.DOWN || event.shiftKey && key === KeyCode.ENTER) {
          event.stopPropagation();
        }
      };
      LargeTextCellEditor2.prototype.afterGuiAttached = function() {
        var translate = this.gridOptionsWrapper.getLocaleTextFunc();
        this.eTextArea.setInputAriaLabel(translate("ariaInputEditor", "Input Editor"));
        if (this.focusAfterAttached) {
          this.eTextArea.getFocusableElement().focus();
        }
      };
      LargeTextCellEditor2.prototype.getValue = function() {
        return this.params.parseValue(this.eTextArea.getValue());
      };
      LargeTextCellEditor2.TEMPLATE = '<div class="ag-large-text" tabindex="0">\n            <ag-input-text-area ref="eTextArea" class="ag-large-text-input"></ag-input-text-area>\n        </div>';
      __decorate$26([
        RefSelector("eTextArea")
      ], LargeTextCellEditor2.prototype, "eTextArea", void 0);
      return LargeTextCellEditor2;
    }(PopupComponent);
    __extends$2o = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$25 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    SelectCellEditor = function(_super) {
      __extends$2o(SelectCellEditor2, _super);
      function SelectCellEditor2() {
        var _this = _super.call(this, '<div class="ag-cell-edit-wrapper"><ag-select class="ag-cell-editor" ref="eSelect"></ag-select></div>') || this;
        _this.startedByEnter = false;
        return _this;
      }
      SelectCellEditor2.prototype.init = function(params) {
        var _this = this;
        this.focusAfterAttached = params.cellStartedEdit;
        if (missing(params.values)) {
          console.warn("AG Grid: no values found for select cellEditor");
          return;
        }
        this.startedByEnter = params.eventKey != null ? params.eventKey === KeyCode.ENTER : false;
        var hasValue = false;
        params.values.forEach(function(value) {
          var option = { value };
          var valueFormatted = _this.valueFormatterService.formatValue(params.column, null, value);
          var valueFormattedExits = valueFormatted !== null && valueFormatted !== void 0;
          option.text = valueFormattedExits ? valueFormatted : value;
          _this.eSelect.addOption(option);
          hasValue = hasValue || params.value === value;
        });
        if (hasValue) {
          this.eSelect.setValue(params.value, true);
        } else if (params.values.length) {
          this.eSelect.setValue(params.values[0], true);
        }
        if (!this.gridOptionsWrapper.isFullRowEdit()) {
          this.eSelect.onValueChange(function() {
            return params.stopEditing();
          });
        }
      };
      SelectCellEditor2.prototype.afterGuiAttached = function() {
        if (this.focusAfterAttached) {
          this.eSelect.getFocusableElement().focus();
        }
        if (this.startedByEnter) {
          this.eSelect.showPicker();
        }
      };
      SelectCellEditor2.prototype.focusIn = function() {
        this.eSelect.getFocusableElement().focus();
      };
      SelectCellEditor2.prototype.getValue = function() {
        return this.eSelect.getValue();
      };
      SelectCellEditor2.prototype.isPopup = function() {
        return false;
      };
      __decorate$25([
        Autowired("valueFormatterService")
      ], SelectCellEditor2.prototype, "valueFormatterService", void 0);
      __decorate$25([
        RefSelector("eSelect")
      ], SelectCellEditor2.prototype, "eSelect", void 0);
      return SelectCellEditor2;
    }(PopupComponent);
    __extends$2n = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    PopupSelectCellEditor = function(_super) {
      __extends$2n(PopupSelectCellEditor2, _super);
      function PopupSelectCellEditor2() {
        var _this = _super.call(this) || this;
        doOnce(function() {
          return console.warn('AG Grid: The PopupSelectCellEditor (agPopupSelectCellEditor) is deprecated. Instead use {cellEditor: "agSelectCellEditor", cellEditorPopup: true} ');
        }, "PopupSelectCellEditor.deprecated");
        return _this;
      }
      PopupSelectCellEditor2.prototype.isPopup = function() {
        return true;
      };
      return PopupSelectCellEditor2;
    }(SelectCellEditor);
    __extends$2m = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$24 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    TextCellEditor = function(_super) {
      __extends$2m(TextCellEditor2, _super);
      function TextCellEditor2() {
        return _super.call(this, TextCellEditor2.TEMPLATE) || this;
      }
      TextCellEditor2.prototype.init = function(params) {
        this.params = params;
        var eInput = this.eInput;
        var startValue;
        if (params.cellStartedEdit) {
          this.focusAfterAttached = true;
          if (params.eventKey === KeyCode.BACKSPACE || params.eventKey === KeyCode.DELETE) {
            startValue = "";
          } else if (params.charPress) {
            startValue = params.charPress;
          } else {
            startValue = this.getStartValue(params);
            if (params.eventKey !== KeyCode.F2) {
              this.highlightAllOnFocus = true;
            }
          }
        } else {
          this.focusAfterAttached = false;
          startValue = this.getStartValue(params);
        }
        if (startValue != null) {
          eInput.setValue(startValue, true);
        }
        if (params.maxLength != null) {
          eInput.setMaxLength(params.maxLength);
        }
        this.addManagedListener(eInput.getGui(), "keydown", function(event) {
          var key = event.key;
          if (key === KeyCode.PAGE_UP || key === KeyCode.PAGE_DOWN) {
            event.preventDefault();
          }
        });
      };
      TextCellEditor2.prototype.afterGuiAttached = function() {
        var translate = this.gridOptionsWrapper.getLocaleTextFunc();
        var eInput = this.eInput;
        eInput.setInputAriaLabel(translate("ariaInputEditor", "Input Editor"));
        if (!this.focusAfterAttached) {
          return;
        }
        if (!isBrowserSafari()) {
          eInput.getFocusableElement().focus();
        }
        var inputEl = eInput.getInputElement();
        if (this.highlightAllOnFocus) {
          inputEl.select();
        } else {
          var value = eInput.getValue();
          var len = exists(value) && value.length || 0;
          if (len) {
            inputEl.setSelectionRange(len, len);
          }
        }
      };
      TextCellEditor2.prototype.focusIn = function() {
        var eInput = this.eInput;
        var focusEl = eInput.getFocusableElement();
        var inputEl = eInput.getInputElement();
        focusEl.focus();
        inputEl.select();
      };
      TextCellEditor2.prototype.getValue = function() {
        var eInput = this.eInput;
        return this.params.parseValue(eInput.getValue());
      };
      TextCellEditor2.prototype.getStartValue = function(params) {
        var formatValue = params.useFormatter || params.column.getColDef().refData;
        return formatValue ? params.formatValue(params.value) : params.value;
      };
      TextCellEditor2.prototype.isPopup = function() {
        return false;
      };
      TextCellEditor2.TEMPLATE = '<div class="ag-cell-edit-wrapper">\n            <ag-input-text-field class="ag-cell-editor" ref="eInput"></ag-input-text-field>\n        </div>';
      __decorate$24([
        RefSelector("eInput")
      ], TextCellEditor2.prototype, "eInput", void 0);
      return TextCellEditor2;
    }(PopupComponent);
    __extends$2l = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    PopupTextCellEditor = function(_super) {
      __extends$2l(PopupTextCellEditor2, _super);
      function PopupTextCellEditor2() {
        var _this = _super.call(this) || this;
        doOnce(function() {
          return console.warn('AG Grid: The PopupTextCellEditor (agPopupTextCellEditor) is deprecated. Instead use {cellEditor: "agTextCellEditor", cellEditorPopup: true} ');
        }, "PopupTextCellEditor.deprecated");
        return _this;
      }
      PopupTextCellEditor2.prototype.isPopup = function() {
        return true;
      };
      return PopupTextCellEditor2;
    }(TextCellEditor);
    __extends$2k = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$23 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    ARROW_UP = "\u2191";
    ARROW_DOWN = "\u2193";
    AnimateShowChangeCellRenderer = function(_super) {
      __extends$2k(AnimateShowChangeCellRenderer2, _super);
      function AnimateShowChangeCellRenderer2() {
        var _this = _super.call(this, AnimateShowChangeCellRenderer2.TEMPLATE) || this;
        _this.refreshCount = 0;
        return _this;
      }
      AnimateShowChangeCellRenderer2.prototype.init = function(params) {
        this.eValue = this.queryForHtmlElement(".ag-value-change-value");
        this.eDelta = this.queryForHtmlElement(".ag-value-change-delta");
        this.refresh(params);
      };
      AnimateShowChangeCellRenderer2.prototype.showDelta = function(params, delta) {
        var absDelta = Math.abs(delta);
        var valueFormatted = params.formatValue(absDelta);
        var valueToUse = exists(valueFormatted) ? valueFormatted : absDelta;
        var deltaUp = delta >= 0;
        if (deltaUp) {
          this.eDelta.innerHTML = ARROW_UP + valueToUse;
        } else {
          this.eDelta.innerHTML = ARROW_DOWN + valueToUse;
        }
        this.eDelta.classList.toggle("ag-value-change-delta-up", deltaUp);
        this.eDelta.classList.toggle("ag-value-change-delta-down", !deltaUp);
      };
      AnimateShowChangeCellRenderer2.prototype.setTimerToRemoveDelta = function() {
        var _this = this;
        this.refreshCount++;
        var refreshCountCopy = this.refreshCount;
        window.setTimeout(function() {
          if (refreshCountCopy === _this.refreshCount) {
            _this.hideDeltaValue();
          }
        }, 2e3);
      };
      AnimateShowChangeCellRenderer2.prototype.hideDeltaValue = function() {
        this.eValue.classList.remove("ag-value-change-value-highlight");
        clearElement(this.eDelta);
      };
      AnimateShowChangeCellRenderer2.prototype.refresh = function(params) {
        var value = params.value;
        if (value === this.lastValue) {
          return false;
        }
        if (exists(params.valueFormatted)) {
          this.eValue.innerHTML = params.valueFormatted;
        } else if (exists(params.value)) {
          this.eValue.innerHTML = value;
        } else {
          clearElement(this.eValue);
        }
        if (this.filterManager.isSuppressFlashingCellsBecauseFiltering()) {
          return false;
        }
        if (typeof value === "number" && typeof this.lastValue === "number") {
          var delta = value - this.lastValue;
          this.showDelta(params, delta);
        }
        if (this.lastValue) {
          this.eValue.classList.add("ag-value-change-value-highlight");
        }
        this.setTimerToRemoveDelta();
        this.lastValue = value;
        return true;
      };
      AnimateShowChangeCellRenderer2.TEMPLATE = '<span><span class="ag-value-change-delta"></span><span class="ag-value-change-value"></span></span>';
      __decorate$23([
        Autowired("filterManager")
      ], AnimateShowChangeCellRenderer2.prototype, "filterManager", void 0);
      return AnimateShowChangeCellRenderer2;
    }(Component);
    __extends$2j = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$22 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    AnimateSlideCellRenderer = function(_super) {
      __extends$2j(AnimateSlideCellRenderer2, _super);
      function AnimateSlideCellRenderer2() {
        var _this = _super.call(this, AnimateSlideCellRenderer2.TEMPLATE) || this;
        _this.refreshCount = 0;
        _this.eCurrent = _this.queryForHtmlElement(".ag-value-slide-current");
        return _this;
      }
      AnimateSlideCellRenderer2.prototype.init = function(params) {
        this.refresh(params);
      };
      AnimateSlideCellRenderer2.prototype.addSlideAnimation = function() {
        var _this = this;
        this.refreshCount++;
        var refreshCountCopy = this.refreshCount;
        if (this.ePrevious) {
          this.getGui().removeChild(this.ePrevious);
        }
        this.ePrevious = loadTemplate('<span class="ag-value-slide-previous ag-value-slide-out"></span>');
        this.ePrevious.innerHTML = this.eCurrent.innerHTML;
        this.getGui().insertBefore(this.ePrevious, this.eCurrent);
        window.setTimeout(function() {
          if (refreshCountCopy !== _this.refreshCount) {
            return;
          }
          _this.ePrevious.classList.add("ag-value-slide-out-end");
        }, 50);
        window.setTimeout(function() {
          if (refreshCountCopy !== _this.refreshCount) {
            return;
          }
          _this.getGui().removeChild(_this.ePrevious);
          _this.ePrevious = null;
        }, 3e3);
      };
      AnimateSlideCellRenderer2.prototype.refresh = function(params) {
        var value = params.value;
        if (missing(value)) {
          value = "";
        }
        if (value === this.lastValue) {
          return false;
        }
        if (this.filterManager.isSuppressFlashingCellsBecauseFiltering()) {
          return false;
        }
        this.addSlideAnimation();
        this.lastValue = value;
        if (exists(params.valueFormatted)) {
          this.eCurrent.innerHTML = params.valueFormatted;
        } else if (exists(params.value)) {
          this.eCurrent.innerHTML = value;
        } else {
          clearElement(this.eCurrent);
        }
        return true;
      };
      AnimateSlideCellRenderer2.TEMPLATE = '<span>\n            <span class="ag-value-slide-current"></span>\n        </span>';
      __decorate$22([
        Autowired("filterManager")
      ], AnimateSlideCellRenderer2.prototype, "filterManager", void 0);
      return AnimateSlideCellRenderer2;
    }(Component);
    (function(RowHighlightPosition2) {
      RowHighlightPosition2[RowHighlightPosition2["Above"] = 0] = "Above";
      RowHighlightPosition2[RowHighlightPosition2["Below"] = 1] = "Below";
    })(RowHighlightPosition || (RowHighlightPosition = {}));
    RowNode = function() {
      function RowNode2(beans) {
        this.rowIndex = null;
        this.key = null;
        this.childrenMapped = {};
        this.displayed = false;
        this.rowTop = null;
        this.oldRowTop = null;
        this.selectable = true;
        this.__objectId = RowNode2.OBJECT_ID_SEQUENCE++;
        this.__autoHeights = {};
        this.alreadyRendered = false;
        this.highlighted = null;
        this.selected = false;
        this.beans = beans;
      }
      RowNode2.prototype.setData = function(data) {
        this.setDataCommon(data, false);
      };
      RowNode2.prototype.updateData = function(data) {
        this.setDataCommon(data, true);
      };
      RowNode2.prototype.setDataCommon = function(data, update) {
        var oldData = this.data;
        this.data = data;
        this.beans.valueCache.onDataChanged();
        this.updateDataOnDetailNode();
        this.checkRowSelectable();
        var event = this.createDataChangedEvent(data, oldData, update);
        this.dispatchLocalEvent(event);
      };
      RowNode2.prototype.updateDataOnDetailNode = function() {
        if (this.detailNode) {
          this.detailNode.data = this.data;
        }
      };
      RowNode2.prototype.createDataChangedEvent = function(newData, oldData, update) {
        return {
          type: RowNode2.EVENT_DATA_CHANGED,
          node: this,
          oldData,
          newData,
          update
        };
      };
      RowNode2.prototype.createLocalRowEvent = function(type) {
        return {
          type,
          node: this
        };
      };
      RowNode2.prototype.getRowIndexString = function() {
        if (this.rowPinned === Constants.PINNED_TOP) {
          return "t-" + this.rowIndex;
        }
        if (this.rowPinned === Constants.PINNED_BOTTOM) {
          return "b-" + this.rowIndex;
        }
        return this.rowIndex.toString();
      };
      RowNode2.prototype.createDaemonNode = function() {
        var oldNode = new RowNode2(this.beans);
        oldNode.id = this.id;
        oldNode.data = this.data;
        oldNode.daemon = true;
        oldNode.selected = this.selected;
        oldNode.level = this.level;
        return oldNode;
      };
      RowNode2.prototype.setDataAndId = function(data, id) {
        var oldNode = exists(this.id) ? this.createDaemonNode() : null;
        var oldData = this.data;
        this.data = data;
        this.updateDataOnDetailNode();
        this.setId(id);
        this.beans.selectionService.syncInRowNode(this, oldNode);
        this.checkRowSelectable();
        var event = this.createDataChangedEvent(data, oldData, false);
        this.dispatchLocalEvent(event);
      };
      RowNode2.prototype.checkRowSelectable = function() {
        var isRowSelectableFunc = this.beans.gridOptionsWrapper.getIsRowSelectableFunc();
        this.setRowSelectable(isRowSelectableFunc ? isRowSelectableFunc(this) : true);
      };
      RowNode2.prototype.setRowSelectable = function(newVal) {
        if (this.selectable !== newVal) {
          this.selectable = newVal;
          if (this.eventService) {
            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_SELECTABLE_CHANGED));
          }
          var isGroupSelectsChildren = this.beans.gridOptionsWrapper.isGroupSelectsChildren();
          if (isGroupSelectsChildren) {
            var selected = this.calculateSelectedFromChildren();
            this.setSelected(selected !== null && selected !== void 0 ? selected : false);
          }
        }
      };
      RowNode2.prototype.setId = function(id) {
        var getRowIdFunc = this.beans.gridOptionsWrapper.getRowIdFunc();
        if (getRowIdFunc) {
          if (this.data) {
            var parentKeys = this.getGroupKeys(true);
            this.id = getRowIdFunc({
              data: this.data,
              parentKeys: parentKeys.length > 0 ? parentKeys : void 0,
              level: this.level
            });
            if (this.id !== null && typeof this.id === "string" && this.id.startsWith(RowNode2.ID_PREFIX_ROW_GROUP)) {
              console.error("AG Grid: Row IDs cannot start with " + RowNode2.ID_PREFIX_ROW_GROUP + ", this is a reserved prefix for AG Grid's row grouping feature.");
            }
            if (this.id !== null && typeof this.id !== "string") {
              this.id = "" + this.id;
            }
          } else {
            this.id = void 0;
          }
        } else {
          this.id = id;
        }
      };
      RowNode2.prototype.getGroupKeys = function(excludeSelf) {
        if (excludeSelf === void 0) {
          excludeSelf = false;
        }
        var keys2 = [];
        var pointer = this;
        if (excludeSelf) {
          pointer = pointer.parent;
        }
        while (pointer && pointer.level >= 0) {
          keys2.push(pointer.key);
          pointer = pointer.parent;
        }
        keys2.reverse();
        return keys2;
      };
      RowNode2.prototype.isPixelInRange = function(pixel) {
        if (!exists(this.rowTop) || !exists(this.rowHeight)) {
          return false;
        }
        return pixel >= this.rowTop && pixel < this.rowTop + this.rowHeight;
      };
      RowNode2.prototype.setFirstChild = function(firstChild) {
        if (this.firstChild === firstChild) {
          return;
        }
        this.firstChild = firstChild;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_FIRST_CHILD_CHANGED));
        }
      };
      RowNode2.prototype.setLastChild = function(lastChild) {
        if (this.lastChild === lastChild) {
          return;
        }
        this.lastChild = lastChild;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_LAST_CHILD_CHANGED));
        }
      };
      RowNode2.prototype.setChildIndex = function(childIndex) {
        if (this.childIndex === childIndex) {
          return;
        }
        this.childIndex = childIndex;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_CHILD_INDEX_CHANGED));
        }
      };
      RowNode2.prototype.setRowTop = function(rowTop) {
        this.oldRowTop = this.rowTop;
        if (this.rowTop === rowTop) {
          return;
        }
        this.rowTop = rowTop;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_TOP_CHANGED));
        }
        this.setDisplayed(rowTop !== null);
      };
      RowNode2.prototype.clearRowTopAndRowIndex = function() {
        this.oldRowTop = null;
        this.setRowTop(null);
        this.setRowIndex(null);
      };
      RowNode2.prototype.setDisplayed = function(displayed) {
        if (this.displayed === displayed) {
          return;
        }
        this.displayed = displayed;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_DISPLAYED_CHANGED));
        }
      };
      RowNode2.prototype.setDragging = function(dragging) {
        if (this.dragging === dragging) {
          return;
        }
        this.dragging = dragging;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_DRAGGING_CHANGED));
        }
      };
      RowNode2.prototype.setHighlighted = function(highlighted) {
        if (highlighted === this.highlighted) {
          return;
        }
        this.highlighted = highlighted;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_HIGHLIGHT_CHANGED));
        }
      };
      RowNode2.prototype.setAllChildrenCount = function(allChildrenCount) {
        if (this.allChildrenCount === allChildrenCount) {
          return;
        }
        this.allChildrenCount = allChildrenCount;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_ALL_CHILDREN_COUNT_CHANGED));
        }
      };
      RowNode2.prototype.setMaster = function(master) {
        if (this.master === master) {
          return;
        }
        if (this.master && !master) {
          this.expanded = false;
        }
        this.master = master;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_MASTER_CHANGED));
        }
      };
      RowNode2.prototype.setGroup = function(group) {
        if (this.group === group) {
          return;
        }
        if (this.group && !group) {
          this.expanded = false;
        }
        this.group = group;
        this.updateHasChildren();
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_GROUP_CHANGED));
        }
      };
      RowNode2.prototype.setRowHeight = function(rowHeight, estimated) {
        if (estimated === void 0) {
          estimated = false;
        }
        this.rowHeight = rowHeight;
        this.rowHeightEstimated = estimated;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_HEIGHT_CHANGED));
        }
      };
      RowNode2.prototype.setRowAutoHeight = function(cellHeight, column) {
        if (!this.__autoHeights) {
          this.__autoHeights = {};
        }
        var autoHeights = this.__autoHeights;
        autoHeights[column.getId()] = cellHeight;
        if (cellHeight != null) {
          if (this.checkAutoHeightsDebounced == null) {
            this.checkAutoHeightsDebounced = debounce(this.checkAutoHeights.bind(this), 1);
          }
          this.checkAutoHeightsDebounced();
        }
      };
      RowNode2.prototype.checkAutoHeights = function() {
        var notAllPresent = false;
        var nonePresent = true;
        var newRowHeight = 0;
        var autoHeights = this.__autoHeights;
        if (autoHeights == null) {
          return;
        }
        var displayedAutoHeightCols = this.beans.columnModel.getAllDisplayedAutoHeightCols();
        displayedAutoHeightCols.forEach(function(col) {
          var cellHeight = autoHeights[col.getId()];
          if (cellHeight == null) {
            notAllPresent = true;
            return;
          }
          nonePresent = false;
          if (cellHeight > newRowHeight) {
            newRowHeight = cellHeight;
          }
        });
        if (notAllPresent) {
          return;
        }
        if (nonePresent || newRowHeight < 10) {
          newRowHeight = this.beans.gridOptionsWrapper.getRowHeightForNode(this).height;
        }
        if (newRowHeight == this.rowHeight) {
          return;
        }
        this.setRowHeight(newRowHeight);
        var rowModel = this.beans.rowModel;
        if (rowModel.onRowHeightChangedDebounced) {
          rowModel.onRowHeightChangedDebounced();
        }
      };
      RowNode2.prototype.setRowIndex = function(rowIndex) {
        if (this.rowIndex === rowIndex) {
          return;
        }
        this.rowIndex = rowIndex;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_ROW_INDEX_CHANGED));
        }
      };
      RowNode2.prototype.setUiLevel = function(uiLevel) {
        if (this.uiLevel === uiLevel) {
          return;
        }
        this.uiLevel = uiLevel;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_UI_LEVEL_CHANGED));
        }
      };
      RowNode2.prototype.setExpanded = function(expanded, e) {
        if (this.expanded === expanded) {
          return;
        }
        this.expanded = expanded;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_EXPANDED_CHANGED));
        }
        var event = Object.assign({}, this.createGlobalRowEvent(Events.EVENT_ROW_GROUP_OPENED), {
          expanded,
          event: e || null
        });
        this.beans.rowNodeEventThrottle.dispatchExpanded(event);
        if (this.beans.gridOptionsWrapper.isGroupIncludeFooter()) {
          this.beans.rowRenderer.refreshCells({ rowNodes: [this] });
        }
      };
      RowNode2.prototype.createGlobalRowEvent = function(type) {
        return {
          type,
          node: this,
          data: this.data,
          rowIndex: this.rowIndex,
          rowPinned: this.rowPinned,
          context: this.beans.gridOptionsWrapper.getContext(),
          api: this.beans.gridOptionsWrapper.getApi(),
          columnApi: this.beans.gridOptionsWrapper.getColumnApi()
        };
      };
      RowNode2.prototype.dispatchLocalEvent = function(event) {
        if (this.eventService) {
          this.eventService.dispatchEvent(event);
        }
      };
      RowNode2.prototype.setDataValue = function(colKey, newValue, eventSource) {
        var column = this.beans.columnModel.getPrimaryColumn(colKey);
        var oldValue = this.beans.valueService.getValue(column, this);
        var valueChanged = this.beans.valueService.setValue(this, column, newValue, eventSource);
        this.dispatchCellChangedEvent(column, newValue, oldValue);
        this.checkRowSelectable();
        return valueChanged;
      };
      RowNode2.prototype.setGroupValue = function(colKey, newValue) {
        var column = this.beans.columnModel.getGridColumn(colKey);
        if (missing(this.groupData)) {
          this.groupData = {};
        }
        var columnId = column.getColId();
        var oldValue = this.groupData[columnId];
        if (oldValue === newValue) {
          return;
        }
        this.groupData[columnId] = newValue;
        this.dispatchCellChangedEvent(column, newValue, oldValue);
      };
      RowNode2.prototype.setAggData = function(newAggData) {
        var _this = this;
        var colIds = getAllKeysInObjects([this.aggData, newAggData]);
        var oldAggData = this.aggData;
        this.aggData = newAggData;
        if (this.eventService) {
          colIds.forEach(function(colId) {
            var column = _this.beans.columnModel.getGridColumn(colId);
            var value = _this.aggData ? _this.aggData[colId] : void 0;
            var oldValue = oldAggData ? oldAggData[colId] : void 0;
            _this.dispatchCellChangedEvent(column, value, oldValue);
          });
        }
      };
      RowNode2.prototype.updateHasChildren = function() {
        var newValue = this.group && !this.footer || this.childrenAfterGroup && this.childrenAfterGroup.length > 0;
        if (newValue !== this.__hasChildren) {
          this.__hasChildren = !!newValue;
          if (this.eventService) {
            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_HAS_CHILDREN_CHANGED));
          }
        }
      };
      RowNode2.prototype.hasChildren = function() {
        if (this.__hasChildren == null) {
          this.updateHasChildren();
        }
        return this.__hasChildren;
      };
      RowNode2.prototype.isEmptyRowGroupNode = function() {
        return this.group && missingOrEmpty(this.childrenAfterGroup);
      };
      RowNode2.prototype.dispatchCellChangedEvent = function(column, newValue, oldValue) {
        var cellChangedEvent = {
          type: RowNode2.EVENT_CELL_CHANGED,
          node: this,
          column,
          newValue,
          oldValue
        };
        this.dispatchLocalEvent(cellChangedEvent);
      };
      RowNode2.prototype.resetQuickFilterAggregateText = function() {
        this.quickFilterAggregateText = null;
      };
      RowNode2.prototype.isExpandable = function() {
        return this.hasChildren() && !this.footer || this.master ? true : false;
      };
      RowNode2.prototype.isSelected = function() {
        if (this.footer) {
          return this.sibling.isSelected();
        }
        return this.selected;
      };
      RowNode2.prototype.depthFirstSearch = function(callback) {
        if (this.childrenAfterGroup) {
          this.childrenAfterGroup.forEach(function(child) {
            return child.depthFirstSearch(callback);
          });
        }
        callback(this);
      };
      RowNode2.prototype.calculateSelectedFromChildren = function() {
        var _a;
        var atLeastOneSelected = false;
        var atLeastOneDeSelected = false;
        var atLeastOneMixed = false;
        if (!((_a = this.childrenAfterGroup) === null || _a === void 0 ? void 0 : _a.length)) {
          return this.selectable ? this.selected : null;
        }
        for (var i = 0; i < this.childrenAfterGroup.length; i++) {
          var child = this.childrenAfterGroup[i];
          var childState = child.isSelected();
          if (!child.selectable) {
            var selectable = child.calculateSelectedFromChildren();
            if (selectable === null) {
              continue;
            }
            childState = selectable;
          }
          switch (childState) {
            case true:
              atLeastOneSelected = true;
              break;
            case false:
              atLeastOneDeSelected = true;
              break;
            default:
              atLeastOneMixed = true;
              break;
          }
        }
        if (atLeastOneMixed || atLeastOneSelected && atLeastOneDeSelected) {
          return void 0;
        } else if (atLeastOneSelected) {
          return true;
        } else if (atLeastOneDeSelected) {
          return false;
        } else if (!this.selectable) {
          return null;
        } else {
          return this.selected;
        }
      };
      RowNode2.prototype.setSelectedInitialValue = function(selected) {
        this.selected = selected;
      };
      RowNode2.prototype.setSelected = function(newValue, clearSelection, suppressFinishActions) {
        if (clearSelection === void 0) {
          clearSelection = false;
        }
        if (suppressFinishActions === void 0) {
          suppressFinishActions = false;
        }
        this.setSelectedParams({
          newValue,
          clearSelection,
          suppressFinishActions,
          rangeSelect: false
        });
      };
      RowNode2.prototype.isRowPinned = function() {
        return this.rowPinned === Constants.PINNED_TOP || this.rowPinned === Constants.PINNED_BOTTOM;
      };
      RowNode2.prototype.setSelectedParams = function(params) {
        var _a;
        var groupSelectsChildren = this.beans.gridOptionsWrapper.isGroupSelectsChildren();
        var newValue = params.newValue === true;
        var clearSelection = params.clearSelection === true;
        var suppressFinishActions = params.suppressFinishActions === true;
        var rangeSelect = params.rangeSelect === true;
        var groupSelectsFiltered = groupSelectsChildren && params.groupSelectsFiltered === true;
        if (this.id === void 0) {
          console.warn("AG Grid: cannot select node until id for node is known");
          return 0;
        }
        if (this.rowPinned) {
          console.warn("AG Grid: cannot select pinned rows");
          return 0;
        }
        if (this.footer) {
          return this.sibling.setSelectedParams(params);
        }
        if (rangeSelect && this.beans.selectionService.getLastSelectedNode()) {
          var newRowClicked = this.beans.selectionService.getLastSelectedNode() !== this;
          var allowMultiSelect = this.beans.gridOptionsWrapper.isRowSelectionMulti();
          if (newRowClicked && allowMultiSelect) {
            var nodesChanged = this.doRowRangeSelection(params.newValue);
            this.beans.selectionService.setLastSelectedNode(this);
            return nodesChanged;
          }
        }
        var updatedCount = 0;
        var skipThisNode = groupSelectsFiltered && this.group;
        if (!skipThisNode) {
          var thisNodeWasSelected = this.selectThisNode(newValue, params.event);
          if (thisNodeWasSelected) {
            updatedCount++;
          }
        }
        if (groupSelectsChildren && ((_a = this.childrenAfterGroup) === null || _a === void 0 ? void 0 : _a.length)) {
          updatedCount += this.selectChildNodes(newValue, groupSelectsFiltered);
        }
        if (!suppressFinishActions) {
          var clearOtherNodes = newValue && (clearSelection || !this.beans.gridOptionsWrapper.isRowSelectionMulti());
          if (clearOtherNodes) {
            updatedCount += this.beans.selectionService.clearOtherNodes(this);
          }
          if (updatedCount > 0) {
            this.beans.selectionService.updateGroupsFromChildrenSelections();
            var event_1 = {
              type: Events.EVENT_SELECTION_CHANGED
            };
            this.beans.eventService.dispatchEvent(event_1);
          }
          if (newValue) {
            this.beans.selectionService.setLastSelectedNode(this);
          }
        }
        return updatedCount;
      };
      RowNode2.prototype.doRowRangeSelection = function(value) {
        var _this = this;
        if (value === void 0) {
          value = true;
        }
        var groupsSelectChildren = this.beans.gridOptionsWrapper.isGroupSelectsChildren();
        var lastSelectedNode = this.beans.selectionService.getLastSelectedNode();
        var nodesToSelect = this.beans.rowModel.getNodesInRangeForSelection(this, lastSelectedNode);
        var updatedCount = 0;
        nodesToSelect.forEach(function(rowNode) {
          if (rowNode.group && groupsSelectChildren || value === false && _this === rowNode) {
            return;
          }
          var nodeWasSelected = rowNode.selectThisNode(value);
          if (nodeWasSelected) {
            updatedCount++;
          }
        });
        this.beans.selectionService.updateGroupsFromChildrenSelections();
        var event = {
          type: Events.EVENT_SELECTION_CHANGED
        };
        this.beans.eventService.dispatchEvent(event);
        return updatedCount;
      };
      RowNode2.prototype.isParentOfNode = function(potentialParent) {
        var parentNode = this.parent;
        while (parentNode) {
          if (parentNode === potentialParent) {
            return true;
          }
          parentNode = parentNode.parent;
        }
        return false;
      };
      RowNode2.prototype.selectThisNode = function(newValue, e) {
        var selectionNotAllowed = !this.selectable && newValue;
        var selectionNotChanged = this.selected === newValue;
        if (selectionNotAllowed || selectionNotChanged) {
          return false;
        }
        this.selected = newValue;
        if (this.eventService) {
          this.dispatchLocalEvent(this.createLocalRowEvent(RowNode2.EVENT_ROW_SELECTED));
        }
        var event = Object.assign({}, this.createGlobalRowEvent(Events.EVENT_ROW_SELECTED), {
          event: e || null
        });
        this.beans.eventService.dispatchEvent(event);
        return true;
      };
      RowNode2.prototype.selectChildNodes = function(newValue, groupSelectsFiltered) {
        var children = groupSelectsFiltered ? this.childrenAfterAggFilter : this.childrenAfterGroup;
        if (missing(children)) {
          return 0;
        }
        var updatedCount = 0;
        for (var i = 0; i < children.length; i++) {
          updatedCount += children[i].setSelectedParams({
            newValue,
            clearSelection: false,
            suppressFinishActions: true,
            groupSelectsFiltered
          });
        }
        return updatedCount;
      };
      RowNode2.prototype.addEventListener = function(eventType, listener) {
        if (!this.eventService) {
          this.eventService = new EventService();
        }
        this.eventService.addEventListener(eventType, listener);
      };
      RowNode2.prototype.removeEventListener = function(eventType, listener) {
        if (!this.eventService) {
          return;
        }
        this.eventService.removeEventListener(eventType, listener);
        if (this.eventService.noRegisteredListenersExist()) {
          this.eventService = null;
        }
      };
      RowNode2.prototype.onMouseEnter = function() {
        this.dispatchLocalEvent(this.createLocalRowEvent(RowNode2.EVENT_MOUSE_ENTER));
      };
      RowNode2.prototype.onMouseLeave = function() {
        this.dispatchLocalEvent(this.createLocalRowEvent(RowNode2.EVENT_MOUSE_LEAVE));
      };
      RowNode2.prototype.getFirstChildOfFirstChild = function(rowGroupColumn) {
        var currentRowNode = this;
        var isCandidate = true;
        var foundFirstChildPath = false;
        var nodeToSwapIn = null;
        while (isCandidate && !foundFirstChildPath) {
          var parentRowNode = currentRowNode.parent;
          var firstChild = exists(parentRowNode) && currentRowNode.firstChild;
          if (firstChild) {
            if (parentRowNode.rowGroupColumn === rowGroupColumn) {
              foundFirstChildPath = true;
              nodeToSwapIn = parentRowNode;
            }
          } else {
            isCandidate = false;
          }
          currentRowNode = parentRowNode;
        }
        return foundFirstChildPath ? nodeToSwapIn : null;
      };
      RowNode2.prototype.isFullWidthCell = function() {
        var isFullWidthCellFunc = this.beans.gridOptionsWrapper.getIsFullWidthCellFunc();
        return isFullWidthCellFunc ? isFullWidthCellFunc({ rowNode: this }) : false;
      };
      RowNode2.prototype.getRoute = function() {
        if (this.key == null) {
          return;
        }
        var res = [];
        var pointer = this;
        while (pointer.key != null) {
          res.push(pointer.key);
          pointer = pointer.parent;
        }
        return res.reverse();
      };
      RowNode2.ID_PREFIX_ROW_GROUP = "row-group-";
      RowNode2.ID_PREFIX_TOP_PINNED = "t-";
      RowNode2.ID_PREFIX_BOTTOM_PINNED = "b-";
      RowNode2.OBJECT_ID_SEQUENCE = 0;
      RowNode2.EVENT_ROW_SELECTED = "rowSelected";
      RowNode2.EVENT_DATA_CHANGED = "dataChanged";
      RowNode2.EVENT_CELL_CHANGED = "cellChanged";
      RowNode2.EVENT_ALL_CHILDREN_COUNT_CHANGED = "allChildrenCountChanged";
      RowNode2.EVENT_MASTER_CHANGED = "masterChanged";
      RowNode2.EVENT_GROUP_CHANGED = "groupChanged";
      RowNode2.EVENT_MOUSE_ENTER = "mouseEnter";
      RowNode2.EVENT_MOUSE_LEAVE = "mouseLeave";
      RowNode2.EVENT_HEIGHT_CHANGED = "heightChanged";
      RowNode2.EVENT_TOP_CHANGED = "topChanged";
      RowNode2.EVENT_DISPLAYED_CHANGED = "displayedChanged";
      RowNode2.EVENT_FIRST_CHILD_CHANGED = "firstChildChanged";
      RowNode2.EVENT_LAST_CHILD_CHANGED = "lastChildChanged";
      RowNode2.EVENT_CHILD_INDEX_CHANGED = "childIndexChanged";
      RowNode2.EVENT_ROW_INDEX_CHANGED = "rowIndexChanged";
      RowNode2.EVENT_EXPANDED_CHANGED = "expandedChanged";
      RowNode2.EVENT_HAS_CHILDREN_CHANGED = "hasChildrenChanged";
      RowNode2.EVENT_SELECTABLE_CHANGED = "selectableChanged";
      RowNode2.EVENT_UI_LEVEL_CHANGED = "uiLevelChanged";
      RowNode2.EVENT_HIGHLIGHT_CHANGED = "rowHighlightChanged";
      RowNode2.EVENT_DRAGGING_CHANGED = "draggingChanged";
      return RowNode2;
    }();
    __extends$2i = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign$9 = function() {
      __assign$9 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$9.apply(this, arguments);
    };
    __decorate$21 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    CheckboxSelectionComponent = function(_super) {
      __extends$2i(CheckboxSelectionComponent2, _super);
      function CheckboxSelectionComponent2() {
        return _super.call(this, '\n            <div class="ag-selection-checkbox" role="presentation">\n                <ag-checkbox role="presentation" ref="eCheckbox"></ag-checkbox>\n            </div>') || this;
      }
      CheckboxSelectionComponent2.prototype.postConstruct = function() {
        this.eCheckbox.setPassive(true);
      };
      CheckboxSelectionComponent2.prototype.getCheckboxId = function() {
        return this.eCheckbox.getInputElement().id;
      };
      CheckboxSelectionComponent2.prototype.onDataChanged = function() {
        this.onSelectionChanged();
      };
      CheckboxSelectionComponent2.prototype.onSelectableChanged = function() {
        this.showOrHideSelect();
      };
      CheckboxSelectionComponent2.prototype.onSelectionChanged = function() {
        var translate = this.gridOptionsWrapper.getLocaleTextFunc();
        var state = this.rowNode.isSelected();
        var stateName = state === void 0 ? translate("ariaIndeterminate", "indeterminate") : state === true ? translate("ariaChecked", "checked") : translate("ariaUnchecked", "unchecked");
        var ariaLabel = translate("ariaRowToggleSelection", "Press Space to toggle row selection");
        this.eCheckbox.setValue(state, true);
        this.eCheckbox.setInputAriaLabel(ariaLabel + " (" + stateName + ")");
      };
      CheckboxSelectionComponent2.prototype.onCheckedClicked = function(event) {
        var groupSelectsFiltered = this.gridOptionsWrapper.isGroupSelectsFiltered();
        var updatedCount = this.rowNode.setSelectedParams({ newValue: false, rangeSelect: event.shiftKey, groupSelectsFiltered });
        return updatedCount;
      };
      CheckboxSelectionComponent2.prototype.onUncheckedClicked = function(event) {
        var groupSelectsFiltered = this.gridOptionsWrapper.isGroupSelectsFiltered();
        var updatedCount = this.rowNode.setSelectedParams({ newValue: true, rangeSelect: event.shiftKey, groupSelectsFiltered });
        return updatedCount;
      };
      CheckboxSelectionComponent2.prototype.init = function(params) {
        var _this = this;
        this.rowNode = params.rowNode;
        this.column = params.column;
        this.overrides = params.overrides;
        this.onSelectionChanged();
        this.addManagedListener(this.eCheckbox.getInputElement(), "dblclick", function(event) {
          stopPropagationForAgGrid(event);
        });
        this.addManagedListener(this.eCheckbox.getInputElement(), "click", function(event) {
          stopPropagationForAgGrid(event);
          var isSelected = _this.eCheckbox.getValue();
          var previousValue = _this.eCheckbox.getPreviousValue();
          if (previousValue === void 0 || isSelected === void 0) {
            var result = _this.onUncheckedClicked(event || {});
            if (result === 0) {
              _this.onCheckedClicked(event);
            }
          } else if (isSelected) {
            _this.onCheckedClicked(event);
          } else {
            _this.onUncheckedClicked(event || {});
          }
        });
        this.addManagedListener(this.rowNode, RowNode.EVENT_ROW_SELECTED, this.onSelectionChanged.bind(this));
        this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.onDataChanged.bind(this));
        this.addManagedListener(this.rowNode, RowNode.EVENT_SELECTABLE_CHANGED, this.onSelectableChanged.bind(this));
        var isRowSelectableFunc = this.gridOptionsWrapper.getIsRowSelectableFunc();
        var checkboxVisibleIsDynamic = isRowSelectableFunc || typeof this.getIsVisible() === "function";
        if (checkboxVisibleIsDynamic) {
          var showOrHideSelectListener = this.showOrHideSelect.bind(this);
          this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, showOrHideSelectListener);
          this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, showOrHideSelectListener);
          this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, showOrHideSelectListener);
          this.showOrHideSelect();
        }
        this.eCheckbox.getInputElement().setAttribute("tabindex", "-1");
      };
      CheckboxSelectionComponent2.prototype.showOrHideSelect = function() {
        var _a, _b, _c, _d;
        var selectable = this.rowNode.selectable;
        var isVisible2 = this.getIsVisible();
        if (selectable) {
          if (typeof isVisible2 === "function") {
            var extraParams = (_a = this.overrides) === null || _a === void 0 ? void 0 : _a.callbackParams;
            var params = (_b = this.column) === null || _b === void 0 ? void 0 : _b.createColumnFunctionCallbackParams(this.rowNode);
            selectable = params ? isVisible2(__assign$9(__assign$9({}, extraParams), params)) : false;
          } else {
            selectable = isVisible2 !== null && isVisible2 !== void 0 ? isVisible2 : false;
          }
        }
        var disableInsteadOfHide = (_c = this.column) === null || _c === void 0 ? void 0 : _c.getColDef().showDisabledCheckboxes;
        if (disableInsteadOfHide) {
          this.eCheckbox.setDisabled(!selectable);
          this.setVisible(true);
          this.setDisplayed(true);
          return;
        }
        if ((_d = this.overrides) === null || _d === void 0 ? void 0 : _d.removeHidden) {
          this.setDisplayed(selectable);
          return;
        }
        this.setVisible(selectable);
      };
      CheckboxSelectionComponent2.prototype.getIsVisible = function() {
        var _a, _b;
        if (this.overrides) {
          return this.overrides.isVisible;
        }
        return (_b = (_a = this.column) === null || _a === void 0 ? void 0 : _a.getColDef()) === null || _b === void 0 ? void 0 : _b.checkboxSelection;
      };
      __decorate$21([
        RefSelector("eCheckbox")
      ], CheckboxSelectionComponent2.prototype, "eCheckbox", void 0);
      __decorate$21([
        PostConstruct
      ], CheckboxSelectionComponent2.prototype, "postConstruct", null);
      return CheckboxSelectionComponent2;
    }(Component);
    __extends$2h = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$20 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __values$3 = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    (function(DragSourceType2) {
      DragSourceType2[DragSourceType2["ToolPanel"] = 0] = "ToolPanel";
      DragSourceType2[DragSourceType2["HeaderCell"] = 1] = "HeaderCell";
      DragSourceType2[DragSourceType2["RowDrag"] = 2] = "RowDrag";
      DragSourceType2[DragSourceType2["ChartPanel"] = 3] = "ChartPanel";
    })(DragSourceType || (DragSourceType = {}));
    (function(VerticalDirection2) {
      VerticalDirection2[VerticalDirection2["Up"] = 0] = "Up";
      VerticalDirection2[VerticalDirection2["Down"] = 1] = "Down";
    })(VerticalDirection || (VerticalDirection = {}));
    (function(HorizontalDirection2) {
      HorizontalDirection2[HorizontalDirection2["Left"] = 0] = "Left";
      HorizontalDirection2[HorizontalDirection2["Right"] = 1] = "Right";
    })(HorizontalDirection || (HorizontalDirection = {}));
    DragAndDropService = function(_super) {
      __extends$2h(DragAndDropService2, _super);
      function DragAndDropService2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.dragSourceAndParamsList = [];
        _this.dropTargets = [];
        return _this;
      }
      DragAndDropService_1 = DragAndDropService2;
      DragAndDropService2.prototype.init = function() {
        this.ePinnedIcon = createIcon("columnMovePin", this.gridOptionsWrapper, null);
        this.eHideIcon = createIcon("columnMoveHide", this.gridOptionsWrapper, null);
        this.eMoveIcon = createIcon("columnMoveMove", this.gridOptionsWrapper, null);
        this.eLeftIcon = createIcon("columnMoveLeft", this.gridOptionsWrapper, null);
        this.eRightIcon = createIcon("columnMoveRight", this.gridOptionsWrapper, null);
        this.eGroupIcon = createIcon("columnMoveGroup", this.gridOptionsWrapper, null);
        this.eAggregateIcon = createIcon("columnMoveValue", this.gridOptionsWrapper, null);
        this.ePivotIcon = createIcon("columnMovePivot", this.gridOptionsWrapper, null);
        this.eDropNotAllowedIcon = createIcon("dropNotAllowed", this.gridOptionsWrapper, null);
      };
      DragAndDropService2.prototype.addDragSource = function(dragSource, allowTouch) {
        if (allowTouch === void 0) {
          allowTouch = false;
        }
        var params = {
          eElement: dragSource.eElement,
          dragStartPixels: dragSource.dragStartPixels,
          onDragStart: this.onDragStart.bind(this, dragSource),
          onDragStop: this.onDragStop.bind(this),
          onDragging: this.onDragging.bind(this)
        };
        this.dragSourceAndParamsList.push({ params, dragSource });
        this.dragService.addDragSource(params, allowTouch);
      };
      DragAndDropService2.prototype.removeDragSource = function(dragSource) {
        var sourceAndParams = this.dragSourceAndParamsList.find(function(item) {
          return item.dragSource === dragSource;
        });
        if (sourceAndParams) {
          this.dragService.removeDragSource(sourceAndParams.params);
          removeFromArray(this.dragSourceAndParamsList, sourceAndParams);
        }
      };
      DragAndDropService2.prototype.clearDragSourceParamsList = function() {
        var _this = this;
        this.dragSourceAndParamsList.forEach(function(sourceAndParams) {
          return _this.dragService.removeDragSource(sourceAndParams.params);
        });
        this.dragSourceAndParamsList.length = 0;
      };
      DragAndDropService2.prototype.nudge = function() {
        if (this.dragging) {
          this.onDragging(this.eventLastTime, true);
        }
      };
      DragAndDropService2.prototype.onDragStart = function(dragSource, mouseEvent) {
        this.dragging = true;
        this.dragSource = dragSource;
        this.eventLastTime = mouseEvent;
        this.dragItem = this.dragSource.getDragItem();
        this.lastDropTarget = this.dragSource.dragSourceDropTarget;
        if (this.dragSource.onDragStarted) {
          this.dragSource.onDragStarted();
        }
        this.createGhost();
      };
      DragAndDropService2.prototype.onDragStop = function(mouseEvent) {
        this.eventLastTime = null;
        this.dragging = false;
        if (this.dragSource.onDragStopped) {
          this.dragSource.onDragStopped();
        }
        if (this.lastDropTarget && this.lastDropTarget.onDragStop) {
          var draggingEvent = this.createDropTargetEvent(this.lastDropTarget, mouseEvent, null, null, false);
          this.lastDropTarget.onDragStop(draggingEvent);
        }
        this.lastDropTarget = null;
        this.dragItem = null;
        this.removeGhost();
      };
      DragAndDropService2.prototype.onDragging = function(mouseEvent, fromNudge) {
        var _this = this;
        var _a, _b, _c, _d;
        var hDirection = this.getHorizontalDirection(mouseEvent);
        var vDirection = this.getVerticalDirection(mouseEvent);
        this.eventLastTime = mouseEvent;
        this.positionGhost(mouseEvent);
        var validDropTargets = this.dropTargets.filter(function(target) {
          return _this.isMouseOnDropTarget(mouseEvent, target);
        });
        var dropTarget = this.findCurrentDropTarget(mouseEvent, validDropTargets);
        if (dropTarget !== this.lastDropTarget) {
          this.leaveLastTargetIfExists(mouseEvent, hDirection, vDirection, fromNudge);
          if (this.lastDropTarget !== null && dropTarget === null) {
            (_b = (_a = this.dragSource).onGridExit) === null || _b === void 0 ? void 0 : _b.call(_a, this.dragItem);
          }
          if (this.lastDropTarget === null && dropTarget !== null) {
            (_d = (_c = this.dragSource).onGridEnter) === null || _d === void 0 ? void 0 : _d.call(_c, this.dragItem);
          }
          this.enterDragTargetIfExists(dropTarget, mouseEvent, hDirection, vDirection, fromNudge);
          this.lastDropTarget = dropTarget;
        } else if (dropTarget && dropTarget.onDragging) {
          var draggingEvent = this.createDropTargetEvent(dropTarget, mouseEvent, hDirection, vDirection, fromNudge);
          dropTarget.onDragging(draggingEvent);
        }
      };
      DragAndDropService2.prototype.getAllContainersFromDropTarget = function(dropTarget) {
        var secondaryContainers = dropTarget.getSecondaryContainers ? dropTarget.getSecondaryContainers() : null;
        var containers = [[dropTarget.getContainer()]];
        return secondaryContainers ? containers.concat(secondaryContainers) : containers;
      };
      DragAndDropService2.prototype.allContainersIntersect = function(mouseEvent, containers) {
        var e_1, _a;
        try {
          for (var containers_1 = __values$3(containers), containers_1_1 = containers_1.next(); !containers_1_1.done; containers_1_1 = containers_1.next()) {
            var container = containers_1_1.value;
            var rect = container.getBoundingClientRect();
            if (rect.width === 0 || rect.height === 0) {
              return false;
            }
            var horizontalFit = mouseEvent.clientX >= rect.left && mouseEvent.clientX < rect.right;
            var verticalFit = mouseEvent.clientY >= rect.top && mouseEvent.clientY < rect.bottom;
            if (!horizontalFit || !verticalFit) {
              return false;
            }
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (containers_1_1 && !containers_1_1.done && (_a = containers_1.return))
              _a.call(containers_1);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        return true;
      };
      DragAndDropService2.prototype.isMouseOnDropTarget = function(mouseEvent, dropTarget) {
        var e_2, _a;
        var allContainersFromDropTarget = this.getAllContainersFromDropTarget(dropTarget);
        var mouseOverTarget = false;
        try {
          for (var allContainersFromDropTarget_1 = __values$3(allContainersFromDropTarget), allContainersFromDropTarget_1_1 = allContainersFromDropTarget_1.next(); !allContainersFromDropTarget_1_1.done; allContainersFromDropTarget_1_1 = allContainersFromDropTarget_1.next()) {
            var currentContainers = allContainersFromDropTarget_1_1.value;
            if (this.allContainersIntersect(mouseEvent, currentContainers)) {
              mouseOverTarget = true;
              break;
            }
          }
        } catch (e_2_1) {
          e_2 = { error: e_2_1 };
        } finally {
          try {
            if (allContainersFromDropTarget_1_1 && !allContainersFromDropTarget_1_1.done && (_a = allContainersFromDropTarget_1.return))
              _a.call(allContainersFromDropTarget_1);
          } finally {
            if (e_2)
              throw e_2.error;
          }
        }
        if (dropTarget.targetContainsSource && !dropTarget.getContainer().contains(this.dragSource.eElement)) {
          return false;
        }
        return mouseOverTarget && dropTarget.isInterestedIn(this.dragSource.type, this.dragSource.eElement);
      };
      DragAndDropService2.prototype.findCurrentDropTarget = function(mouseEvent, validDropTargets) {
        var e_3, _a, e_4, _b;
        var len = validDropTargets.length;
        if (len === 0) {
          return null;
        }
        if (len === 1) {
          return validDropTargets[0];
        }
        var eDocument = this.gridOptionsWrapper.getDocument();
        var elementStack = eDocument.elementsFromPoint(mouseEvent.clientX, mouseEvent.clientY);
        try {
          for (var elementStack_1 = __values$3(elementStack), elementStack_1_1 = elementStack_1.next(); !elementStack_1_1.done; elementStack_1_1 = elementStack_1.next()) {
            var el = elementStack_1_1.value;
            try {
              for (var validDropTargets_1 = (e_4 = void 0, __values$3(validDropTargets)), validDropTargets_1_1 = validDropTargets_1.next(); !validDropTargets_1_1.done; validDropTargets_1_1 = validDropTargets_1.next()) {
                var dropTarget = validDropTargets_1_1.value;
                var containers = flatten(this.getAllContainersFromDropTarget(dropTarget));
                if (containers.indexOf(el) !== -1) {
                  return dropTarget;
                }
              }
            } catch (e_4_1) {
              e_4 = { error: e_4_1 };
            } finally {
              try {
                if (validDropTargets_1_1 && !validDropTargets_1_1.done && (_b = validDropTargets_1.return))
                  _b.call(validDropTargets_1);
              } finally {
                if (e_4)
                  throw e_4.error;
              }
            }
          }
        } catch (e_3_1) {
          e_3 = { error: e_3_1 };
        } finally {
          try {
            if (elementStack_1_1 && !elementStack_1_1.done && (_a = elementStack_1.return))
              _a.call(elementStack_1);
          } finally {
            if (e_3)
              throw e_3.error;
          }
        }
        return null;
      };
      DragAndDropService2.prototype.enterDragTargetIfExists = function(dropTarget, mouseEvent, hDirection, vDirection, fromNudge) {
        if (!dropTarget) {
          return;
        }
        if (dropTarget.onDragEnter) {
          var dragEnterEvent = this.createDropTargetEvent(dropTarget, mouseEvent, hDirection, vDirection, fromNudge);
          dropTarget.onDragEnter(dragEnterEvent);
        }
        this.setGhostIcon(dropTarget.getIconName ? dropTarget.getIconName() : null);
      };
      DragAndDropService2.prototype.leaveLastTargetIfExists = function(mouseEvent, hDirection, vDirection, fromNudge) {
        if (!this.lastDropTarget) {
          return;
        }
        if (this.lastDropTarget.onDragLeave) {
          var dragLeaveEvent = this.createDropTargetEvent(this.lastDropTarget, mouseEvent, hDirection, vDirection, fromNudge);
          this.lastDropTarget.onDragLeave(dragLeaveEvent);
        }
        this.setGhostIcon(null);
      };
      DragAndDropService2.prototype.addDropTarget = function(dropTarget) {
        this.dropTargets.push(dropTarget);
      };
      DragAndDropService2.prototype.removeDropTarget = function(dropTarget) {
        this.dropTargets = this.dropTargets.filter(function(target) {
          return target.getContainer() !== dropTarget.getContainer();
        });
      };
      DragAndDropService2.prototype.hasExternalDropZones = function() {
        return this.dropTargets.some(function(zones) {
          return zones.external;
        });
      };
      DragAndDropService2.prototype.findExternalZone = function(params) {
        var externalTargets = this.dropTargets.filter(function(target) {
          return target.external;
        });
        return externalTargets.find(function(zone) {
          return zone.getContainer() === params.getContainer();
        }) || null;
      };
      DragAndDropService2.prototype.getHorizontalDirection = function(event) {
        var clientX = this.eventLastTime && this.eventLastTime.clientX;
        var eClientX = event.clientX;
        if (clientX === eClientX) {
          return null;
        }
        return clientX > eClientX ? HorizontalDirection.Left : HorizontalDirection.Right;
      };
      DragAndDropService2.prototype.getVerticalDirection = function(event) {
        var clientY = this.eventLastTime && this.eventLastTime.clientY;
        var eClientY = event.clientY;
        if (clientY === eClientY) {
          return null;
        }
        return clientY > eClientY ? VerticalDirection.Up : VerticalDirection.Down;
      };
      DragAndDropService2.prototype.createDropTargetEvent = function(dropTarget, event, hDirection, vDirection, fromNudge) {
        var dropZoneTarget = dropTarget.getContainer();
        var rect = dropZoneTarget.getBoundingClientRect();
        var _a = this, api = _a.gridApi, columnApi = _a.columnApi, dragItem = _a.dragItem, dragSource = _a.dragSource;
        var x = event.clientX - rect.left;
        var y = event.clientY - rect.top;
        return { event, x, y, vDirection, hDirection, dragSource, fromNudge, dragItem, api, columnApi, dropZoneTarget };
      };
      DragAndDropService2.prototype.positionGhost = function(event) {
        var ghost = this.eGhost;
        if (!ghost) {
          return;
        }
        var ghostRect = ghost.getBoundingClientRect();
        var ghostHeight = ghostRect.height;
        var browserWidth = getBodyWidth() - 2;
        var browserHeight = getBodyHeight() - 2;
        var top = event.pageY - ghostHeight / 2;
        var left = event.pageX - 10;
        var eDocument = this.gridOptionsWrapper.getDocument();
        var win = eDocument.defaultView || window;
        var windowScrollY = win.pageYOffset || eDocument.documentElement.scrollTop;
        var windowScrollX = win.pageXOffset || eDocument.documentElement.scrollLeft;
        if (browserWidth > 0 && left + ghost.clientWidth > browserWidth + windowScrollX) {
          left = browserWidth + windowScrollX - ghost.clientWidth;
        }
        if (left < 0) {
          left = 0;
        }
        if (browserHeight > 0 && top + ghost.clientHeight > browserHeight + windowScrollY) {
          top = browserHeight + windowScrollY - ghost.clientHeight;
        }
        if (top < 0) {
          top = 0;
        }
        ghost.style.left = left + "px";
        ghost.style.top = top + "px";
      };
      DragAndDropService2.prototype.removeGhost = function() {
        if (this.eGhost && this.eGhostParent) {
          this.eGhostParent.removeChild(this.eGhost);
        }
        this.eGhost = null;
      };
      DragAndDropService2.prototype.createGhost = function() {
        this.eGhost = loadTemplate(DragAndDropService_1.GHOST_TEMPLATE);
        this.mouseEventService.stampTopLevelGridCompWithGridInstance(this.eGhost);
        var theme = this.environment.getTheme().theme;
        if (theme) {
          this.eGhost.classList.add(theme);
        }
        this.eGhostIcon = this.eGhost.querySelector(".ag-dnd-ghost-icon");
        this.setGhostIcon(null);
        var eText = this.eGhost.querySelector(".ag-dnd-ghost-label");
        var dragItemName = this.dragSource.dragItemName;
        if (isFunction(dragItemName)) {
          dragItemName = dragItemName();
        }
        eText.innerHTML = escapeString(dragItemName) || "";
        this.eGhost.style.height = "25px";
        this.eGhost.style.top = "20px";
        this.eGhost.style.left = "20px";
        var eDocument = this.gridOptionsWrapper.getDocument();
        var targetEl = null;
        try {
          targetEl = eDocument.fullscreenElement;
        } catch (e) {
        } finally {
          if (!targetEl) {
            targetEl = eDocument.querySelector("body");
          }
        }
        this.eGhostParent = targetEl;
        if (!this.eGhostParent) {
          console.warn("AG Grid: could not find document body, it is needed for dragging columns");
        } else {
          this.eGhostParent.appendChild(this.eGhost);
        }
      };
      DragAndDropService2.prototype.setGhostIcon = function(iconName, shake) {
        if (shake === void 0) {
          shake = false;
        }
        clearElement(this.eGhostIcon);
        var eIcon = null;
        if (!iconName) {
          iconName = this.dragSource.defaultIconName || DragAndDropService_1.ICON_NOT_ALLOWED;
        }
        switch (iconName) {
          case DragAndDropService_1.ICON_PINNED:
            eIcon = this.ePinnedIcon;
            break;
          case DragAndDropService_1.ICON_MOVE:
            eIcon = this.eMoveIcon;
            break;
          case DragAndDropService_1.ICON_LEFT:
            eIcon = this.eLeftIcon;
            break;
          case DragAndDropService_1.ICON_RIGHT:
            eIcon = this.eRightIcon;
            break;
          case DragAndDropService_1.ICON_GROUP:
            eIcon = this.eGroupIcon;
            break;
          case DragAndDropService_1.ICON_AGGREGATE:
            eIcon = this.eAggregateIcon;
            break;
          case DragAndDropService_1.ICON_PIVOT:
            eIcon = this.ePivotIcon;
            break;
          case DragAndDropService_1.ICON_NOT_ALLOWED:
            eIcon = this.eDropNotAllowedIcon;
            break;
          case DragAndDropService_1.ICON_HIDE:
            eIcon = this.eHideIcon;
            break;
        }
        this.eGhostIcon.classList.toggle("ag-shake-left-to-right", shake);
        if (eIcon === this.eHideIcon && this.gridOptionsWrapper.isSuppressDragLeaveHidesColumns()) {
          return;
        }
        if (eIcon) {
          this.eGhostIcon.appendChild(eIcon);
        }
      };
      var DragAndDropService_1;
      DragAndDropService2.ICON_PINNED = "pinned";
      DragAndDropService2.ICON_MOVE = "move";
      DragAndDropService2.ICON_LEFT = "left";
      DragAndDropService2.ICON_RIGHT = "right";
      DragAndDropService2.ICON_GROUP = "group";
      DragAndDropService2.ICON_AGGREGATE = "aggregate";
      DragAndDropService2.ICON_PIVOT = "pivot";
      DragAndDropService2.ICON_NOT_ALLOWED = "notAllowed";
      DragAndDropService2.ICON_HIDE = "hide";
      DragAndDropService2.GHOST_TEMPLATE = '<div class="ag-dnd-ghost ag-unselectable">\n            <span class="ag-dnd-ghost-icon ag-shake-left-to-right"></span>\n            <div class="ag-dnd-ghost-label"></div>\n        </div>';
      __decorate$20([
        Autowired("dragService")
      ], DragAndDropService2.prototype, "dragService", void 0);
      __decorate$20([
        Autowired("mouseEventService")
      ], DragAndDropService2.prototype, "mouseEventService", void 0);
      __decorate$20([
        Autowired("environment")
      ], DragAndDropService2.prototype, "environment", void 0);
      __decorate$20([
        Autowired("columnApi")
      ], DragAndDropService2.prototype, "columnApi", void 0);
      __decorate$20([
        Autowired("gridApi")
      ], DragAndDropService2.prototype, "gridApi", void 0);
      __decorate$20([
        PostConstruct
      ], DragAndDropService2.prototype, "init", null);
      __decorate$20([
        PreDestroy
      ], DragAndDropService2.prototype, "clearDragSourceParamsList", null);
      DragAndDropService2 = DragAndDropService_1 = __decorate$20([
        Bean("dragAndDropService")
      ], DragAndDropService2);
      return DragAndDropService2;
    }(BeanStub);
    __extends$2g = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1$ = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    RowDragComp = function(_super) {
      __extends$2g(RowDragComp2, _super);
      function RowDragComp2(cellValueFn, rowNode, column, customGui, dragStartPixels, suppressVisibilityChange) {
        var _this = _super.call(this) || this;
        _this.cellValueFn = cellValueFn;
        _this.rowNode = rowNode;
        _this.column = column;
        _this.customGui = customGui;
        _this.dragStartPixels = dragStartPixels;
        _this.suppressVisibilityChange = suppressVisibilityChange;
        _this.dragSource = null;
        return _this;
      }
      RowDragComp2.prototype.isCustomGui = function() {
        return this.customGui != null;
      };
      RowDragComp2.prototype.postConstruct = function() {
        if (!this.customGui) {
          this.setTemplate('<div class="ag-drag-handle ag-row-drag" aria-hidden="true"></div>');
          this.getGui().appendChild(createIconNoSpan("rowDrag", this.beans.gridOptionsWrapper, null));
          this.addDragSource();
        } else {
          this.setDragElement(this.customGui, this.dragStartPixels);
        }
        this.checkCompatibility();
        if (!this.suppressVisibilityChange) {
          var strategy = this.beans.gridOptionsWrapper.isRowDragManaged() ? new ManagedVisibilityStrategy(this, this.beans, this.rowNode, this.column) : new NonManagedVisibilityStrategy(this, this.beans, this.rowNode, this.column);
          this.createManagedBean(strategy, this.beans.context);
        }
      };
      RowDragComp2.prototype.setDragElement = function(dragElement, dragStartPixels) {
        this.setTemplateFromElement(dragElement);
        this.addDragSource(dragStartPixels);
      };
      RowDragComp2.prototype.getSelectedNodes = function() {
        var isRowDragMultiRow = this.beans.gridOptionsWrapper.isRowDragMultiRow();
        if (!isRowDragMultiRow) {
          return [this.rowNode];
        }
        var selection = this.beans.selectionService.getSelectedNodes();
        return selection.indexOf(this.rowNode) !== -1 ? selection : [this.rowNode];
      };
      RowDragComp2.prototype.checkCompatibility = function() {
        var managed = this.beans.gridOptionsWrapper.isRowDragManaged();
        var treeData = this.beans.gridOptionsWrapper.isTreeData();
        if (treeData && managed) {
          doOnce(function() {
            return console.warn("AG Grid: If using row drag with tree data, you cannot have rowDragManaged=true");
          }, "RowDragComp.managedAndTreeData");
        }
      };
      RowDragComp2.prototype.getDragItem = function() {
        return {
          rowNode: this.rowNode,
          rowNodes: this.getSelectedNodes(),
          columns: this.column ? [this.column] : void 0,
          defaultTextValue: this.cellValueFn()
        };
      };
      RowDragComp2.prototype.addDragSource = function(dragStartPixels) {
        var _this = this;
        if (dragStartPixels === void 0) {
          dragStartPixels = 4;
        }
        if (this.dragSource) {
          this.removeDragSource();
        }
        var rowDragText = this.gridOptionsWrapper.getRowDragText(this.column);
        var translate = this.gridOptionsWrapper.getLocaleTextFunc();
        this.dragSource = {
          type: DragSourceType.RowDrag,
          eElement: this.getGui(),
          dragItemName: function() {
            var _a;
            var dragItem = _this.getDragItem();
            var dragItemCount = ((_a = dragItem.rowNodes) === null || _a === void 0 ? void 0 : _a.length) || 1;
            if (rowDragText) {
              return rowDragText(dragItem, dragItemCount);
            }
            return dragItemCount === 1 ? _this.cellValueFn() : dragItemCount + " " + translate("rowDragRows", "rows");
          },
          getDragItem: function() {
            return _this.getDragItem();
          },
          dragStartPixels,
          dragSourceDomDataKey: this.beans.gridOptionsWrapper.getDomDataKey()
        };
        this.beans.dragAndDropService.addDragSource(this.dragSource, true);
      };
      RowDragComp2.prototype.removeDragSource = function() {
        if (this.dragSource) {
          this.beans.dragAndDropService.removeDragSource(this.dragSource);
        }
        this.dragSource = null;
      };
      __decorate$1$([
        Autowired("beans")
      ], RowDragComp2.prototype, "beans", void 0);
      __decorate$1$([
        PostConstruct
      ], RowDragComp2.prototype, "postConstruct", null);
      __decorate$1$([
        PreDestroy
      ], RowDragComp2.prototype, "removeDragSource", null);
      return RowDragComp2;
    }(Component);
    VisibilityStrategy = function(_super) {
      __extends$2g(VisibilityStrategy2, _super);
      function VisibilityStrategy2(parent, rowNode, column) {
        var _this = _super.call(this) || this;
        _this.parent = parent;
        _this.rowNode = rowNode;
        _this.column = column;
        return _this;
      }
      VisibilityStrategy2.prototype.setDisplayedOrVisible = function(neverDisplayed) {
        if (neverDisplayed) {
          this.parent.setDisplayed(false);
        } else {
          var shown = true;
          var isShownSometimes = false;
          if (this.column) {
            shown = this.column.isRowDrag(this.rowNode) || this.parent.isCustomGui();
            isShownSometimes = isFunction(this.column.getColDef().rowDrag);
          }
          if (isShownSometimes) {
            this.parent.setDisplayed(true);
            this.parent.setVisible(shown);
          } else {
            this.parent.setDisplayed(shown);
            this.parent.setVisible(true);
          }
        }
      };
      return VisibilityStrategy2;
    }(BeanStub);
    NonManagedVisibilityStrategy = function(_super) {
      __extends$2g(NonManagedVisibilityStrategy2, _super);
      function NonManagedVisibilityStrategy2(parent, beans, rowNode, column) {
        var _this = _super.call(this, parent, rowNode, column) || this;
        _this.beans = beans;
        return _this;
      }
      NonManagedVisibilityStrategy2.prototype.postConstruct = function() {
        this.addManagedListener(this.beans.gridOptionsWrapper, "suppressRowDrag", this.onSuppressRowDrag.bind(this));
        this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.workOutVisibility.bind(this));
        this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, this.workOutVisibility.bind(this));
        this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, this.workOutVisibility.bind(this));
        this.addManagedListener(this.beans.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.workOutVisibility.bind(this));
        this.workOutVisibility();
      };
      NonManagedVisibilityStrategy2.prototype.onSuppressRowDrag = function() {
        this.workOutVisibility();
      };
      NonManagedVisibilityStrategy2.prototype.workOutVisibility = function() {
        var neverDisplayed = this.beans.gridOptionsWrapper.isSuppressRowDrag();
        this.setDisplayedOrVisible(neverDisplayed);
      };
      __decorate$1$([
        PostConstruct
      ], NonManagedVisibilityStrategy2.prototype, "postConstruct", null);
      return NonManagedVisibilityStrategy2;
    }(VisibilityStrategy);
    ManagedVisibilityStrategy = function(_super) {
      __extends$2g(ManagedVisibilityStrategy2, _super);
      function ManagedVisibilityStrategy2(parent, beans, rowNode, column) {
        var _this = _super.call(this, parent, rowNode, column) || this;
        _this.beans = beans;
        return _this;
      }
      ManagedVisibilityStrategy2.prototype.postConstruct = function() {
        this.addManagedListener(this.beans.eventService, Events.EVENT_SORT_CHANGED, this.workOutVisibility.bind(this));
        this.addManagedListener(this.beans.eventService, Events.EVENT_FILTER_CHANGED, this.workOutVisibility.bind(this));
        this.addManagedListener(this.beans.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.workOutVisibility.bind(this));
        this.addManagedListener(this.beans.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.workOutVisibility.bind(this));
        this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.workOutVisibility.bind(this));
        this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, this.workOutVisibility.bind(this));
        this.addManagedListener(this.beans.gridOptionsWrapper, "suppressRowDrag", this.onSuppressRowDrag.bind(this));
        this.workOutVisibility();
      };
      ManagedVisibilityStrategy2.prototype.onSuppressRowDrag = function() {
        this.workOutVisibility();
      };
      ManagedVisibilityStrategy2.prototype.workOutVisibility = function() {
        var gridBodyCon = this.beans.ctrlsService.getGridBodyCtrl();
        var rowDragFeature = gridBodyCon.getRowDragFeature();
        var shouldPreventRowMove = rowDragFeature && rowDragFeature.shouldPreventRowMove();
        var suppressRowDrag = this.beans.gridOptionsWrapper.isSuppressRowDrag();
        var hasExternalDropZones = this.beans.dragAndDropService.hasExternalDropZones();
        var neverDisplayed = shouldPreventRowMove && !hasExternalDropZones || suppressRowDrag;
        this.setDisplayedOrVisible(neverDisplayed);
      };
      __decorate$1$([
        PostConstruct
      ], ManagedVisibilityStrategy2.prototype, "postConstruct", null);
      return ManagedVisibilityStrategy2;
    }(VisibilityStrategy);
    __extends$2f = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign$8 = function() {
      __assign$8 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$8.apply(this, arguments);
    };
    __decorate$1_ = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    GroupCellRendererCtrl = function(_super) {
      __extends$2f(GroupCellRendererCtrl2, _super);
      function GroupCellRendererCtrl2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      GroupCellRendererCtrl2.prototype.init = function(comp, eGui, eCheckbox, eExpanded, eContracted, compClass, params) {
        this.params = params;
        this.eGui = eGui;
        this.eCheckbox = eCheckbox;
        this.eExpanded = eExpanded;
        this.eContracted = eContracted;
        this.comp = comp;
        this.compClass = compClass;
        var topLevelFooter = this.isTopLevelFooter();
        var embeddedRowMismatch = this.isEmbeddedRowMismatch();
        var nullValue = params.value == null;
        var skipCell = false;
        if (this.gridOptionsWrapper.isGroupIncludeFooter() && this.gridOptionsWrapper.isGroupHideOpenParents()) {
          var node = params.node;
          if (node.footer) {
            var showRowGroup = params.colDef && params.colDef.showRowGroup;
            var rowGroupColumnId = node.rowGroupColumn && node.rowGroupColumn.getColId();
            skipCell = showRowGroup !== rowGroupColumnId;
          }
        }
        this.cellIsBlank = topLevelFooter ? false : embeddedRowMismatch || nullValue || skipCell;
        if (this.cellIsBlank) {
          return;
        }
        this.setupShowingValueForOpenedParent();
        this.findDisplayedGroupNode();
        this.addFullWidthRowDraggerIfNeeded();
        this.addExpandAndContract();
        this.addCheckboxIfNeeded();
        this.addValueElement();
        this.setupIndent();
        this.refreshAriaExpanded();
      };
      GroupCellRendererCtrl2.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
        this.expandListener = null;
      };
      GroupCellRendererCtrl2.prototype.refreshAriaExpanded = function() {
        var _a = this.params, node = _a.node, eParentOfValue = _a.eParentOfValue;
        if (this.expandListener) {
          this.expandListener = this.expandListener();
        }
        if (!this.isExpandable()) {
          removeAriaExpanded(eParentOfValue);
          return;
        }
        var listener = function() {
          setAriaExpanded(eParentOfValue, !!node.expanded);
        };
        this.expandListener = this.addManagedListener(node, RowNode.EVENT_EXPANDED_CHANGED, listener) || null;
        listener();
      };
      GroupCellRendererCtrl2.prototype.isTopLevelFooter = function() {
        if (!this.gridOptionsWrapper.isGroupIncludeTotalFooter()) {
          return false;
        }
        if (this.params.value != null || this.params.node.level != -1) {
          return false;
        }
        var colDef = this.params.colDef;
        var doingFullWidth = colDef == null;
        if (doingFullWidth) {
          return true;
        }
        if (colDef.showRowGroup === true) {
          return true;
        }
        var rowGroupCols = this.columnModel.getRowGroupColumns();
        if (!rowGroupCols || rowGroupCols.length === 0) {
          return true;
        }
        var firstRowGroupCol = rowGroupCols[0];
        return firstRowGroupCol.getId() === colDef.showRowGroup;
      };
      GroupCellRendererCtrl2.prototype.isEmbeddedRowMismatch = function() {
        if (!this.params.fullWidth || !this.gridOptionsWrapper.isEmbedFullWidthRows()) {
          return false;
        }
        var pinnedLeftCell = this.params.pinned === Constants.PINNED_LEFT;
        var pinnedRightCell = this.params.pinned === Constants.PINNED_RIGHT;
        var bodyCell = !pinnedLeftCell && !pinnedRightCell;
        if (this.gridOptionsWrapper.isEnableRtl()) {
          if (this.columnModel.isPinningLeft()) {
            return !pinnedRightCell;
          }
          return !bodyCell;
        }
        if (this.columnModel.isPinningLeft()) {
          return !pinnedLeftCell;
        }
        return !bodyCell;
      };
      GroupCellRendererCtrl2.prototype.findDisplayedGroupNode = function() {
        var column = this.params.column;
        var rowNode = this.params.node;
        if (this.showingValueForOpenedParent) {
          var pointer = rowNode.parent;
          while (pointer != null) {
            if (pointer.rowGroupColumn && column.isRowGroupDisplayed(pointer.rowGroupColumn.getId())) {
              this.displayedGroupNode = pointer;
              break;
            }
            pointer = pointer.parent;
          }
        }
        if (missing(this.displayedGroupNode)) {
          this.displayedGroupNode = rowNode;
        }
      };
      GroupCellRendererCtrl2.prototype.setupShowingValueForOpenedParent = function() {
        var rowNode = this.params.node;
        var column = this.params.column;
        if (!this.gridOptionsWrapper.isGroupHideOpenParents()) {
          this.showingValueForOpenedParent = false;
          return;
        }
        if (!rowNode.groupData) {
          this.showingValueForOpenedParent = false;
          return;
        }
        var showingGroupNode = rowNode.rowGroupColumn != null;
        if (showingGroupNode) {
          var keyOfGroupingColumn = rowNode.rowGroupColumn.getId();
          var configuredToShowThisGroupLevel = column.isRowGroupDisplayed(keyOfGroupingColumn);
          if (configuredToShowThisGroupLevel) {
            this.showingValueForOpenedParent = false;
            return;
          }
        }
        var valPresent = rowNode.groupData[column.getId()] != null;
        this.showingValueForOpenedParent = valPresent;
      };
      GroupCellRendererCtrl2.prototype.addValueElement = function() {
        if (this.displayedGroupNode.footer) {
          this.addFooterValue();
        } else {
          this.addGroupValue();
          this.addChildCount();
        }
      };
      GroupCellRendererCtrl2.prototype.addGroupValue = function() {
        var paramsAdjusted = this.adjustParamsWithDetailsFromRelatedColumn();
        var innerCompDetails = this.getInnerCompDetails(paramsAdjusted);
        var valueFormatted = paramsAdjusted.valueFormatted, value = paramsAdjusted.value;
        var valueWhenNoRenderer = valueFormatted != null ? valueFormatted : value;
        this.comp.setInnerRenderer(innerCompDetails, valueWhenNoRenderer);
      };
      GroupCellRendererCtrl2.prototype.adjustParamsWithDetailsFromRelatedColumn = function() {
        var relatedColumn = this.displayedGroupNode.rowGroupColumn;
        var column = this.params.column;
        if (!relatedColumn) {
          return this.params;
        }
        var notFullWidth = column != null;
        if (notFullWidth) {
          var showingThisRowGroup = column.isRowGroupDisplayed(relatedColumn.getId());
          if (!showingThisRowGroup) {
            return this.params;
          }
        }
        var params = this.params;
        var _a = this.params, value = _a.value, node = _a.node;
        var valueFormatted = this.valueFormatterService.formatValue(relatedColumn, node, value);
        var paramsAdjusted = __assign$8(__assign$8({}, params), { valueFormatted });
        return paramsAdjusted;
      };
      GroupCellRendererCtrl2.prototype.addFooterValue = function() {
        var footerValueGetter = this.params.footerValueGetter;
        var footerValue = "";
        if (footerValueGetter) {
          var paramsClone = cloneObject(this.params);
          paramsClone.value = this.params.value;
          if (typeof footerValueGetter === "function") {
            footerValue = footerValueGetter(paramsClone);
          } else if (typeof footerValueGetter === "string") {
            footerValue = this.expressionService.evaluate(footerValueGetter, paramsClone);
          } else {
            console.warn("AG Grid: footerValueGetter should be either a function or a string (expression)");
          }
        } else {
          footerValue = "Total " + (this.params.value != null ? this.params.value : "");
        }
        var innerCompDetails = this.getInnerCompDetails(this.params);
        this.comp.setInnerRenderer(innerCompDetails, footerValue);
      };
      GroupCellRendererCtrl2.prototype.getInnerCompDetails = function(params) {
        var _this = this;
        if (params.fullWidth) {
          return this.userComponentFactory.getFullWidthGroupRowInnerCellRenderer(this.gridOptions.groupRowRendererParams, params);
        }
        var innerCompDetails = this.userComponentFactory.getInnerRendererDetails(params, params);
        var isGroupRowRenderer = function(details) {
          return details && details.componentClass == _this.compClass;
        };
        if (innerCompDetails && !isGroupRowRenderer(innerCompDetails)) {
          return innerCompDetails;
        }
        var relatedColumn = this.displayedGroupNode.rowGroupColumn;
        var relatedColDef = relatedColumn ? relatedColumn.getColDef() : void 0;
        if (!relatedColDef) {
          return;
        }
        var relatedCompDetails = this.userComponentFactory.getCellRendererDetails(relatedColDef, params);
        if (relatedCompDetails && !isGroupRowRenderer(relatedCompDetails)) {
          return relatedCompDetails;
        }
        if (isGroupRowRenderer(relatedCompDetails) && relatedColDef.cellRendererParams && relatedColDef.cellRendererParams.innerRenderer) {
          var res = this.userComponentFactory.getInnerRendererDetails(relatedColDef.cellRendererParams, params);
          return res;
        }
      };
      GroupCellRendererCtrl2.prototype.addChildCount = function() {
        if (this.params.suppressCount) {
          return;
        }
        this.addManagedListener(this.displayedGroupNode, RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED, this.updateChildCount.bind(this));
        this.updateChildCount();
      };
      GroupCellRendererCtrl2.prototype.updateChildCount = function() {
        var allChildrenCount = this.displayedGroupNode.allChildrenCount;
        var showingGroupForThisNode = this.isShowRowGroupForThisRow();
        var showCount = showingGroupForThisNode && allChildrenCount != null && allChildrenCount >= 0;
        var countString = showCount ? "(" + allChildrenCount + ")" : "";
        this.comp.setChildCount(countString);
      };
      GroupCellRendererCtrl2.prototype.isShowRowGroupForThisRow = function() {
        if (this.gridOptionsWrapper.isTreeData()) {
          return true;
        }
        var rowGroupColumn = this.displayedGroupNode.rowGroupColumn;
        if (!rowGroupColumn) {
          return false;
        }
        var column = this.params.column;
        var thisColumnIsInterested = column == null || column.isRowGroupDisplayed(rowGroupColumn.getId());
        return thisColumnIsInterested;
      };
      GroupCellRendererCtrl2.prototype.addExpandAndContract = function() {
        var params = this.params;
        var eExpandedIcon = createIconNoSpan("groupExpanded", this.gridOptionsWrapper, null);
        var eContractedIcon = createIconNoSpan("groupContracted", this.gridOptionsWrapper, null);
        if (eExpandedIcon) {
          this.eExpanded.appendChild(eExpandedIcon);
        }
        if (eContractedIcon) {
          this.eContracted.appendChild(eContractedIcon);
        }
        var eGroupCell = params.eGridCell;
        if (!this.gridOptionsWrapper.isEnableGroupEdit() && this.isExpandable() && !params.suppressDoubleClickExpand) {
          this.addManagedListener(eGroupCell, "dblclick", this.onCellDblClicked.bind(this));
        }
        this.addManagedListener(this.eExpanded, "click", this.onExpandClicked.bind(this));
        this.addManagedListener(this.eContracted, "click", this.onExpandClicked.bind(this));
        this.addManagedListener(eGroupCell, "keydown", this.onKeyDown.bind(this));
        this.addManagedListener(params.node, RowNode.EVENT_EXPANDED_CHANGED, this.showExpandAndContractIcons.bind(this));
        this.showExpandAndContractIcons();
        var expandableChangedListener = this.onRowNodeIsExpandableChanged.bind(this);
        this.addManagedListener(this.displayedGroupNode, RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED, expandableChangedListener);
        this.addManagedListener(this.displayedGroupNode, RowNode.EVENT_MASTER_CHANGED, expandableChangedListener);
        this.addManagedListener(this.displayedGroupNode, RowNode.EVENT_GROUP_CHANGED, expandableChangedListener);
        this.addManagedListener(this.displayedGroupNode, RowNode.EVENT_HAS_CHILDREN_CHANGED, expandableChangedListener);
      };
      GroupCellRendererCtrl2.prototype.onExpandClicked = function(mouseEvent) {
        if (isStopPropagationForAgGrid(mouseEvent)) {
          return;
        }
        stopPropagationForAgGrid(mouseEvent);
        this.onExpandOrContract(mouseEvent);
      };
      GroupCellRendererCtrl2.prototype.onExpandOrContract = function(e) {
        var rowNode = this.displayedGroupNode;
        var nextExpandState = !rowNode.expanded;
        if (!nextExpandState && rowNode.sticky) {
          this.scrollToStickyNode(rowNode);
        }
        rowNode.setExpanded(nextExpandState, e);
      };
      GroupCellRendererCtrl2.prototype.scrollToStickyNode = function(rowNode) {
        var gridBodyCtrl = this.ctrlsService.getGridBodyCtrl();
        var scrollFeature = gridBodyCtrl.getScrollFeature();
        scrollFeature.setVerticalScrollPosition(rowNode.rowTop - rowNode.stickyRowTop);
      };
      GroupCellRendererCtrl2.prototype.isExpandable = function() {
        if (this.showingValueForOpenedParent) {
          return true;
        }
        var rowNode = this.displayedGroupNode;
        var reducedLeafNode = this.columnModel.isPivotMode() && rowNode.leafGroup;
        var expandableGroup = rowNode.isExpandable() && !rowNode.footer && !reducedLeafNode;
        if (!expandableGroup) {
          return false;
        }
        var column = this.params.column;
        var displayingForOneColumnOnly = column != null && typeof column.getColDef().showRowGroup === "string";
        if (displayingForOneColumnOnly) {
          var showing = this.isShowRowGroupForThisRow();
          return showing;
        }
        return true;
      };
      GroupCellRendererCtrl2.prototype.showExpandAndContractIcons = function() {
        var _a = this, params = _a.params, displayedGroup = _a.displayedGroupNode, columnModel = _a.columnModel;
        var node = params.node;
        var isExpandable = this.isExpandable();
        if (isExpandable) {
          var expanded = this.showingValueForOpenedParent ? true : node.expanded;
          this.comp.setExpandedDisplayed(expanded);
          this.comp.setContractedDisplayed(!expanded);
        } else {
          this.comp.setExpandedDisplayed(false);
          this.comp.setContractedDisplayed(false);
        }
        var pivotMode = columnModel.isPivotMode();
        var pivotModeAndLeafGroup = pivotMode && displayedGroup.leafGroup;
        var addExpandableCss = isExpandable && !pivotModeAndLeafGroup;
        var isTotalFooterNode = node.footer && node.level === -1;
        this.comp.addOrRemoveCssClass("ag-cell-expandable", addExpandableCss);
        this.comp.addOrRemoveCssClass("ag-row-group", addExpandableCss);
        if (pivotMode) {
          this.comp.addOrRemoveCssClass("ag-pivot-leaf-group", pivotModeAndLeafGroup);
        } else if (!isTotalFooterNode) {
          this.comp.addOrRemoveCssClass("ag-row-group-leaf-indent", !addExpandableCss);
        }
      };
      GroupCellRendererCtrl2.prototype.onRowNodeIsExpandableChanged = function() {
        this.showExpandAndContractIcons();
        this.setIndent();
        this.refreshAriaExpanded();
      };
      GroupCellRendererCtrl2.prototype.setupIndent = function() {
        var node = this.params.node;
        var suppressPadding = this.params.suppressPadding;
        if (!suppressPadding) {
          this.addManagedListener(node, RowNode.EVENT_UI_LEVEL_CHANGED, this.setIndent.bind(this));
          this.setIndent();
        }
      };
      GroupCellRendererCtrl2.prototype.setIndent = function() {
        if (this.gridOptionsWrapper.isGroupHideOpenParents()) {
          return;
        }
        var params = this.params;
        var rowNode = params.node;
        var fullWithRow = !!params.colDef;
        var treeData = this.gridOptionsWrapper.isTreeData();
        var manyDimensionThisColumn = !fullWithRow || treeData || params.colDef.showRowGroup === true;
        var paddingCount = manyDimensionThisColumn ? rowNode.uiLevel : 0;
        var userProvidedPaddingPixelsTheDeprecatedWay = params.padding >= 0;
        if (userProvidedPaddingPixelsTheDeprecatedWay) {
          doOnce(function() {
            return console.warn("AG Grid: cellRendererParams.padding no longer works, it was deprecated in since v14.2 and removed in v26, configuring padding for groupCellRenderer should be done with Sass variables and themes. Please see the AG Grid documentation page for Themes, in particular the property $row-group-indent-size.");
          }, "groupCellRenderer->doDeprecatedWay");
        }
        if (this.indentClass) {
          this.comp.addOrRemoveCssClass(this.indentClass, false);
        }
        this.indentClass = "ag-row-group-indent-" + paddingCount;
        this.comp.addOrRemoveCssClass(this.indentClass, true);
      };
      GroupCellRendererCtrl2.prototype.addFullWidthRowDraggerIfNeeded = function() {
        var _this = this;
        if (!this.params.fullWidth || !this.params.rowDrag) {
          return;
        }
        var rowDragComp = new RowDragComp(function() {
          return _this.params.value;
        }, this.params.node);
        this.createManagedBean(rowDragComp, this.context);
        this.eGui.insertAdjacentElement("afterbegin", rowDragComp.getGui());
      };
      GroupCellRendererCtrl2.prototype.isUserWantsSelected = function() {
        var paramsCheckbox = this.params.checkbox;
        return typeof paramsCheckbox === "function" || paramsCheckbox === true;
      };
      GroupCellRendererCtrl2.prototype.addCheckboxIfNeeded = function() {
        var _this = this;
        var rowNode = this.displayedGroupNode;
        var checkboxNeeded = this.isUserWantsSelected() && !rowNode.footer && !rowNode.rowPinned && !rowNode.detail;
        if (checkboxNeeded) {
          var cbSelectionComponent_1 = new CheckboxSelectionComponent();
          this.getContext().createBean(cbSelectionComponent_1);
          cbSelectionComponent_1.init({
            rowNode,
            column: this.params.column,
            overrides: {
              isVisible: this.params.checkbox,
              callbackParams: this.params,
              removeHidden: true
            }
          });
          this.eCheckbox.appendChild(cbSelectionComponent_1.getGui());
          this.addDestroyFunc(function() {
            return _this.getContext().destroyBean(cbSelectionComponent_1);
          });
        }
        this.comp.setCheckboxVisible(checkboxNeeded);
      };
      GroupCellRendererCtrl2.prototype.onKeyDown = function(event) {
        var enterKeyPressed = event.key === KeyCode.ENTER;
        if (!enterKeyPressed || this.params.suppressEnterExpand) {
          return;
        }
        var cellEditable = this.params.column && this.params.column.isCellEditable(this.params.node);
        if (cellEditable) {
          return;
        }
        this.onExpandOrContract(event);
      };
      GroupCellRendererCtrl2.prototype.onCellDblClicked = function(mouseEvent) {
        if (isStopPropagationForAgGrid(mouseEvent)) {
          return;
        }
        var targetIsExpandIcon = isElementInEventPath(this.eExpanded, mouseEvent) || isElementInEventPath(this.eContracted, mouseEvent);
        if (!targetIsExpandIcon) {
          this.onExpandOrContract(mouseEvent);
        }
      };
      __decorate$1_([
        Autowired("expressionService")
      ], GroupCellRendererCtrl2.prototype, "expressionService", void 0);
      __decorate$1_([
        Autowired("valueFormatterService")
      ], GroupCellRendererCtrl2.prototype, "valueFormatterService", void 0);
      __decorate$1_([
        Autowired("columnModel")
      ], GroupCellRendererCtrl2.prototype, "columnModel", void 0);
      __decorate$1_([
        Autowired("userComponentFactory")
      ], GroupCellRendererCtrl2.prototype, "userComponentFactory", void 0);
      __decorate$1_([
        Autowired("gridOptions")
      ], GroupCellRendererCtrl2.prototype, "gridOptions", void 0);
      __decorate$1_([
        Autowired("ctrlsService")
      ], GroupCellRendererCtrl2.prototype, "ctrlsService", void 0);
      return GroupCellRendererCtrl2;
    }(BeanStub);
    __extends$2e = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1Z = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    GroupCellRenderer = function(_super) {
      __extends$2e(GroupCellRenderer2, _super);
      function GroupCellRenderer2() {
        return _super.call(this, GroupCellRenderer2.TEMPLATE) || this;
      }
      GroupCellRenderer2.prototype.init = function(params) {
        var _this = this;
        var compProxy = {
          setInnerRenderer: function(compDetails, valueToDisplay) {
            return _this.setRenderDetails(compDetails, valueToDisplay);
          },
          setChildCount: function(count) {
            return _this.eChildCount.innerHTML = count;
          },
          addOrRemoveCssClass: function(cssClass, value) {
            return _this.addOrRemoveCssClass(cssClass, value);
          },
          setContractedDisplayed: function(expanded) {
            return setDisplayed(_this.eContracted, expanded);
          },
          setExpandedDisplayed: function(expanded) {
            return setDisplayed(_this.eExpanded, expanded);
          },
          setCheckboxVisible: function(visible) {
            return _this.eCheckbox.classList.toggle("ag-invisible", !visible);
          }
        };
        var ctrl = this.createManagedBean(new GroupCellRendererCtrl());
        var fullWidth = !params.colDef;
        var eGui = this.getGui();
        ctrl.init(compProxy, eGui, this.eCheckbox, this.eExpanded, this.eContracted, this.constructor, params);
        if (fullWidth) {
          setAriaRole(eGui, "gridcell");
        }
      };
      GroupCellRenderer2.prototype.setRenderDetails = function(compDetails, valueToDisplay) {
        var _this = this;
        if (compDetails) {
          var componentPromise = compDetails.newAgStackInstance();
          if (!componentPromise) {
            return;
          }
          componentPromise.then(function(comp) {
            if (!comp) {
              return;
            }
            var destroyComp = function() {
              return _this.context.destroyBean(comp);
            };
            if (_this.isAlive()) {
              _this.eValue.appendChild(comp.getGui());
              _this.addDestroyFunc(destroyComp);
            } else {
              destroyComp();
            }
          });
        } else {
          this.eValue.innerText = valueToDisplay;
        }
      };
      GroupCellRenderer2.prototype.destroy = function() {
        this.getContext().destroyBean(this.innerCellRenderer);
        _super.prototype.destroy.call(this);
      };
      GroupCellRenderer2.prototype.refresh = function() {
        return false;
      };
      GroupCellRenderer2.TEMPLATE = '<span class="ag-cell-wrapper">\n            <span class="ag-group-expanded" ref="eExpanded"></span>\n            <span class="ag-group-contracted" ref="eContracted"></span>\n            <span class="ag-group-checkbox ag-invisible" ref="eCheckbox"></span>\n            <span class="ag-group-value" ref="eValue"></span>\n            <span class="ag-group-child-count" ref="eChildCount"></span>\n        </span>';
      __decorate$1Z([
        RefSelector("eExpanded")
      ], GroupCellRenderer2.prototype, "eExpanded", void 0);
      __decorate$1Z([
        RefSelector("eContracted")
      ], GroupCellRenderer2.prototype, "eContracted", void 0);
      __decorate$1Z([
        RefSelector("eCheckbox")
      ], GroupCellRenderer2.prototype, "eCheckbox", void 0);
      __decorate$1Z([
        RefSelector("eValue")
      ], GroupCellRenderer2.prototype, "eValue", void 0);
      __decorate$1Z([
        RefSelector("eChildCount")
      ], GroupCellRenderer2.prototype, "eChildCount", void 0);
      return GroupCellRenderer2;
    }(Component);
    __extends$2d = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1Y = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    LoadingCellRenderer = function(_super) {
      __extends$2d(LoadingCellRenderer2, _super);
      function LoadingCellRenderer2() {
        return _super.call(this, LoadingCellRenderer2.TEMPLATE) || this;
      }
      LoadingCellRenderer2.prototype.init = function(params) {
        params.node.failedLoad ? this.setupFailed() : this.setupLoading();
      };
      LoadingCellRenderer2.prototype.setupFailed = function() {
        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
        this.eLoadingText.innerText = localeTextFunc("loadingError", "ERR");
      };
      LoadingCellRenderer2.prototype.setupLoading = function() {
        var eLoadingIcon = createIconNoSpan("groupLoading", this.gridOptionsWrapper, null);
        if (eLoadingIcon) {
          this.eLoadingIcon.appendChild(eLoadingIcon);
        }
        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
        this.eLoadingText.innerText = localeTextFunc("loadingOoo", "Loading");
      };
      LoadingCellRenderer2.prototype.refresh = function(params) {
        return false;
      };
      LoadingCellRenderer2.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
      };
      LoadingCellRenderer2.TEMPLATE = '<div class="ag-loading">\n            <span class="ag-loading-icon" ref="eLoadingIcon"></span>\n            <span class="ag-loading-text" ref="eLoadingText"></span>\n        </div>';
      __decorate$1Y([
        RefSelector("eLoadingIcon")
      ], LoadingCellRenderer2.prototype, "eLoadingIcon", void 0);
      __decorate$1Y([
        RefSelector("eLoadingText")
      ], LoadingCellRenderer2.prototype, "eLoadingText", void 0);
      return LoadingCellRenderer2;
    }(Component);
    __extends$2c = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    LoadingOverlayComponent$1 = function(_super) {
      __extends$2c(LoadingOverlayComponent2, _super);
      function LoadingOverlayComponent2() {
        return _super.call(this) || this;
      }
      LoadingOverlayComponent2.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
      };
      LoadingOverlayComponent2.prototype.init = function(params) {
        var template = this.gridOptionsWrapper.getOverlayLoadingTemplate() ? this.gridOptionsWrapper.getOverlayLoadingTemplate() : LoadingOverlayComponent2.DEFAULT_LOADING_OVERLAY_TEMPLATE;
        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
        var localisedTemplate = template.replace("[LOADING...]", localeTextFunc("loadingOoo", "Loading..."));
        this.setTemplate(localisedTemplate);
      };
      LoadingOverlayComponent2.DEFAULT_LOADING_OVERLAY_TEMPLATE = '<span class="ag-overlay-loading-center">[LOADING...]</span>';
      return LoadingOverlayComponent2;
    }(Component);
    __extends$2b = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    NoRowsOverlayComponent$1 = function(_super) {
      __extends$2b(NoRowsOverlayComponent2, _super);
      function NoRowsOverlayComponent2() {
        return _super.call(this) || this;
      }
      NoRowsOverlayComponent2.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
      };
      NoRowsOverlayComponent2.prototype.init = function(params) {
        var template = this.gridOptionsWrapper.getOverlayNoRowsTemplate() ? this.gridOptionsWrapper.getOverlayNoRowsTemplate() : NoRowsOverlayComponent2.DEFAULT_NO_ROWS_TEMPLATE;
        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
        var localisedTemplate = template.replace("[NO_ROWS_TO_SHOW]", localeTextFunc("noRowsToShow", "No Rows To Show"));
        this.setTemplate(localisedTemplate);
      };
      NoRowsOverlayComponent2.DEFAULT_NO_ROWS_TEMPLATE = '<span class="ag-overlay-no-rows-center">[NO_ROWS_TO_SHOW]</span>';
      return NoRowsOverlayComponent2;
    }(Component);
    __extends$2a = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    TooltipComponent$1 = function(_super) {
      __extends$2a(TooltipComponent2, _super);
      function TooltipComponent2() {
        return _super.call(this, '<div class="ag-tooltip"></div>') || this;
      }
      TooltipComponent2.prototype.init = function(params) {
        var value = params.value;
        this.getGui().innerHTML = escapeString(value);
      };
      return TooltipComponent2;
    }(PopupComponent);
    __extends$29 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1X = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    UserComponentRegistry = function(_super) {
      __extends$29(UserComponentRegistry2, _super);
      function UserComponentRegistry2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.agGridDefaults = {
          agDateInput: DefaultDateComponent,
          agColumnHeader: HeaderComp,
          agColumnGroupHeader: HeaderGroupComp,
          agSortIndicator: SortIndicatorComp,
          agTextColumnFloatingFilter: TextFloatingFilter,
          agNumberColumnFloatingFilter: NumberFloatingFilter,
          agDateColumnFloatingFilter: DateFloatingFilter,
          agReadOnlyFloatingFilter: ReadOnlyFloatingFilter,
          agAnimateShowChangeCellRenderer: AnimateShowChangeCellRenderer,
          agAnimateSlideCellRenderer: AnimateSlideCellRenderer,
          agGroupCellRenderer: GroupCellRenderer,
          agGroupRowRenderer: GroupCellRenderer,
          agLoadingCellRenderer: LoadingCellRenderer,
          agCellEditor: TextCellEditor,
          agTextCellEditor: TextCellEditor,
          agSelectCellEditor: SelectCellEditor,
          agPopupTextCellEditor: PopupTextCellEditor,
          agPopupSelectCellEditor: PopupSelectCellEditor,
          agLargeTextCellEditor: LargeTextCellEditor,
          agTextColumnFilter: TextFilter,
          agNumberColumnFilter: NumberFilter,
          agDateColumnFilter: DateFilter,
          agLoadingOverlay: LoadingOverlayComponent$1,
          agNoRowsOverlay: NoRowsOverlayComponent$1,
          agTooltipComponent: TooltipComponent$1
        };
        _this.agDeprecatedNames = {
          set: {
            newComponentName: "agSetColumnFilter",
            propertyHolder: "filter"
          },
          text: {
            newComponentName: "agTextColumnFilter",
            propertyHolder: "filter"
          },
          number: {
            newComponentName: "agNumberColumnFilter",
            propertyHolder: "filter"
          },
          date: {
            newComponentName: "agDateColumnFilter",
            propertyHolder: "filter"
          },
          group: {
            newComponentName: "agGroupCellRenderer",
            propertyHolder: "cellRenderer"
          },
          animateShowChange: {
            newComponentName: "agAnimateShowChangeCellRenderer",
            propertyHolder: "cellRenderer"
          },
          animateSlide: {
            newComponentName: "agAnimateSlideCellRenderer",
            propertyHolder: "cellRenderer"
          },
          select: {
            newComponentName: "agSelectCellEditor",
            propertyHolder: "cellEditor"
          },
          largeText: {
            newComponentName: "agLargeTextCellEditor",
            propertyHolder: "cellEditor"
          },
          popupSelect: {
            newComponentName: "agPopupSelectCellEditor",
            propertyHolder: "cellEditor"
          },
          popupText: {
            newComponentName: "agPopupTextCellEditor",
            propertyHolder: "cellEditor"
          },
          richSelect: {
            newComponentName: "agRichSelectCellEditor",
            propertyHolder: "cellEditor"
          },
          headerComponent: {
            newComponentName: "agColumnHeader",
            propertyHolder: "headerComponent"
          }
        };
        _this.jsComps = {};
        _this.fwComps = {};
        return _this;
      }
      UserComponentRegistry2.prototype.init = function() {
        var _this = this;
        if (this.gridOptions.components != null) {
          iterateObject(this.gridOptions.components, function(key, component) {
            return _this.registerJsComponent(key, component);
          });
        }
        if (this.gridOptions.frameworkComponents != null) {
          iterateObject(this.gridOptions.frameworkComponents, function(key, component) {
            return _this.registerFwComponent(key, component);
          });
        }
      };
      UserComponentRegistry2.prototype.registerDefaultComponent = function(rawName, component) {
        var name = this.translateIfDeprecated(rawName);
        if (this.agGridDefaults[name]) {
          console.error("Trying to overwrite a default component. You should call registerComponent");
          return;
        }
        this.agGridDefaults[name] = component;
      };
      UserComponentRegistry2.prototype.registerJsComponent = function(rawName, component) {
        var name = this.translateIfDeprecated(rawName);
        if (this.fwComps[name]) {
          console.error("Trying to register a component that you have already registered for frameworks: " + name);
          return;
        }
        this.jsComps[name] = component;
      };
      UserComponentRegistry2.prototype.registerFwComponent = function(rawName, component) {
        var warningMessage = "AG Grid: As of v27, registering components via grid property frameworkComponents is deprecated. Instead register both JavaScript AND Framework Components via the components property.";
        doOnce(function() {
          return console.warn(warningMessage);
        }, "UserComponentRegistry.frameworkComponentsDeprecated");
        var name = this.translateIfDeprecated(rawName);
        this.fwComps[name] = component;
      };
      UserComponentRegistry2.prototype.retrieve = function(rawName) {
        var name = this.translateIfDeprecated(rawName);
        var createResult = function(component, componentFromFramework) {
          return { componentFromFramework, component };
        };
        var registeredViaFrameworkComp = this.getFrameworkOverrides().frameworkComponent(name, this.gridOptions.components);
        if (registeredViaFrameworkComp != null) {
          return createResult(registeredViaFrameworkComp, true);
        }
        var frameworkComponent = this.fwComps[name];
        if (frameworkComponent) {
          return createResult(frameworkComponent, true);
        }
        var jsComponent = this.jsComps[name];
        if (jsComponent) {
          var isFwkComp = this.getFrameworkOverrides().isFrameworkComponent(jsComponent);
          return createResult(jsComponent, isFwkComp);
        }
        var defaultComponent = this.agGridDefaults[name];
        if (defaultComponent) {
          return createResult(defaultComponent, false);
        }
        if (Object.keys(this.agGridDefaults).indexOf(name) < 0) {
          console.warn("AG Grid: Looking for component [" + name + "] but it wasn't found.");
        }
        return null;
      };
      UserComponentRegistry2.prototype.translateIfDeprecated = function(raw) {
        var deprecatedInfo = this.agDeprecatedNames[raw];
        if (deprecatedInfo != null) {
          doOnce(function() {
            console.warn("ag-grid. Since v15.0 component names have been renamed to be namespaced. You should rename " + deprecatedInfo.propertyHolder + ":" + raw + " to " + deprecatedInfo.propertyHolder + ":" + deprecatedInfo.newComponentName);
          }, "DEPRECATE_COMPONENT_" + raw);
          return deprecatedInfo.newComponentName;
        }
        return raw;
      };
      __decorate$1X([
        Autowired("gridOptions")
      ], UserComponentRegistry2.prototype, "gridOptions", void 0);
      __decorate$1X([
        Autowired("agComponentUtils")
      ], UserComponentRegistry2.prototype, "agComponentUtils", void 0);
      __decorate$1X([
        PostConstruct
      ], UserComponentRegistry2.prototype, "init", null);
      UserComponentRegistry2 = __decorate$1X([
        Bean("userComponentRegistry")
      ], UserComponentRegistry2);
      return UserComponentRegistry2;
    }(BeanStub);
    DateComponent = {
      propertyName: "dateComponent",
      cellRenderer: false
    };
    HeaderComponent = {
      propertyName: "headerComponent",
      cellRenderer: false
    };
    HeaderGroupComponent = {
      propertyName: "headerGroupComponent",
      cellRenderer: false
    };
    CellRendererComponent = {
      propertyName: "cellRenderer",
      cellRenderer: true
    };
    CellEditorComponent = {
      propertyName: "cellEditor",
      cellRenderer: false
    };
    InnerRendererComponent = {
      propertyName: "innerRenderer",
      cellRenderer: true
    };
    LoadingOverlayComponent = {
      propertyName: "loadingOverlayComponent",
      cellRenderer: false
    };
    NoRowsOverlayComponent = {
      propertyName: "noRowsOverlayComponent",
      cellRenderer: false
    };
    TooltipComponent = {
      propertyName: "tooltipComponent",
      cellRenderer: false
    };
    FilterComponent = {
      propertyName: "filter",
      cellRenderer: false
    };
    FloatingFilterComponent = {
      propertyName: "floatingFilterComponent",
      cellRenderer: false
    };
    ToolPanelComponent = {
      propertyName: "toolPanel",
      cellRenderer: false
    };
    StatusPanelComponent = {
      propertyName: "statusPanel",
      cellRenderer: false
    };
    FullWidth = {
      propertyName: "fullWidthCellRenderer",
      cellRenderer: true
    };
    FullWidthLoading = {
      propertyName: "loadingCellRenderer",
      cellRenderer: true
    };
    FullWidthGroup = {
      propertyName: "groupRowRenderer",
      cellRenderer: true
    };
    FullWidthDetail = {
      propertyName: "detailCellRenderer",
      cellRenderer: true
    };
    FloatingFilterMapper = function() {
      function FloatingFilterMapper2() {
      }
      FloatingFilterMapper2.getFloatingFilterType = function(filterType) {
        return this.filterToFloatingFilterMapping[filterType];
      };
      FloatingFilterMapper2.filterToFloatingFilterMapping = {
        set: "agSetColumnFloatingFilter",
        agSetColumnFilter: "agSetColumnFloatingFilter",
        multi: "agMultiColumnFloatingFilter",
        agMultiColumnFilter: "agMultiColumnFloatingFilter",
        number: "agNumberColumnFloatingFilter",
        agNumberColumnFilter: "agNumberColumnFloatingFilter",
        date: "agDateColumnFloatingFilter",
        agDateColumnFilter: "agDateColumnFloatingFilter",
        text: "agTextColumnFloatingFilter",
        agTextColumnFilter: "agTextColumnFloatingFilter"
      };
      return FloatingFilterMapper2;
    }();
    __extends$28 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1W = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    UserComponentFactory = function(_super) {
      __extends$28(UserComponentFactory2, _super);
      function UserComponentFactory2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      UserComponentFactory2.prototype.getHeaderCompDetails = function(colDef, params) {
        return this.getCompDetails(colDef, HeaderComponent, "agColumnHeader", params);
      };
      UserComponentFactory2.prototype.getHeaderGroupCompDetails = function(params) {
        var colGroupDef = params.columnGroup.getColGroupDef();
        return this.getCompDetails(colGroupDef, HeaderGroupComponent, "agColumnGroupHeader", params);
      };
      UserComponentFactory2.prototype.getFullWidthCellRendererDetails = function(params) {
        return this.getCompDetails(this.gridOptions, FullWidth, null, params, true);
      };
      UserComponentFactory2.prototype.getFullWidthLoadingCellRendererDetails = function(params) {
        return this.getCompDetails(this.gridOptions, FullWidthLoading, "agLoadingCellRenderer", params, true);
      };
      UserComponentFactory2.prototype.getFullWidthGroupCellRendererDetails = function(params) {
        return this.getCompDetails(this.gridOptions, FullWidthGroup, "agGroupRowRenderer", params, true);
      };
      UserComponentFactory2.prototype.getFullWidthDetailCellRendererDetails = function(params) {
        return this.getCompDetails(this.gridOptions, FullWidthDetail, "agDetailCellRenderer", params, true);
      };
      UserComponentFactory2.prototype.getInnerRendererDetails = function(def, params) {
        return this.getCompDetails(def, InnerRendererComponent, null, params);
      };
      UserComponentFactory2.prototype.getFullWidthGroupRowInnerCellRenderer = function(def, params) {
        return this.getCompDetails(def, InnerRendererComponent, null, params);
      };
      UserComponentFactory2.prototype.getCellRendererDetails = function(def, params) {
        return this.getCompDetails(def, CellRendererComponent, null, params);
      };
      UserComponentFactory2.prototype.getCellEditorDetails = function(def, params) {
        return this.getCompDetails(def, CellEditorComponent, "agCellEditor", params, true);
      };
      UserComponentFactory2.prototype.getFilterDetails = function(def, params, defaultFilter) {
        return this.getCompDetails(def, FilterComponent, defaultFilter, params, true);
      };
      UserComponentFactory2.prototype.getDateCompDetails = function(params) {
        return this.getCompDetails(this.gridOptions, DateComponent, "agDateInput", params, true);
      };
      UserComponentFactory2.prototype.getLoadingOverlayCompDetails = function(params) {
        return this.getCompDetails(this.gridOptions, LoadingOverlayComponent, "agLoadingOverlay", params, true);
      };
      UserComponentFactory2.prototype.getNoRowsOverlayCompDetails = function(params) {
        return this.getCompDetails(this.gridOptions, NoRowsOverlayComponent, "agNoRowsOverlay", params, true);
      };
      UserComponentFactory2.prototype.getTooltipCompDetails = function(params) {
        return this.getCompDetails(params.colDef, TooltipComponent, "agTooltipComponent", params, true);
      };
      UserComponentFactory2.prototype.getSetFilterCellRendererDetails = function(def, params) {
        return this.getCompDetails(def, CellRendererComponent, null, params);
      };
      UserComponentFactory2.prototype.getFloatingFilterCompDetails = function(def, params, defaultFloatingFilter) {
        return this.getCompDetails(def, FloatingFilterComponent, defaultFloatingFilter, params);
      };
      UserComponentFactory2.prototype.getToolPanelCompDetails = function(toolPanelDef, params) {
        return this.getCompDetails(toolPanelDef, ToolPanelComponent, null, params, true);
      };
      UserComponentFactory2.prototype.getStatusPanelCompDetails = function(def, params) {
        return this.getCompDetails(def, StatusPanelComponent, null, params, true);
      };
      UserComponentFactory2.prototype.getCompDetails = function(defObject, type, defaultName, params, mandatory) {
        var _this = this;
        if (mandatory === void 0) {
          mandatory = false;
        }
        var propertyName = type.propertyName, cellRenderer = type.cellRenderer;
        var _a = this.getCompKeys(defObject, type, params), compName = _a.compName, jsComp = _a.jsComp, fwComp = _a.fwComp, paramsFromSelector = _a.paramsFromSelector, popupFromSelector = _a.popupFromSelector, popupPositionFromSelector = _a.popupPositionFromSelector;
        var lookupFromRegistry = function(key) {
          var item = _this.userComponentRegistry.retrieve(key);
          if (item) {
            jsComp = !item.componentFromFramework ? item.component : void 0;
            fwComp = item.componentFromFramework ? item.component : void 0;
          }
        };
        if (compName != null) {
          lookupFromRegistry(compName);
        }
        if (jsComp == null && fwComp == null && defaultName != null) {
          lookupFromRegistry(defaultName);
        }
        if (jsComp && cellRenderer && !this.agComponentUtils.doesImplementIComponent(jsComp)) {
          jsComp = this.agComponentUtils.adaptFunction(propertyName, jsComp);
        }
        if (!jsComp && !fwComp) {
          if (mandatory) {
            console.error("Could not find component " + compName + ", did you forget to configure this component?");
          }
          return;
        }
        var paramsMerged = this.mergeParamsWithApplicationProvidedParams(defObject, type, params, paramsFromSelector);
        var componentFromFramework = jsComp == null;
        var componentClass = jsComp ? jsComp : fwComp;
        return {
          componentFromFramework,
          componentClass,
          params: paramsMerged,
          type,
          popupFromSelector,
          popupPositionFromSelector,
          newAgStackInstance: function() {
            return _this.newAgStackInstance(componentClass, componentFromFramework, paramsMerged, type);
          }
        };
      };
      UserComponentFactory2.prototype.getCompKeys = function(defObject, type, params) {
        var _this = this;
        var propertyName = type.propertyName;
        var compName;
        var jsComp;
        var fwComp;
        var paramsFromSelector;
        var popupFromSelector;
        var popupPositionFromSelector;
        if (defObject) {
          var defObjectAny = defObject;
          var selectorFunc = defObjectAny[propertyName + "Selector"];
          var selectorRes = selectorFunc ? selectorFunc(params) : null;
          var assignComp = function(providedJsComp, providedFwComp) {
            var xxxFrameworkDeprecatedWarn = function() {
              var warningMessage = "AG Grid: As of v27, the property " + propertyName + "Framework is deprecated. The property " + propertyName + " can now be used for JavaScript AND Framework Components.";
              doOnce(function() {
                return console.warn(warningMessage);
              }, "UserComponentFactory." + propertyName + "FrameworkDeprecated");
            };
            if (typeof providedJsComp === "string") {
              compName = providedJsComp;
            } else if (typeof providedFwComp === "string") {
              xxxFrameworkDeprecatedWarn();
              compName = providedFwComp;
            } else if (providedJsComp != null && providedJsComp !== true) {
              var isFwkComp = _this.getFrameworkOverrides().isFrameworkComponent(providedJsComp);
              if (isFwkComp) {
                fwComp = providedJsComp;
              } else {
                jsComp = providedJsComp;
              }
            } else if (providedFwComp != null) {
              xxxFrameworkDeprecatedWarn();
              fwComp = providedFwComp;
            }
          };
          if (selectorRes) {
            if (selectorRes.frameworkComponent != null) {
              var warningMessage_1 = "AG Grid: As of v27, the return for " + propertyName + "Selector has attributes [component, params] only. The attribute frameworkComponent is deprecated. You should now return back Framework Components using the 'component' attribute and the grid works out if it's a framework component or not.";
              doOnce(function() {
                return console.warn(warningMessage_1);
              }, "UserComponentFactory." + propertyName + "FrameworkSelectorDeprecated");
              assignComp(selectorRes.frameworkComponent, void 0);
            } else {
              assignComp(selectorRes.component, void 0);
            }
            paramsFromSelector = selectorRes.params;
            popupFromSelector = selectorRes.popup;
            popupPositionFromSelector = selectorRes.popupPosition;
          } else {
            assignComp(defObjectAny[propertyName], defObjectAny[propertyName + "Framework"]);
          }
        }
        return { compName, jsComp, fwComp, paramsFromSelector, popupFromSelector, popupPositionFromSelector };
      };
      UserComponentFactory2.prototype.newAgStackInstance = function(ComponentClass, componentFromFramework, params, type) {
        var propertyName = type.propertyName;
        var jsComponent = !componentFromFramework;
        var instance;
        if (jsComponent) {
          instance = new ComponentClass();
        } else {
          var thisComponentConfig = this.componentMetadataProvider.retrieve(propertyName);
          instance = this.frameworkComponentWrapper.wrap(ComponentClass, thisComponentConfig.mandatoryMethodList, thisComponentConfig.optionalMethodList, type);
        }
        var deferredInit = this.initComponent(instance, params);
        if (deferredInit == null) {
          return AgPromise.resolve(instance);
        }
        return deferredInit.then(function() {
          return instance;
        });
      };
      UserComponentFactory2.prototype.mergeParamsWithApplicationProvidedParams = function(defObject, type, paramsFromGrid, paramsFromSelector) {
        if (paramsFromSelector === void 0) {
          paramsFromSelector = null;
        }
        var params = {
          context: this.gridOptionsWrapper.getContext(),
          columnApi: this.gridOptionsWrapper.getColumnApi(),
          api: this.gridOptionsWrapper.getApi()
        };
        mergeDeep(params, paramsFromGrid);
        var defObjectAny = defObject;
        var userParams = defObjectAny && defObjectAny[type.propertyName + "Params"];
        if (typeof userParams === "function") {
          var userParamsFromFunc = userParams(paramsFromGrid);
          mergeDeep(params, userParamsFromFunc);
        } else if (typeof userParams === "object") {
          mergeDeep(params, userParams);
        }
        mergeDeep(params, paramsFromSelector);
        return params;
      };
      UserComponentFactory2.prototype.initComponent = function(component, params) {
        this.context.createBean(component);
        if (component.init == null) {
          return;
        }
        return component.init(params);
      };
      UserComponentFactory2.prototype.getDefaultFloatingFilterType = function(def) {
        if (def == null) {
          return null;
        }
        var defaultFloatingFilterType = null;
        var _a = this.getCompKeys(def, FilterComponent), compName = _a.compName, jsComp = _a.jsComp, fwComp = _a.fwComp;
        if (compName) {
          defaultFloatingFilterType = FloatingFilterMapper.getFloatingFilterType(compName);
        } else {
          var usingDefaultFilter = jsComp == null && fwComp == null && def.filter === true;
          if (usingDefaultFilter) {
            var setFilterModuleLoaded = ModuleRegistry.isRegistered(ModuleNames.SetFilterModule);
            defaultFloatingFilterType = setFilterModuleLoaded ? "agSetColumnFloatingFilter" : "agTextColumnFloatingFilter";
          }
        }
        return defaultFloatingFilterType;
      };
      __decorate$1W([
        Autowired("gridOptions")
      ], UserComponentFactory2.prototype, "gridOptions", void 0);
      __decorate$1W([
        Autowired("agComponentUtils")
      ], UserComponentFactory2.prototype, "agComponentUtils", void 0);
      __decorate$1W([
        Autowired("componentMetadataProvider")
      ], UserComponentFactory2.prototype, "componentMetadataProvider", void 0);
      __decorate$1W([
        Autowired("userComponentRegistry")
      ], UserComponentFactory2.prototype, "userComponentRegistry", void 0);
      __decorate$1W([
        Optional("frameworkComponentWrapper")
      ], UserComponentFactory2.prototype, "frameworkComponentWrapper", void 0);
      UserComponentFactory2 = __decorate$1W([
        Bean("userComponentFactory")
      ], UserComponentFactory2);
      return UserComponentFactory2;
    }(BeanStub);
    (function(ExcelFactoryMode2) {
      ExcelFactoryMode2[ExcelFactoryMode2["SINGLE_SHEET"] = 0] = "SINGLE_SHEET";
      ExcelFactoryMode2[ExcelFactoryMode2["MULTI_SHEET"] = 1] = "MULTI_SHEET";
    })(ExcelFactoryMode || (ExcelFactoryMode = {}));
    __extends$27 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1V = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    DragService = function(_super) {
      __extends$27(DragService2, _super);
      function DragService2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.dragEndFunctions = [];
        _this.dragSources = [];
        return _this;
      }
      DragService2.prototype.init = function() {
        this.logger = this.loggerFactory.create("DragService");
      };
      DragService2.prototype.removeAllListeners = function() {
        this.dragSources.forEach(this.removeListener.bind(this));
        this.dragSources.length = 0;
      };
      DragService2.prototype.removeListener = function(dragSourceAndListener) {
        var element = dragSourceAndListener.dragSource.eElement;
        var mouseDownListener = dragSourceAndListener.mouseDownListener;
        element.removeEventListener("mousedown", mouseDownListener);
        if (dragSourceAndListener.touchEnabled) {
          var touchStartListener = dragSourceAndListener.touchStartListener;
          element.removeEventListener("touchstart", touchStartListener, { passive: true });
        }
      };
      DragService2.prototype.removeDragSource = function(params) {
        var dragSourceAndListener = this.dragSources.find(function(item) {
          return item.dragSource === params;
        });
        if (!dragSourceAndListener) {
          return;
        }
        this.removeListener(dragSourceAndListener);
        removeFromArray(this.dragSources, dragSourceAndListener);
      };
      DragService2.prototype.isDragging = function() {
        return this.dragging;
      };
      DragService2.prototype.addDragSource = function(params, includeTouch) {
        var _this = this;
        if (includeTouch === void 0) {
          includeTouch = false;
        }
        var mouseListener = this.onMouseDown.bind(this, params);
        params.eElement.addEventListener("mousedown", mouseListener);
        var touchListener = null;
        var suppressTouch = this.gridOptionsWrapper.isSuppressTouch();
        if (includeTouch && !suppressTouch) {
          touchListener = function(touchEvent) {
            if (isFocusableFormField(touchEvent.target)) {
              return;
            }
            if (touchEvent.cancelable) {
              touchEvent.preventDefault();
            }
            _this.onTouchStart(params, touchEvent);
          };
          params.eElement.addEventListener("touchstart", touchListener, { passive: false });
        }
        this.dragSources.push({
          dragSource: params,
          mouseDownListener: mouseListener,
          touchStartListener: touchListener,
          touchEnabled: includeTouch
        });
      };
      DragService2.prototype.onTouchStart = function(params, touchEvent) {
        var _this = this;
        this.currentDragParams = params;
        this.dragging = false;
        var touch = touchEvent.touches[0];
        this.touchLastTime = touch;
        this.touchStart = touch;
        var touchMoveEvent = function(e) {
          return _this.onTouchMove(e, params.eElement);
        };
        var touchEndEvent = function(e) {
          return _this.onTouchUp(e, params.eElement);
        };
        var documentTouchMove = function(e) {
          if (e.cancelable) {
            e.preventDefault();
          }
        };
        var target = touchEvent.target;
        var events = [
          { target: document, type: "touchmove", listener: documentTouchMove, options: { passive: false } },
          { target, type: "touchmove", listener: touchMoveEvent, options: { passive: true } },
          { target, type: "touchend", listener: touchEndEvent, options: { passive: true } },
          { target, type: "touchcancel", listener: touchEndEvent, options: { passive: true } }
        ];
        this.addTemporaryEvents(events);
        if (params.dragStartPixels === 0) {
          this.onCommonMove(touch, this.touchStart, params.eElement);
        }
      };
      DragService2.prototype.onMouseDown = function(params, mouseEvent) {
        var _this = this;
        var e = mouseEvent;
        if (params.skipMouseEvent && params.skipMouseEvent(mouseEvent)) {
          return;
        }
        if (e._alreadyProcessedByDragService) {
          return;
        }
        e._alreadyProcessedByDragService = true;
        if (mouseEvent.button !== 0) {
          return;
        }
        this.currentDragParams = params;
        this.dragging = false;
        this.mouseStartEvent = mouseEvent;
        var eDocument = this.gridOptionsWrapper.getDocument();
        var mouseMoveEvent = function(event) {
          return _this.onMouseMove(event, params.eElement);
        };
        var mouseUpEvent = function(event) {
          return _this.onMouseUp(event, params.eElement);
        };
        var contextEvent = function(event) {
          return event.preventDefault();
        };
        var target = eDocument;
        var events = [
          { target, type: "mousemove", listener: mouseMoveEvent },
          { target, type: "mouseup", listener: mouseUpEvent },
          { target, type: "contextmenu", listener: contextEvent }
        ];
        this.addTemporaryEvents(events);
        if (params.dragStartPixels === 0) {
          this.onMouseMove(mouseEvent, params.eElement);
        }
      };
      DragService2.prototype.addTemporaryEvents = function(events) {
        events.forEach(function(currentEvent) {
          var target = currentEvent.target, type = currentEvent.type, listener = currentEvent.listener, options = currentEvent.options;
          target.addEventListener(type, listener, options);
        });
        this.dragEndFunctions.push(function() {
          events.forEach(function(currentEvent) {
            var target = currentEvent.target, type = currentEvent.type, listener = currentEvent.listener, options = currentEvent.options;
            target.removeEventListener(type, listener, options);
          });
        });
      };
      DragService2.prototype.isEventNearStartEvent = function(currentEvent, startEvent) {
        var dragStartPixels = this.currentDragParams.dragStartPixels;
        var requiredPixelDiff = exists(dragStartPixels) ? dragStartPixels : 4;
        return areEventsNear(currentEvent, startEvent, requiredPixelDiff);
      };
      DragService2.prototype.getFirstActiveTouch = function(touchList) {
        for (var i = 0; i < touchList.length; i++) {
          if (touchList[i].identifier === this.touchStart.identifier) {
            return touchList[i];
          }
        }
        return null;
      };
      DragService2.prototype.onCommonMove = function(currentEvent, startEvent, el) {
        if (!this.dragging) {
          if (!this.dragging && this.isEventNearStartEvent(currentEvent, startEvent)) {
            return;
          }
          this.dragging = true;
          var event_1 = {
            type: Events.EVENT_DRAG_STARTED,
            target: el
          };
          this.eventService.dispatchEvent(event_1);
          this.currentDragParams.onDragStart(startEvent);
          this.currentDragParams.onDragging(startEvent);
        }
        this.currentDragParams.onDragging(currentEvent);
      };
      DragService2.prototype.onTouchMove = function(touchEvent, el) {
        var touch = this.getFirstActiveTouch(touchEvent.touches);
        if (!touch) {
          return;
        }
        this.onCommonMove(touch, this.touchStart, el);
      };
      DragService2.prototype.onMouseMove = function(mouseEvent, el) {
        if ((this.gridOptionsWrapper.isEnableCellTextSelect() || isBrowserSafari()) && mouseEvent.type === "mousemove" && mouseEvent.cancelable && this.mouseEventService.isEventFromThisGrid(mouseEvent) && !this.isOverFormFieldElement(mouseEvent)) {
          mouseEvent.preventDefault();
        }
        this.onCommonMove(mouseEvent, this.mouseStartEvent, el);
      };
      DragService2.prototype.isOverFormFieldElement = function(mouseEvent) {
        var _a, _b;
        var el = mouseEvent.target;
        var tagName = (_a = el) === null || _a === void 0 ? void 0 : _a.tagName.toLocaleLowerCase();
        return !!((_b = tagName) === null || _b === void 0 ? void 0 : _b.match("^a$|textarea|input|select|button"));
      };
      DragService2.prototype.onTouchUp = function(touchEvent, el) {
        var touch = this.getFirstActiveTouch(touchEvent.changedTouches);
        if (!touch) {
          touch = this.touchLastTime;
        }
        this.onUpCommon(touch, el);
      };
      DragService2.prototype.onMouseUp = function(mouseEvent, el) {
        this.onUpCommon(mouseEvent, el);
      };
      DragService2.prototype.onUpCommon = function(eventOrTouch, el) {
        if (this.dragging) {
          this.dragging = false;
          this.currentDragParams.onDragStop(eventOrTouch);
          var event_2 = {
            type: Events.EVENT_DRAG_STOPPED,
            target: el
          };
          this.eventService.dispatchEvent(event_2);
        }
        this.mouseStartEvent = null;
        this.touchStart = null;
        this.touchLastTime = null;
        this.currentDragParams = null;
        this.dragEndFunctions.forEach(function(func) {
          return func();
        });
        this.dragEndFunctions.length = 0;
      };
      __decorate$1V([
        Autowired("loggerFactory")
      ], DragService2.prototype, "loggerFactory", void 0);
      __decorate$1V([
        Autowired("mouseEventService")
      ], DragService2.prototype, "mouseEventService", void 0);
      __decorate$1V([
        PostConstruct
      ], DragService2.prototype, "init", null);
      __decorate$1V([
        PreDestroy
      ], DragService2.prototype, "removeAllListeners", null);
      DragService2 = __decorate$1V([
        Bean("dragService")
      ], DragService2);
      return DragService2;
    }(BeanStub);
    __extends$26 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign$7 = function() {
      __assign$7 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$7.apply(this, arguments);
    };
    __decorate$1U = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    FilterManager = function(_super) {
      __extends$26(FilterManager2, _super);
      function FilterManager2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.allColumnFilters = /* @__PURE__ */ new Map();
        _this.activeAggregateFilters = [];
        _this.activeColumnFilters = [];
        _this.quickFilter = null;
        _this.quickFilterParts = null;
        _this.processingFilterChange = false;
        return _this;
      }
      FilterManager_1 = FilterManager2;
      FilterManager2.prototype.init = function() {
        var _this = this;
        this.addManagedListener(this.eventService, Events.EVENT_GRID_COLUMNS_CHANGED, function() {
          return _this.onColumnsChanged();
        });
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VALUE_CHANGED, function() {
          return _this.refreshFiltersForAggregations();
        });
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_CHANGED, function() {
          return _this.refreshFiltersForAggregations();
        });
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, function() {
          return _this.refreshFiltersForAggregations();
        });
        this.quickFilter = this.parseQuickFilter(this.gridOptionsWrapper.getQuickFilterText());
        this.setQuickFilterParts();
        this.allowShowChangeAfterFilter = this.gridOptionsWrapper.isAllowShowChangeAfterFilter();
        this.externalFilterPresent = this.gridOptionsWrapper.isExternalFilterPresent();
      };
      FilterManager2.prototype.setQuickFilterParts = function() {
        this.quickFilterParts = this.quickFilter ? this.quickFilter.split(" ") : null;
      };
      FilterManager2.prototype.setFilterModel = function(model) {
        var _this = this;
        var allPromises = [];
        var previousModel = this.getFilterModel();
        if (model) {
          var modelKeys_1 = convertToSet(Object.keys(model));
          this.allColumnFilters.forEach(function(filterWrapper, colId) {
            var newModel = model[colId];
            allPromises.push(_this.setModelOnFilterWrapper(filterWrapper.filterPromise, newModel));
            modelKeys_1.delete(colId);
          });
          modelKeys_1.forEach(function(colId) {
            var column = _this.columnModel.getPrimaryColumn(colId) || _this.columnModel.getGridColumn(colId);
            if (!column) {
              console.warn("AG Grid: setFilterModel() - no column found for colId: " + colId);
              return;
            }
            if (!column.isFilterAllowed()) {
              console.warn("AG Grid: setFilterModel() - unable to fully apply model, filtering disabled for colId: " + colId);
              return;
            }
            var filterWrapper = _this.getOrCreateFilterWrapper(column, "NO_UI");
            if (!filterWrapper) {
              console.warn("AG-Grid: setFilterModel() - unable to fully apply model, unable to create filter for colId: " + colId);
              return;
            }
            allPromises.push(_this.setModelOnFilterWrapper(filterWrapper.filterPromise, model[colId]));
          });
        } else {
          this.allColumnFilters.forEach(function(filterWrapper) {
            allPromises.push(_this.setModelOnFilterWrapper(filterWrapper.filterPromise, null));
          });
        }
        AgPromise.all(allPromises).then(function() {
          var currentModel = _this.getFilterModel();
          var columns = [];
          _this.allColumnFilters.forEach(function(filterWrapper, colId) {
            var before = previousModel ? previousModel[colId] : null;
            var after = currentModel ? currentModel[colId] : null;
            if (!_.jsonEquals(before, after)) {
              columns.push(filterWrapper.column);
            }
          });
          if (columns.length > 0) {
            _this.onFilterChanged({ columns });
          }
        });
      };
      FilterManager2.prototype.setModelOnFilterWrapper = function(filterPromise, newModel) {
        return new AgPromise(function(resolve) {
          filterPromise.then(function(filter) {
            if (typeof filter.setModel !== "function") {
              console.warn("AG Grid: filter missing setModel method, which is needed for setFilterModel");
              resolve();
            }
            (filter.setModel(newModel) || AgPromise.resolve()).then(function() {
              return resolve();
            });
          });
        });
      };
      FilterManager2.prototype.getFilterModel = function() {
        var result = {};
        this.allColumnFilters.forEach(function(filterWrapper, key) {
          var filterPromise = filterWrapper.filterPromise;
          var filter = filterPromise.resolveNow(null, function(promiseFilter) {
            return promiseFilter;
          });
          if (filter == null) {
            return null;
          }
          if (typeof filter.getModel !== "function") {
            console.warn("AG Grid: filter API missing getModel method, which is needed for getFilterModel");
            return;
          }
          var model = filter.getModel();
          if (exists(model)) {
            result[key] = model;
          }
        });
        return result;
      };
      FilterManager2.prototype.isColumnFilterPresent = function() {
        return this.activeColumnFilters.length > 0;
      };
      FilterManager2.prototype.isAggregateFilterPresent = function() {
        return !!this.activeAggregateFilters.length;
      };
      FilterManager2.prototype.isExternalFilterPresent = function() {
        return this.externalFilterPresent;
      };
      FilterManager2.prototype.doAggregateFiltersPass = function(node, filterToSkip) {
        return this.doColumnFiltersPass(node, filterToSkip, true);
      };
      FilterManager2.prototype.updateActiveFilters = function() {
        var _this = this;
        this.activeColumnFilters.length = 0;
        this.activeAggregateFilters.length = 0;
        var isFilterActive = function(filter) {
          if (!filter) {
            return false;
          }
          if (!filter.isFilterActive) {
            console.warn("AG Grid: Filter is missing isFilterActive() method");
            return false;
          }
          return filter.isFilterActive();
        };
        var groupFilterEnabled = !!this.gridOptionsWrapper.getGroupAggFiltering();
        var isAggFilter = function(column) {
          var isSecondary = !column.isPrimary();
          if (isSecondary) {
            return true;
          }
          var isShowingPrimaryColumns = !_this.columnModel.isPivotActive();
          var isValueActive = column.isValueActive();
          if (!isValueActive || !isShowingPrimaryColumns) {
            return false;
          }
          if (_this.columnModel.isPivotMode()) {
            return true;
          } else {
            return groupFilterEnabled;
          }
        };
        this.allColumnFilters.forEach(function(filterWrapper) {
          if (filterWrapper.filterPromise.resolveNow(false, isFilterActive)) {
            var filterComp = filterWrapper.filterPromise.resolveNow(null, function(filter) {
              return filter;
            });
            if (isAggFilter(filterWrapper.column)) {
              _this.activeAggregateFilters.push(filterComp);
            } else {
              _this.activeColumnFilters.push(filterComp);
            }
          }
        });
      };
      FilterManager2.prototype.updateFilterFlagInColumns = function(source, additionalEventAttributes) {
        this.allColumnFilters.forEach(function(filterWrapper) {
          var isFilterActive = filterWrapper.filterPromise.resolveNow(false, function(filter) {
            return filter.isFilterActive();
          });
          filterWrapper.column.setFilterActive(isFilterActive, source, additionalEventAttributes);
        });
      };
      FilterManager2.prototype.isAnyFilterPresent = function() {
        return this.isQuickFilterPresent() || this.isColumnFilterPresent() || this.isAggregateFilterPresent() || this.isExternalFilterPresent();
      };
      FilterManager2.prototype.doColumnFiltersPass = function(node, filterToSkip, targetAggregates) {
        var data = node.data, aggData = node.aggData;
        var targetedFilters = targetAggregates ? this.activeAggregateFilters : this.activeColumnFilters;
        var targetedData = targetAggregates ? aggData : data;
        for (var i = 0; i < targetedFilters.length; i++) {
          var filter = targetedFilters[i];
          if (filter == null || filter === filterToSkip) {
            continue;
          }
          if (typeof filter.doesFilterPass !== "function") {
            throw new Error("Filter is missing method doesFilterPass");
          }
          if (!filter.doesFilterPass({ node, data: targetedData })) {
            return false;
          }
        }
        return true;
      };
      FilterManager2.prototype.parseQuickFilter = function(newFilter) {
        if (!exists(newFilter)) {
          return null;
        }
        if (!this.gridOptionsWrapper.isRowModelDefault()) {
          console.warn("AG Grid - Quick filtering only works with the Client-Side Row Model");
          return null;
        }
        return newFilter.toUpperCase();
      };
      FilterManager2.prototype.setQuickFilter = function(newFilter) {
        if (newFilter != null && typeof newFilter !== "string") {
          console.warn("AG Grid - setQuickFilter() only supports string inputs, received: " + typeof newFilter);
          return;
        }
        var parsedFilter = this.parseQuickFilter(newFilter);
        if (this.quickFilter !== parsedFilter) {
          this.quickFilter = parsedFilter;
          this.setQuickFilterParts();
          this.onFilterChanged();
        }
      };
      FilterManager2.prototype.refreshFiltersForAggregations = function() {
        var isAggFiltering = this.gridOptionsWrapper.getGroupAggFiltering();
        if (isAggFiltering) {
          this.onFilterChanged();
        }
      };
      FilterManager2.prototype.callOnFilterChangedOutsideRenderCycle = function(params) {
        var _this = this;
        if (params === void 0) {
          params = {};
        }
        var action = function() {
          return _this.onFilterChanged(params);
        };
        if (this.rowRenderer.isRefreshInProgress()) {
          setTimeout(action, 0);
        } else {
          action();
        }
      };
      FilterManager2.prototype.onFilterChanged = function(params) {
        if (params === void 0) {
          params = {};
        }
        var filterInstance = params.filterInstance, additionalEventAttributes = params.additionalEventAttributes, columns = params.columns;
        this.updateActiveFilters();
        this.updateFilterFlagInColumns("filterChanged", additionalEventAttributes);
        this.externalFilterPresent = this.gridOptionsWrapper.isExternalFilterPresent();
        this.allColumnFilters.forEach(function(filterWrapper) {
          if (!filterWrapper.filterPromise) {
            return;
          }
          filterWrapper.filterPromise.then(function(filter) {
            if (filter && filter !== filterInstance && filter.onAnyFilterChanged) {
              filter.onAnyFilterChanged();
            }
          });
        });
        var filterChangedEvent = {
          type: Events.EVENT_FILTER_CHANGED,
          columns: columns || []
        };
        if (additionalEventAttributes) {
          mergeDeep(filterChangedEvent, additionalEventAttributes);
        }
        this.processingFilterChange = true;
        this.eventService.dispatchEvent(filterChangedEvent);
        this.processingFilterChange = false;
      };
      FilterManager2.prototype.isSuppressFlashingCellsBecauseFiltering = function() {
        return !this.allowShowChangeAfterFilter && this.processingFilterChange;
      };
      FilterManager2.prototype.isQuickFilterPresent = function() {
        return this.quickFilter !== null;
      };
      FilterManager2.prototype.doesRowPassOtherFilters = function(filterToSkip, node) {
        return this.doesRowPassFilter({ rowNode: node, filterInstanceToSkip: filterToSkip });
      };
      FilterManager2.prototype.doesRowPassQuickFilterNoCache = function(node, filterPart) {
        var _this = this;
        var columns = this.columnModel.getAllColumnsForQuickFilter();
        return columns.some(function(column) {
          var part = _this.getQuickFilterTextForColumn(column, node);
          return exists(part) && part.indexOf(filterPart) >= 0;
        });
      };
      FilterManager2.prototype.doesRowPassQuickFilterCache = function(node, filterPart) {
        if (!node.quickFilterAggregateText) {
          this.aggregateRowForQuickFilter(node);
        }
        return node.quickFilterAggregateText.indexOf(filterPart) >= 0;
      };
      FilterManager2.prototype.doesRowPassQuickFilter = function(node) {
        var _this = this;
        var usingCache = this.gridOptionsWrapper.isCacheQuickFilter();
        return this.quickFilterParts.every(function(part) {
          return usingCache ? _this.doesRowPassQuickFilterCache(node, part) : _this.doesRowPassQuickFilterNoCache(node, part);
        });
      };
      FilterManager2.prototype.doesRowPassAggregateFilters = function(params) {
        if (this.isAggregateFilterPresent() && !this.doAggregateFiltersPass(params.rowNode, params.filterInstanceToSkip)) {
          return false;
        }
        return true;
      };
      FilterManager2.prototype.doesRowPassFilter = function(params) {
        if (this.isQuickFilterPresent() && !this.doesRowPassQuickFilter(params.rowNode)) {
          return false;
        }
        if (this.isExternalFilterPresent() && !this.gridOptionsWrapper.doesExternalFilterPass(params.rowNode)) {
          return false;
        }
        if (this.isColumnFilterPresent() && !this.doColumnFiltersPass(params.rowNode, params.filterInstanceToSkip)) {
          return false;
        }
        return true;
      };
      FilterManager2.prototype.getQuickFilterTextForColumn = function(column, node) {
        var value = this.valueService.getValue(column, node, true);
        var colDef = column.getColDef();
        if (colDef.getQuickFilterText) {
          var params = {
            value,
            node,
            data: node.data,
            column,
            colDef,
            api: this.gridOptionsWrapper.getApi(),
            columnApi: this.gridOptionsWrapper.getColumnApi(),
            context: this.gridOptionsWrapper.getContext()
          };
          value = colDef.getQuickFilterText(params);
        }
        return exists(value) ? value.toString().toUpperCase() : null;
      };
      FilterManager2.prototype.aggregateRowForQuickFilter = function(node) {
        var _this = this;
        var stringParts = [];
        var columns = this.columnModel.getAllColumnsForQuickFilter();
        columns.forEach(function(column) {
          var part = _this.getQuickFilterTextForColumn(column, node);
          if (exists(part)) {
            stringParts.push(part);
          }
        });
        node.quickFilterAggregateText = stringParts.join(FilterManager_1.QUICK_FILTER_SEPARATOR);
      };
      FilterManager2.prototype.onNewRowsLoaded = function(source) {
        this.allColumnFilters.forEach(function(filterWrapper) {
          filterWrapper.filterPromise.then(function(filter) {
            if (filter.onNewRowsLoaded) {
              filter.onNewRowsLoaded();
            }
          });
        });
        this.updateFilterFlagInColumns(source);
        this.updateActiveFilters();
      };
      FilterManager2.prototype.createValueGetter = function(column) {
        var _this = this;
        return function(_a) {
          var node = _a.node;
          return _this.valueService.getValue(column, node, true);
        };
      };
      FilterManager2.prototype.getFilterComponent = function(column, source, createIfDoesNotExist) {
        if (createIfDoesNotExist === void 0) {
          createIfDoesNotExist = true;
        }
        var _a;
        if (createIfDoesNotExist) {
          return ((_a = this.getOrCreateFilterWrapper(column, source)) === null || _a === void 0 ? void 0 : _a.filterPromise) || null;
        }
        var filterWrapper = this.cachedFilter(column);
        return filterWrapper ? filterWrapper.filterPromise : null;
      };
      FilterManager2.prototype.isFilterActive = function(column) {
        var filterWrapper = this.cachedFilter(column);
        return !!filterWrapper && filterWrapper.filterPromise.resolveNow(false, function(filter) {
          return filter.isFilterActive();
        });
      };
      FilterManager2.prototype.getOrCreateFilterWrapper = function(column, source) {
        if (!column.isFilterAllowed()) {
          return null;
        }
        var filterWrapper = this.cachedFilter(column);
        if (!filterWrapper) {
          filterWrapper = this.createFilterWrapper(column, source);
          this.allColumnFilters.set(column.getColId(), filterWrapper);
        } else if (source !== "NO_UI") {
          this.putIntoGui(filterWrapper, source);
        }
        return filterWrapper;
      };
      FilterManager2.prototype.cachedFilter = function(column) {
        return this.allColumnFilters.get(column.getColId());
      };
      FilterManager2.prototype.createFilterInstance = function(column) {
        var _this = this;
        var defaultFilter = ModuleRegistry.isRegistered(ModuleNames.SetFilterModule) ? "agSetColumnFilter" : "agTextColumnFilter";
        var colDef = column.getColDef();
        var filterInstance;
        var params = __assign$7(__assign$7({}, this.createFilterParams(column, colDef)), { filterModifiedCallback: function() {
          var event = {
            type: Events.EVENT_FILTER_MODIFIED,
            column,
            filterInstance
          };
          _this.eventService.dispatchEvent(event);
        }, filterChangedCallback: function(additionalEventAttributes) {
          var params2 = { filterInstance, additionalEventAttributes, columns: [column] };
          _this.callOnFilterChangedOutsideRenderCycle(params2);
        }, doesRowPassOtherFilter: function(node) {
          return _this.doesRowPassOtherFilters(filterInstance, node);
        } });
        var compDetails = this.userComponentFactory.getFilterDetails(colDef, params, defaultFilter);
        if (!compDetails) {
          return null;
        }
        var componentPromise = compDetails.newAgStackInstance();
        if (componentPromise) {
          componentPromise.then(function(r) {
            return filterInstance = r;
          });
        }
        return componentPromise;
      };
      FilterManager2.prototype.createFilterParams = function(column, colDef) {
        var params = {
          api: this.gridOptionsWrapper.getApi(),
          columnApi: this.gridOptionsWrapper.getColumnApi(),
          column,
          colDef: cloneObject(colDef),
          rowModel: this.rowModel,
          filterChangedCallback: function() {
          },
          filterModifiedCallback: function() {
          },
          valueGetter: this.createValueGetter(column),
          context: this.gridOptionsWrapper.getContext(),
          doesRowPassOtherFilter: function() {
            return true;
          }
        };
        return params;
      };
      FilterManager2.prototype.createFilterWrapper = function(column, source) {
        var filterWrapper = {
          column,
          filterPromise: null,
          compiledElement: null,
          guiPromise: AgPromise.resolve(null)
        };
        filterWrapper.filterPromise = this.createFilterInstance(column);
        if (filterWrapper.filterPromise) {
          this.putIntoGui(filterWrapper, source);
        }
        return filterWrapper;
      };
      FilterManager2.prototype.putIntoGui = function(filterWrapper, source) {
        var _this = this;
        var eFilterGui = document.createElement("div");
        eFilterGui.className = "ag-filter";
        filterWrapper.guiPromise = new AgPromise(function(resolve) {
          filterWrapper.filterPromise.then(function(filter) {
            var guiFromFilter = filter.getGui();
            if (!exists(guiFromFilter)) {
              console.warn("AG Grid: getGui method from filter returned " + guiFromFilter + ", it should be a DOM element or an HTML template string.");
            }
            if (typeof guiFromFilter === "string") {
              guiFromFilter = loadTemplate(guiFromFilter);
            }
            eFilterGui.appendChild(guiFromFilter);
            resolve(eFilterGui);
            var event = {
              type: Events.EVENT_FILTER_OPENED,
              column: filterWrapper.column,
              source,
              eGui: eFilterGui
            };
            _this.eventService.dispatchEvent(event);
          });
        });
      };
      FilterManager2.prototype.onColumnsChanged = function() {
        var _this = this;
        var columns = [];
        this.allColumnFilters.forEach(function(wrapper, colId) {
          var currentColumn;
          if (wrapper.column.isPrimary()) {
            currentColumn = _this.columnModel.getPrimaryColumn(colId);
          } else {
            currentColumn = _this.columnModel.getGridColumn(colId);
          }
          if (currentColumn) {
            return;
          }
          columns.push(wrapper.column);
          _this.disposeFilterWrapper(wrapper, "filterDestroyed");
        });
        if (columns.length > 0) {
          this.onFilterChanged({ columns });
        }
      };
      FilterManager2.prototype.destroyFilter = function(column, source) {
        if (source === void 0) {
          source = "api";
        }
        var filterWrapper = this.allColumnFilters.get(column.getColId());
        if (filterWrapper) {
          this.disposeFilterWrapper(filterWrapper, source);
          this.onFilterChanged({ columns: [column] });
        }
      };
      FilterManager2.prototype.disposeFilterWrapper = function(filterWrapper, source) {
        var _this = this;
        filterWrapper.filterPromise.then(function(filter) {
          (filter.setModel(null) || AgPromise.resolve()).then(function() {
            _this.getContext().destroyBean(filter);
            filterWrapper.column.setFilterActive(false, source);
            _this.allColumnFilters.delete(filterWrapper.column.getColId());
          });
        });
      };
      FilterManager2.prototype.destroy = function() {
        var _this = this;
        _super.prototype.destroy.call(this);
        this.allColumnFilters.forEach(function(filterWrapper) {
          return _this.disposeFilterWrapper(filterWrapper, "filterDestroyed");
        });
      };
      var FilterManager_1;
      FilterManager2.QUICK_FILTER_SEPARATOR = "\n";
      __decorate$1U([
        Autowired("valueService")
      ], FilterManager2.prototype, "valueService", void 0);
      __decorate$1U([
        Autowired("columnModel")
      ], FilterManager2.prototype, "columnModel", void 0);
      __decorate$1U([
        Autowired("rowModel")
      ], FilterManager2.prototype, "rowModel", void 0);
      __decorate$1U([
        Autowired("userComponentFactory")
      ], FilterManager2.prototype, "userComponentFactory", void 0);
      __decorate$1U([
        Autowired("rowRenderer")
      ], FilterManager2.prototype, "rowRenderer", void 0);
      __decorate$1U([
        PostConstruct
      ], FilterManager2.prototype, "init", null);
      __decorate$1U([
        PreDestroy
      ], FilterManager2.prototype, "destroy", null);
      FilterManager2 = FilterManager_1 = __decorate$1U([
        Bean("filterManager")
      ], FilterManager2);
      return FilterManager2;
    }(BeanStub);
    __extends$25 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    AbstractHeaderCellComp = function(_super) {
      __extends$25(AbstractHeaderCellComp2, _super);
      function AbstractHeaderCellComp2(template, ctrl) {
        var _this = _super.call(this, template) || this;
        _this.ctrl = ctrl;
        return _this;
      }
      AbstractHeaderCellComp2.prototype.getCtrl = function() {
        return this.ctrl;
      };
      return AbstractHeaderCellComp2;
    }(Component);
    __extends$24 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1T = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    HeaderFilterCellComp = function(_super) {
      __extends$24(HeaderFilterCellComp2, _super);
      function HeaderFilterCellComp2(ctrl) {
        return _super.call(this, HeaderFilterCellComp2.TEMPLATE, ctrl) || this;
      }
      HeaderFilterCellComp2.prototype.postConstruct = function() {
        var _this = this;
        var eGui = this.getGui();
        var compProxy = {
          addOrRemoveCssClass: function(cssClassName, on) {
            return _this.addOrRemoveCssClass(cssClassName, on);
          },
          addOrRemoveBodyCssClass: function(cssClassName, on) {
            return _this.eFloatingFilterBody.classList.toggle(cssClassName, on);
          },
          addOrRemoveButtonWrapperCssClass: function(cssClassName, on) {
            return _this.eButtonWrapper.classList.toggle(cssClassName, on);
          },
          setCompDetails: function(compDetails) {
            return _this.setCompDetails(compDetails);
          },
          getFloatingFilterComp: function() {
            return _this.compPromise;
          },
          setWidth: function(width) {
            return eGui.style.width = width;
          },
          setMenuIcon: function(eIcon) {
            return _this.eButtonShowMainFilter.appendChild(eIcon);
          }
        };
        this.ctrl.setComp(compProxy, eGui, this.eButtonShowMainFilter, this.eFloatingFilterBody);
      };
      HeaderFilterCellComp2.prototype.setCompDetails = function(compDetails) {
        var _this = this;
        this.compPromise = compDetails.newAgStackInstance();
        this.compPromise.then(function(comp) {
          return _this.afterCompCreated(comp);
        });
      };
      HeaderFilterCellComp2.prototype.afterCompCreated = function(comp) {
        var _this = this;
        if (!comp) {
          return;
        }
        this.addDestroyFunc(function() {
          return _this.context.destroyBean(comp);
        });
        if (!this.isAlive()) {
          return;
        }
        this.eFloatingFilterBody.appendChild(comp.getGui());
        if (comp.afterGuiAttached) {
          comp.afterGuiAttached();
        }
      };
      HeaderFilterCellComp2.TEMPLATE = '<div class="ag-header-cell ag-floating-filter" role="gridcell" tabindex="-1">\n            <div ref="eFloatingFilterBody" role="presentation"></div>\n            <div class="ag-floating-filter-button ag-hidden" ref="eButtonWrapper" role="presentation">\n                <button type="button" aria-label="Open Filter Menu" class="ag-floating-filter-button-button" ref="eButtonShowMainFilter" tabindex="-1"></button>\n            </div>\n        </div>';
      __decorate$1T([
        RefSelector("eFloatingFilterBody")
      ], HeaderFilterCellComp2.prototype, "eFloatingFilterBody", void 0);
      __decorate$1T([
        RefSelector("eButtonWrapper")
      ], HeaderFilterCellComp2.prototype, "eButtonWrapper", void 0);
      __decorate$1T([
        RefSelector("eButtonShowMainFilter")
      ], HeaderFilterCellComp2.prototype, "eButtonShowMainFilter", void 0);
      __decorate$1T([
        PostConstruct
      ], HeaderFilterCellComp2.prototype, "postConstruct", null);
      return HeaderFilterCellComp2;
    }(AbstractHeaderCellComp);
    __extends$23 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1S = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    (function(LayoutCssClasses2) {
      LayoutCssClasses2["AUTO_HEIGHT"] = "ag-layout-auto-height";
      LayoutCssClasses2["NORMAL"] = "ag-layout-normal";
      LayoutCssClasses2["PRINT"] = "ag-layout-print";
    })(LayoutCssClasses || (LayoutCssClasses = {}));
    LayoutFeature = function(_super) {
      __extends$23(LayoutFeature2, _super);
      function LayoutFeature2(view) {
        var _this = _super.call(this) || this;
        _this.view = view;
        return _this;
      }
      LayoutFeature2.prototype.postConstruct = function() {
        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_DOM_LAYOUT, this.updateLayoutClasses.bind(this));
        this.updateLayoutClasses();
      };
      LayoutFeature2.prototype.updateLayoutClasses = function() {
        var domLayout = this.gridOptionsWrapper.getDomLayout();
        var params = {
          autoHeight: domLayout === Constants.DOM_LAYOUT_AUTO_HEIGHT,
          normal: domLayout === Constants.DOM_LAYOUT_NORMAL,
          print: domLayout === Constants.DOM_LAYOUT_PRINT
        };
        var cssClass = params.autoHeight ? LayoutCssClasses.AUTO_HEIGHT : params.print ? LayoutCssClasses.PRINT : LayoutCssClasses.NORMAL;
        this.view.updateLayoutClasses(cssClass, params);
      };
      __decorate$1S([
        Autowired("gridOptionsWrapper")
      ], LayoutFeature2.prototype, "gridOptionsWrapper", void 0);
      __decorate$1S([
        PostConstruct
      ], LayoutFeature2.prototype, "postConstruct", null);
      return LayoutFeature2;
    }(BeanStub);
    __extends$22 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1R = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    GridBodyScrollFeature = function(_super) {
      __extends$22(GridBodyScrollFeature2, _super);
      function GridBodyScrollFeature2(eBodyViewport) {
        var _this = _super.call(this) || this;
        _this.scrollLeft = -1;
        _this.nextScrollTop = -1;
        _this.scrollTop = -1;
        _this.eBodyViewport = eBodyViewport;
        _this.resetLastHorizontalScrollElementDebounced = debounce(_this.resetLastHorizontalScrollElement.bind(_this), 500);
        return _this;
      }
      GridBodyScrollFeature2.prototype.postConstruct = function() {
        var _this = this;
        this.enableRtl = this.gridOptionsWrapper.isEnableRtl();
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onDisplayedColumnsWidthChanged.bind(this));
        this.ctrlsService.whenReady(function(p) {
          _this.centerRowContainerCtrl = p.centerRowContainerCtrl;
          _this.onDisplayedColumnsWidthChanged();
          _this.addScrollListener();
        });
      };
      GridBodyScrollFeature2.prototype.addScrollListener = function() {
        var fakeHScroll = this.ctrlsService.getFakeHScrollCtrl();
        this.addManagedListener(this.centerRowContainerCtrl.getViewportElement(), "scroll", this.onCenterViewportScroll.bind(this));
        this.addManagedListener(fakeHScroll.getViewport(), "scroll", this.onFakeHorizontalScroll.bind(this));
        var onVerticalScroll = this.gridOptionsWrapper.isDebounceVerticalScrollbar() ? debounce(this.onVerticalScroll.bind(this), 100) : this.onVerticalScroll.bind(this);
        this.addManagedListener(this.eBodyViewport, "scroll", onVerticalScroll);
      };
      GridBodyScrollFeature2.prototype.onDisplayedColumnsWidthChanged = function() {
        if (this.enableRtl) {
          this.horizontallyScrollHeaderCenterAndFloatingCenter();
        }
      };
      GridBodyScrollFeature2.prototype.horizontallyScrollHeaderCenterAndFloatingCenter = function(scrollLeft) {
        var notYetInitialised = this.centerRowContainerCtrl == null;
        if (notYetInitialised) {
          return;
        }
        if (scrollLeft === void 0) {
          scrollLeft = this.centerRowContainerCtrl.getCenterViewportScrollLeft();
        }
        var offset = this.enableRtl ? scrollLeft : -scrollLeft;
        var topCenterContainer = this.ctrlsService.getTopCenterRowContainerCtrl();
        var stickyTopCenterContainer = this.ctrlsService.getStickyTopCenterRowContainerCtrl();
        var bottomCenterContainer = this.ctrlsService.getBottomCenterRowContainerCtrl();
        var fakeHScroll = this.ctrlsService.getFakeHScrollCtrl();
        var centerHeaderContainer = this.ctrlsService.getHeaderRowContainerCtrl();
        centerHeaderContainer.setHorizontalScroll(offset);
        bottomCenterContainer.setContainerTranslateX(offset);
        topCenterContainer.setContainerTranslateX(offset);
        stickyTopCenterContainer.setContainerTranslateX(offset);
        var centerViewport = this.centerRowContainerCtrl.getViewportElement();
        var isCenterViewportLastHorizontal = this.lastHorizontalScrollElement === centerViewport;
        var partner = isCenterViewportLastHorizontal ? fakeHScroll.getViewport() : this.centerRowContainerCtrl.getViewportElement();
        setScrollLeft(partner, Math.abs(scrollLeft), this.enableRtl);
      };
      GridBodyScrollFeature2.prototype.isControllingScroll = function(eDiv) {
        if (!this.lastHorizontalScrollElement) {
          this.lastHorizontalScrollElement = eDiv;
          return true;
        }
        return eDiv === this.lastHorizontalScrollElement;
      };
      GridBodyScrollFeature2.prototype.onFakeHorizontalScroll = function() {
        var fakeHScrollViewport = this.ctrlsService.getFakeHScrollCtrl().getViewport();
        if (!this.isControllingScroll(fakeHScrollViewport)) {
          return;
        }
        this.onBodyHorizontalScroll(fakeHScrollViewport);
      };
      GridBodyScrollFeature2.prototype.onCenterViewportScroll = function() {
        var centerContainerViewport = this.centerRowContainerCtrl.getViewportElement();
        if (!this.isControllingScroll(centerContainerViewport)) {
          return;
        }
        this.onBodyHorizontalScroll(centerContainerViewport);
      };
      GridBodyScrollFeature2.prototype.onBodyHorizontalScroll = function(eSource) {
        var centerContainerViewport = this.centerRowContainerCtrl.getViewportElement();
        var scrollLeft = centerContainerViewport.scrollLeft;
        if (this.shouldBlockScrollUpdate("horizontal", scrollLeft, true)) {
          return;
        }
        this.doHorizontalScroll(Math.round(getScrollLeft(eSource, this.enableRtl)));
        this.resetLastHorizontalScrollElementDebounced();
      };
      GridBodyScrollFeature2.prototype.onVerticalScroll = function() {
        var scrollTop = this.eBodyViewport.scrollTop;
        if (this.shouldBlockScrollUpdate("vertical", scrollTop, true)) {
          return;
        }
        this.animationFrameService.setScrollTop(scrollTop);
        this.nextScrollTop = scrollTop;
        if (this.gridOptionsWrapper.isSuppressAnimationFrame()) {
          this.scrollTop = this.nextScrollTop;
          this.redrawRowsAfterScroll();
        } else {
          this.animationFrameService.schedule();
        }
      };
      GridBodyScrollFeature2.prototype.resetLastHorizontalScrollElement = function() {
        this.lastHorizontalScrollElement = null;
      };
      GridBodyScrollFeature2.prototype.doHorizontalScroll = function(scrollLeft) {
        var fakeHScrollViewport = this.ctrlsService.getFakeHScrollCtrl().getViewport();
        var fakeScrollLeft = getScrollLeft(fakeHScrollViewport, this.enableRtl);
        if (this.scrollLeft === scrollLeft && scrollLeft === fakeScrollLeft) {
          return;
        }
        this.scrollLeft = scrollLeft;
        this.fireScrollEvent("horizontal");
        this.horizontallyScrollHeaderCenterAndFloatingCenter(scrollLeft);
        this.onHorizontalViewportChanged();
      };
      GridBodyScrollFeature2.prototype.fireScrollEvent = function(direction) {
        var _this = this;
        var bodyScrollEvent = {
          type: Events.EVENT_BODY_SCROLL,
          direction,
          left: this.scrollLeft,
          top: this.scrollTop
        };
        this.eventService.dispatchEvent(bodyScrollEvent);
        window.clearTimeout(this.scrollTimer);
        this.scrollTimer = void 0;
        this.scrollTimer = window.setTimeout(function() {
          var bodyScrollEndEvent = Object.assign({}, bodyScrollEvent, {
            type: Events.EVENT_BODY_SCROLL_END
          });
          _this.eventService.dispatchEvent(bodyScrollEndEvent);
        }, 100);
      };
      GridBodyScrollFeature2.prototype.shouldBlockScrollUpdate = function(direction, scrollTo, touchOnly) {
        if (touchOnly === void 0) {
          touchOnly = false;
        }
        if (touchOnly && !isIOSUserAgent()) {
          return false;
        }
        if (direction === "vertical") {
          var clientHeight = getInnerHeight(this.eBodyViewport);
          var scrollHeight = this.eBodyViewport.scrollHeight;
          if (scrollTo < 0 || scrollTo + clientHeight > scrollHeight) {
            return true;
          }
        }
        if (direction === "horizontal") {
          var clientWidth = this.centerRowContainerCtrl.getCenterWidth();
          var scrollWidth = this.centerRowContainerCtrl.getViewportElement().scrollWidth;
          if (this.enableRtl && isRtlNegativeScroll()) {
            if (scrollTo > 0) {
              return true;
            }
          } else if (scrollTo < 0) {
            return true;
          }
          if (Math.abs(scrollTo) + clientWidth > scrollWidth) {
            return true;
          }
        }
        return false;
      };
      GridBodyScrollFeature2.prototype.redrawRowsAfterScroll = function() {
        this.fireScrollEvent("vertical");
      };
      GridBodyScrollFeature2.prototype.onHorizontalViewportChanged = function() {
        this.centerRowContainerCtrl.onHorizontalViewportChanged();
      };
      GridBodyScrollFeature2.prototype.checkScrollLeft = function() {
        if (this.scrollLeft !== this.centerRowContainerCtrl.getCenterViewportScrollLeft()) {
          this.onBodyHorizontalScroll(this.centerRowContainerCtrl.getViewportElement());
        }
      };
      GridBodyScrollFeature2.prototype.executeAnimationFrameScroll = function() {
        var frameNeeded = this.scrollTop != this.nextScrollTop;
        if (frameNeeded) {
          this.scrollTop = this.nextScrollTop;
          this.redrawRowsAfterScroll();
        }
        return frameNeeded;
      };
      GridBodyScrollFeature2.prototype.setHorizontalScrollPosition = function(hScrollPosition) {
        var minScrollLeft = 0;
        var maxScrollLeft = this.centerRowContainerCtrl.getViewportElement().scrollWidth - this.centerRowContainerCtrl.getCenterWidth();
        if (this.shouldBlockScrollUpdate("horizontal", hScrollPosition)) {
          if (this.enableRtl && isRtlNegativeScroll()) {
            hScrollPosition = hScrollPosition > 0 ? 0 : maxScrollLeft;
          } else {
            hScrollPosition = Math.min(Math.max(hScrollPosition, minScrollLeft), maxScrollLeft);
          }
        }
        setScrollLeft(this.centerRowContainerCtrl.getViewportElement(), Math.abs(hScrollPosition), this.enableRtl);
        this.doHorizontalScroll(hScrollPosition);
      };
      GridBodyScrollFeature2.prototype.setVerticalScrollPosition = function(vScrollPosition) {
        this.eBodyViewport.scrollTop = vScrollPosition;
      };
      GridBodyScrollFeature2.prototype.getVScrollPosition = function() {
        var result = {
          top: this.eBodyViewport.scrollTop,
          bottom: this.eBodyViewport.scrollTop + this.eBodyViewport.offsetHeight
        };
        return result;
      };
      GridBodyScrollFeature2.prototype.getHScrollPosition = function() {
        return this.centerRowContainerCtrl.getHScrollPosition();
      };
      GridBodyScrollFeature2.prototype.isHorizontalScrollShowing = function() {
        return this.centerRowContainerCtrl.isHorizontalScrollShowing();
      };
      GridBodyScrollFeature2.prototype.scrollHorizontally = function(pixels) {
        var oldScrollPosition = this.centerRowContainerCtrl.getViewportElement().scrollLeft;
        this.setHorizontalScrollPosition(oldScrollPosition + pixels);
        return this.centerRowContainerCtrl.getViewportElement().scrollLeft - oldScrollPosition;
      };
      GridBodyScrollFeature2.prototype.scrollToTop = function() {
        this.eBodyViewport.scrollTop = 0;
      };
      GridBodyScrollFeature2.prototype.ensureNodeVisible = function(comparator, position) {
        if (position === void 0) {
          position = null;
        }
        var rowCount = this.rowModel.getRowCount();
        var indexToSelect = -1;
        for (var i = 0; i < rowCount; i++) {
          var node = this.rowModel.getRow(i);
          if (typeof comparator === "function") {
            var predicate = comparator;
            if (node && predicate(node)) {
              indexToSelect = i;
              break;
            }
          } else {
            if (comparator === node || comparator === node.data) {
              indexToSelect = i;
              break;
            }
          }
        }
        if (indexToSelect >= 0) {
          this.ensureIndexVisible(indexToSelect, position);
        }
      };
      GridBodyScrollFeature2.prototype.ensureIndexVisible = function(index, position) {
        if (this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT) {
          return;
        }
        var rowCount = this.paginationProxy.getRowCount();
        if (typeof index !== "number" || index < 0 || index >= rowCount) {
          console.warn("invalid row index for ensureIndexVisible: " + index);
          return;
        }
        var isPaging = this.gridOptionsWrapper.isPagination();
        var paginationPanelEnabled = isPaging && !this.gridOptionsWrapper.isSuppressPaginationPanel();
        if (!paginationPanelEnabled) {
          this.paginationProxy.goToPageWithIndex(index);
        }
        var gridBodyCtrl = this.ctrlsService.getGridBodyCtrl();
        var stickyTopHeight = gridBodyCtrl.getStickyTopHeight();
        var rowNode = this.paginationProxy.getRow(index);
        var rowGotShiftedDuringOperation;
        do {
          var startingRowTop = rowNode.rowTop;
          var startingRowHeight = rowNode.rowHeight;
          var paginationOffset = this.paginationProxy.getPixelOffset();
          var rowTopPixel = rowNode.rowTop - paginationOffset;
          var rowBottomPixel = rowTopPixel + rowNode.rowHeight;
          var scrollPosition = this.getVScrollPosition();
          var heightOffset = this.heightScaler.getDivStretchOffset();
          var vScrollTop = scrollPosition.top + heightOffset;
          var vScrollBottom = scrollPosition.bottom + heightOffset;
          var viewportHeight = vScrollBottom - vScrollTop;
          var pxTop = this.heightScaler.getScrollPositionForPixel(rowTopPixel);
          var pxBottom = this.heightScaler.getScrollPositionForPixel(rowBottomPixel - viewportHeight);
          var pxMiddle = Math.min((pxTop + pxBottom) / 2, rowTopPixel);
          var rowAboveViewport = vScrollTop + stickyTopHeight > rowTopPixel;
          var rowBelowViewport = vScrollBottom < rowBottomPixel;
          var newScrollPosition = null;
          if (position === "top") {
            newScrollPosition = pxTop;
          } else if (position === "bottom") {
            newScrollPosition = pxBottom;
          } else if (position === "middle") {
            newScrollPosition = pxMiddle;
          } else if (rowAboveViewport) {
            newScrollPosition = pxTop - stickyTopHeight;
          } else if (rowBelowViewport) {
            newScrollPosition = pxBottom;
          }
          if (newScrollPosition !== null) {
            this.eBodyViewport.scrollTop = newScrollPosition;
            this.rowRenderer.redrawAfterScroll();
          }
          rowGotShiftedDuringOperation = startingRowTop !== rowNode.rowTop || startingRowHeight !== rowNode.rowHeight;
        } while (rowGotShiftedDuringOperation);
        this.animationFrameService.flushAllFrames();
      };
      GridBodyScrollFeature2.prototype.ensureColumnVisible = function(key, position) {
        if (position === void 0) {
          position = "auto";
        }
        var column = this.columnModel.getGridColumn(key);
        if (!column) {
          return;
        }
        if (column.isPinned()) {
          return;
        }
        if (!this.columnModel.isColumnDisplayed(column)) {
          return;
        }
        var newHorizontalScroll = this.getPositionedHorizontalScroll(column, position);
        if (newHorizontalScroll !== null) {
          this.centerRowContainerCtrl.setCenterViewportScrollLeft(newHorizontalScroll);
        }
        this.centerRowContainerCtrl.onHorizontalViewportChanged();
        this.animationFrameService.flushAllFrames();
      };
      GridBodyScrollFeature2.prototype.getPositionedHorizontalScroll = function(column, position) {
        var _a = this.isColumnOutsideViewport(column), columnBeforeStart = _a.columnBeforeStart, columnAfterEnd = _a.columnAfterEnd;
        var viewportTooSmallForColumn = this.centerRowContainerCtrl.getCenterWidth() < column.getActualWidth();
        var viewportWidth = this.centerRowContainerCtrl.getCenterWidth();
        var isRtl = this.enableRtl;
        var alignColToStart = (isRtl ? columnBeforeStart : columnAfterEnd) || viewportTooSmallForColumn;
        var alignColToEnd = isRtl ? columnAfterEnd : columnBeforeStart;
        if (position !== "auto") {
          alignColToStart = position === "start";
          alignColToEnd = position === "end";
        }
        var isMiddle = position === "middle";
        if (alignColToStart || alignColToEnd || isMiddle) {
          var _b = this.getColumnBounds(column), colLeft = _b.colLeft, colMiddle = _b.colMiddle, colRight = _b.colRight;
          if (isMiddle) {
            return colMiddle - viewportWidth / 2;
          }
          if (alignColToStart) {
            return isRtl ? colRight : colLeft;
          }
          return isRtl ? colLeft - viewportWidth : colRight - viewportWidth;
        }
        return null;
      };
      GridBodyScrollFeature2.prototype.isColumnOutsideViewport = function(column) {
        var _a = this.getViewportBounds(), viewportStart = _a.start, viewportEnd = _a.end;
        var _b = this.getColumnBounds(column), colLeft = _b.colLeft, colRight = _b.colRight;
        var isRtl = this.enableRtl;
        var columnBeforeStart = isRtl ? viewportStart > colRight : viewportEnd < colRight;
        var columnAfterEnd = isRtl ? viewportEnd < colLeft : viewportStart > colLeft;
        return { columnBeforeStart, columnAfterEnd };
      };
      GridBodyScrollFeature2.prototype.getColumnBounds = function(column) {
        var isRtl = this.enableRtl;
        var bodyWidth = this.columnModel.getBodyContainerWidth();
        var colWidth = column.getActualWidth();
        var colLeft = column.getLeft();
        var multiplier = isRtl ? -1 : 1;
        var colLeftPixel = isRtl ? bodyWidth - colLeft : colLeft;
        var colRightPixel = colLeftPixel + colWidth * multiplier;
        var colMidPixel = colLeftPixel + colWidth / 2 * multiplier;
        return { colLeft: colLeftPixel, colMiddle: colMidPixel, colRight: colRightPixel };
      };
      GridBodyScrollFeature2.prototype.getViewportBounds = function() {
        var viewportWidth = this.centerRowContainerCtrl.getCenterWidth();
        var scrollPosition = this.centerRowContainerCtrl.getCenterViewportScrollLeft();
        var viewportStartPixel = scrollPosition;
        var viewportEndPixel = viewportWidth + scrollPosition;
        return { start: viewportStartPixel, end: viewportEndPixel, width: viewportWidth };
      };
      __decorate$1R([
        Autowired("ctrlsService")
      ], GridBodyScrollFeature2.prototype, "ctrlsService", void 0);
      __decorate$1R([
        Autowired("animationFrameService")
      ], GridBodyScrollFeature2.prototype, "animationFrameService", void 0);
      __decorate$1R([
        Autowired("paginationProxy")
      ], GridBodyScrollFeature2.prototype, "paginationProxy", void 0);
      __decorate$1R([
        Autowired("rowModel")
      ], GridBodyScrollFeature2.prototype, "rowModel", void 0);
      __decorate$1R([
        Autowired("rowContainerHeightService")
      ], GridBodyScrollFeature2.prototype, "heightScaler", void 0);
      __decorate$1R([
        Autowired("rowRenderer")
      ], GridBodyScrollFeature2.prototype, "rowRenderer", void 0);
      __decorate$1R([
        Autowired("columnModel")
      ], GridBodyScrollFeature2.prototype, "columnModel", void 0);
      __decorate$1R([
        PostConstruct
      ], GridBodyScrollFeature2.prototype, "postConstruct", null);
      return GridBodyScrollFeature2;
    }(BeanStub);
    AutoScrollService = function() {
      function AutoScrollService2(params) {
        this.tickingInterval = null;
        this.onScrollCallback = null;
        this.scrollContainer = params.scrollContainer;
        this.scrollHorizontally = params.scrollAxis.indexOf("x") !== -1;
        this.scrollVertically = params.scrollAxis.indexOf("y") !== -1;
        this.scrollByTick = params.scrollByTick != null ? params.scrollByTick : 20;
        if (params.onScrollCallback) {
          this.onScrollCallback = params.onScrollCallback;
        }
        if (this.scrollVertically) {
          this.getVerticalPosition = params.getVerticalPosition;
          this.setVerticalPosition = params.setVerticalPosition;
        }
        if (this.scrollHorizontally) {
          this.getHorizontalPosition = params.getHorizontalPosition;
          this.setHorizontalPosition = params.setHorizontalPosition;
        }
        this.shouldSkipVerticalScroll = params.shouldSkipVerticalScroll || function() {
          return false;
        };
        this.shouldSkipHorizontalScroll = params.shouldSkipHorizontalScroll || function() {
          return false;
        };
      }
      AutoScrollService2.prototype.check = function(mouseEvent, forceSkipVerticalScroll) {
        if (forceSkipVerticalScroll === void 0) {
          forceSkipVerticalScroll = false;
        }
        var skipVerticalScroll = forceSkipVerticalScroll || this.shouldSkipVerticalScroll();
        if (skipVerticalScroll && this.shouldSkipHorizontalScroll()) {
          return;
        }
        var rect = this.scrollContainer.getBoundingClientRect();
        var scrollTick = this.scrollByTick;
        this.tickLeft = mouseEvent.clientX < rect.left + scrollTick;
        this.tickRight = mouseEvent.clientX > rect.right - scrollTick;
        this.tickUp = mouseEvent.clientY < rect.top + scrollTick && !skipVerticalScroll;
        this.tickDown = mouseEvent.clientY > rect.bottom - scrollTick && !skipVerticalScroll;
        if (this.tickLeft || this.tickRight || this.tickUp || this.tickDown) {
          this.ensureTickingStarted();
        } else {
          this.ensureCleared();
        }
      };
      AutoScrollService2.prototype.ensureTickingStarted = function() {
        if (this.tickingInterval === null) {
          this.tickingInterval = window.setInterval(this.doTick.bind(this), 100);
          this.tickCount = 0;
        }
      };
      AutoScrollService2.prototype.doTick = function() {
        this.tickCount++;
        var tickAmount;
        tickAmount = this.tickCount > 20 ? 200 : this.tickCount > 10 ? 80 : 40;
        if (this.scrollVertically) {
          var vScrollPosition = this.getVerticalPosition();
          if (this.tickUp) {
            this.setVerticalPosition(vScrollPosition - tickAmount);
          }
          if (this.tickDown) {
            this.setVerticalPosition(vScrollPosition + tickAmount);
          }
        }
        if (this.scrollHorizontally) {
          var hScrollPosition = this.getHorizontalPosition();
          if (this.tickLeft) {
            this.setHorizontalPosition(hScrollPosition - tickAmount);
          }
          if (this.tickRight) {
            this.setHorizontalPosition(hScrollPosition + tickAmount);
          }
        }
        if (this.onScrollCallback) {
          this.onScrollCallback();
        }
      };
      AutoScrollService2.prototype.ensureCleared = function() {
        if (this.tickingInterval) {
          window.clearInterval(this.tickingInterval);
          this.tickingInterval = null;
        }
      };
      return AutoScrollService2;
    }();
    __extends$21 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign$6 = function() {
      __assign$6 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$6.apply(this, arguments);
    };
    __decorate$1Q = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __read$i = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread$e = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read$i(arguments[i]));
      return ar;
    };
    RowDragFeature = function(_super) {
      __extends$21(RowDragFeature2, _super);
      function RowDragFeature2(eContainer) {
        var _this = _super.call(this) || this;
        _this.isMultiRowDrag = false;
        _this.isGridSorted = false;
        _this.isGridFiltered = false;
        _this.isRowGroupActive = false;
        _this.eContainer = eContainer;
        return _this;
      }
      RowDragFeature2.prototype.postConstruct = function() {
        var _this = this;
        if (this.gridOptionsWrapper.isRowModelDefault()) {
          this.clientSideRowModel = this.rowModel;
        }
        var refreshStatus = function() {
          _this.onSortChanged();
          _this.onFilterChanged();
          _this.onRowGroupChanged();
        };
        this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.onRowGroupChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, function() {
          refreshStatus();
        });
        refreshStatus();
        this.ctrlsService.whenReady(function() {
          var gridBodyCon = _this.ctrlsService.getGridBodyCtrl();
          _this.autoScrollService = new AutoScrollService({
            scrollContainer: gridBodyCon.getBodyViewportElement(),
            scrollAxis: "y",
            getVerticalPosition: function() {
              return gridBodyCon.getScrollFeature().getVScrollPosition().top;
            },
            setVerticalPosition: function(position) {
              return gridBodyCon.getScrollFeature().setVerticalScrollPosition(position);
            },
            onScrollCallback: function() {
              _this.onDragging(_this.lastDraggingEvent);
            }
          });
        });
      };
      RowDragFeature2.prototype.onSortChanged = function() {
        this.isGridSorted = this.sortController.isSortActive();
      };
      RowDragFeature2.prototype.onFilterChanged = function() {
        this.isGridFiltered = this.filterManager.isAnyFilterPresent();
      };
      RowDragFeature2.prototype.onRowGroupChanged = function() {
        var rowGroups = this.columnModel.getRowGroupColumns();
        this.isRowGroupActive = !missingOrEmpty(rowGroups);
      };
      RowDragFeature2.prototype.getContainer = function() {
        return this.eContainer;
      };
      RowDragFeature2.prototype.isInterestedIn = function(type) {
        return type === DragSourceType.RowDrag;
      };
      RowDragFeature2.prototype.getIconName = function() {
        var managedDrag = this.gridOptionsWrapper.isRowDragManaged();
        if (managedDrag && this.shouldPreventRowMove()) {
          return DragAndDropService.ICON_NOT_ALLOWED;
        }
        return DragAndDropService.ICON_MOVE;
      };
      RowDragFeature2.prototype.shouldPreventRowMove = function() {
        return this.isGridSorted || this.isGridFiltered || this.isRowGroupActive;
      };
      RowDragFeature2.prototype.getRowNodes = function(draggingEvent) {
        var _this = this;
        if (!this.isFromThisGrid(draggingEvent)) {
          return draggingEvent.dragItem.rowNodes || [];
        }
        var isRowDragMultiRow = this.gridOptionsWrapper.isRowDragMultiRow();
        var selectedNodes = __spread$e(this.selectionService.getSelectedNodes()).sort(function(a, b) {
          if (a.rowIndex == null || b.rowIndex == null) {
            return 0;
          }
          return _this.getRowIndexNumber(a) - _this.getRowIndexNumber(b);
        });
        var currentNode = draggingEvent.dragItem.rowNode;
        if (isRowDragMultiRow && selectedNodes.indexOf(currentNode) !== -1) {
          this.isMultiRowDrag = true;
          return selectedNodes;
        }
        this.isMultiRowDrag = false;
        return [currentNode];
      };
      RowDragFeature2.prototype.onDragEnter = function(draggingEvent) {
        draggingEvent.dragItem.rowNodes = this.getRowNodes(draggingEvent);
        this.dispatchGridEvent(Events.EVENT_ROW_DRAG_ENTER, draggingEvent);
        this.getRowNodes(draggingEvent).forEach(function(rowNode) {
          rowNode.setDragging(true);
        });
        this.onEnterOrDragging(draggingEvent);
      };
      RowDragFeature2.prototype.onDragging = function(draggingEvent) {
        this.onEnterOrDragging(draggingEvent);
      };
      RowDragFeature2.prototype.isFromThisGrid = function(draggingEvent) {
        var dragSourceDomDataKey = draggingEvent.dragSource.dragSourceDomDataKey;
        return dragSourceDomDataKey === this.gridOptionsWrapper.getDomDataKey();
      };
      RowDragFeature2.prototype.isDropZoneWithinThisGrid = function(draggingEvent) {
        var gridBodyCon = this.ctrlsService.getGridBodyCtrl();
        var gridGui = gridBodyCon.getGui();
        var dropZoneTarget = draggingEvent.dropZoneTarget;
        return !gridGui.contains(dropZoneTarget);
      };
      RowDragFeature2.prototype.onEnterOrDragging = function(draggingEvent) {
        this.dispatchGridEvent(Events.EVENT_ROW_DRAG_MOVE, draggingEvent);
        this.lastDraggingEvent = draggingEvent;
        var pixel = this.mouseEventService.getNormalisedPosition(draggingEvent).y;
        var managedDrag = this.gridOptionsWrapper.isRowDragManaged();
        if (managedDrag) {
          this.doManagedDrag(draggingEvent, pixel);
        }
        this.autoScrollService.check(draggingEvent.event);
      };
      RowDragFeature2.prototype.doManagedDrag = function(draggingEvent, pixel) {
        var isFromThisGrid = this.isFromThisGrid(draggingEvent);
        var managedDrag = this.gridOptionsWrapper.isRowDragManaged();
        var rowNodes = draggingEvent.dragItem.rowNodes;
        if (managedDrag && this.shouldPreventRowMove()) {
          return;
        }
        if (this.gridOptionsWrapper.isSuppressMoveWhenRowDragging() || !isFromThisGrid) {
          if (!this.isDropZoneWithinThisGrid(draggingEvent)) {
            this.clientSideRowModel.highlightRowAtPixel(rowNodes[0], pixel);
          }
        } else {
          this.moveRows(rowNodes, pixel);
        }
      };
      RowDragFeature2.prototype.getRowIndexNumber = function(rowNode) {
        return parseInt(last(rowNode.getRowIndexString().split("-")), 10);
      };
      RowDragFeature2.prototype.moveRowAndClearHighlight = function(draggingEvent) {
        var _this = this;
        var lastHighlightedRowNode = this.clientSideRowModel.getLastHighlightedRowNode();
        var isBelow = lastHighlightedRowNode && lastHighlightedRowNode.highlighted === RowHighlightPosition.Below;
        var pixel = this.mouseEventService.getNormalisedPosition(draggingEvent).y;
        var rowNodes = draggingEvent.dragItem.rowNodes;
        var increment = isBelow ? 1 : 0;
        if (this.isFromThisGrid(draggingEvent)) {
          rowNodes.forEach(function(rowNode) {
            if (rowNode.rowTop < pixel) {
              increment -= 1;
            }
          });
          this.moveRows(rowNodes, pixel, increment);
        } else {
          var getRowIdFunc_1 = this.gridOptionsWrapper.getRowIdFunc();
          var addIndex = this.clientSideRowModel.getRowIndexAtPixel(pixel) + 1;
          if (this.clientSideRowModel.getHighlightPosition(pixel) === RowHighlightPosition.Above) {
            addIndex--;
          }
          this.clientSideRowModel.updateRowData({
            add: rowNodes.map(function(node) {
              return node.data;
            }).filter(function(data) {
              return !_this.clientSideRowModel.getRowNode(getRowIdFunc_1 ? getRowIdFunc_1({ data, level: 0 }) : data.id);
            }),
            addIndex
          });
        }
        this.clearRowHighlight();
      };
      RowDragFeature2.prototype.clearRowHighlight = function() {
        this.clientSideRowModel.highlightRowAtPixel(null);
      };
      RowDragFeature2.prototype.moveRows = function(rowNodes, pixel, increment) {
        if (increment === void 0) {
          increment = 0;
        }
        var rowWasMoved = this.clientSideRowModel.ensureRowsAtPixel(rowNodes, pixel, increment);
        if (rowWasMoved) {
          this.focusService.clearFocusedCell();
          if (this.rangeService) {
            this.rangeService.removeAllCellRanges();
          }
        }
      };
      RowDragFeature2.prototype.addRowDropZone = function(params) {
        var _this = this;
        if (!params.getContainer()) {
          doOnce(function() {
            return console.warn("AG Grid: addRowDropZone - A container target needs to be provided");
          }, "add-drop-zone-empty-target");
          return;
        }
        if (this.dragAndDropService.findExternalZone(params)) {
          console.warn("AG Grid: addRowDropZone - target already exists in the list of DropZones. Use `removeRowDropZone` before adding it again.");
          return;
        }
        var processedParams = {
          getContainer: params.getContainer
        };
        if (params.fromGrid) {
          params.fromGrid = void 0;
          processedParams = params;
        } else {
          if (params.onDragEnter) {
            processedParams.onDragEnter = function(e) {
              params.onDragEnter(_this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_ENTER, e));
            };
          }
          if (params.onDragLeave) {
            processedParams.onDragLeave = function(e) {
              params.onDragLeave(_this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_LEAVE, e));
            };
          }
          if (params.onDragging) {
            processedParams.onDragging = function(e) {
              params.onDragging(_this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_MOVE, e));
            };
          }
          if (params.onDragStop) {
            processedParams.onDragStop = function(e) {
              params.onDragStop(_this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_END, e));
            };
          }
        }
        this.dragAndDropService.addDropTarget(__assign$6({ isInterestedIn: function(type) {
          return type === DragSourceType.RowDrag;
        }, getIconName: function() {
          return DragAndDropService.ICON_MOVE;
        }, external: true }, processedParams));
      };
      RowDragFeature2.prototype.getRowDropZone = function(events) {
        var _this = this;
        var getContainer = this.getContainer.bind(this);
        var onDragEnter = this.onDragEnter.bind(this);
        var onDragLeave = this.onDragLeave.bind(this);
        var onDragging = this.onDragging.bind(this);
        var onDragStop = this.onDragStop.bind(this);
        if (!events) {
          return { getContainer, onDragEnter, onDragLeave, onDragging, onDragStop, fromGrid: true };
        }
        return {
          getContainer,
          onDragEnter: events.onDragEnter ? function(e) {
            onDragEnter(e);
            events.onDragEnter(_this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_ENTER, e));
          } : onDragEnter,
          onDragLeave: events.onDragLeave ? function(e) {
            onDragLeave(e);
            events.onDragLeave(_this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_LEAVE, e));
          } : onDragLeave,
          onDragging: events.onDragging ? function(e) {
            onDragging(e);
            events.onDragging(_this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_MOVE, e));
          } : onDragging,
          onDragStop: events.onDragStop ? function(e) {
            onDragStop(e);
            events.onDragStop(_this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_END, e));
          } : onDragStop,
          fromGrid: true
        };
      };
      RowDragFeature2.prototype.draggingToRowDragEvent = function(type, draggingEvent) {
        var yNormalised = this.mouseEventService.getNormalisedPosition(draggingEvent).y;
        var mouseIsPastLastRow = yNormalised > this.paginationProxy.getCurrentPageHeight();
        var overIndex = -1;
        var overNode;
        if (!mouseIsPastLastRow) {
          overIndex = this.rowModel.getRowIndexAtPixel(yNormalised);
          overNode = this.rowModel.getRow(overIndex);
        }
        var vDirectionString;
        switch (draggingEvent.vDirection) {
          case VerticalDirection.Down:
            vDirectionString = "down";
            break;
          case VerticalDirection.Up:
            vDirectionString = "up";
            break;
          default:
            vDirectionString = null;
            break;
        }
        var event = {
          type,
          api: this.gridOptionsWrapper.getApi(),
          columnApi: this.gridOptionsWrapper.getColumnApi(),
          context: this.gridOptionsWrapper.getContext(),
          event: draggingEvent.event,
          node: draggingEvent.dragItem.rowNode,
          nodes: draggingEvent.dragItem.rowNodes,
          overIndex,
          overNode,
          y: yNormalised,
          vDirection: vDirectionString
        };
        return event;
      };
      RowDragFeature2.prototype.dispatchGridEvent = function(type, draggingEvent) {
        var event = this.draggingToRowDragEvent(type, draggingEvent);
        this.eventService.dispatchEvent(event);
      };
      RowDragFeature2.prototype.onDragLeave = function(draggingEvent) {
        this.dispatchGridEvent(Events.EVENT_ROW_DRAG_LEAVE, draggingEvent);
        this.stopDragging(draggingEvent);
        if (this.gridOptionsWrapper.isRowDragManaged()) {
          this.clearRowHighlight();
        }
        if (this.isFromThisGrid(draggingEvent)) {
          this.isMultiRowDrag = false;
        }
      };
      RowDragFeature2.prototype.onDragStop = function(draggingEvent) {
        this.dispatchGridEvent(Events.EVENT_ROW_DRAG_END, draggingEvent);
        this.stopDragging(draggingEvent);
        if (this.gridOptionsWrapper.isRowDragManaged() && (this.gridOptionsWrapper.isSuppressMoveWhenRowDragging() || !this.isFromThisGrid(draggingEvent)) && !this.isDropZoneWithinThisGrid(draggingEvent)) {
          this.moveRowAndClearHighlight(draggingEvent);
        }
      };
      RowDragFeature2.prototype.stopDragging = function(draggingEvent) {
        this.autoScrollService.ensureCleared();
        this.getRowNodes(draggingEvent).forEach(function(rowNode) {
          rowNode.setDragging(false);
        });
      };
      __decorate$1Q([
        Autowired("dragAndDropService")
      ], RowDragFeature2.prototype, "dragAndDropService", void 0);
      __decorate$1Q([
        Autowired("rowModel")
      ], RowDragFeature2.prototype, "rowModel", void 0);
      __decorate$1Q([
        Autowired("paginationProxy")
      ], RowDragFeature2.prototype, "paginationProxy", void 0);
      __decorate$1Q([
        Autowired("columnModel")
      ], RowDragFeature2.prototype, "columnModel", void 0);
      __decorate$1Q([
        Autowired("focusService")
      ], RowDragFeature2.prototype, "focusService", void 0);
      __decorate$1Q([
        Autowired("sortController")
      ], RowDragFeature2.prototype, "sortController", void 0);
      __decorate$1Q([
        Autowired("filterManager")
      ], RowDragFeature2.prototype, "filterManager", void 0);
      __decorate$1Q([
        Autowired("selectionService")
      ], RowDragFeature2.prototype, "selectionService", void 0);
      __decorate$1Q([
        Autowired("mouseEventService")
      ], RowDragFeature2.prototype, "mouseEventService", void 0);
      __decorate$1Q([
        Autowired("ctrlsService")
      ], RowDragFeature2.prototype, "ctrlsService", void 0);
      __decorate$1Q([
        Optional("rangeService")
      ], RowDragFeature2.prototype, "rangeService", void 0);
      __decorate$1Q([
        PostConstruct
      ], RowDragFeature2.prototype, "postConstruct", null);
      return RowDragFeature2;
    }(BeanStub);
    __extends$20 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1P = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    (function(RowAnimationCssClasses2) {
      RowAnimationCssClasses2["ANIMATION_ON"] = "ag-row-animation";
      RowAnimationCssClasses2["ANIMATION_OFF"] = "ag-row-no-animation";
    })(RowAnimationCssClasses || (RowAnimationCssClasses = {}));
    CSS_CLASS_CELL_SELECTABLE = "ag-selectable";
    CSS_CLASS_FORCE_VERTICAL_SCROLL = "ag-force-vertical-scroll";
    CSS_CLASS_COLUMN_MOVING = "ag-column-moving";
    GridBodyCtrl = function(_super) {
      __extends$20(GridBodyCtrl2, _super);
      function GridBodyCtrl2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.stickyTopHeight = 0;
        return _this;
      }
      GridBodyCtrl2.prototype.getScrollFeature = function() {
        return this.bodyScrollFeature;
      };
      GridBodyCtrl2.prototype.getBodyViewportElement = function() {
        return this.eBodyViewport;
      };
      GridBodyCtrl2.prototype.setComp = function(comp, eGridBody, eBodyViewport, eTop, eBottom, eStickyTop) {
        this.comp = comp;
        this.eGridBody = eGridBody;
        this.eBodyViewport = eBodyViewport;
        this.eTop = eTop;
        this.eBottom = eBottom;
        this.eStickyTop = eStickyTop;
        this.setCellTextSelection(this.gridOptionsWrapper.isEnableCellTextSelect());
        this.createManagedBean(new LayoutFeature(this.comp));
        this.bodyScrollFeature = this.createManagedBean(new GridBodyScrollFeature(this.eBodyViewport));
        this.addRowDragListener();
        this.setupRowAnimationCssClass();
        this.addEventListeners();
        this.addFocusListeners([eTop, eBodyViewport, eBottom, eStickyTop]);
        this.onGridColumnsChanged();
        this.addBodyViewportListener();
        this.setFloatingHeights();
        this.disableBrowserDragging();
        this.addStopEditingWhenGridLosesFocus();
        this.ctrlsService.registerGridBodyCtrl(this);
      };
      GridBodyCtrl2.prototype.getComp = function() {
        return this.comp;
      };
      GridBodyCtrl2.prototype.addEventListeners = function() {
        this.addManagedListener(this.eventService, Events.EVENT_GRID_COLUMNS_CHANGED, this.onGridColumnsChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, this.onScrollVisibilityChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_PINNED_ROW_DATA_CHANGED, this.onPinnedRowDataChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_HEADER_HEIGHT_CHANGED, this.onHeaderHeightChanged.bind(this));
      };
      GridBodyCtrl2.prototype.addFocusListeners = function(elements) {
        var _this = this;
        elements.forEach(function(element) {
          _this.addManagedListener(element, "focusin", function(e) {
            var target = e.target;
            var isFocusedElementNested = isElementChildOfClass(target, "ag-root", element);
            element.classList.toggle("ag-has-focus", !isFocusedElementNested);
          });
          _this.addManagedListener(element, "focusout", function(e) {
            var target = e.target, relatedTarget = e.relatedTarget;
            var gridContainRelatedTarget = element.contains(relatedTarget);
            var isNestedRelatedTarget = isElementChildOfClass(relatedTarget, "ag-root", element);
            var isNestedTarget = isElementChildOfClass(target, "ag-root", element);
            if (isNestedTarget) {
              return;
            }
            if (!gridContainRelatedTarget || isNestedRelatedTarget) {
              element.classList.remove("ag-has-focus");
            }
          });
        });
      };
      GridBodyCtrl2.prototype.setColumnMovingCss = function(moving) {
        this.comp.setColumnMovingCss(moving ? CSS_CLASS_COLUMN_MOVING : null, moving);
      };
      GridBodyCtrl2.prototype.setCellTextSelection = function(selectable) {
        if (selectable === void 0) {
          selectable = false;
        }
        var cssClass = selectable ? CSS_CLASS_CELL_SELECTABLE : null;
        this.comp.setCellSelectableCss(cssClass, selectable);
      };
      GridBodyCtrl2.prototype.onScrollVisibilityChanged = function() {
        var visible = this.scrollVisibleService.isVerticalScrollShowing();
        this.setVerticalScrollPaddingVisible(visible);
        this.setStickyTopWidth(visible);
      };
      GridBodyCtrl2.prototype.onGridColumnsChanged = function() {
        var columns = this.columnModel.getAllGridColumns();
        this.comp.setColumnCount(columns ? columns.length : 0);
      };
      GridBodyCtrl2.prototype.disableBrowserDragging = function() {
        this.addManagedListener(this.eGridBody, "dragstart", function(event) {
          if (event.target instanceof HTMLImageElement) {
            event.preventDefault();
            return false;
          }
        });
      };
      GridBodyCtrl2.prototype.addStopEditingWhenGridLosesFocus = function() {
        var _this = this;
        if (!this.gridOptionsWrapper.isStopEditingWhenCellsLoseFocus()) {
          return;
        }
        var focusOutListener = function(event) {
          var elementWithFocus = event.relatedTarget;
          if (getTabIndex(elementWithFocus) === null) {
            _this.rowRenderer.stopEditing();
            return;
          }
          var clickInsideGrid = viewports.some(function(viewport) {
            return viewport.contains(elementWithFocus);
          }) && _this.mouseEventService.isElementInThisGrid(elementWithFocus);
          if (!clickInsideGrid) {
            var popupService = _this.popupService;
            clickInsideGrid = popupService.getActivePopups().some(function(popup) {
              return popup.contains(elementWithFocus);
            }) || popupService.isElementWithinCustomPopup(elementWithFocus);
          }
          if (!clickInsideGrid) {
            _this.rowRenderer.stopEditing();
          }
        };
        var viewports = [this.eBodyViewport, this.eBottom, this.eTop, this.eStickyTop];
        viewports.forEach(function(viewport) {
          return _this.addManagedListener(viewport, "focusout", focusOutListener);
        });
      };
      GridBodyCtrl2.prototype.updateRowCount = function() {
        var headerCount = this.headerNavigationService.getHeaderRowCount();
        var rowCount = this.rowModel.isLastRowIndexKnown() ? this.rowModel.getRowCount() : -1;
        var total = rowCount === -1 ? -1 : headerCount + rowCount;
        this.comp.setRowCount(total);
      };
      GridBodyCtrl2.prototype.registerBodyViewportResizeListener = function(listener) {
        this.comp.registerBodyViewportResizeListener(listener);
      };
      GridBodyCtrl2.prototype.setVerticalScrollPaddingVisible = function(visible) {
        var overflowY = visible ? "scroll" : "hidden";
        this.comp.setPinnedTopBottomOverflowY(overflowY);
      };
      GridBodyCtrl2.prototype.isVerticalScrollShowing = function() {
        var show = this.gridOptionsWrapper.isAlwaysShowVerticalScroll();
        var cssClass = show ? CSS_CLASS_FORCE_VERTICAL_SCROLL : null;
        var allowVerticalScroll = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_NORMAL;
        this.comp.setAlwaysVerticalScrollClass(cssClass, show);
        return show || allowVerticalScroll && isVerticalScrollShowing(this.eBodyViewport);
      };
      GridBodyCtrl2.prototype.setupRowAnimationCssClass = function() {
        var _this = this;
        var listener = function() {
          var animateRows = _this.gridOptionsWrapper.isAnimateRows() && !_this.rowContainerHeightService.isStretching();
          var animateRowsCssClass = animateRows ? RowAnimationCssClasses.ANIMATION_ON : RowAnimationCssClasses.ANIMATION_OFF;
          _this.comp.setRowAnimationCssOnBodyViewport(animateRowsCssClass, animateRows);
        };
        listener();
        this.addManagedListener(this.eventService, Events.EVENT_HEIGHT_SCALE_CHANGED, listener);
      };
      GridBodyCtrl2.prototype.getGridBodyElement = function() {
        return this.eGridBody;
      };
      GridBodyCtrl2.prototype.addBodyViewportListener = function() {
        var _this = this;
        var listener = function(mouseEvent, touch, touchEvent) {
          if (!mouseEvent && !touchEvent) {
            return;
          }
          if (_this.gridOptionsWrapper.isPreventDefaultOnContextMenu()) {
            var event_1 = mouseEvent || touchEvent;
            event_1.preventDefault();
          }
          var target = (mouseEvent || touch).target;
          if (target === _this.eBodyViewport || target === _this.ctrlsService.getCenterRowContainerCtrl().getViewportElement()) {
            if (_this.contextMenuFactory) {
              if (mouseEvent) {
                _this.contextMenuFactory.onContextMenu(mouseEvent, null, null, null, null, _this.eGridBody);
              } else if (touchEvent) {
                _this.contextMenuFactory.onContextMenu(null, touchEvent, null, null, null, _this.eGridBody);
              }
            }
          }
        };
        this.addManagedListener(this.eBodyViewport, "contextmenu", listener);
        this.mockContextMenuForIPad(listener);
        this.addManagedListener(this.eBodyViewport, "wheel", this.onBodyViewportWheel.bind(this));
        this.addManagedListener(this.eStickyTop, "wheel", this.onStickyTopWheel.bind(this));
      };
      GridBodyCtrl2.prototype.mockContextMenuForIPad = function(listener) {
        if (!isIOSUserAgent()) {
          return;
        }
        var touchListener = new TouchListener(this.eBodyViewport);
        var longTapListener = function(event) {
          listener(void 0, event.touchStart, event.touchEvent);
        };
        this.addManagedListener(touchListener, TouchListener.EVENT_LONG_TAP, longTapListener);
        this.addDestroyFunc(function() {
          return touchListener.destroy();
        });
      };
      GridBodyCtrl2.prototype.onBodyViewportWheel = function(e) {
        if (!this.gridOptionsWrapper.isSuppressScrollWhenPopupsAreOpen()) {
          return;
        }
        if (this.popupService.hasAnchoredPopup()) {
          e.preventDefault();
        }
      };
      GridBodyCtrl2.prototype.onStickyTopWheel = function(e) {
        e.preventDefault();
        if (e.offsetY) {
          this.scrollVertically(e.deltaY);
        }
      };
      GridBodyCtrl2.prototype.getGui = function() {
        return this.eGridBody;
      };
      GridBodyCtrl2.prototype.scrollVertically = function(pixels) {
        var oldScrollPosition = this.eBodyViewport.scrollTop;
        this.bodyScrollFeature.setVerticalScrollPosition(oldScrollPosition + pixels);
        return this.eBodyViewport.scrollTop - oldScrollPosition;
      };
      GridBodyCtrl2.prototype.addRowDragListener = function() {
        this.rowDragFeature = this.createManagedBean(new RowDragFeature(this.eBodyViewport));
        this.dragAndDropService.addDropTarget(this.rowDragFeature);
      };
      GridBodyCtrl2.prototype.getRowDragFeature = function() {
        return this.rowDragFeature;
      };
      GridBodyCtrl2.prototype.onPinnedRowDataChanged = function() {
        this.setFloatingHeights();
      };
      GridBodyCtrl2.prototype.setFloatingHeights = function() {
        var pinnedRowModel = this.pinnedRowModel;
        var floatingTopHeight = pinnedRowModel.getPinnedTopTotalHeight();
        if (floatingTopHeight) {
          floatingTopHeight += 1;
        }
        var floatingBottomHeight = pinnedRowModel.getPinnedBottomTotalHeight();
        if (floatingBottomHeight) {
          floatingBottomHeight += 1;
        }
        this.comp.setTopHeight(floatingTopHeight);
        this.comp.setBottomHeight(floatingBottomHeight);
        this.comp.setTopDisplay(floatingTopHeight ? "inherit" : "none");
        this.comp.setBottomDisplay(floatingBottomHeight ? "inherit" : "none");
        this.setStickyTopOffsetTop();
      };
      GridBodyCtrl2.prototype.setStickyTopHeight = function(height) {
        if (height === void 0) {
          height = 0;
        }
        this.comp.setStickyTopHeight(height + "px");
        this.stickyTopHeight = height;
      };
      GridBodyCtrl2.prototype.getStickyTopHeight = function() {
        return this.stickyTopHeight;
      };
      GridBodyCtrl2.prototype.setStickyTopWidth = function(vScrollVisible) {
        if (!vScrollVisible) {
          this.comp.setStickyTopWidth("100%");
        } else {
          var scrollbarWidth = this.gridOptionsWrapper.getScrollbarWidth();
          this.comp.setStickyTopWidth("calc(100% - " + scrollbarWidth + "px)");
        }
      };
      GridBodyCtrl2.prototype.onHeaderHeightChanged = function() {
        this.setStickyTopOffsetTop();
      };
      GridBodyCtrl2.prototype.setStickyTopOffsetTop = function() {
        var headerCtrl = this.ctrlsService.getGridHeaderCtrl();
        var headerHeight = headerCtrl.getHeaderHeight();
        var pinnedTopHeight = this.pinnedRowModel.getPinnedTopTotalHeight();
        var height = 0;
        if (headerHeight > 0) {
          height += headerHeight + 1;
        }
        if (pinnedTopHeight > 0) {
          height += pinnedTopHeight + 1;
        }
        this.comp.setStickyTopTop(height + "px");
      };
      GridBodyCtrl2.prototype.sizeColumnsToFit = function(params, nextTimeout) {
        var _this = this;
        var removeScrollWidth = this.isVerticalScrollShowing();
        var scrollWidthToRemove = removeScrollWidth ? this.gridOptionsWrapper.getScrollbarWidth() : 0;
        var bodyViewportWidth = getInnerWidth(this.eBodyViewport);
        var availableWidth = bodyViewportWidth - scrollWidthToRemove;
        if (availableWidth > 0) {
          this.columnModel.sizeColumnsToFit(availableWidth, "sizeColumnsToFit", false, params);
          return;
        }
        if (nextTimeout === void 0) {
          window.setTimeout(function() {
            _this.sizeColumnsToFit(params, 100);
          }, 0);
        } else if (nextTimeout === 100) {
          window.setTimeout(function() {
            _this.sizeColumnsToFit(params, 500);
          }, 100);
        } else if (nextTimeout === 500) {
          window.setTimeout(function() {
            _this.sizeColumnsToFit(params, -1);
          }, 500);
        } else {
          console.warn("AG Grid: tried to call sizeColumnsToFit() but the grid is coming back with zero width, maybe the grid is not visible yet on the screen?");
        }
      };
      GridBodyCtrl2.prototype.addScrollEventListener = function(listener) {
        this.eBodyViewport.addEventListener("scroll", listener);
      };
      GridBodyCtrl2.prototype.removeScrollEventListener = function(listener) {
        this.eBodyViewport.removeEventListener("scroll", listener);
      };
      __decorate$1P([
        Autowired("rowContainerHeightService")
      ], GridBodyCtrl2.prototype, "rowContainerHeightService", void 0);
      __decorate$1P([
        Autowired("ctrlsService")
      ], GridBodyCtrl2.prototype, "ctrlsService", void 0);
      __decorate$1P([
        Autowired("columnModel")
      ], GridBodyCtrl2.prototype, "columnModel", void 0);
      __decorate$1P([
        Autowired("scrollVisibleService")
      ], GridBodyCtrl2.prototype, "scrollVisibleService", void 0);
      __decorate$1P([
        Optional("contextMenuFactory")
      ], GridBodyCtrl2.prototype, "contextMenuFactory", void 0);
      __decorate$1P([
        Autowired("headerNavigationService")
      ], GridBodyCtrl2.prototype, "headerNavigationService", void 0);
      __decorate$1P([
        Autowired("dragAndDropService")
      ], GridBodyCtrl2.prototype, "dragAndDropService", void 0);
      __decorate$1P([
        Autowired("pinnedRowModel")
      ], GridBodyCtrl2.prototype, "pinnedRowModel", void 0);
      __decorate$1P([
        Autowired("rowRenderer")
      ], GridBodyCtrl2.prototype, "rowRenderer", void 0);
      __decorate$1P([
        Autowired("popupService")
      ], GridBodyCtrl2.prototype, "popupService", void 0);
      __decorate$1P([
        Autowired("mouseEventService")
      ], GridBodyCtrl2.prototype, "mouseEventService", void 0);
      __decorate$1P([
        Autowired("rowModel")
      ], GridBodyCtrl2.prototype, "rowModel", void 0);
      return GridBodyCtrl2;
    }(BeanStub);
    (function(SelectionHandleType2) {
      SelectionHandleType2[SelectionHandleType2["FILL"] = 0] = "FILL";
      SelectionHandleType2[SelectionHandleType2["RANGE"] = 1] = "RANGE";
    })(SelectionHandleType || (SelectionHandleType = {}));
    (function(CellRangeType2) {
      CellRangeType2[CellRangeType2["VALUE"] = 0] = "VALUE";
      CellRangeType2[CellRangeType2["DIMENSION"] = 1] = "DIMENSION";
    })(CellRangeType || (CellRangeType = {}));
    CSS_CELL_RANGE_SELECTED = "ag-cell-range-selected";
    CSS_CELL_RANGE_CHART = "ag-cell-range-chart";
    CSS_CELL_RANGE_SINGLE_CELL = "ag-cell-range-single-cell";
    CSS_CELL_RANGE_CHART_CATEGORY = "ag-cell-range-chart-category";
    CSS_CELL_RANGE_HANDLE = "ag-cell-range-handle";
    CSS_CELL_RANGE_TOP = "ag-cell-range-top";
    CSS_CELL_RANGE_RIGHT = "ag-cell-range-right";
    CSS_CELL_RANGE_BOTTOM = "ag-cell-range-bottom";
    CSS_CELL_RANGE_LEFT = "ag-cell-range-left";
    CellRangeFeature = function() {
      function CellRangeFeature2(beans, ctrl) {
        this.beans = beans;
        this.cellCtrl = ctrl;
      }
      CellRangeFeature2.prototype.setComp = function(cellComp, eGui) {
        this.cellComp = cellComp;
        this.eGui = eGui;
        this.onRangeSelectionChanged();
      };
      CellRangeFeature2.prototype.onRangeSelectionChanged = function() {
        if (!this.cellComp) {
          return;
        }
        this.rangeCount = this.beans.rangeService.getCellRangeCount(this.cellCtrl.getCellPosition());
        this.hasChartRange = this.getHasChartRange();
        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_SELECTED, this.rangeCount !== 0);
        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_SELECTED + "-1", this.rangeCount === 1);
        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_SELECTED + "-2", this.rangeCount === 2);
        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_SELECTED + "-3", this.rangeCount === 3);
        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_SELECTED + "-4", this.rangeCount >= 4);
        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_CHART, this.hasChartRange);
        setAriaSelected(this.eGui, this.rangeCount > 0 ? true : void 0);
        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_SINGLE_CELL, this.isSingleCell());
        this.updateRangeBorders();
        this.refreshHandle();
      };
      CellRangeFeature2.prototype.updateRangeBorders = function() {
        var rangeBorders = this.getRangeBorders();
        var isSingleCell = this.isSingleCell();
        var isTop = !isSingleCell && rangeBorders.top;
        var isRight = !isSingleCell && rangeBorders.right;
        var isBottom = !isSingleCell && rangeBorders.bottom;
        var isLeft = !isSingleCell && rangeBorders.left;
        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_TOP, isTop);
        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_RIGHT, isRight);
        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_BOTTOM, isBottom);
        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_LEFT, isLeft);
      };
      CellRangeFeature2.prototype.isSingleCell = function() {
        var rangeService = this.beans.rangeService;
        return this.rangeCount === 1 && rangeService && !rangeService.isMoreThanOneCell();
      };
      CellRangeFeature2.prototype.getHasChartRange = function() {
        var rangeService = this.beans.rangeService;
        if (!this.rangeCount || !rangeService) {
          return false;
        }
        var cellRanges = rangeService.getCellRanges();
        return cellRanges.length > 0 && cellRanges.every(function(range) {
          return includes([CellRangeType.DIMENSION, CellRangeType.VALUE], range.type);
        });
      };
      CellRangeFeature2.prototype.updateRangeBordersIfRangeCount = function() {
        if (this.rangeCount > 0) {
          this.updateRangeBorders();
          this.refreshHandle();
        }
      };
      CellRangeFeature2.prototype.getRangeBorders = function() {
        var _this = this;
        var isRtl = this.beans.gridOptionsWrapper.isEnableRtl();
        var top = false;
        var right = false;
        var bottom = false;
        var left = false;
        var thisCol = this.cellCtrl.getCellPosition().column;
        var _a = this.beans, rangeService = _a.rangeService, columnModel = _a.columnModel;
        var leftCol;
        var rightCol;
        if (isRtl) {
          leftCol = columnModel.getDisplayedColAfter(thisCol);
          rightCol = columnModel.getDisplayedColBefore(thisCol);
        } else {
          leftCol = columnModel.getDisplayedColBefore(thisCol);
          rightCol = columnModel.getDisplayedColAfter(thisCol);
        }
        var ranges = rangeService.getCellRanges().filter(function(range2) {
          return rangeService.isCellInSpecificRange(_this.cellCtrl.getCellPosition(), range2);
        });
        if (!leftCol) {
          left = true;
        }
        if (!rightCol) {
          right = true;
        }
        for (var i = 0; i < ranges.length; i++) {
          if (top && right && bottom && left) {
            break;
          }
          var range = ranges[i];
          var startRow = rangeService.getRangeStartRow(range);
          var endRow = rangeService.getRangeEndRow(range);
          if (!top && this.beans.rowPositionUtils.sameRow(startRow, this.cellCtrl.getCellPosition())) {
            top = true;
          }
          if (!bottom && this.beans.rowPositionUtils.sameRow(endRow, this.cellCtrl.getCellPosition())) {
            bottom = true;
          }
          if (!left && leftCol && range.columns.indexOf(leftCol) < 0) {
            left = true;
          }
          if (!right && rightCol && range.columns.indexOf(rightCol) < 0) {
            right = true;
          }
        }
        return { top, right, bottom, left };
      };
      CellRangeFeature2.prototype.refreshHandle = function() {
        if (!this.beans.rangeService) {
          return;
        }
        var shouldHaveSelectionHandle = this.shouldHaveSelectionHandle();
        if (this.selectionHandle && !shouldHaveSelectionHandle) {
          this.selectionHandle = this.beans.context.destroyBean(this.selectionHandle);
        }
        if (shouldHaveSelectionHandle) {
          this.addSelectionHandle();
        }
        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_HANDLE, !!this.selectionHandle);
      };
      CellRangeFeature2.prototype.shouldHaveSelectionHandle = function() {
        var _a = this.beans, gridOptionsWrapper = _a.gridOptionsWrapper, rangeService = _a.rangeService;
        var cellRanges = rangeService.getCellRanges();
        var rangesLen = cellRanges.length;
        if (this.rangeCount < 1 || rangesLen < 1) {
          return false;
        }
        var cellRange = last(cellRanges);
        var cellPosition = this.cellCtrl.getCellPosition();
        var isFillHandleAvailable = gridOptionsWrapper.isEnableFillHandle() && !this.cellCtrl.isSuppressFillHandle();
        var isRangeHandleAvailable = gridOptionsWrapper.isEnableRangeHandle();
        var handleIsAvailable = rangesLen === 1 && !this.cellCtrl.isEditing() && (isFillHandleAvailable || isRangeHandleAvailable);
        if (this.hasChartRange) {
          var hasCategoryRange = cellRanges[0].type === CellRangeType.DIMENSION;
          var isCategoryCell = hasCategoryRange && rangeService.isCellInSpecificRange(cellPosition, cellRanges[0]);
          this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_CHART_CATEGORY, isCategoryCell);
          handleIsAvailable = cellRange.type === CellRangeType.VALUE;
        }
        return handleIsAvailable && cellRange.endRow != null && rangeService.isContiguousRange(cellRange) && rangeService.isBottomRightCell(cellRange, cellPosition);
      };
      CellRangeFeature2.prototype.addSelectionHandle = function() {
        var _a = this.beans, gridOptionsWrapper = _a.gridOptionsWrapper, rangeService = _a.rangeService;
        var cellRangeType = last(rangeService.getCellRanges()).type;
        var selectionHandleFill = gridOptionsWrapper.isEnableFillHandle() && missing(cellRangeType);
        var type = selectionHandleFill ? SelectionHandleType.FILL : SelectionHandleType.RANGE;
        if (this.selectionHandle && this.selectionHandle.getType() !== type) {
          this.selectionHandle = this.beans.context.destroyBean(this.selectionHandle);
        }
        if (!this.selectionHandle) {
          this.selectionHandle = this.beans.selectionHandleFactory.createSelectionHandle(type);
        }
        this.selectionHandle.refresh(this.cellCtrl);
      };
      CellRangeFeature2.prototype.destroy = function() {
        this.beans.context.destroyBean(this.selectionHandle);
      };
      return CellRangeFeature2;
    }();
    __extends$1$ = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    CellPositionFeature = function(_super) {
      __extends$1$(CellPositionFeature2, _super);
      function CellPositionFeature2(ctrl, beans) {
        var _this = _super.call(this) || this;
        _this.cellCtrl = ctrl;
        _this.beans = beans;
        _this.column = ctrl.getColumn();
        _this.rowNode = ctrl.getRowNode();
        _this.setupColSpan();
        _this.setupRowSpan();
        return _this;
      }
      CellPositionFeature2.prototype.setupRowSpan = function() {
        this.rowSpan = this.column.getRowSpan(this.rowNode);
      };
      CellPositionFeature2.prototype.setComp = function(eGui) {
        this.eGui = eGui;
        this.onLeftChanged();
        this.onWidthChanged();
        this.applyRowSpan();
      };
      CellPositionFeature2.prototype.onDisplayColumnsChanged = function() {
        var colsSpanning = this.getColSpanningList();
        if (!areEqual(this.colsSpanning, colsSpanning)) {
          this.colsSpanning = colsSpanning;
          this.onWidthChanged();
          this.onLeftChanged();
        }
      };
      CellPositionFeature2.prototype.setupColSpan = function() {
        if (this.column.getColDef().colSpan == null) {
          return;
        }
        this.colsSpanning = this.getColSpanningList();
        this.addManagedListener(this.beans.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayColumnsChanged.bind(this));
        this.addManagedListener(this.beans.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onWidthChanged.bind(this));
      };
      CellPositionFeature2.prototype.onWidthChanged = function() {
        if (!this.eGui) {
          return;
        }
        var width = this.getCellWidth();
        this.eGui.style.width = width + "px";
      };
      CellPositionFeature2.prototype.getCellWidth = function() {
        if (!this.colsSpanning) {
          return this.column.getActualWidth();
        }
        return this.colsSpanning.reduce(function(width, col) {
          return width + col.getActualWidth();
        }, 0);
      };
      CellPositionFeature2.prototype.getColSpanningList = function() {
        var colSpan = this.column.getColSpan(this.rowNode);
        var colsSpanning = [];
        if (colSpan === 1) {
          colsSpanning.push(this.column);
        } else {
          var pointer = this.column;
          var pinned = this.column.getPinned();
          for (var i = 0; pointer && i < colSpan; i++) {
            colsSpanning.push(pointer);
            pointer = this.beans.columnModel.getDisplayedColAfter(pointer);
            if (!pointer || missing(pointer)) {
              break;
            }
            if (pinned !== pointer.getPinned()) {
              break;
            }
          }
        }
        return colsSpanning;
      };
      CellPositionFeature2.prototype.onLeftChanged = function() {
        if (!this.eGui) {
          return;
        }
        var left = this.modifyLeftForPrintLayout(this.getCellLeft());
        this.eGui.style.left = left + "px";
      };
      CellPositionFeature2.prototype.getCellLeft = function() {
        var mostLeftCol;
        if (this.beans.gridOptionsWrapper.isEnableRtl() && this.colsSpanning) {
          mostLeftCol = last(this.colsSpanning);
        } else {
          mostLeftCol = this.column;
        }
        return mostLeftCol.getLeft();
      };
      CellPositionFeature2.prototype.modifyLeftForPrintLayout = function(leftPosition) {
        if (!this.cellCtrl.isPrintLayout() || this.column.getPinned() === Constants.PINNED_LEFT) {
          return leftPosition;
        }
        var leftWidth = this.beans.columnModel.getDisplayedColumnsLeftWidth();
        if (this.column.getPinned() === Constants.PINNED_RIGHT) {
          var bodyWidth = this.beans.columnModel.getBodyContainerWidth();
          return leftWidth + bodyWidth + (leftPosition || 0);
        }
        return leftWidth + (leftPosition || 0);
      };
      CellPositionFeature2.prototype.applyRowSpan = function() {
        if (this.rowSpan === 1) {
          return;
        }
        var singleRowHeight = this.beans.gridOptionsWrapper.getRowHeightAsNumber();
        var totalRowHeight = singleRowHeight * this.rowSpan;
        this.eGui.style.height = totalRowHeight + "px";
        this.eGui.style.zIndex = "1";
      };
      CellPositionFeature2.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
      };
      return CellPositionFeature2;
    }(BeanStub);
    __extends$1_ = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    CellCustomStyleFeature = function(_super) {
      __extends$1_(CellCustomStyleFeature2, _super);
      function CellCustomStyleFeature2(ctrl, beans) {
        var _this = _super.call(this) || this;
        _this.staticClasses = [];
        _this.cellCtrl = ctrl;
        _this.beans = beans;
        _this.column = ctrl.getColumn();
        _this.rowNode = ctrl.getRowNode();
        return _this;
      }
      CellCustomStyleFeature2.prototype.setComp = function(comp) {
        this.cellComp = comp;
        this.applyUserStyles();
        this.applyCellClassRules();
        this.applyClassesFromColDef();
      };
      CellCustomStyleFeature2.prototype.applyCellClassRules = function() {
        var _this = this;
        var colDef = this.column.getColDef();
        var cellClassParams = {
          value: this.cellCtrl.getValue(),
          data: this.rowNode.data,
          node: this.rowNode,
          colDef,
          column: this.column,
          rowIndex: this.rowNode.rowIndex,
          api: this.beans.gridOptionsWrapper.getApi(),
          columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
          context: this.beans.gridOptionsWrapper.getContext()
        };
        this.beans.stylingService.processClassRules(colDef.cellClassRules, cellClassParams, function(className) {
          return _this.cellComp.addOrRemoveCssClass(className, true);
        }, function(className) {
          return _this.cellComp.addOrRemoveCssClass(className, false);
        });
      };
      CellCustomStyleFeature2.prototype.applyUserStyles = function() {
        var colDef = this.column.getColDef();
        if (!colDef.cellStyle) {
          return;
        }
        var styles;
        if (typeof colDef.cellStyle === "function") {
          var cellStyleParams = {
            column: this.column,
            value: this.cellCtrl.getValue(),
            colDef,
            data: this.rowNode.data,
            node: this.rowNode,
            rowIndex: this.rowNode.rowIndex,
            api: this.beans.gridOptionsWrapper.getApi(),
            columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
            context: this.beans.gridOptionsWrapper.getContext()
          };
          var cellStyleFunc = colDef.cellStyle;
          styles = cellStyleFunc(cellStyleParams);
        } else {
          styles = colDef.cellStyle;
        }
        this.cellComp.setUserStyles(styles);
      };
      CellCustomStyleFeature2.prototype.applyClassesFromColDef = function() {
        var _this = this;
        var colDef = this.column.getColDef();
        var cellClassParams = {
          value: this.cellCtrl.getValue(),
          data: this.rowNode.data,
          node: this.rowNode,
          column: this.column,
          colDef,
          rowIndex: this.rowNode.rowIndex,
          api: this.beans.gridOptionsWrapper.getApi(),
          columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
          context: this.beans.gridOptionsWrapper.getContext()
        };
        if (this.staticClasses.length) {
          this.staticClasses.forEach(function(className) {
            return _this.cellComp.addOrRemoveCssClass(className, false);
          });
        }
        this.staticClasses = this.beans.stylingService.getStaticCellClasses(colDef, cellClassParams);
        if (this.staticClasses.length) {
          this.staticClasses.forEach(function(className) {
            return _this.cellComp.addOrRemoveCssClass(className, true);
          });
        }
      };
      CellCustomStyleFeature2.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
      };
      return CellCustomStyleFeature2;
    }(BeanStub);
    __extends$1Z = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    TooltipFeature = function(_super) {
      __extends$1Z(TooltipFeature2, _super);
      function TooltipFeature2(ctrl, beans) {
        var _this = _super.call(this) || this;
        _this.ctrl = ctrl;
        _this.beans = beans;
        return _this;
      }
      TooltipFeature2.prototype.setComp = function(comp) {
        this.comp = comp;
        this.setupTooltip();
      };
      TooltipFeature2.prototype.setupTooltip = function() {
        this.browserTooltips = this.beans.gridOptionsWrapper.isEnableBrowserTooltips();
        this.updateTooltipText();
        if (this.browserTooltips) {
          this.comp.setTitle(this.tooltip != null ? this.tooltip : void 0);
        } else {
          this.createTooltipFeatureIfNeeded();
        }
      };
      TooltipFeature2.prototype.updateTooltipText = function() {
        this.tooltip = this.ctrl.getTooltipValue();
      };
      TooltipFeature2.prototype.createTooltipFeatureIfNeeded = function() {
        var _this = this;
        if (this.genericTooltipFeature != null) {
          return;
        }
        var parent = {
          getTooltipParams: function() {
            return _this.getTooltipParams();
          },
          getGui: function() {
            return _this.ctrl.getGui();
          }
        };
        this.genericTooltipFeature = this.createManagedBean(new CustomTooltipFeature(parent), this.beans.context);
      };
      TooltipFeature2.prototype.refreshToolTip = function() {
        this.updateTooltipText();
        if (this.browserTooltips) {
          this.comp.setTitle(this.tooltip != null ? this.tooltip : void 0);
        }
      };
      TooltipFeature2.prototype.getTooltipParams = function() {
        var ctrl = this.ctrl;
        var column = ctrl.getColumn ? ctrl.getColumn() : void 0;
        var colDef = ctrl.getColDef ? ctrl.getColDef() : void 0;
        var rowNode = ctrl.getRowNode ? ctrl.getRowNode() : void 0;
        return {
          location: ctrl.getLocation(),
          colDef,
          column,
          rowIndex: ctrl.getRowIndex ? ctrl.getRowIndex() : void 0,
          node: rowNode,
          data: rowNode ? rowNode.data : void 0,
          value: this.getTooltipText(),
          valueFormatted: ctrl.getValueFormatted ? ctrl.getValueFormatted() : void 0
        };
      };
      TooltipFeature2.prototype.getTooltipText = function() {
        return this.tooltip;
      };
      TooltipFeature2.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
      };
      return TooltipFeature2;
    }(BeanStub);
    __decorate$1O = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Beans = function() {
      function Beans2() {
      }
      Beans2.prototype.postConstruct = function() {
        this.doingMasterDetail = this.gridOptionsWrapper.isMasterDetail();
        if (this.gridOptionsWrapper.isRowModelDefault()) {
          this.clientSideRowModel = this.rowModel;
        }
        if (this.gridOptionsWrapper.isRowModelServerSide()) {
          this.serverSideRowModel = this.rowModel;
        }
      };
      __decorate$1O([
        Autowired("resizeObserverService")
      ], Beans2.prototype, "resizeObserverService", void 0);
      __decorate$1O([
        Autowired("paginationProxy")
      ], Beans2.prototype, "paginationProxy", void 0);
      __decorate$1O([
        Autowired("context")
      ], Beans2.prototype, "context", void 0);
      __decorate$1O([
        Autowired("columnApi")
      ], Beans2.prototype, "columnApi", void 0);
      __decorate$1O([
        Autowired("gridApi")
      ], Beans2.prototype, "gridApi", void 0);
      __decorate$1O([
        Autowired("gridOptionsWrapper")
      ], Beans2.prototype, "gridOptionsWrapper", void 0);
      __decorate$1O([
        Autowired("expressionService")
      ], Beans2.prototype, "expressionService", void 0);
      __decorate$1O([
        Autowired("rowRenderer")
      ], Beans2.prototype, "rowRenderer", void 0);
      __decorate$1O([
        Autowired("templateService")
      ], Beans2.prototype, "templateService", void 0);
      __decorate$1O([
        Autowired("valueService")
      ], Beans2.prototype, "valueService", void 0);
      __decorate$1O([
        Autowired("eventService")
      ], Beans2.prototype, "eventService", void 0);
      __decorate$1O([
        Autowired("columnModel")
      ], Beans2.prototype, "columnModel", void 0);
      __decorate$1O([
        Autowired("headerNavigationService")
      ], Beans2.prototype, "headerNavigationService", void 0);
      __decorate$1O([
        Autowired("navigationService")
      ], Beans2.prototype, "navigationService", void 0);
      __decorate$1O([
        Autowired("columnAnimationService")
      ], Beans2.prototype, "columnAnimationService", void 0);
      __decorate$1O([
        Optional("rangeService")
      ], Beans2.prototype, "rangeService", void 0);
      __decorate$1O([
        Autowired("focusService")
      ], Beans2.prototype, "focusService", void 0);
      __decorate$1O([
        Optional("contextMenuFactory")
      ], Beans2.prototype, "contextMenuFactory", void 0);
      __decorate$1O([
        Autowired("popupService")
      ], Beans2.prototype, "popupService", void 0);
      __decorate$1O([
        Autowired("valueFormatterService")
      ], Beans2.prototype, "valueFormatterService", void 0);
      __decorate$1O([
        Autowired("stylingService")
      ], Beans2.prototype, "stylingService", void 0);
      __decorate$1O([
        Autowired("columnHoverService")
      ], Beans2.prototype, "columnHoverService", void 0);
      __decorate$1O([
        Autowired("userComponentFactory")
      ], Beans2.prototype, "userComponentFactory", void 0);
      __decorate$1O([
        Autowired("userComponentRegistry")
      ], Beans2.prototype, "userComponentRegistry", void 0);
      __decorate$1O([
        Autowired("animationFrameService")
      ], Beans2.prototype, "animationFrameService", void 0);
      __decorate$1O([
        Autowired("dragAndDropService")
      ], Beans2.prototype, "dragAndDropService", void 0);
      __decorate$1O([
        Autowired("sortController")
      ], Beans2.prototype, "sortController", void 0);
      __decorate$1O([
        Autowired("filterManager")
      ], Beans2.prototype, "filterManager", void 0);
      __decorate$1O([
        Autowired("rowContainerHeightService")
      ], Beans2.prototype, "rowContainerHeightService", void 0);
      __decorate$1O([
        Autowired("frameworkOverrides")
      ], Beans2.prototype, "frameworkOverrides", void 0);
      __decorate$1O([
        Autowired("cellPositionUtils")
      ], Beans2.prototype, "cellPositionUtils", void 0);
      __decorate$1O([
        Autowired("rowPositionUtils")
      ], Beans2.prototype, "rowPositionUtils", void 0);
      __decorate$1O([
        Autowired("selectionService")
      ], Beans2.prototype, "selectionService", void 0);
      __decorate$1O([
        Optional("selectionHandleFactory")
      ], Beans2.prototype, "selectionHandleFactory", void 0);
      __decorate$1O([
        Autowired("rowCssClassCalculator")
      ], Beans2.prototype, "rowCssClassCalculator", void 0);
      __decorate$1O([
        Autowired("rowModel")
      ], Beans2.prototype, "rowModel", void 0);
      __decorate$1O([
        Autowired("ctrlsService")
      ], Beans2.prototype, "ctrlsService", void 0);
      __decorate$1O([
        Autowired("ctrlsFactory")
      ], Beans2.prototype, "ctrlsFactory", void 0);
      __decorate$1O([
        Autowired("agStackComponentsRegistry")
      ], Beans2.prototype, "agStackComponentsRegistry", void 0);
      __decorate$1O([
        Autowired("valueCache")
      ], Beans2.prototype, "valueCache", void 0);
      __decorate$1O([
        Autowired("rowNodeEventThrottle")
      ], Beans2.prototype, "rowNodeEventThrottle", void 0);
      __decorate$1O([
        PostConstruct
      ], Beans2.prototype, "postConstruct", null);
      Beans2 = __decorate$1O([
        Bean("beans")
      ], Beans2);
      return Beans2;
    }();
    __extends$1Y = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    CellMouseListenerFeature = function(_super) {
      __extends$1Y(CellMouseListenerFeature2, _super);
      function CellMouseListenerFeature2(ctrl, beans, column) {
        var _this = _super.call(this) || this;
        _this.cellCtrl = ctrl;
        _this.beans = beans;
        _this.column = column;
        return _this;
      }
      CellMouseListenerFeature2.prototype.onMouseEvent = function(eventName, mouseEvent) {
        if (isStopPropagationForAgGrid(mouseEvent)) {
          return;
        }
        switch (eventName) {
          case "click":
            this.onCellClicked(mouseEvent);
            break;
          case "mousedown":
          case "touchstart":
            this.onMouseDown(mouseEvent);
            break;
          case "dblclick":
            this.onCellDoubleClicked(mouseEvent);
            break;
          case "mouseout":
            this.onMouseOut(mouseEvent);
            break;
          case "mouseover":
            this.onMouseOver(mouseEvent);
            break;
        }
      };
      CellMouseListenerFeature2.prototype.onCellClicked = function(mouseEvent) {
        if (this.isDoubleClickOnIPad()) {
          this.onCellDoubleClicked(mouseEvent);
          mouseEvent.preventDefault();
          return;
        }
        var _a = this.beans, eventService = _a.eventService, rangeService = _a.rangeService, gridOptionsWrapper = _a.gridOptionsWrapper;
        var multiKeyPressed = mouseEvent.ctrlKey || mouseEvent.metaKey;
        if (rangeService && multiKeyPressed) {
          if (rangeService.getCellRangeCount(this.cellCtrl.getCellPosition()) > 1) {
            rangeService.intersectLastRange(true);
          }
        }
        var cellClickedEvent = this.cellCtrl.createEvent(mouseEvent, Events.EVENT_CELL_CLICKED);
        eventService.dispatchEvent(cellClickedEvent);
        var colDef = this.column.getColDef();
        if (colDef.onCellClicked) {
          window.setTimeout(function() {
            return colDef.onCellClicked(cellClickedEvent);
          }, 0);
        }
        var editOnSingleClick = (gridOptionsWrapper.isSingleClickEdit() || colDef.singleClickEdit) && !gridOptionsWrapper.isSuppressClickEdit();
        if (editOnSingleClick) {
          this.cellCtrl.startRowOrCellEdit();
        }
      };
      CellMouseListenerFeature2.prototype.isDoubleClickOnIPad = function() {
        if (!isIOSUserAgent() || isEventSupported("dblclick")) {
          return false;
        }
        var nowMillis = new Date().getTime();
        var res = nowMillis - this.lastIPadMouseClickEvent < 200;
        this.lastIPadMouseClickEvent = nowMillis;
        return res;
      };
      CellMouseListenerFeature2.prototype.onCellDoubleClicked = function(mouseEvent) {
        var colDef = this.column.getColDef();
        var cellDoubleClickedEvent = this.cellCtrl.createEvent(mouseEvent, Events.EVENT_CELL_DOUBLE_CLICKED);
        this.beans.eventService.dispatchEvent(cellDoubleClickedEvent);
        if (typeof colDef.onCellDoubleClicked === "function") {
          window.setTimeout(function() {
            return colDef.onCellDoubleClicked(cellDoubleClickedEvent);
          }, 0);
        }
        var editOnDoubleClick = !this.beans.gridOptionsWrapper.isSingleClickEdit() && !this.beans.gridOptionsWrapper.isSuppressClickEdit();
        if (editOnDoubleClick) {
          this.cellCtrl.startRowOrCellEdit(null, null, mouseEvent);
        }
      };
      CellMouseListenerFeature2.prototype.onMouseDown = function(mouseEvent) {
        var ctrlKey = mouseEvent.ctrlKey, metaKey = mouseEvent.metaKey, shiftKey = mouseEvent.shiftKey;
        var target = mouseEvent.target;
        var _a = this.beans, eventService = _a.eventService, rangeService = _a.rangeService;
        if (this.isRightClickInExistingRange(mouseEvent)) {
          return;
        }
        var ranges = rangeService && rangeService.getCellRanges().length != 0;
        if (!shiftKey || !ranges) {
          var forceBrowserFocus = (isBrowserEdge() || isBrowserSafari()) && !this.cellCtrl.isEditing() && !isFocusableFormField(target);
          this.cellCtrl.focusCell(forceBrowserFocus);
        }
        if (shiftKey && ranges) {
          mouseEvent.preventDefault();
        }
        if (this.containsWidget(target)) {
          return;
        }
        if (rangeService) {
          var thisCell = this.cellCtrl.getCellPosition();
          if (shiftKey) {
            rangeService.extendLatestRangeToCell(thisCell);
          } else {
            var ctrlKeyPressed = ctrlKey || metaKey;
            rangeService.setRangeToCell(thisCell, ctrlKeyPressed);
          }
        }
        eventService.dispatchEvent(this.cellCtrl.createEvent(mouseEvent, Events.EVENT_CELL_MOUSE_DOWN));
      };
      CellMouseListenerFeature2.prototype.isRightClickInExistingRange = function(mouseEvent) {
        var rangeService = this.beans.rangeService;
        if (rangeService) {
          var cellInRange = rangeService.isCellInAnyRange(this.cellCtrl.getCellPosition());
          if (cellInRange && mouseEvent.button === 2) {
            return true;
          }
        }
        return false;
      };
      CellMouseListenerFeature2.prototype.containsWidget = function(target) {
        return isElementChildOfClass(target, "ag-selection-checkbox", 3);
      };
      CellMouseListenerFeature2.prototype.onMouseOut = function(mouseEvent) {
        if (this.mouseStayingInsideCell(mouseEvent)) {
          return;
        }
        var cellMouseOutEvent = this.cellCtrl.createEvent(mouseEvent, Events.EVENT_CELL_MOUSE_OUT);
        this.beans.eventService.dispatchEvent(cellMouseOutEvent);
        this.beans.columnHoverService.clearMouseOver();
      };
      CellMouseListenerFeature2.prototype.onMouseOver = function(mouseEvent) {
        if (this.mouseStayingInsideCell(mouseEvent)) {
          return;
        }
        var cellMouseOverEvent = this.cellCtrl.createEvent(mouseEvent, Events.EVENT_CELL_MOUSE_OVER);
        this.beans.eventService.dispatchEvent(cellMouseOverEvent);
        this.beans.columnHoverService.setMouseOver([this.column]);
      };
      CellMouseListenerFeature2.prototype.mouseStayingInsideCell = function(e) {
        if (!e.target || !e.relatedTarget) {
          return false;
        }
        var eGui = this.cellCtrl.getGui();
        var cellContainsTarget = eGui.contains(e.target);
        var cellContainsRelatedTarget = eGui.contains(e.relatedTarget);
        return cellContainsTarget && cellContainsRelatedTarget;
      };
      CellMouseListenerFeature2.prototype.destroy = function() {
      };
      return CellMouseListenerFeature2;
    }(Beans);
    __extends$1X = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    CellKeyboardListenerFeature = function(_super) {
      __extends$1X(CellKeyboardListenerFeature2, _super);
      function CellKeyboardListenerFeature2(ctrl, beans, column, rowNode, rowCtrl) {
        var _this = _super.call(this) || this;
        _this.cellCtrl = ctrl;
        _this.beans = beans;
        _this.rowNode = rowNode;
        _this.rowCtrl = rowCtrl;
        return _this;
      }
      CellKeyboardListenerFeature2.prototype.setComp = function(eGui) {
        this.eGui = eGui;
      };
      CellKeyboardListenerFeature2.prototype.onKeyDown = function(event) {
        var key = event.key;
        switch (key) {
          case KeyCode.ENTER:
            this.onEnterKeyDown(event);
            break;
          case KeyCode.F2:
            this.onF2KeyDown(event);
            break;
          case KeyCode.ESCAPE:
            this.onEscapeKeyDown(event);
            break;
          case KeyCode.TAB:
            this.onTabKeyDown(event);
            break;
          case KeyCode.BACKSPACE:
          case KeyCode.DELETE:
            this.onBackspaceOrDeleteKeyPressed(key, event);
            break;
          case KeyCode.DOWN:
          case KeyCode.UP:
          case KeyCode.RIGHT:
          case KeyCode.LEFT:
            this.onNavigationKeyPressed(event, key);
            break;
        }
      };
      CellKeyboardListenerFeature2.prototype.onNavigationKeyPressed = function(event, key) {
        if (this.cellCtrl.isEditing()) {
          return;
        }
        if (event.shiftKey && this.cellCtrl.isRangeSelectionEnabled()) {
          this.onShiftRangeSelect(event);
        } else {
          this.beans.navigationService.navigateToNextCell(event, key, this.cellCtrl.getCellPosition(), true);
        }
        event.preventDefault();
      };
      CellKeyboardListenerFeature2.prototype.onShiftRangeSelect = function(event) {
        if (!this.beans.rangeService) {
          return;
        }
        var endCell = this.beans.rangeService.extendLatestRangeInDirection(event);
        if (endCell) {
          this.beans.navigationService.ensureCellVisible(endCell);
        }
      };
      CellKeyboardListenerFeature2.prototype.onTabKeyDown = function(event) {
        this.beans.navigationService.onTabKeyDown(this.cellCtrl, event);
      };
      CellKeyboardListenerFeature2.prototype.onBackspaceOrDeleteKeyPressed = function(key, event) {
        var _a = this, cellCtrl = _a.cellCtrl, beans = _a.beans, rowNode = _a.rowNode;
        var gridOptionsWrapper = beans.gridOptionsWrapper, rangeService = beans.rangeService, eventService = beans.eventService;
        if (cellCtrl.isEditing()) {
          return;
        }
        eventService.dispatchEvent({ type: Events.EVENT_KEY_SHORTCUT_CHANGED_CELL_START });
        if (isDeleteKey(key, gridOptionsWrapper.isEnableCellEditingOnBackspace())) {
          if (rangeService && gridOptionsWrapper.isEnableRangeSelection()) {
            rangeService.clearCellRangeCellValues();
          } else if (cellCtrl.isCellEditable()) {
            rowNode.setDataValue(cellCtrl.getColumn(), null, "cellKeyboardListenerFeature");
          }
        } else {
          cellCtrl.startRowOrCellEdit(key, void 0, event);
        }
        eventService.dispatchEvent({ type: Events.EVENT_KEY_SHORTCUT_CHANGED_CELL_END });
      };
      CellKeyboardListenerFeature2.prototype.onEnterKeyDown = function(e) {
        if (this.cellCtrl.isEditing() || this.rowCtrl.isEditing()) {
          this.cellCtrl.stopEditingAndFocus();
        } else {
          if (this.beans.gridOptionsWrapper.isEnterMovesDown()) {
            this.beans.navigationService.navigateToNextCell(null, KeyCode.DOWN, this.cellCtrl.getCellPosition(), false);
          } else {
            this.cellCtrl.startRowOrCellEdit(KeyCode.ENTER, void 0, e);
            if (this.cellCtrl.isEditing()) {
              e.preventDefault();
            }
          }
        }
      };
      CellKeyboardListenerFeature2.prototype.onF2KeyDown = function(event) {
        if (!this.cellCtrl.isEditing()) {
          this.cellCtrl.startRowOrCellEdit(KeyCode.F2, void 0, event);
        }
      };
      CellKeyboardListenerFeature2.prototype.onEscapeKeyDown = function(event) {
        if (this.cellCtrl.isEditing()) {
          this.cellCtrl.stopRowOrCellEdit(true);
          this.cellCtrl.focusCell(true);
        }
      };
      CellKeyboardListenerFeature2.prototype.onKeyPress = function(event) {
        var eventTarget = event.target;
        var eventOnChildComponent = eventTarget !== this.eGui;
        if (eventOnChildComponent || this.cellCtrl.isEditing()) {
          return;
        }
        var pressedChar = String.fromCharCode(event.charCode);
        if (pressedChar === " ") {
          this.onSpaceKeyPressed(event);
        } else if (isEventFromPrintableCharacter(event)) {
          this.cellCtrl.startRowOrCellEdit(null, pressedChar, event);
          event.preventDefault();
        }
      };
      CellKeyboardListenerFeature2.prototype.onSpaceKeyPressed = function(event) {
        var gridOptionsWrapper = this.beans.gridOptionsWrapper;
        if (!this.cellCtrl.isEditing() && gridOptionsWrapper.isRowSelection()) {
          var currentSelection = this.rowNode.isSelected();
          var newSelection = !currentSelection;
          if (newSelection || !gridOptionsWrapper.isSuppressRowDeselection()) {
            var groupSelectsFiltered = this.beans.gridOptionsWrapper.isGroupSelectsFiltered();
            var updatedCount = this.rowNode.setSelectedParams({
              newValue: newSelection,
              rangeSelect: event.shiftKey,
              groupSelectsFiltered
            });
            if (currentSelection === void 0 && updatedCount === 0) {
              this.rowNode.setSelectedParams({
                newValue: false,
                rangeSelect: event.shiftKey,
                groupSelectsFiltered
              });
            }
          }
        }
        event.preventDefault();
      };
      CellKeyboardListenerFeature2.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
      };
      return CellKeyboardListenerFeature2;
    }(BeanStub);
    __extends$1W = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1N = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    DndSourceComp = function(_super) {
      __extends$1W(DndSourceComp2, _super);
      function DndSourceComp2(rowNode, column, beans, eCell) {
        var _this = _super.call(this, '<div class="ag-drag-handle ag-row-drag" draggable="true"></div>') || this;
        _this.rowNode = rowNode;
        _this.column = column;
        _this.beans = beans;
        _this.eCell = eCell;
        return _this;
      }
      DndSourceComp2.prototype.postConstruct = function() {
        var eGui = this.getGui();
        eGui.appendChild(createIconNoSpan("rowDrag", this.beans.gridOptionsWrapper, null));
        this.addGuiEventListener("mousedown", function(e) {
          e.stopPropagation();
        });
        this.addDragSource();
        this.checkVisibility();
      };
      DndSourceComp2.prototype.addDragSource = function() {
        this.addGuiEventListener("dragstart", this.onDragStart.bind(this));
      };
      DndSourceComp2.prototype.onDragStart = function(dragEvent) {
        var _this = this;
        var providedOnRowDrag = this.column.getColDef().dndSourceOnRowDrag;
        dragEvent.dataTransfer.setDragImage(this.eCell, 0, 0);
        var defaultOnRowDrag = function() {
          try {
            var jsonData = JSON.stringify(_this.rowNode.data);
            dragEvent.dataTransfer.setData("application/json", jsonData);
            dragEvent.dataTransfer.setData("text/plain", jsonData);
          } catch (e) {
          }
        };
        if (providedOnRowDrag) {
          var params = {
            rowNode: this.rowNode,
            dragEvent,
            api: this.gridOptionsWrapper.getApi(),
            columnApi: this.gridOptionsWrapper.getColumnApi(),
            context: this.gridOptionsWrapper.getContext()
          };
          providedOnRowDrag(params);
        } else {
          defaultOnRowDrag();
        }
      };
      DndSourceComp2.prototype.checkVisibility = function() {
        var visible = this.column.isDndSource(this.rowNode);
        this.setDisplayed(visible);
      };
      __decorate$1N([
        PostConstruct
      ], DndSourceComp2.prototype, "postConstruct", null);
      return DndSourceComp2;
    }(Component);
    __extends$1V = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign$5 = function() {
      __assign$5 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$5.apply(this, arguments);
    };
    CSS_CELL = "ag-cell";
    CSS_AUTO_HEIGHT = "ag-cell-auto-height";
    CSS_NORMAL_HEIGHT = "ag-cell-normal-height";
    CSS_CELL_FOCUS = "ag-cell-focus";
    CSS_CELL_FIRST_RIGHT_PINNED = "ag-cell-first-right-pinned";
    CSS_CELL_LAST_LEFT_PINNED = "ag-cell-last-left-pinned";
    CSS_CELL_NOT_INLINE_EDITING = "ag-cell-not-inline-editing";
    CSS_CELL_INLINE_EDITING = "ag-cell-inline-editing";
    CSS_CELL_POPUP_EDITING = "ag-cell-popup-editing";
    CSS_COLUMN_HOVER = "ag-column-hover";
    CSS_CELL_WRAP_TEXT = "ag-cell-wrap-text";
    instanceIdSequence$3 = 0;
    CellCtrl = function(_super) {
      __extends$1V(CellCtrl2, _super);
      function CellCtrl2(column, rowNode, beans, rowCtrl) {
        var _this = _super.call(this) || this;
        _this.suppressRefreshCell = false;
        _this.onCellCompAttachedFuncs = [];
        _this.column = column;
        _this.rowNode = rowNode;
        _this.beans = beans;
        _this.rowCtrl = rowCtrl;
        _this.instanceId = column.getId() + "-" + instanceIdSequence$3++;
        _this.createCellPosition();
        _this.addFeatures();
        return _this;
      }
      CellCtrl2.prototype.addFeatures = function() {
        var _this = this;
        this.cellPositionFeature = new CellPositionFeature(this, this.beans);
        this.addDestroyFunc(function() {
          return _this.cellPositionFeature.destroy();
        });
        this.cellCustomStyleFeature = new CellCustomStyleFeature(this, this.beans);
        this.addDestroyFunc(function() {
          return _this.cellCustomStyleFeature.destroy();
        });
        this.cellMouseListenerFeature = new CellMouseListenerFeature(this, this.beans, this.column);
        this.addDestroyFunc(function() {
          return _this.cellMouseListenerFeature.destroy();
        });
        this.cellKeyboardListenerFeature = new CellKeyboardListenerFeature(this, this.beans, this.column, this.rowNode, this.rowCtrl);
        this.addDestroyFunc(function() {
          return _this.cellKeyboardListenerFeature.destroy();
        });
        var rangeSelectionEnabled = this.beans.rangeService && this.beans.gridOptionsWrapper.isEnableRangeSelection();
        if (rangeSelectionEnabled) {
          this.cellRangeFeature = new CellRangeFeature(this.beans, this);
          this.addDestroyFunc(function() {
            return _this.cellRangeFeature.destroy();
          });
        }
        this.addTooltipFeature();
      };
      CellCtrl2.prototype.addTooltipFeature = function() {
        var _this = this;
        var getTooltipValue = function() {
          var colDef = _this.column.getColDef();
          var data = _this.rowNode.data;
          if (colDef.tooltipField && exists(data)) {
            return getValueUsingField(data, colDef.tooltipField, _this.column.isTooltipFieldContainsDots());
          }
          var valueGetter = colDef.tooltipValueGetter;
          if (valueGetter) {
            return valueGetter({
              location: "cell",
              api: _this.beans.gridOptionsWrapper.getApi(),
              columnApi: _this.beans.gridOptionsWrapper.getColumnApi(),
              context: _this.beans.gridOptionsWrapper.getContext(),
              colDef: _this.column.getColDef(),
              column: _this.column,
              rowIndex: _this.cellPosition.rowIndex,
              node: _this.rowNode,
              data: _this.rowNode.data,
              value: _this.value,
              valueFormatted: _this.valueFormatted
            });
          }
          return null;
        };
        var tooltipCtrl = {
          getColumn: function() {
            return _this.column;
          },
          getColDef: function() {
            return _this.column.getColDef();
          },
          getRowIndex: function() {
            return _this.cellPosition.rowIndex;
          },
          getRowNode: function() {
            return _this.rowNode;
          },
          getGui: function() {
            return _this.getGui();
          },
          getLocation: function() {
            return "cell";
          },
          getTooltipValue,
          getValueFormatted: function() {
            return _this.valueFormatted;
          }
        };
        this.tooltipFeature = new TooltipFeature(tooltipCtrl, this.beans);
        this.addDestroyFunc(function() {
          return _this.tooltipFeature.destroy();
        });
      };
      CellCtrl2.prototype.setComp = function(comp, eGui, eCellWrapper, printLayout, startEditing) {
        this.cellComp = comp;
        this.gow = this.beans.gridOptionsWrapper;
        this.eGui = eGui;
        this.printLayout = printLayout;
        this.updateAndFormatValue(true);
        this.addDomData();
        this.onCellFocused();
        this.applyStaticCssClasses();
        this.setWrapText();
        this.onFirstRightPinnedChanged();
        this.onLastLeftPinnedChanged();
        this.onColumnHover();
        this.setupControlComps();
        if (eCellWrapper) {
          this.setupAutoHeight(eCellWrapper);
        }
        this.setAriaColIndex();
        if (!this.gow.isSuppressCellFocus()) {
          this.cellComp.setTabIndex(-1);
        }
        var colIdSanitised = escapeString(this.column.getId());
        this.cellComp.setColId(colIdSanitised);
        this.cellComp.setRole("gridcell");
        this.cellPositionFeature.setComp(eGui);
        this.cellCustomStyleFeature.setComp(comp);
        this.tooltipFeature.setComp(comp);
        this.cellKeyboardListenerFeature.setComp(this.eGui);
        if (this.cellRangeFeature) {
          this.cellRangeFeature.setComp(comp, eGui);
        }
        if (startEditing && this.isCellEditable()) {
          this.startEditing();
        } else {
          this.showValue();
        }
        if (this.onCellCompAttachedFuncs.length) {
          this.onCellCompAttachedFuncs.forEach(function(func) {
            return func();
          });
          this.onCellCompAttachedFuncs = [];
        }
      };
      CellCtrl2.prototype.setupAutoHeight = function(eCellWrapper) {
        var _this = this;
        if (!this.column.isAutoHeight()) {
          return;
        }
        var eParentCell = eCellWrapper.parentElement;
        var minRowHeight = this.beans.gridOptionsWrapper.getRowHeightForNode(this.rowNode).height;
        var measureHeight = function(timesCalled) {
          if (_this.editing) {
            return;
          }
          if (!_this.isAlive()) {
            return;
          }
          var _a = getElementSize(eParentCell), paddingTop = _a.paddingTop, paddingBottom = _a.paddingBottom;
          var wrapperHeight = eCellWrapper.offsetHeight;
          var autoHeight = wrapperHeight + paddingTop + paddingBottom;
          if (timesCalled < 5) {
            var doc = _this.beans.gridOptionsWrapper.getDocument();
            var notYetInDom = !doc || !doc.contains(eCellWrapper);
            var possiblyNoContentYet = autoHeight == 0;
            if (notYetInDom || possiblyNoContentYet) {
              _this.beans.frameworkOverrides.setTimeout(function() {
                return measureHeight(timesCalled + 1);
              }, 0);
              return;
            }
          }
          var newHeight = Math.max(autoHeight, minRowHeight);
          _this.rowNode.setRowAutoHeight(newHeight, _this.column);
        };
        var listener = function() {
          return measureHeight(0);
        };
        listener();
        var destroyResizeObserver = this.beans.resizeObserverService.observeResize(eCellWrapper, listener);
        this.addDestroyFunc(function() {
          destroyResizeObserver();
          _this.rowNode.setRowAutoHeight(void 0, _this.column);
        });
      };
      CellCtrl2.prototype.getInstanceId = function() {
        return this.instanceId;
      };
      CellCtrl2.prototype.showValue = function(forceNewCellRendererInstance) {
        if (forceNewCellRendererInstance === void 0) {
          forceNewCellRendererInstance = false;
        }
        var valueToDisplay = this.valueFormatted != null ? this.valueFormatted : this.value;
        var params = this.createCellRendererParams();
        var compDetails = this.beans.userComponentFactory.getCellRendererDetails(this.column.getColDef(), params);
        this.cellComp.setRenderDetails(compDetails, valueToDisplay, forceNewCellRendererInstance);
        this.refreshHandle();
      };
      CellCtrl2.prototype.setupControlComps = function() {
        var colDef = this.column.getColDef();
        this.includeSelection = this.isIncludeControl(colDef.checkboxSelection);
        this.includeRowDrag = this.isIncludeControl(colDef.rowDrag);
        this.includeDndSource = this.isIncludeControl(colDef.dndSource);
        this.cellComp.setIncludeSelection(this.includeSelection);
        this.cellComp.setIncludeDndSource(this.includeDndSource);
        this.cellComp.setIncludeRowDrag(this.includeRowDrag);
      };
      CellCtrl2.prototype.isForceWrapper = function() {
        var forceWrapper = this.beans.gridOptionsWrapper.isEnableCellTextSelection() || this.column.isAutoHeight();
        return forceWrapper;
      };
      CellCtrl2.prototype.isIncludeControl = function(value) {
        var rowNodePinned = this.rowNode.rowPinned != null;
        var isFunc = typeof value === "function";
        var res = rowNodePinned ? false : isFunc || value === true;
        return res;
      };
      CellCtrl2.prototype.refreshShouldDestroy = function() {
        var colDef = this.column.getColDef();
        var selectionChanged = this.includeSelection != this.isIncludeControl(colDef.checkboxSelection);
        var rowDragChanged = this.includeRowDrag != this.isIncludeControl(colDef.rowDrag);
        var dndSourceChanged = this.includeDndSource != this.isIncludeControl(colDef.dndSource);
        return selectionChanged || rowDragChanged || dndSourceChanged;
      };
      CellCtrl2.prototype.startEditing = function(key, charPress, cellStartedEdit, event) {
        var _this = this;
        if (key === void 0) {
          key = null;
        }
        if (charPress === void 0) {
          charPress = null;
        }
        if (cellStartedEdit === void 0) {
          cellStartedEdit = false;
        }
        if (event === void 0) {
          event = null;
        }
        var _a, _b;
        if (!this.isCellEditable() || this.editing) {
          return;
        }
        if (!this.cellComp) {
          this.onCellCompAttachedFuncs.push(function() {
            _this.startEditing(key, charPress, cellStartedEdit, event);
          });
          return;
        }
        var editorParams = this.createCellEditorParams(key, charPress, cellStartedEdit);
        var colDef = this.column.getColDef();
        var compDetails = this.beans.userComponentFactory.getCellEditorDetails(colDef, editorParams);
        var popup = ((_a = compDetails) === null || _a === void 0 ? void 0 : _a.popupFromSelector) != null ? compDetails.popupFromSelector : !!colDef.cellEditorPopup;
        var position = ((_b = compDetails) === null || _b === void 0 ? void 0 : _b.popupPositionFromSelector) != null ? compDetails.popupPositionFromSelector : colDef.cellEditorPopupPosition;
        this.setEditing(true, popup);
        this.cellComp.setEditDetails(compDetails, popup, position);
        var e = this.createEvent(event, Events.EVENT_CELL_EDITING_STARTED);
        this.beans.eventService.dispatchEvent(e);
      };
      CellCtrl2.prototype.setEditing = function(editing, inPopup) {
        if (inPopup === void 0) {
          inPopup = false;
        }
        if (this.editing === editing) {
          return;
        }
        this.editing = editing;
        this.editingInPopup = inPopup;
        this.setInlineEditingClass();
        this.refreshHandle();
      };
      CellCtrl2.prototype.stopRowOrCellEdit = function(cancel) {
        if (cancel === void 0) {
          cancel = false;
        }
        if (this.beans.gridOptionsWrapper.isFullRowEdit()) {
          this.rowCtrl.stopRowEditing(cancel);
        } else {
          this.stopEditing(cancel);
        }
      };
      CellCtrl2.prototype.onPopupEditorClosed = function() {
        if (!this.isEditing()) {
          return;
        }
        this.stopEditingAndFocus();
      };
      CellCtrl2.prototype.takeValueFromCellEditor = function(cancel) {
        var noValueResult = { newValueExists: false };
        if (cancel) {
          return noValueResult;
        }
        var cellEditor = this.cellComp.getCellEditor();
        if (!cellEditor) {
          return noValueResult;
        }
        var userWantsToCancel = cellEditor.isCancelAfterEnd && cellEditor.isCancelAfterEnd();
        if (userWantsToCancel) {
          return noValueResult;
        }
        var newValue = cellEditor.getValue();
        return {
          newValue,
          newValueExists: true
        };
      };
      CellCtrl2.prototype.saveNewValue = function(oldValue, newValue) {
        if (newValue === oldValue) {
          return false;
        }
        if (this.beans.gridOptionsWrapper.isReadOnlyEdit()) {
          this.dispatchEventForSaveValueReadOnly(oldValue, newValue);
          return false;
        }
        this.suppressRefreshCell = true;
        var valueChanged = this.rowNode.setDataValue(this.column, newValue);
        this.suppressRefreshCell = false;
        return valueChanged;
      };
      CellCtrl2.prototype.dispatchEventForSaveValueReadOnly = function(oldValue, newValue) {
        var rowNode = this.rowNode;
        var event = {
          type: Events.EVENT_CELL_EDIT_REQUEST,
          event: null,
          rowIndex: rowNode.rowIndex,
          rowPinned: rowNode.rowPinned,
          column: this.column,
          api: this.beans.gridApi,
          columnApi: this.beans.columnApi,
          colDef: this.column.getColDef(),
          context: this.beans.gridOptionsWrapper.getContext(),
          data: rowNode.data,
          node: rowNode,
          oldValue,
          newValue,
          value: newValue,
          source: void 0
        };
        this.beans.eventService.dispatchEvent(event);
      };
      CellCtrl2.prototype.stopEditing = function(cancel) {
        if (cancel === void 0) {
          cancel = false;
        }
        if (!this.editing) {
          return false;
        }
        var _a = this.takeValueFromCellEditor(cancel), newValue = _a.newValue, newValueExists = _a.newValueExists;
        var oldValue = this.getValueFromValueService();
        var valueChanged = false;
        if (newValueExists) {
          valueChanged = this.saveNewValue(oldValue, newValue);
        }
        this.setEditing(false);
        this.cellComp.setEditDetails();
        this.updateAndFormatValue();
        this.refreshCell({ forceRefresh: true, suppressFlash: true });
        this.dispatchEditingStoppedEvent(oldValue, newValue, !cancel && !!valueChanged);
        return valueChanged;
      };
      CellCtrl2.prototype.dispatchEditingStoppedEvent = function(oldValue, newValue, valueChanged) {
        var editingStoppedEvent = __assign$5(__assign$5({}, this.createEvent(null, Events.EVENT_CELL_EDITING_STOPPED)), {
          oldValue,
          newValue,
          valueChanged
        });
        this.beans.eventService.dispatchEvent(editingStoppedEvent);
      };
      CellCtrl2.prototype.setInlineEditingClass = function() {
        var _this = this;
        if (!this.isAlive()) {
          return;
        }
        if (!this.cellComp) {
          this.onCellCompAttachedFuncs.push(function() {
            _this.setInlineEditingClass();
          });
          return;
        }
        var editingInline = this.editing && !this.editingInPopup;
        var popupEditorShowing = this.editing && this.editingInPopup;
        this.cellComp.addOrRemoveCssClass(CSS_CELL_INLINE_EDITING, editingInline);
        this.cellComp.addOrRemoveCssClass(CSS_CELL_NOT_INLINE_EDITING, !editingInline);
        this.cellComp.addOrRemoveCssClass(CSS_CELL_POPUP_EDITING, popupEditorShowing);
        this.rowCtrl.setInlineEditingCss(this.editing);
      };
      CellCtrl2.prototype.hackSayEditingInPopup = function() {
        if (this.editingInPopup) {
          return;
        }
        this.editingInPopup = true;
        this.setInlineEditingClass();
      };
      CellCtrl2.prototype.createCellEditorParams = function(key, charPress, cellStartedEdit) {
        var res = {
          value: this.getValueFromValueService(),
          key,
          eventKey: key,
          charPress,
          column: this.column,
          colDef: this.column.getColDef(),
          rowIndex: this.getCellPosition().rowIndex,
          node: this.rowNode,
          data: this.rowNode.data,
          api: this.beans.gridOptionsWrapper.getApi(),
          cellStartedEdit,
          columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
          context: this.beans.gridOptionsWrapper.getContext(),
          onKeyDown: this.onKeyDown.bind(this),
          stopEditing: this.stopEditingAndFocus.bind(this),
          eGridCell: this.getGui(),
          parseValue: this.parseValue.bind(this),
          formatValue: this.formatValue.bind(this)
        };
        return res;
      };
      CellCtrl2.prototype.createCellRendererParams = function() {
        var _this = this;
        var addRowCompListener = function(eventType, listener) {
          console.warn("AG Grid: since AG Grid v26, params.addRowCompListener() is deprecated. If you need this functionality, please contact AG Grid support and advise why so that we can revert with an appropriate workaround, as we dont have any valid use cases for it. This method was originally provided as a work around to know when cells were destroyed in AG Grid before custom Cell Renderers could be provided.");
          _this.rowCtrl.addEventListener(eventType, listener);
        };
        var res = {
          value: this.value,
          valueFormatted: this.valueFormatted,
          getValue: this.getValueFromValueService.bind(this),
          setValue: function(value) {
            return _this.beans.valueService.setValue(_this.rowNode, _this.column, value);
          },
          formatValue: this.formatValue.bind(this),
          data: this.rowNode.data,
          node: this.rowNode,
          pinned: this.column.getPinned(),
          colDef: this.column.getColDef(),
          column: this.column,
          rowIndex: this.getCellPosition().rowIndex,
          api: this.beans.gridOptionsWrapper.getApi(),
          columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
          context: this.beans.gridOptionsWrapper.getContext(),
          refreshCell: this.refreshCell.bind(this),
          eGridCell: this.getGui(),
          eParentOfValue: this.cellComp.getParentOfValue(),
          registerRowDragger: function(rowDraggerElement, dragStartPixels, value, suppressVisibilityChange) {
            return _this.registerRowDragger(rowDraggerElement, dragStartPixels, suppressVisibilityChange);
          },
          addRowCompListener
        };
        return res;
      };
      CellCtrl2.prototype.parseValue = function(newValue) {
        var colDef = this.column.getColDef();
        var params = {
          node: this.rowNode,
          data: this.rowNode.data,
          oldValue: this.getValue(),
          newValue,
          colDef,
          column: this.column,
          api: this.beans.gridOptionsWrapper.getApi(),
          columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
          context: this.beans.gridOptionsWrapper.getContext()
        };
        var valueParser = colDef.valueParser;
        return exists(valueParser) ? this.beans.expressionService.evaluate(valueParser, params) : newValue;
      };
      CellCtrl2.prototype.setFocusOutOnEditor = function() {
        if (!this.editing) {
          return;
        }
        var cellEditor = this.cellComp.getCellEditor();
        if (cellEditor && cellEditor.focusOut) {
          cellEditor.focusOut();
        }
      };
      CellCtrl2.prototype.setFocusInOnEditor = function() {
        if (!this.editing) {
          return;
        }
        var cellEditor = this.cellComp.getCellEditor();
        if (cellEditor && cellEditor.focusIn) {
          cellEditor.focusIn();
        } else {
          this.focusCell(true);
        }
      };
      CellCtrl2.prototype.onCellChanged = function(event) {
        if (!this.cellComp) {
          return;
        }
        var eventImpactsThisCell = event.column === this.column;
        if (eventImpactsThisCell) {
          this.refreshCell({});
        }
      };
      CellCtrl2.prototype.refreshCell = function(params) {
        if (this.suppressRefreshCell || this.editing) {
          return;
        }
        if (!this.cellComp) {
          return;
        }
        var colDef = this.column.getColDef();
        var newData = params != null && !!params.newData;
        var suppressFlash = params != null && !!params.suppressFlash || !!colDef.suppressCellFlash;
        var noValueProvided = colDef.field == null && colDef.valueGetter == null && colDef.showRowGroup == null;
        var forceRefresh = params && params.forceRefresh || noValueProvided || newData;
        var valuesDifferent = this.updateAndFormatValue();
        var dataNeedsUpdating = forceRefresh || valuesDifferent;
        if (dataNeedsUpdating) {
          this.showValue(newData);
          var processingFilterChange = this.beans.filterManager.isSuppressFlashingCellsBecauseFiltering();
          var flashCell = !suppressFlash && !processingFilterChange && (this.beans.gridOptionsWrapper.isEnableCellChangeFlash() || colDef.enableCellChangeFlash);
          if (flashCell) {
            this.flashCell();
          }
          this.cellCustomStyleFeature.applyUserStyles();
          this.cellCustomStyleFeature.applyClassesFromColDef();
        }
        this.refreshToolTip();
        this.cellCustomStyleFeature.applyCellClassRules();
      };
      CellCtrl2.prototype.stopEditingAndFocus = function(suppressNavigateAfterEdit) {
        if (suppressNavigateAfterEdit === void 0) {
          suppressNavigateAfterEdit = false;
        }
        this.stopRowOrCellEdit();
        this.focusCell(true);
        if (!suppressNavigateAfterEdit) {
          this.navigateAfterEdit();
        }
      };
      CellCtrl2.prototype.navigateAfterEdit = function() {
        var fullRowEdit = this.beans.gridOptionsWrapper.isFullRowEdit();
        if (fullRowEdit) {
          return;
        }
        var enterMovesDownAfterEdit = this.beans.gridOptionsWrapper.isEnterMovesDownAfterEdit();
        if (enterMovesDownAfterEdit) {
          this.beans.navigationService.navigateToNextCell(null, KeyCode.DOWN, this.getCellPosition(), false);
        }
      };
      CellCtrl2.prototype.flashCell = function(delays) {
        var flashDelay = delays && delays.flashDelay;
        var fadeDelay = delays && delays.fadeDelay;
        this.animateCell("data-changed", flashDelay, fadeDelay);
      };
      CellCtrl2.prototype.animateCell = function(cssName, flashDelay, fadeDelay) {
        var _this = this;
        var fullName = "ag-cell-" + cssName;
        var animationFullName = "ag-cell-" + cssName + "-animation";
        var gridOptionsWrapper = this.beans.gridOptionsWrapper;
        if (!flashDelay) {
          flashDelay = gridOptionsWrapper.getCellFlashDelay();
        }
        if (!exists(fadeDelay)) {
          fadeDelay = gridOptionsWrapper.getCellFadeDelay();
        }
        this.cellComp.addOrRemoveCssClass(fullName, true);
        this.cellComp.addOrRemoveCssClass(animationFullName, false);
        window.setTimeout(function() {
          if (!_this.isAlive()) {
            return;
          }
          _this.cellComp.addOrRemoveCssClass(fullName, false);
          _this.cellComp.addOrRemoveCssClass(animationFullName, true);
          _this.eGui.style.transition = "background-color " + fadeDelay + "ms";
          window.setTimeout(function() {
            if (!_this.isAlive()) {
              return;
            }
            _this.cellComp.addOrRemoveCssClass(animationFullName, false);
            _this.eGui.style.transition = "";
          }, fadeDelay);
        }, flashDelay);
      };
      CellCtrl2.prototype.onFlashCells = function(event) {
        if (!this.cellComp) {
          return;
        }
        var cellId = this.beans.cellPositionUtils.createId(this.getCellPosition());
        var shouldFlash = event.cells[cellId];
        if (shouldFlash) {
          this.animateCell("highlight");
        }
      };
      CellCtrl2.prototype.isCellEditable = function() {
        return this.column.isCellEditable(this.rowNode);
      };
      CellCtrl2.prototype.isSuppressFillHandle = function() {
        return this.column.isSuppressFillHandle();
      };
      CellCtrl2.prototype.formatValue = function(value) {
        var res = this.callValueFormatter(value);
        return res != null ? res : value;
      };
      CellCtrl2.prototype.callValueFormatter = function(value) {
        return this.beans.valueFormatterService.formatValue(this.column, this.rowNode, value);
      };
      CellCtrl2.prototype.updateAndFormatValue = function(force) {
        if (force === void 0) {
          force = false;
        }
        var oldValue = this.value;
        var oldValueFormatted = this.valueFormatted;
        this.value = this.getValueFromValueService();
        this.valueFormatted = this.callValueFormatter(this.value);
        var valuesDifferent = force ? true : !this.valuesAreEqual(oldValue, this.value) || this.valueFormatted != oldValueFormatted;
        return valuesDifferent;
      };
      CellCtrl2.prototype.valuesAreEqual = function(val1, val2) {
        var colDef = this.column.getColDef();
        return colDef.equals ? colDef.equals(val1, val2) : val1 === val2;
      };
      CellCtrl2.prototype.getComp = function() {
        return this.cellComp;
      };
      CellCtrl2.prototype.getValueFromValueService = function() {
        var lockedClosedGroup = this.rowNode.leafGroup && this.beans.columnModel.isPivotMode();
        var isOpenGroup = this.rowNode.group && this.rowNode.expanded && !this.rowNode.footer && !lockedClosedGroup;
        var groupFootersEnabled = this.beans.gridOptionsWrapper.isGroupIncludeFooter();
        var groupAlwaysShowAggData = this.beans.gridOptionsWrapper.isGroupSuppressBlankHeader();
        var ignoreAggData = isOpenGroup && groupFootersEnabled && !groupAlwaysShowAggData;
        var value = this.beans.valueService.getValue(this.column, this.rowNode, false, ignoreAggData);
        return value;
      };
      CellCtrl2.prototype.getValue = function() {
        return this.value;
      };
      CellCtrl2.prototype.getValueFormatted = function() {
        return this.valueFormatted;
      };
      CellCtrl2.prototype.addDomData = function() {
        var _this = this;
        var element = this.getGui();
        this.beans.gridOptionsWrapper.setDomData(element, CellCtrl2.DOM_DATA_KEY_CELL_CTRL, this);
        this.addDestroyFunc(function() {
          return _this.beans.gridOptionsWrapper.setDomData(element, CellCtrl2.DOM_DATA_KEY_CELL_CTRL, null);
        });
      };
      CellCtrl2.prototype.createEvent = function(domEvent, eventType) {
        var event = {
          type: eventType,
          node: this.rowNode,
          data: this.rowNode.data,
          value: this.value,
          column: this.column,
          colDef: this.column.getColDef(),
          context: this.beans.gridOptionsWrapper.getContext(),
          api: this.beans.gridApi,
          columnApi: this.beans.columnApi,
          rowPinned: this.rowNode.rowPinned,
          event: domEvent,
          rowIndex: this.rowNode.rowIndex
        };
        return event;
      };
      CellCtrl2.prototype.onKeyPress = function(event) {
        this.cellKeyboardListenerFeature.onKeyPress(event);
      };
      CellCtrl2.prototype.onKeyDown = function(event) {
        this.cellKeyboardListenerFeature.onKeyDown(event);
      };
      CellCtrl2.prototype.onMouseEvent = function(eventName, mouseEvent) {
        this.cellMouseListenerFeature.onMouseEvent(eventName, mouseEvent);
      };
      CellCtrl2.prototype.getGui = function() {
        return this.eGui;
      };
      CellCtrl2.prototype.refreshToolTip = function() {
        this.tooltipFeature.refreshToolTip();
      };
      CellCtrl2.prototype.getColSpanningList = function() {
        return this.cellPositionFeature.getColSpanningList();
      };
      CellCtrl2.prototype.onLeftChanged = function() {
        if (!this.cellComp) {
          return;
        }
        this.cellPositionFeature.onLeftChanged();
      };
      CellCtrl2.prototype.onDisplayedColumnsChanged = function() {
        if (!this.eGui) {
          return;
        }
        this.setAriaColIndex();
      };
      CellCtrl2.prototype.setAriaColIndex = function() {
        var colIdx = this.beans.columnModel.getAriaColumnIndex(this.column);
        setAriaColIndex(this.getGui(), colIdx);
      };
      CellCtrl2.prototype.isSuppressNavigable = function() {
        return this.column.isSuppressNavigable(this.rowNode);
      };
      CellCtrl2.prototype.onWidthChanged = function() {
        return this.cellPositionFeature.onWidthChanged();
      };
      CellCtrl2.prototype.getColumn = function() {
        return this.column;
      };
      CellCtrl2.prototype.getRowNode = function() {
        return this.rowNode;
      };
      CellCtrl2.prototype.getBeans = function() {
        return this.beans;
      };
      CellCtrl2.prototype.isPrintLayout = function() {
        return this.printLayout;
      };
      CellCtrl2.prototype.appendChild = function(htmlElement) {
        this.eGui.appendChild(htmlElement);
      };
      CellCtrl2.prototype.refreshHandle = function() {
        if (this.cellRangeFeature) {
          this.cellRangeFeature.refreshHandle();
        }
      };
      CellCtrl2.prototype.getCellPosition = function() {
        return this.cellPosition;
      };
      CellCtrl2.prototype.isEditing = function() {
        return this.editing;
      };
      CellCtrl2.prototype.startRowOrCellEdit = function(key, charPress, event) {
        if (event === void 0) {
          event = null;
        }
        if (!this.cellComp) {
          return;
        }
        if (this.beans.gridOptionsWrapper.isFullRowEdit()) {
          this.rowCtrl.startRowEditing(key, charPress, this);
        } else {
          this.startEditing(key, charPress, true, event);
        }
      };
      CellCtrl2.prototype.getRowCtrl = function() {
        return this.rowCtrl;
      };
      CellCtrl2.prototype.getRowPosition = function() {
        return {
          rowIndex: this.cellPosition.rowIndex,
          rowPinned: this.cellPosition.rowPinned
        };
      };
      CellCtrl2.prototype.updateRangeBordersIfRangeCount = function() {
        if (!this.cellComp) {
          return;
        }
        if (this.cellRangeFeature) {
          this.cellRangeFeature.updateRangeBordersIfRangeCount();
        }
      };
      CellCtrl2.prototype.onRangeSelectionChanged = function() {
        if (!this.cellComp) {
          return;
        }
        if (this.cellRangeFeature) {
          this.cellRangeFeature.onRangeSelectionChanged();
        }
      };
      CellCtrl2.prototype.isRangeSelectionEnabled = function() {
        return this.cellRangeFeature != null;
      };
      CellCtrl2.prototype.focusCell = function(forceBrowserFocus) {
        if (forceBrowserFocus === void 0) {
          forceBrowserFocus = false;
        }
        this.beans.focusService.setFocusedCell({
          rowIndex: this.getCellPosition().rowIndex,
          column: this.column,
          rowPinned: this.rowNode.rowPinned,
          forceBrowserFocus
        });
      };
      CellCtrl2.prototype.onRowIndexChanged = function() {
        this.createCellPosition();
        this.onCellFocused();
        if (this.cellRangeFeature) {
          this.cellRangeFeature.onRangeSelectionChanged();
        }
      };
      CellCtrl2.prototype.onFirstRightPinnedChanged = function() {
        if (!this.cellComp) {
          return;
        }
        var firstRightPinned = this.column.isFirstRightPinned();
        this.cellComp.addOrRemoveCssClass(CSS_CELL_FIRST_RIGHT_PINNED, firstRightPinned);
      };
      CellCtrl2.prototype.onLastLeftPinnedChanged = function() {
        if (!this.cellComp) {
          return;
        }
        var lastLeftPinned = this.column.isLastLeftPinned();
        this.cellComp.addOrRemoveCssClass(CSS_CELL_LAST_LEFT_PINNED, lastLeftPinned);
      };
      CellCtrl2.prototype.onCellFocused = function(event) {
        if (!this.cellComp || this.gow.isSuppressCellFocus()) {
          return;
        }
        var cellFocused = this.beans.focusService.isCellFocused(this.cellPosition);
        this.cellComp.addOrRemoveCssClass(CSS_CELL_FOCUS, cellFocused);
        if (cellFocused && event && event.forceBrowserFocus) {
          var focusEl = this.cellComp.getFocusableElement();
          focusEl.focus({ preventScroll: !!event.preventScrollOnBrowserFocus });
        }
        var fullRowEdit = this.beans.gridOptionsWrapper.isFullRowEdit();
        if (!cellFocused && !fullRowEdit && this.editing) {
          this.stopRowOrCellEdit();
        }
      };
      CellCtrl2.prototype.createCellPosition = function() {
        this.cellPosition = {
          rowIndex: this.rowNode.rowIndex,
          rowPinned: makeNull(this.rowNode.rowPinned),
          column: this.column
        };
      };
      CellCtrl2.prototype.applyStaticCssClasses = function() {
        this.cellComp.addOrRemoveCssClass(CSS_CELL, true);
        this.cellComp.addOrRemoveCssClass(CSS_CELL_NOT_INLINE_EDITING, true);
        var autoHeight = this.column.isAutoHeight() == true;
        this.cellComp.addOrRemoveCssClass(CSS_AUTO_HEIGHT, autoHeight);
        this.cellComp.addOrRemoveCssClass(CSS_NORMAL_HEIGHT, !autoHeight);
      };
      CellCtrl2.prototype.onColumnHover = function() {
        if (!this.cellComp) {
          return;
        }
        if (!this.beans.gridOptionsWrapper.isColumnHoverHighlight()) {
          return;
        }
        var isHovered = this.beans.columnHoverService.isHovered(this.column);
        this.cellComp.addOrRemoveCssClass(CSS_COLUMN_HOVER, isHovered);
      };
      CellCtrl2.prototype.onColDefChanged = function() {
        if (!this.cellComp) {
          return;
        }
        this.setWrapText();
        if (!this.editing) {
          this.refreshCell({ forceRefresh: true, suppressFlash: true });
        }
      };
      CellCtrl2.prototype.setWrapText = function() {
        var value = this.column.getColDef().wrapText == true;
        this.cellComp.addOrRemoveCssClass(CSS_CELL_WRAP_TEXT, value);
      };
      CellCtrl2.prototype.dispatchCellContextMenuEvent = function(event) {
        var colDef = this.column.getColDef();
        var cellContextMenuEvent = this.createEvent(event, Events.EVENT_CELL_CONTEXT_MENU);
        this.beans.eventService.dispatchEvent(cellContextMenuEvent);
        if (colDef.onCellContextMenu) {
          window.setTimeout(function() {
            return colDef.onCellContextMenu(cellContextMenuEvent);
          }, 0);
        }
      };
      CellCtrl2.prototype.getCellRenderer = function() {
        return this.cellComp ? this.cellComp.getCellRenderer() : null;
      };
      CellCtrl2.prototype.getCellEditor = function() {
        return this.cellComp ? this.cellComp.getCellEditor() : null;
      };
      CellCtrl2.prototype.destroy = function() {
        this.onCellCompAttachedFuncs = [];
        _super.prototype.destroy.call(this);
      };
      CellCtrl2.prototype.createSelectionCheckbox = function() {
        var cbSelectionComponent = new CheckboxSelectionComponent();
        this.beans.context.createBean(cbSelectionComponent);
        cbSelectionComponent.init({ rowNode: this.rowNode, column: this.column });
        return cbSelectionComponent;
      };
      CellCtrl2.prototype.createDndSource = function() {
        var dndSourceComp = new DndSourceComp(this.rowNode, this.column, this.beans, this.eGui);
        this.beans.context.createBean(dndSourceComp);
        return dndSourceComp;
      };
      CellCtrl2.prototype.registerRowDragger = function(customElement, dragStartPixels, suppressVisibilityChange) {
        var _this = this;
        if (this.customRowDragComp) {
          this.customRowDragComp.setDragElement(customElement, dragStartPixels);
          return;
        }
        var newComp = this.createRowDragComp(customElement, dragStartPixels, suppressVisibilityChange);
        if (newComp) {
          this.customRowDragComp = newComp;
          this.addDestroyFunc(function() {
            return _this.beans.context.destroyBean(newComp);
          });
        }
      };
      CellCtrl2.prototype.createRowDragComp = function(customElement, dragStartPixels, suppressVisibilityChange) {
        var _this = this;
        var pagination = this.beans.gridOptionsWrapper.isPagination();
        var rowDragManaged = this.beans.gridOptionsWrapper.isRowDragManaged();
        var clientSideRowModelActive = this.beans.gridOptionsWrapper.isRowModelDefault();
        if (rowDragManaged) {
          if (!clientSideRowModelActive) {
            doOnce(function() {
              return console.warn("AG Grid: managed row dragging is only allowed in the Client Side Row Model");
            }, "CellComp.addRowDragging");
            return;
          }
          if (pagination) {
            doOnce(function() {
              return console.warn("AG Grid: managed row dragging is not possible when doing pagination");
            }, "CellComp.addRowDragging");
            return;
          }
        }
        var rowDragComp = new RowDragComp(function() {
          return _this.value;
        }, this.rowNode, this.column, customElement, dragStartPixels, suppressVisibilityChange);
        this.beans.context.createBean(rowDragComp);
        return rowDragComp;
      };
      CellCtrl2.DOM_DATA_KEY_CELL_CTRL = "cellCtrl";
      return CellCtrl2;
    }(BeanStub);
    __extends$1U = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __values$2 = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read$h = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread$d = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read$h(arguments[i]));
      return ar;
    };
    (function(RowType2) {
      RowType2["Normal"] = "Normal";
      RowType2["FullWidth"] = "FullWidth";
      RowType2["FullWidthLoading"] = "FullWidthLoading";
      RowType2["FullWidthGroup"] = "FullWidthGroup";
      RowType2["FullWidthDetail"] = "FullWidthDetail";
    })(RowType$1 || (RowType$1 = {}));
    instanceIdSequence$2 = 0;
    RowCtrl = function(_super) {
      __extends$1U(RowCtrl2, _super);
      function RowCtrl2(rowNode, beans, animateIn, useAnimationFrameForCreate, printLayout) {
        var _this = _super.call(this) || this;
        _this.allRowGuis = [];
        _this.active = true;
        _this.centerCellCtrls = { list: [], map: {} };
        _this.leftCellCtrls = { list: [], map: {} };
        _this.rightCellCtrls = { list: [], map: {} };
        _this.lastMouseDownOnDragger = false;
        _this.updateColumnListsPending = false;
        _this.beans = beans;
        _this.rowNode = rowNode;
        _this.paginationPage = _this.beans.paginationProxy.getCurrentPage();
        _this.useAnimationFrameForCreate = useAnimationFrameForCreate;
        _this.printLayout = printLayout;
        _this.instanceId = rowNode.id + "-" + instanceIdSequence$2++;
        _this.setAnimateFlags(animateIn);
        _this.rowFocused = _this.beans.focusService.isRowFocused(_this.rowNode.rowIndex, _this.rowNode.rowPinned);
        _this.rowLevel = _this.beans.rowCssClassCalculator.calculateRowLevel(_this.rowNode);
        _this.setRowType();
        _this.addListeners();
        return _this;
      }
      RowCtrl2.prototype.isSticky = function() {
        return this.rowNode.sticky;
      };
      RowCtrl2.prototype.getBeans = function() {
        return this.beans;
      };
      RowCtrl2.prototype.getInstanceId = function() {
        return this.instanceId;
      };
      RowCtrl2.prototype.setComp = function(rowComp, element, containerType) {
        var gui = { rowComp, element, containerType };
        this.allRowGuis.push(gui);
        if (containerType === RowContainerType.LEFT) {
          this.leftGui = gui;
        } else if (containerType === RowContainerType.RIGHT) {
          this.rightGui = gui;
        } else if (containerType === RowContainerType.FULL_WIDTH) {
          this.fullWidthGui = gui;
        } else {
          this.centerGui = gui;
        }
        var allNormalPresent = this.leftGui != null && this.rightGui != null && this.centerGui != null;
        var fullWidthPresent = this.fullWidthGui != null;
        if (allNormalPresent || fullWidthPresent) {
          this.initialiseRowComps();
        }
        if (this.rowType !== "FullWidthLoading") {
          this.beans.rowRenderer.dispatchFirstDataRenderedEvent();
        }
      };
      RowCtrl2.prototype.isCacheable = function() {
        return this.rowType === RowType$1.FullWidthDetail && this.beans.gridOptionsWrapper.isKeepDetailRows();
      };
      RowCtrl2.prototype.setCached = function(cached) {
        var displayValue = cached ? "none" : "";
        this.allRowGuis.forEach(function(rg) {
          return rg.element.style.display = displayValue;
        });
      };
      RowCtrl2.prototype.initialiseRowComps = function() {
        var _this = this;
        var gow = this.beans.gridOptionsWrapper;
        this.onRowHeightChanged();
        this.updateRowIndexes();
        this.setFocusedClasses();
        this.setStylesFromGridOptions();
        if (gow.isRowSelection() && this.rowNode.selectable) {
          this.onRowSelected();
        }
        this.updateColumnLists(!this.useAnimationFrameForCreate);
        if (this.slideRowIn) {
          executeNextVMTurn(this.onTopChanged.bind(this));
        }
        if (this.fadeRowIn) {
          executeNextVMTurn(function() {
            _this.allRowGuis.forEach(function(gui) {
              return gui.rowComp.addOrRemoveCssClass("ag-opacity-zero", false);
            });
          });
        }
        var businessKey = this.getRowBusinessKey();
        var rowIdSanitised = escapeString(this.rowNode.id);
        var businessKeySanitised = escapeString(businessKey);
        this.allRowGuis.forEach(function(gui) {
          var comp = gui.rowComp;
          comp.setRole("row");
          var initialRowClasses = _this.getInitialRowClasses(gui.containerType);
          initialRowClasses.forEach(function(name) {
            return comp.addOrRemoveCssClass(name, true);
          });
          if (_this.rowNode.group) {
            setAriaExpanded(gui.element, _this.rowNode.expanded == true);
          }
          if (rowIdSanitised != null) {
            comp.setRowId(rowIdSanitised);
          }
          if (businessKeySanitised != null) {
            comp.setRowBusinessKey(businessKeySanitised);
          }
          if (_this.isFullWidth() && !_this.beans.gridOptionsWrapper.isSuppressCellFocus()) {
            comp.setTabIndex(-1);
          }
          gow.setDomData(gui.element, RowCtrl2.DOM_DATA_KEY_ROW_CTRL, _this);
          _this.addDestroyFunc(function() {
            return gow.setDomData(gui.element, RowCtrl2.DOM_DATA_KEY_ROW_CTRL, null);
          });
          if (_this.useAnimationFrameForCreate) {
            _this.beans.animationFrameService.createTask(_this.addHoverFunctionality.bind(_this, gui.element), _this.rowNode.rowIndex, "createTasksP2");
          } else {
            _this.addHoverFunctionality(gui.element);
          }
          if (_this.isFullWidth()) {
            _this.setupFullWidth(gui);
          }
          if (gow.isRowDragEntireRow()) {
            _this.addRowDraggerToRow(gui);
          }
          if (_this.useAnimationFrameForCreate) {
            _this.beans.animationFrameService.addDestroyTask(function() {
              if (!_this.isAlive()) {
                return;
              }
              gui.rowComp.addOrRemoveCssClass("ag-after-created", true);
            });
          }
        });
        this.executeProcessRowPostCreateFunc();
      };
      RowCtrl2.prototype.addRowDraggerToRow = function(gui) {
        var gow = this.beans.gridOptionsWrapper;
        if (gow.isEnableRangeSelection()) {
          doOnce(function() {
            console.warn("AG Grid: Setting `rowDragEntireRow: true` in the gridOptions doesn't work with `enableRangeSelection: true`");
          }, "rowDragAndRangeSelectionEnabled");
          return;
        }
        var translate = gow.getLocaleTextFunc();
        var rowDragComp = new RowDragComp(function() {
          return "1 " + translate("rowDragRow", "row");
        }, this.rowNode, void 0, gui.element, void 0, true);
        this.createManagedBean(rowDragComp, this.beans.context);
      };
      RowCtrl2.prototype.setupFullWidth = function(gui) {
        var pinned = this.getPinnedForContainer(gui.containerType);
        var params = this.createFullWidthParams(gui.element, pinned);
        var masterDetailModuleLoaded = ModuleRegistry.isRegistered(ModuleNames.MasterDetailModule);
        if (this.rowType == RowType$1.FullWidthDetail && !masterDetailModuleLoaded) {
          if (ModuleRegistry.isPackageBased()) {
            console.warn("AG Grid: cell renderer 'agDetailCellRenderer' (for master detail) not found. Can only be used with ag-grid-enterprise package.");
          } else {
            console.warn("AG Grid: cell renderer 'agDetailCellRenderer' (for master detail) not found. Can only be used with AG Grid Enterprise Module " + ModuleNames.MasterDetailModule);
          }
          return;
        }
        var compDetails;
        switch (this.rowType) {
          case RowType$1.FullWidthDetail:
            compDetails = this.beans.userComponentFactory.getFullWidthDetailCellRendererDetails(params);
            break;
          case RowType$1.FullWidthGroup:
            compDetails = this.beans.userComponentFactory.getFullWidthGroupCellRendererDetails(params);
            break;
          case RowType$1.FullWidthLoading:
            compDetails = this.beans.userComponentFactory.getFullWidthLoadingCellRendererDetails(params);
            break;
          default:
            compDetails = this.beans.userComponentFactory.getFullWidthCellRendererDetails(params);
            break;
        }
        gui.rowComp.showFullWidth(compDetails);
      };
      RowCtrl2.prototype.isPrintLayout = function() {
        return this.printLayout;
      };
      RowCtrl2.prototype.getCellElement = function(column) {
        var cellCtrl = this.getCellCtrl(column);
        return cellCtrl ? cellCtrl.getGui() : null;
      };
      RowCtrl2.prototype.executeProcessRowPostCreateFunc = function() {
        var func = this.beans.gridOptionsWrapper.getProcessRowPostCreateFunc();
        if (!func) {
          return;
        }
        var params = {
          eRow: this.centerGui ? this.centerGui.element : void 0,
          ePinnedLeftRow: this.leftGui ? this.leftGui.element : void 0,
          ePinnedRightRow: this.rightGui ? this.rightGui.element : void 0,
          node: this.rowNode,
          rowIndex: this.rowNode.rowIndex,
          addRenderedRowListener: this.addEventListener.bind(this)
        };
        func(params);
      };
      RowCtrl2.prototype.setRowType = function() {
        var isStub = this.rowNode.stub;
        var isFullWidthCell = this.rowNode.isFullWidthCell();
        var isDetailCell = this.beans.doingMasterDetail && this.rowNode.detail;
        var pivotMode = this.beans.columnModel.isPivotMode();
        var isGroupRow = !!this.rowNode.group && !this.rowNode.footer;
        var isFullWidthGroup = isGroupRow && this.beans.gridOptionsWrapper.isGroupUseEntireRow(pivotMode);
        if (isStub) {
          this.rowType = RowType$1.FullWidthLoading;
        } else if (isDetailCell) {
          this.rowType = RowType$1.FullWidthDetail;
        } else if (isFullWidthCell) {
          this.rowType = RowType$1.FullWidth;
        } else if (isFullWidthGroup) {
          this.rowType = RowType$1.FullWidthGroup;
        } else {
          this.rowType = RowType$1.Normal;
        }
      };
      RowCtrl2.prototype.updateColumnLists = function(suppressAnimationFrame) {
        var _this = this;
        if (suppressAnimationFrame === void 0) {
          suppressAnimationFrame = false;
        }
        if (this.isFullWidth()) {
          return;
        }
        var noAnimation = suppressAnimationFrame || this.beans.gridOptionsWrapper.isSuppressAnimationFrame() || this.printLayout;
        if (noAnimation) {
          this.updateColumnListsImpl();
          return;
        }
        if (this.updateColumnListsPending) {
          return;
        }
        this.beans.animationFrameService.createTask(function() {
          if (!_this.active) {
            return;
          }
          _this.updateColumnListsImpl();
        }, this.rowNode.rowIndex, "createTasksP1");
        this.updateColumnListsPending = true;
      };
      RowCtrl2.prototype.createCellCtrls = function(prev, cols, pinned) {
        var _this = this;
        if (pinned === void 0) {
          pinned = null;
        }
        var res = {
          list: [],
          map: {}
        };
        var addCell = function(colInstanceId, cellCtrl) {
          res.list.push(cellCtrl);
          res.map[colInstanceId] = cellCtrl;
        };
        cols.forEach(function(col) {
          var colInstanceId = col.getInstanceId();
          var cellCtrl = prev.map[colInstanceId];
          if (!cellCtrl) {
            cellCtrl = new CellCtrl(col, _this.rowNode, _this.beans, _this);
          }
          addCell(colInstanceId, cellCtrl);
        });
        prev.list.forEach(function(prevCellCtrl) {
          var cellInResult = res.map[prevCellCtrl.getColumn().getInstanceId()] != null;
          if (cellInResult) {
            return;
          }
          var keepCell = !_this.isCellEligibleToBeRemoved(prevCellCtrl, pinned);
          if (keepCell) {
            addCell(prevCellCtrl.getColumn().getInstanceId(), prevCellCtrl);
            return;
          }
          prevCellCtrl.destroy();
        });
        return res;
      };
      RowCtrl2.prototype.updateColumnListsImpl = function() {
        var _this = this;
        this.updateColumnListsPending = false;
        var columnModel = this.beans.columnModel;
        if (this.printLayout) {
          this.centerCellCtrls = this.createCellCtrls(this.centerCellCtrls, columnModel.getAllDisplayedColumns());
          this.leftCellCtrls = { list: [], map: {} };
          this.rightCellCtrls = { list: [], map: {} };
        } else {
          var centerCols = columnModel.getViewportCenterColumnsForRow(this.rowNode);
          this.centerCellCtrls = this.createCellCtrls(this.centerCellCtrls, centerCols);
          var leftCols = columnModel.getDisplayedLeftColumnsForRow(this.rowNode);
          this.leftCellCtrls = this.createCellCtrls(this.leftCellCtrls, leftCols, Constants.PINNED_LEFT);
          var rightCols = columnModel.getDisplayedRightColumnsForRow(this.rowNode);
          this.rightCellCtrls = this.createCellCtrls(this.rightCellCtrls, rightCols, Constants.PINNED_RIGHT);
        }
        this.allRowGuis.forEach(function(item) {
          var cellControls = item.containerType === RowContainerType.LEFT ? _this.leftCellCtrls : item.containerType === RowContainerType.RIGHT ? _this.rightCellCtrls : _this.centerCellCtrls;
          item.rowComp.setCellCtrls(cellControls.list);
        });
      };
      RowCtrl2.prototype.isCellEligibleToBeRemoved = function(cellCtrl, nextContainerPinned) {
        var REMOVE_CELL = true;
        var KEEP_CELL = false;
        var column = cellCtrl.getColumn();
        if (column.getPinned() != nextContainerPinned) {
          return REMOVE_CELL;
        }
        var editing = cellCtrl.isEditing();
        var focused = this.beans.focusService.isCellFocused(cellCtrl.getCellPosition());
        var mightWantToKeepCell = editing || focused;
        if (mightWantToKeepCell) {
          var column_1 = cellCtrl.getColumn();
          var displayedColumns = this.beans.columnModel.getAllDisplayedColumns();
          var cellStillDisplayed = displayedColumns.indexOf(column_1) >= 0;
          return cellStillDisplayed ? KEEP_CELL : REMOVE_CELL;
        }
        return REMOVE_CELL;
      };
      RowCtrl2.prototype.setAnimateFlags = function(animateIn) {
        if (!this.isSticky() && animateIn) {
          var oldRowTopExists = exists(this.rowNode.oldRowTop);
          this.slideRowIn = oldRowTopExists;
          this.fadeRowIn = !oldRowTopExists;
        } else {
          this.slideRowIn = false;
          this.fadeRowIn = false;
        }
      };
      RowCtrl2.prototype.isEditing = function() {
        return this.editingRow;
      };
      RowCtrl2.prototype.stopRowEditing = function(cancel) {
        this.stopEditing(cancel);
      };
      RowCtrl2.prototype.isFullWidth = function() {
        return this.rowType !== RowType$1.Normal;
      };
      RowCtrl2.prototype.getRowType = function() {
        return this.rowType;
      };
      RowCtrl2.prototype.refreshFullWidth = function() {
        var _this = this;
        var tryRefresh = function(gui, pinned) {
          if (!gui) {
            return true;
          }
          var cellRenderer = gui.rowComp.getFullWidthCellRenderer();
          if (!cellRenderer) {
            return false;
          }
          if (!cellRenderer.refresh) {
            return false;
          }
          var params = _this.createFullWidthParams(gui.element, pinned);
          var refreshSucceeded = cellRenderer.refresh(params);
          return refreshSucceeded;
        };
        var fullWidthSuccess = tryRefresh(this.fullWidthGui, null);
        var centerSuccess = tryRefresh(this.centerGui, null);
        var leftSuccess = tryRefresh(this.leftGui, Constants.PINNED_LEFT);
        var rightSuccess = tryRefresh(this.rightGui, Constants.PINNED_RIGHT);
        var allFullWidthRowsRefreshed = fullWidthSuccess && centerSuccess && leftSuccess && rightSuccess;
        return allFullWidthRowsRefreshed;
      };
      RowCtrl2.prototype.addListeners = function() {
        this.addManagedListener(this.rowNode, RowNode.EVENT_HEIGHT_CHANGED, this.onRowHeightChanged.bind(this));
        this.addManagedListener(this.rowNode, RowNode.EVENT_ROW_SELECTED, this.onRowSelected.bind(this));
        this.addManagedListener(this.rowNode, RowNode.EVENT_ROW_INDEX_CHANGED, this.onRowIndexChanged.bind(this));
        this.addManagedListener(this.rowNode, RowNode.EVENT_TOP_CHANGED, this.onTopChanged.bind(this));
        this.addManagedListener(this.rowNode, RowNode.EVENT_EXPANDED_CHANGED, this.updateExpandedCss.bind(this));
        this.addManagedListener(this.rowNode, RowNode.EVENT_HAS_CHILDREN_CHANGED, this.updateExpandedCss.bind(this));
        this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.onRowNodeDataChanged.bind(this));
        this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, this.onRowNodeCellChanged.bind(this));
        this.addManagedListener(this.rowNode, RowNode.EVENT_HIGHLIGHT_CHANGED, this.onRowNodeHighlightChanged.bind(this));
        this.addManagedListener(this.rowNode, RowNode.EVENT_DRAGGING_CHANGED, this.onRowNodeDraggingChanged.bind(this));
        this.addManagedListener(this.rowNode, RowNode.EVENT_UI_LEVEL_CHANGED, this.onUiLevelChanged.bind(this));
        var eventService = this.beans.eventService;
        this.addManagedListener(eventService, Events.EVENT_PAGINATION_PIXEL_OFFSET_CHANGED, this.onPaginationPixelOffsetChanged.bind(this));
        this.addManagedListener(eventService, Events.EVENT_HEIGHT_SCALE_CHANGED, this.onTopChanged.bind(this));
        this.addManagedListener(eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
        this.addManagedListener(eventService, Events.EVENT_VIRTUAL_COLUMNS_CHANGED, this.onVirtualColumnsChanged.bind(this));
        this.addManagedListener(eventService, Events.EVENT_CELL_FOCUSED, this.onCellFocusChanged.bind(this));
        this.addManagedListener(eventService, Events.EVENT_PAGINATION_CHANGED, this.onPaginationChanged.bind(this));
        this.addManagedListener(eventService, Events.EVENT_MODEL_UPDATED, this.onModelUpdated.bind(this));
        this.addManagedListener(eventService, Events.EVENT_COLUMN_MOVED, this.onColumnMoved.bind(this));
        this.addListenersForCellComps();
      };
      RowCtrl2.prototype.onColumnMoved = function() {
        this.updateColumnLists();
      };
      RowCtrl2.prototype.addListenersForCellComps = function() {
        var _this = this;
        this.addManagedListener(this.rowNode, RowNode.EVENT_ROW_INDEX_CHANGED, function() {
          _this.getAllCellCtrls().forEach(function(cellCtrl) {
            return cellCtrl.onRowIndexChanged();
          });
        });
        this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, function(event) {
          _this.getAllCellCtrls().forEach(function(cellCtrl) {
            return cellCtrl.onCellChanged(event);
          });
        });
      };
      RowCtrl2.prototype.onRowNodeDataChanged = function(event) {
        this.getAllCellCtrls().forEach(function(cellCtrl) {
          return cellCtrl.refreshCell({
            suppressFlash: !event.update,
            newData: !event.update
          });
        });
        this.onRowSelected();
        this.postProcessCss();
      };
      RowCtrl2.prototype.onRowNodeCellChanged = function() {
        this.postProcessCss();
      };
      RowCtrl2.prototype.postProcessCss = function() {
        this.setStylesFromGridOptions();
        this.postProcessClassesFromGridOptions();
        this.postProcessRowClassRules();
        this.postProcessRowDragging();
      };
      RowCtrl2.prototype.onRowNodeHighlightChanged = function() {
        var highlighted = this.rowNode.highlighted;
        this.allRowGuis.forEach(function(gui) {
          var aboveOn = highlighted === RowHighlightPosition.Above;
          var belowOn = highlighted === RowHighlightPosition.Below;
          gui.rowComp.addOrRemoveCssClass("ag-row-highlight-above", aboveOn);
          gui.rowComp.addOrRemoveCssClass("ag-row-highlight-below", belowOn);
        });
      };
      RowCtrl2.prototype.onRowNodeDraggingChanged = function() {
        this.postProcessRowDragging();
      };
      RowCtrl2.prototype.postProcessRowDragging = function() {
        var dragging = this.rowNode.dragging;
        this.allRowGuis.forEach(function(gui) {
          return gui.rowComp.addOrRemoveCssClass("ag-row-dragging", dragging);
        });
      };
      RowCtrl2.prototype.updateExpandedCss = function() {
        var expandable = this.rowNode.isExpandable();
        var expanded = this.rowNode.expanded == true;
        this.allRowGuis.forEach(function(gui) {
          gui.rowComp.addOrRemoveCssClass("ag-row-group", expandable);
          gui.rowComp.addOrRemoveCssClass("ag-row-group-expanded", expandable && expanded);
          gui.rowComp.addOrRemoveCssClass("ag-row-group-contracted", expandable && !expanded);
          setAriaExpanded(gui.element, expandable && expanded);
        });
      };
      RowCtrl2.prototype.onDisplayedColumnsChanged = function() {
        this.updateColumnLists(true);
        if (this.beans.columnModel.wasAutoRowHeightEverActive()) {
          this.rowNode.checkAutoHeights();
        }
      };
      RowCtrl2.prototype.onVirtualColumnsChanged = function() {
        this.updateColumnLists();
      };
      RowCtrl2.prototype.getRowPosition = function() {
        return {
          rowPinned: makeNull(this.rowNode.rowPinned),
          rowIndex: this.rowNode.rowIndex
        };
      };
      RowCtrl2.prototype.onKeyboardNavigate = function(keyboardEvent) {
        var currentFullWidthComp = this.allRowGuis.find(function(c) {
          return c.element.contains(keyboardEvent.target);
        });
        var currentFullWidthContainer = currentFullWidthComp ? currentFullWidthComp.element : null;
        var isFullWidthContainerFocused = currentFullWidthContainer === keyboardEvent.target;
        if (!isFullWidthContainerFocused) {
          return;
        }
        var node = this.rowNode;
        var lastFocusedCell = this.beans.focusService.getFocusedCell();
        var cellPosition = {
          rowIndex: node.rowIndex,
          rowPinned: node.rowPinned,
          column: lastFocusedCell && lastFocusedCell.column
        };
        this.beans.navigationService.navigateToNextCell(keyboardEvent, keyboardEvent.key, cellPosition, true);
        keyboardEvent.preventDefault();
      };
      RowCtrl2.prototype.onTabKeyDown = function(keyboardEvent) {
        if (keyboardEvent.defaultPrevented || isStopPropagationForAgGrid(keyboardEvent)) {
          return;
        }
        var currentFullWidthComp = this.allRowGuis.find(function(c) {
          return c.element.contains(keyboardEvent.target);
        });
        var currentFullWidthContainer = currentFullWidthComp ? currentFullWidthComp.element : null;
        var isFullWidthContainerFocused = currentFullWidthContainer === keyboardEvent.target;
        var nextEl = null;
        if (!isFullWidthContainerFocused) {
          nextEl = this.beans.focusService.findNextFocusableElement(currentFullWidthContainer, false, keyboardEvent.shiftKey);
        }
        if (this.isFullWidth() && isFullWidthContainerFocused || !nextEl) {
          this.beans.navigationService.onTabKeyDown(this, keyboardEvent);
        }
      };
      RowCtrl2.prototype.onFullWidthRowFocused = function(event) {
        var _a;
        var node = this.rowNode;
        var isFocused = this.isFullWidth() && event.rowIndex === node.rowIndex && event.rowPinned == node.rowPinned;
        var element = this.fullWidthGui ? this.fullWidthGui.element : (_a = this.centerGui) === null || _a === void 0 ? void 0 : _a.element;
        if (!element) {
          return;
        }
        element.classList.toggle("ag-full-width-focus", isFocused);
        if (isFocused) {
          element.focus({ preventScroll: true });
        }
      };
      RowCtrl2.prototype.refreshCell = function(cellCtrl) {
        this.centerCellCtrls = this.removeCellCtrl(this.centerCellCtrls, cellCtrl);
        this.leftCellCtrls = this.removeCellCtrl(this.leftCellCtrls, cellCtrl);
        this.rightCellCtrls = this.removeCellCtrl(this.rightCellCtrls, cellCtrl);
        this.updateColumnLists();
      };
      RowCtrl2.prototype.removeCellCtrl = function(prev, cellCtrlToRemove) {
        var res = {
          list: [],
          map: {}
        };
        prev.list.forEach(function(cellCtrl) {
          if (cellCtrl === cellCtrlToRemove) {
            return;
          }
          res.list.push(cellCtrl);
          res.map[cellCtrl.getInstanceId()] = cellCtrl;
        });
        return res;
      };
      RowCtrl2.prototype.onMouseEvent = function(eventName, mouseEvent) {
        switch (eventName) {
          case "dblclick":
            this.onRowDblClick(mouseEvent);
            break;
          case "click":
            this.onRowClick(mouseEvent);
            break;
          case "touchstart":
          case "mousedown":
            this.onRowMouseDown(mouseEvent);
            break;
        }
      };
      RowCtrl2.prototype.createRowEvent = function(type, domEvent) {
        return {
          type,
          node: this.rowNode,
          data: this.rowNode.data,
          rowIndex: this.rowNode.rowIndex,
          rowPinned: this.rowNode.rowPinned,
          context: this.beans.gridOptionsWrapper.getContext(),
          api: this.beans.gridOptionsWrapper.getApi(),
          columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
          event: domEvent
        };
      };
      RowCtrl2.prototype.createRowEventWithSource = function(type, domEvent) {
        var event = this.createRowEvent(type, domEvent);
        event.source = this;
        return event;
      };
      RowCtrl2.prototype.onRowDblClick = function(mouseEvent) {
        if (isStopPropagationForAgGrid(mouseEvent)) {
          return;
        }
        var agEvent = this.createRowEventWithSource(Events.EVENT_ROW_DOUBLE_CLICKED, mouseEvent);
        this.beans.eventService.dispatchEvent(agEvent);
      };
      RowCtrl2.prototype.onRowMouseDown = function(mouseEvent) {
        this.lastMouseDownOnDragger = isElementChildOfClass(mouseEvent.target, "ag-row-drag", 3);
        if (!this.isFullWidth()) {
          return;
        }
        var node = this.rowNode;
        var columnModel = this.beans.columnModel;
        if (this.beans.rangeService) {
          this.beans.rangeService.removeAllCellRanges();
        }
        this.beans.focusService.setFocusedCell({
          rowIndex: node.rowIndex,
          column: columnModel.getAllDisplayedColumns()[0],
          rowPinned: node.rowPinned,
          forceBrowserFocus: true
        });
      };
      RowCtrl2.prototype.onRowClick = function(mouseEvent) {
        var stop = isStopPropagationForAgGrid(mouseEvent) || this.lastMouseDownOnDragger;
        if (stop) {
          return;
        }
        var agEvent = this.createRowEventWithSource(Events.EVENT_ROW_CLICKED, mouseEvent);
        this.beans.eventService.dispatchEvent(agEvent);
        var multiSelectKeyPressed = mouseEvent.ctrlKey || mouseEvent.metaKey;
        var shiftKeyPressed = mouseEvent.shiftKey;
        var groupSelectsChildren = this.beans.gridOptionsWrapper.isGroupSelectsChildren();
        if (groupSelectsChildren && this.rowNode.group || !this.rowNode.selectable || this.rowNode.rowPinned || !this.beans.gridOptionsWrapper.isRowSelection() || this.beans.gridOptionsWrapper.isSuppressRowClickSelection()) {
          return;
        }
        var multiSelectOnClick = this.beans.gridOptionsWrapper.isRowMultiSelectWithClick();
        var rowDeselectionWithCtrl = !this.beans.gridOptionsWrapper.isSuppressRowDeselection();
        if (this.rowNode.isSelected()) {
          if (multiSelectOnClick) {
            this.rowNode.setSelectedParams({ newValue: false, event: mouseEvent });
          } else if (multiSelectKeyPressed) {
            if (rowDeselectionWithCtrl) {
              this.rowNode.setSelectedParams({ newValue: false, event: mouseEvent });
            }
          } else {
            this.rowNode.setSelectedParams({ newValue: true, clearSelection: !shiftKeyPressed, rangeSelect: shiftKeyPressed, event: mouseEvent });
          }
        } else {
          var clearSelection = multiSelectOnClick ? false : !multiSelectKeyPressed;
          this.rowNode.setSelectedParams({ newValue: true, clearSelection, rangeSelect: shiftKeyPressed, event: mouseEvent });
        }
      };
      RowCtrl2.prototype.setupDetailRowAutoHeight = function(eDetailGui) {
        var _this = this;
        if (this.rowType !== RowType$1.FullWidthDetail) {
          return;
        }
        if (!this.beans.gridOptionsWrapper.isDetailRowAutoHeight()) {
          return;
        }
        var checkRowSizeFunc = function() {
          var clientHeight = eDetailGui.clientHeight;
          if (clientHeight != null && clientHeight > 0) {
            var updateRowHeightFunc = function() {
              _this.rowNode.setRowHeight(clientHeight);
              if (_this.beans.clientSideRowModel) {
                _this.beans.clientSideRowModel.onRowHeightChanged();
              } else if (_this.beans.serverSideRowModel) {
                _this.beans.serverSideRowModel.onRowHeightChanged();
              }
            };
            _this.beans.frameworkOverrides.setTimeout(updateRowHeightFunc, 0);
          }
        };
        var resizeObserverDestroyFunc = this.beans.resizeObserverService.observeResize(eDetailGui, checkRowSizeFunc);
        this.addDestroyFunc(resizeObserverDestroyFunc);
        checkRowSizeFunc();
      };
      RowCtrl2.prototype.createFullWidthParams = function(eRow, pinned) {
        var _this = this;
        var params = {
          fullWidth: true,
          data: this.rowNode.data,
          node: this.rowNode,
          value: this.rowNode.key,
          valueFormatted: this.rowNode.key,
          rowIndex: this.rowNode.rowIndex,
          api: this.beans.gridOptionsWrapper.getApi(),
          columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
          context: this.beans.gridOptionsWrapper.getContext(),
          eGridCell: eRow,
          eParentOfValue: eRow,
          pinned,
          addRenderedRowListener: this.addEventListener.bind(this),
          registerRowDragger: function(rowDraggerElement, dragStartPixels, value, suppressVisibilityChange) {
            return _this.addFullWidthRowDragging(rowDraggerElement, dragStartPixels, value, suppressVisibilityChange);
          }
        };
        return params;
      };
      RowCtrl2.prototype.addFullWidthRowDragging = function(rowDraggerElement, dragStartPixels, value, suppressVisibilityChange) {
        if (value === void 0) {
          value = "";
        }
        if (!this.isFullWidth()) {
          return;
        }
        var rowDragComp = new RowDragComp(function() {
          return value;
        }, this.rowNode, void 0, rowDraggerElement, dragStartPixels, suppressVisibilityChange);
        this.createManagedBean(rowDragComp, this.beans.context);
      };
      RowCtrl2.prototype.onUiLevelChanged = function() {
        var newLevel = this.beans.rowCssClassCalculator.calculateRowLevel(this.rowNode);
        if (this.rowLevel != newLevel) {
          var classToAdd_1 = "ag-row-level-" + newLevel;
          var classToRemove_1 = "ag-row-level-" + this.rowLevel;
          this.allRowGuis.forEach(function(gui) {
            gui.rowComp.addOrRemoveCssClass(classToAdd_1, true);
            gui.rowComp.addOrRemoveCssClass(classToRemove_1, false);
          });
        }
        this.rowLevel = newLevel;
      };
      RowCtrl2.prototype.isFirstRowOnPage = function() {
        return this.rowNode.rowIndex === this.beans.paginationProxy.getPageFirstRow();
      };
      RowCtrl2.prototype.isLastRowOnPage = function() {
        return this.rowNode.rowIndex === this.beans.paginationProxy.getPageLastRow();
      };
      RowCtrl2.prototype.onModelUpdated = function() {
        this.refreshFirstAndLastRowStyles();
      };
      RowCtrl2.prototype.refreshFirstAndLastRowStyles = function() {
        var newFirst = this.isFirstRowOnPage();
        var newLast = this.isLastRowOnPage();
        if (this.firstRowOnPage !== newFirst) {
          this.firstRowOnPage = newFirst;
          this.allRowGuis.forEach(function(gui) {
            return gui.rowComp.addOrRemoveCssClass("ag-row-first", newFirst);
          });
        }
        if (this.lastRowOnPage !== newLast) {
          this.lastRowOnPage = newLast;
          this.allRowGuis.forEach(function(gui) {
            return gui.rowComp.addOrRemoveCssClass("ag-row-last", newLast);
          });
        }
      };
      RowCtrl2.prototype.stopEditing = function(cancel) {
        var e_1, _a;
        if (cancel === void 0) {
          cancel = false;
        }
        if (this.stoppingRowEdit) {
          return;
        }
        var cellControls = this.getAllCellCtrls();
        var isRowEdit = this.editingRow;
        this.stoppingRowEdit = true;
        var fireRowEditEvent = false;
        try {
          for (var cellControls_1 = __values$2(cellControls), cellControls_1_1 = cellControls_1.next(); !cellControls_1_1.done; cellControls_1_1 = cellControls_1.next()) {
            var ctrl = cellControls_1_1.value;
            var valueChanged = ctrl.stopEditing(cancel);
            if (isRowEdit && !cancel && !fireRowEditEvent && valueChanged) {
              fireRowEditEvent = true;
            }
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (cellControls_1_1 && !cellControls_1_1.done && (_a = cellControls_1.return))
              _a.call(cellControls_1);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        if (fireRowEditEvent) {
          var event_1 = this.createRowEvent(Events.EVENT_ROW_VALUE_CHANGED);
          this.beans.eventService.dispatchEvent(event_1);
        }
        if (isRowEdit) {
          this.setEditingRow(false);
        }
        this.stoppingRowEdit = false;
      };
      RowCtrl2.prototype.setInlineEditingCss = function(editing) {
        this.allRowGuis.forEach(function(gui) {
          gui.rowComp.addOrRemoveCssClass("ag-row-inline-editing", editing);
          gui.rowComp.addOrRemoveCssClass("ag-row-not-inline-editing", !editing);
        });
      };
      RowCtrl2.prototype.setEditingRow = function(value) {
        this.editingRow = value;
        this.allRowGuis.forEach(function(gui) {
          return gui.rowComp.addOrRemoveCssClass("ag-row-editing", value);
        });
        var event = value ? this.createRowEvent(Events.EVENT_ROW_EDITING_STARTED) : this.createRowEvent(Events.EVENT_ROW_EDITING_STOPPED);
        this.beans.eventService.dispatchEvent(event);
      };
      RowCtrl2.prototype.startRowEditing = function(key, charPress, sourceRenderedCell, event) {
        if (key === void 0) {
          key = null;
        }
        if (charPress === void 0) {
          charPress = null;
        }
        if (sourceRenderedCell === void 0) {
          sourceRenderedCell = null;
        }
        if (event === void 0) {
          event = null;
        }
        if (this.editingRow) {
          return;
        }
        var atLeastOneEditing = this.getAllCellCtrls().reduce(function(prev, cellCtrl) {
          var cellStartedEdit = cellCtrl === sourceRenderedCell;
          if (cellStartedEdit) {
            cellCtrl.startEditing(key, charPress, cellStartedEdit, event);
          } else {
            cellCtrl.startEditing(null, null, cellStartedEdit, event);
          }
          if (prev) {
            return true;
          }
          return cellCtrl.isEditing();
        }, false);
        if (atLeastOneEditing) {
          this.setEditingRow(true);
        }
      };
      RowCtrl2.prototype.getAllCellCtrls = function() {
        var res = __spread$d(this.centerCellCtrls.list, this.leftCellCtrls.list, this.rightCellCtrls.list);
        return res;
      };
      RowCtrl2.prototype.postProcessClassesFromGridOptions = function() {
        var _this = this;
        var cssClasses = this.beans.rowCssClassCalculator.processClassesFromGridOptions(this.rowNode);
        if (!cssClasses || !cssClasses.length) {
          return;
        }
        cssClasses.forEach(function(classStr) {
          _this.allRowGuis.forEach(function(c) {
            return c.rowComp.addOrRemoveCssClass(classStr, true);
          });
        });
      };
      RowCtrl2.prototype.postProcessRowClassRules = function() {
        var _this = this;
        this.beans.rowCssClassCalculator.processRowClassRules(this.rowNode, function(className) {
          _this.allRowGuis.forEach(function(gui) {
            return gui.rowComp.addOrRemoveCssClass(className, true);
          });
        }, function(className) {
          _this.allRowGuis.forEach(function(gui) {
            return gui.rowComp.addOrRemoveCssClass(className, false);
          });
        });
      };
      RowCtrl2.prototype.setStylesFromGridOptions = function() {
        var rowStyles = this.processStylesFromGridOptions();
        this.allRowGuis.forEach(function(gui) {
          return gui.rowComp.setUserStyles(rowStyles);
        });
      };
      RowCtrl2.prototype.getRowBusinessKey = function() {
        var businessKeyForNodeFunc = this.beans.gridOptionsWrapper.getBusinessKeyForNodeFunc();
        if (typeof businessKeyForNodeFunc !== "function") {
          return;
        }
        return businessKeyForNodeFunc(this.rowNode);
      };
      RowCtrl2.prototype.getPinnedForContainer = function(rowContainerType) {
        var pinned = rowContainerType === RowContainerType.LEFT ? Constants.PINNED_LEFT : rowContainerType === RowContainerType.RIGHT ? Constants.PINNED_RIGHT : null;
        return pinned;
      };
      RowCtrl2.prototype.getInitialRowClasses = function(rowContainerType) {
        var pinned = this.getPinnedForContainer(rowContainerType);
        var params = {
          rowNode: this.rowNode,
          rowFocused: this.rowFocused,
          fadeRowIn: this.fadeRowIn,
          rowIsEven: this.rowNode.rowIndex % 2 === 0,
          rowLevel: this.rowLevel,
          fullWidthRow: this.isFullWidth(),
          firstRowOnPage: this.isFirstRowOnPage(),
          lastRowOnPage: this.isLastRowOnPage(),
          printLayout: this.printLayout,
          expandable: this.rowNode.isExpandable(),
          pinned
        };
        return this.beans.rowCssClassCalculator.getInitialRowClasses(params);
      };
      RowCtrl2.prototype.processStylesFromGridOptions = function() {
        var rowStyle = this.beans.gridOptionsWrapper.getRowStyle();
        if (rowStyle && typeof rowStyle === "function") {
          console.warn("AG Grid: rowStyle should be an object of key/value styles, not be a function, use getRowStyle() instead");
          return;
        }
        var rowStyleFunc = this.beans.gridOptionsWrapper.getRowStyleFunc();
        var rowStyleFuncResult;
        if (rowStyleFunc) {
          var params = {
            data: this.rowNode.data,
            node: this.rowNode,
            rowIndex: this.rowNode.rowIndex
          };
          rowStyleFuncResult = rowStyleFunc(params);
        }
        return Object.assign({}, rowStyle, rowStyleFuncResult);
      };
      RowCtrl2.prototype.onRowSelected = function() {
        var _this = this;
        var selected = !!this.rowNode.isSelected();
        this.allRowGuis.forEach(function(gui) {
          gui.rowComp.addOrRemoveCssClass("ag-row-selected", selected);
          setAriaSelected(gui.element, selected ? true : void 0);
          var ariaLabel = _this.createAriaLabel();
          setAriaLabel(gui.element, ariaLabel == null ? "" : ariaLabel);
        });
      };
      RowCtrl2.prototype.createAriaLabel = function() {
        var selected = this.rowNode.isSelected();
        if (selected && this.beans.gridOptionsWrapper.isSuppressRowDeselection()) {
          return void 0;
        }
        var translate = this.beans.gridOptionsWrapper.getLocaleTextFunc();
        var label = translate(selected ? "ariaRowDeselect" : "ariaRowSelect", "Press SPACE to " + (selected ? "deselect" : "select") + " this row.");
        return label;
      };
      RowCtrl2.prototype.isUseAnimationFrameForCreate = function() {
        return this.useAnimationFrameForCreate;
      };
      RowCtrl2.prototype.addHoverFunctionality = function(eRow) {
        var _this = this;
        if (!this.active) {
          return;
        }
        this.addManagedListener(eRow, "mouseenter", function() {
          return _this.rowNode.onMouseEnter();
        });
        this.addManagedListener(eRow, "mouseleave", function() {
          return _this.rowNode.onMouseLeave();
        });
        this.addManagedListener(this.rowNode, RowNode.EVENT_MOUSE_ENTER, function() {
          if (!_this.beans.gridOptionsWrapper.isSuppressRowHoverHighlight()) {
            eRow.classList.add("ag-row-hover");
          }
        });
        this.addManagedListener(this.rowNode, RowNode.EVENT_MOUSE_LEAVE, function() {
          eRow.classList.remove("ag-row-hover");
        });
      };
      RowCtrl2.prototype.roundRowTopToBounds = function(rowTop) {
        var gridBodyCon = this.beans.ctrlsService.getGridBodyCtrl();
        var range = gridBodyCon.getScrollFeature().getVScrollPosition();
        var minPixel = this.applyPaginationOffset(range.top, true) - 100;
        var maxPixel = this.applyPaginationOffset(range.bottom, true) + 100;
        return Math.min(Math.max(minPixel, rowTop), maxPixel);
      };
      RowCtrl2.prototype.getFrameworkOverrides = function() {
        return this.beans.frameworkOverrides;
      };
      RowCtrl2.prototype.onRowHeightChanged = function() {
        if (this.rowNode.rowHeight == null) {
          return;
        }
        var rowHeight = this.rowNode.rowHeight;
        var defaultRowHeight = this.beans.gridOptionsWrapper.getDefaultRowHeight();
        var isHeightFromFunc = this.beans.gridOptionsWrapper.isGetRowHeightFunction();
        var heightFromFunc = isHeightFromFunc ? this.beans.gridOptionsWrapper.getRowHeightForNode(this.rowNode).height : void 0;
        var lineHeight = heightFromFunc ? Math.min(defaultRowHeight, heightFromFunc) - 2 + "px" : void 0;
        this.allRowGuis.forEach(function(gui) {
          gui.element.style.height = rowHeight + "px";
          if (lineHeight) {
            gui.element.style.setProperty("--ag-line-height", lineHeight);
          }
        });
      };
      RowCtrl2.prototype.addEventListener = function(eventType, listener) {
        if (eventType === "renderedRowRemoved" || eventType === "rowRemoved") {
          eventType = Events.EVENT_VIRTUAL_ROW_REMOVED;
          console.warn("AG Grid: Since version 11, event renderedRowRemoved is now called " + Events.EVENT_VIRTUAL_ROW_REMOVED);
        }
        _super.prototype.addEventListener.call(this, eventType, listener);
      };
      RowCtrl2.prototype.removeEventListener = function(eventType, listener) {
        if (eventType === "renderedRowRemoved" || eventType === "rowRemoved") {
          eventType = Events.EVENT_VIRTUAL_ROW_REMOVED;
          console.warn("AG Grid: Since version 11, event renderedRowRemoved and rowRemoved is now called " + Events.EVENT_VIRTUAL_ROW_REMOVED);
        }
        _super.prototype.removeEventListener.call(this, eventType, listener);
      };
      RowCtrl2.prototype.destroyFirstPass = function() {
        this.active = false;
        this.setupRemoveAnimation();
        var event = this.createRowEvent(Events.EVENT_VIRTUAL_ROW_REMOVED);
        this.dispatchEvent(event);
        this.beans.eventService.dispatchEvent(event);
        _super.prototype.destroy.call(this);
      };
      RowCtrl2.prototype.setupRemoveAnimation = function() {
        if (this.isSticky()) {
          return;
        }
        var rowStillVisibleJustNotInViewport = this.rowNode.rowTop != null;
        if (rowStillVisibleJustNotInViewport) {
          var rowTop = this.roundRowTopToBounds(this.rowNode.rowTop);
          this.setRowTop(rowTop);
        } else {
          this.allRowGuis.forEach(function(gui) {
            return gui.rowComp.addOrRemoveCssClass("ag-opacity-zero", true);
          });
        }
      };
      RowCtrl2.prototype.destroySecondPass = function() {
        this.allRowGuis.length = 0;
        var destroyCellCtrls = function(ctrls) {
          ctrls.list.forEach(function(c) {
            return c.destroy();
          });
          return { list: [], map: {} };
        };
        this.centerCellCtrls = destroyCellCtrls(this.centerCellCtrls);
        this.leftCellCtrls = destroyCellCtrls(this.leftCellCtrls);
        this.rightCellCtrls = destroyCellCtrls(this.rightCellCtrls);
      };
      RowCtrl2.prototype.setFocusedClasses = function() {
        var _this = this;
        this.allRowGuis.forEach(function(gui) {
          gui.rowComp.addOrRemoveCssClass("ag-row-focus", _this.rowFocused);
          gui.rowComp.addOrRemoveCssClass("ag-row-no-focus", !_this.rowFocused);
        });
      };
      RowCtrl2.prototype.onCellFocusChanged = function() {
        var rowFocused = this.beans.focusService.isRowFocused(this.rowNode.rowIndex, this.rowNode.rowPinned);
        if (rowFocused !== this.rowFocused) {
          this.rowFocused = rowFocused;
          this.setFocusedClasses();
        }
        if (!rowFocused && this.editingRow) {
          this.stopEditing(false);
        }
      };
      RowCtrl2.prototype.onPaginationChanged = function() {
        var currentPage = this.beans.paginationProxy.getCurrentPage();
        if (this.paginationPage !== currentPage) {
          this.paginationPage = currentPage;
          this.onTopChanged();
        }
        this.refreshFirstAndLastRowStyles();
      };
      RowCtrl2.prototype.onTopChanged = function() {
        this.setRowTop(this.rowNode.rowTop);
      };
      RowCtrl2.prototype.onPaginationPixelOffsetChanged = function() {
        this.onTopChanged();
      };
      RowCtrl2.prototype.applyPaginationOffset = function(topPx, reverse) {
        if (reverse === void 0) {
          reverse = false;
        }
        if (this.rowNode.isRowPinned()) {
          return topPx;
        }
        var pixelOffset = this.beans.paginationProxy.getPixelOffset();
        var multiplier = reverse ? 1 : -1;
        return topPx + pixelOffset * multiplier;
      };
      RowCtrl2.prototype.setRowTop = function(pixels) {
        if (this.printLayout) {
          return;
        }
        if (exists(pixels)) {
          var afterPaginationPixels = this.applyPaginationOffset(pixels);
          var afterScalingPixels = this.rowNode.isRowPinned() ? afterPaginationPixels : this.beans.rowContainerHeightService.getRealPixelPosition(afterPaginationPixels);
          var topPx = afterScalingPixels + "px";
          this.setRowTopStyle(topPx);
        }
      };
      RowCtrl2.prototype.getInitialRowTop = function() {
        var suppressRowTransform = this.beans.gridOptionsWrapper.isSuppressRowTransform();
        return suppressRowTransform ? this.getInitialRowTopShared() : void 0;
      };
      RowCtrl2.prototype.getInitialTransform = function() {
        var suppressRowTransform = this.beans.gridOptionsWrapper.isSuppressRowTransform();
        return suppressRowTransform ? void 0 : "translateY(" + this.getInitialRowTopShared() + ")";
      };
      RowCtrl2.prototype.getInitialRowTopShared = function() {
        if (this.printLayout) {
          return "";
        }
        var rowTop;
        if (this.isSticky()) {
          rowTop = this.rowNode.stickyRowTop;
        } else {
          var pixels = this.slideRowIn ? this.roundRowTopToBounds(this.rowNode.oldRowTop) : this.rowNode.rowTop;
          var afterPaginationPixels = this.applyPaginationOffset(pixels);
          rowTop = this.rowNode.isRowPinned() ? afterPaginationPixels : this.beans.rowContainerHeightService.getRealPixelPosition(afterPaginationPixels);
        }
        return rowTop + "px";
      };
      RowCtrl2.prototype.setRowTopStyle = function(topPx) {
        var suppressRowTransform = this.beans.gridOptionsWrapper.isSuppressRowTransform();
        this.allRowGuis.forEach(function(gui) {
          return suppressRowTransform ? gui.rowComp.setTop(topPx) : gui.rowComp.setTransform("translateY(" + topPx + ")");
        });
      };
      RowCtrl2.prototype.getRowNode = function() {
        return this.rowNode;
      };
      RowCtrl2.prototype.getCellCtrl = function(column) {
        var res = null;
        this.getAllCellCtrls().forEach(function(cellCtrl) {
          if (cellCtrl.getColumn() == column) {
            res = cellCtrl;
          }
        });
        if (res != null) {
          return res;
        }
        this.getAllCellCtrls().forEach(function(cellCtrl) {
          if (cellCtrl.getColSpanningList().indexOf(column) >= 0) {
            res = cellCtrl;
          }
        });
        return res;
      };
      RowCtrl2.prototype.onRowIndexChanged = function() {
        if (this.rowNode.rowIndex != null) {
          this.onCellFocusChanged();
          this.updateRowIndexes();
          this.postProcessCss();
        }
      };
      RowCtrl2.prototype.updateRowIndexes = function() {
        var rowIndexStr = this.rowNode.getRowIndexString();
        var headerRowCount = this.beans.headerNavigationService.getHeaderRowCount();
        var rowIsEven = this.rowNode.rowIndex % 2 === 0;
        var ariaRowIndex = headerRowCount + this.rowNode.rowIndex + 1;
        this.allRowGuis.forEach(function(c) {
          c.rowComp.setRowIndex(rowIndexStr);
          c.rowComp.addOrRemoveCssClass("ag-row-even", rowIsEven);
          c.rowComp.addOrRemoveCssClass("ag-row-odd", !rowIsEven);
          setAriaRowIndex(c.element, ariaRowIndex);
        });
      };
      RowCtrl2.prototype.getPinnedLeftRowElement = function() {
        return this.leftGui ? this.leftGui.element : void 0;
      };
      RowCtrl2.prototype.getPinnedRightRowElement = function() {
        return this.rightGui ? this.rightGui.element : void 0;
      };
      RowCtrl2.prototype.getBodyRowElement = function() {
        return this.centerGui ? this.centerGui.element : void 0;
      };
      RowCtrl2.prototype.getFullWidthRowElement = function() {
        return this.fullWidthGui ? this.fullWidthGui.element : void 0;
      };
      RowCtrl2.DOM_DATA_KEY_ROW_CTRL = "renderedRow";
      return RowCtrl2;
    }(BeanStub);
    __extends$1T = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1M = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __read$g = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    RowContainerEventsFeature = function(_super) {
      __extends$1T(RowContainerEventsFeature2, _super);
      function RowContainerEventsFeature2(element) {
        var _this = _super.call(this) || this;
        _this.element = element;
        return _this;
      }
      RowContainerEventsFeature2.prototype.postConstruct = function() {
        this.addMouseListeners();
        this.mockContextMenuForIPad();
        this.addKeyboardEvents();
      };
      RowContainerEventsFeature2.prototype.addKeyboardEvents = function() {
        var _this = this;
        var eventNames = ["keydown", "keypress"];
        eventNames.forEach(function(eventName) {
          var listener = _this.processKeyboardEvent.bind(_this, eventName);
          _this.addManagedListener(_this.element, eventName, listener);
        });
      };
      RowContainerEventsFeature2.prototype.addMouseListeners = function() {
        var _this = this;
        var mouseDownEvent = isEventSupported("touchstart") ? "touchstart" : "mousedown";
        var eventNames = ["dblclick", "contextmenu", "mouseover", "mouseout", "click", mouseDownEvent];
        eventNames.forEach(function(eventName) {
          var listener = _this.processMouseEvent.bind(_this, eventName);
          _this.addManagedListener(_this.element, eventName, listener);
        });
      };
      RowContainerEventsFeature2.prototype.processMouseEvent = function(eventName, mouseEvent) {
        if (!this.mouseEventService.isEventFromThisGrid(mouseEvent) || isStopPropagationForAgGrid(mouseEvent)) {
          return;
        }
        var rowComp = this.getRowForEvent(mouseEvent);
        var cellCtrl = this.mouseEventService.getRenderedCellForEvent(mouseEvent);
        if (eventName === "contextmenu") {
          this.handleContextMenuMouseEvent(mouseEvent, null, rowComp, cellCtrl);
        } else {
          if (cellCtrl) {
            cellCtrl.onMouseEvent(eventName, mouseEvent);
          }
          if (rowComp) {
            rowComp.onMouseEvent(eventName, mouseEvent);
          }
        }
      };
      RowContainerEventsFeature2.prototype.mockContextMenuForIPad = function() {
        var _this = this;
        if (!isIOSUserAgent()) {
          return;
        }
        var touchListener = new TouchListener(this.element);
        var longTapListener = function(event) {
          var rowComp = _this.getRowForEvent(event.touchEvent);
          var cellComp = _this.mouseEventService.getRenderedCellForEvent(event.touchEvent);
          _this.handleContextMenuMouseEvent(null, event.touchEvent, rowComp, cellComp);
        };
        this.addManagedListener(touchListener, TouchListener.EVENT_LONG_TAP, longTapListener);
        this.addDestroyFunc(function() {
          return touchListener.destroy();
        });
      };
      RowContainerEventsFeature2.prototype.getRowForEvent = function(event) {
        var sourceElement = event.target;
        while (sourceElement) {
          var rowCon = this.gridOptionsWrapper.getDomData(sourceElement, RowCtrl.DOM_DATA_KEY_ROW_CTRL);
          if (rowCon) {
            return rowCon;
          }
          sourceElement = sourceElement.parentElement;
        }
        return null;
      };
      RowContainerEventsFeature2.prototype.handleContextMenuMouseEvent = function(mouseEvent, touchEvent, rowComp, cellCtrl) {
        var rowNode = rowComp ? rowComp.getRowNode() : null;
        var column = cellCtrl ? cellCtrl.getColumn() : null;
        var value = null;
        if (column) {
          var event_1 = mouseEvent ? mouseEvent : touchEvent;
          cellCtrl.dispatchCellContextMenuEvent(event_1);
          value = this.valueService.getValue(column, rowNode);
        }
        var gridBodyCon = this.ctrlsService.getGridBodyCtrl();
        var anchorToElement = cellCtrl ? cellCtrl.getGui() : gridBodyCon.getGridBodyElement();
        if (this.contextMenuFactory) {
          this.contextMenuFactory.onContextMenu(mouseEvent, touchEvent, rowNode, column, value, anchorToElement);
        }
      };
      RowContainerEventsFeature2.prototype.processKeyboardEvent = function(eventName, keyboardEvent) {
        var cellComp = getCtrlForEvent(this.gridOptionsWrapper, keyboardEvent, CellCtrl.DOM_DATA_KEY_CELL_CTRL);
        var rowComp = getCtrlForEvent(this.gridOptionsWrapper, keyboardEvent, RowCtrl.DOM_DATA_KEY_ROW_CTRL);
        if (keyboardEvent.defaultPrevented) {
          return;
        }
        if (cellComp) {
          this.processCellKeyboardEvent(cellComp, eventName, keyboardEvent);
        } else if (rowComp && rowComp.isFullWidth()) {
          this.processFullWidthRowKeyboardEvent(rowComp, eventName, keyboardEvent);
        }
      };
      RowContainerEventsFeature2.prototype.processCellKeyboardEvent = function(cellCtrl, eventName, keyboardEvent) {
        var rowNode = cellCtrl.getRowNode();
        var column = cellCtrl.getColumn();
        var editing = cellCtrl.isEditing();
        var gridProcessingAllowed = !isUserSuppressingKeyboardEvent(this.gridOptionsWrapper, keyboardEvent, rowNode, column, editing);
        if (gridProcessingAllowed) {
          switch (eventName) {
            case "keydown":
              var wasScrollKey = !editing && this.navigationService.handlePageScrollingKey(keyboardEvent);
              if (!wasScrollKey) {
                cellCtrl.onKeyDown(keyboardEvent);
              }
              this.doGridOperations(keyboardEvent, cellCtrl.isEditing());
              break;
            case "keypress":
              cellCtrl.onKeyPress(keyboardEvent);
              break;
          }
        }
        if (eventName === "keydown") {
          var cellKeyDownEvent = cellCtrl.createEvent(keyboardEvent, Events.EVENT_CELL_KEY_DOWN);
          this.eventService.dispatchEvent(cellKeyDownEvent);
        }
        if (eventName === "keypress") {
          var cellKeyPressEvent = cellCtrl.createEvent(keyboardEvent, Events.EVENT_CELL_KEY_PRESS);
          this.eventService.dispatchEvent(cellKeyPressEvent);
        }
      };
      RowContainerEventsFeature2.prototype.processFullWidthRowKeyboardEvent = function(rowComp, eventName, keyboardEvent) {
        var rowNode = rowComp.getRowNode();
        var focusedCell = this.focusService.getFocusedCell();
        var column = focusedCell && focusedCell.column;
        var gridProcessingAllowed = !isUserSuppressingKeyboardEvent(this.gridOptionsWrapper, keyboardEvent, rowNode, column, false);
        if (gridProcessingAllowed) {
          var key = keyboardEvent.key;
          if (eventName === "keydown") {
            switch (key) {
              case KeyCode.UP:
              case KeyCode.DOWN:
                rowComp.onKeyboardNavigate(keyboardEvent);
                break;
              case KeyCode.TAB:
                rowComp.onTabKeyDown(keyboardEvent);
            }
          }
        }
        if (eventName === "keydown") {
          var cellKeyDownEvent = rowComp.createRowEvent(Events.EVENT_CELL_KEY_DOWN, keyboardEvent);
          this.eventService.dispatchEvent(cellKeyDownEvent);
        }
        if (eventName === "keypress") {
          var cellKeyPressEvent = rowComp.createRowEvent(Events.EVENT_CELL_KEY_PRESS, keyboardEvent);
          this.eventService.dispatchEvent(cellKeyPressEvent);
        }
      };
      RowContainerEventsFeature2.prototype.doGridOperations = function(keyboardEvent, editing) {
        if (!keyboardEvent.ctrlKey && !keyboardEvent.metaKey) {
          return;
        }
        if (editing) {
          return;
        }
        if (!this.mouseEventService.isEventFromThisGrid(keyboardEvent)) {
          return;
        }
        var keyCode = normaliseQwertyAzerty(keyboardEvent);
        if (keyCode === KeyCode.A) {
          return this.onCtrlAndA(keyboardEvent);
        }
        if (keyCode === KeyCode.C) {
          return this.onCtrlAndC(keyboardEvent);
        }
        if (keyCode === KeyCode.V) {
          return this.onCtrlAndV();
        }
        if (keyCode === KeyCode.D) {
          return this.onCtrlAndD(keyboardEvent);
        }
        if (keyCode === KeyCode.Z) {
          return this.onCtrlAndZ(keyboardEvent);
        }
        if (keyCode === KeyCode.Y) {
          return this.onCtrlAndY();
        }
      };
      RowContainerEventsFeature2.prototype.onCtrlAndA = function(event) {
        var _a = this, pinnedRowModel = _a.pinnedRowModel, paginationProxy = _a.paginationProxy, rangeService = _a.rangeService;
        var PINNED_BOTTOM = Constants.PINNED_BOTTOM, PINNED_TOP = Constants.PINNED_TOP;
        if (rangeService && paginationProxy.isRowsToRender()) {
          var _b = __read$g([
            pinnedRowModel.isEmpty(PINNED_TOP),
            pinnedRowModel.isEmpty(PINNED_BOTTOM)
          ], 2), isEmptyPinnedTop = _b[0], isEmptyPinnedBottom = _b[1];
          var floatingStart = isEmptyPinnedTop ? null : PINNED_TOP;
          var floatingEnd = void 0;
          var rowEnd = void 0;
          if (isEmptyPinnedBottom) {
            floatingEnd = null;
            rowEnd = this.paginationProxy.getRowCount() - 1;
          } else {
            floatingEnd = PINNED_BOTTOM;
            rowEnd = pinnedRowModel.getPinnedBottomRowData().length - 1;
          }
          var allDisplayedColumns = this.columnModel.getAllDisplayedColumns();
          if (missingOrEmpty(allDisplayedColumns)) {
            return;
          }
          rangeService.setCellRange({
            rowStartIndex: 0,
            rowStartPinned: floatingStart,
            rowEndIndex: rowEnd,
            rowEndPinned: floatingEnd,
            columnStart: allDisplayedColumns[0],
            columnEnd: last(allDisplayedColumns)
          });
        }
        event.preventDefault();
      };
      RowContainerEventsFeature2.prototype.onCtrlAndC = function(event) {
        if (!this.clipboardService || this.gridOptionsWrapper.isEnableCellTextSelection()) {
          return;
        }
        this.clipboardService.copyToClipboard();
        event.preventDefault();
      };
      RowContainerEventsFeature2.prototype.onCtrlAndV = function() {
        if (ModuleRegistry.isRegistered(ModuleNames.ClipboardModule) && !this.gridOptionsWrapper.isSuppressClipboardPaste()) {
          this.clipboardService.pasteFromClipboard();
        }
      };
      RowContainerEventsFeature2.prototype.onCtrlAndD = function(event) {
        if (ModuleRegistry.isRegistered(ModuleNames.ClipboardModule) && !this.gridOptionsWrapper.isSuppressClipboardPaste()) {
          this.clipboardService.copyRangeDown();
        }
        event.preventDefault();
      };
      RowContainerEventsFeature2.prototype.onCtrlAndZ = function(event) {
        if (!this.gridOptionsWrapper.isUndoRedoCellEditing()) {
          return;
        }
        event.preventDefault();
        if (event.shiftKey) {
          this.undoRedoService.redo();
        } else {
          this.undoRedoService.undo();
        }
      };
      RowContainerEventsFeature2.prototype.onCtrlAndY = function() {
        this.undoRedoService.redo();
      };
      __decorate$1M([
        Autowired("mouseEventService")
      ], RowContainerEventsFeature2.prototype, "mouseEventService", void 0);
      __decorate$1M([
        Autowired("valueService")
      ], RowContainerEventsFeature2.prototype, "valueService", void 0);
      __decorate$1M([
        Optional("contextMenuFactory")
      ], RowContainerEventsFeature2.prototype, "contextMenuFactory", void 0);
      __decorate$1M([
        Autowired("ctrlsService")
      ], RowContainerEventsFeature2.prototype, "ctrlsService", void 0);
      __decorate$1M([
        Autowired("navigationService")
      ], RowContainerEventsFeature2.prototype, "navigationService", void 0);
      __decorate$1M([
        Autowired("focusService")
      ], RowContainerEventsFeature2.prototype, "focusService", void 0);
      __decorate$1M([
        Autowired("undoRedoService")
      ], RowContainerEventsFeature2.prototype, "undoRedoService", void 0);
      __decorate$1M([
        Autowired("columnModel")
      ], RowContainerEventsFeature2.prototype, "columnModel", void 0);
      __decorate$1M([
        Autowired("paginationProxy")
      ], RowContainerEventsFeature2.prototype, "paginationProxy", void 0);
      __decorate$1M([
        Autowired("pinnedRowModel")
      ], RowContainerEventsFeature2.prototype, "pinnedRowModel", void 0);
      __decorate$1M([
        Optional("rangeService")
      ], RowContainerEventsFeature2.prototype, "rangeService", void 0);
      __decorate$1M([
        Optional("clipboardService")
      ], RowContainerEventsFeature2.prototype, "clipboardService", void 0);
      __decorate$1M([
        PostConstruct
      ], RowContainerEventsFeature2.prototype, "postConstruct", null);
      return RowContainerEventsFeature2;
    }(BeanStub);
    __extends$1S = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1L = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    ViewportSizeFeature = function(_super) {
      __extends$1S(ViewportSizeFeature2, _super);
      function ViewportSizeFeature2(centerContainerCtrl) {
        var _this = _super.call(this) || this;
        _this.centerContainerCtrl = centerContainerCtrl;
        return _this;
      }
      ViewportSizeFeature2.prototype.postConstruct = function() {
        var _this = this;
        this.ctrlsService.whenReady(function() {
          _this.gridBodyCtrl = _this.ctrlsService.getGridBodyCtrl();
          _this.listenForResize();
        });
        this.addManagedListener(this.eventService, Events.EVENT_SCROLLBAR_WIDTH_CHANGED, this.onScrollbarWidthChanged.bind(this));
      };
      ViewportSizeFeature2.prototype.listenForResize = function() {
        var _this = this;
        var listener = function() {
          return _this.onCenterViewportResized();
        };
        this.centerContainerCtrl.registerViewportResizeListener(listener);
        this.gridBodyCtrl.registerBodyViewportResizeListener(listener);
      };
      ViewportSizeFeature2.prototype.onScrollbarWidthChanged = function() {
        this.checkViewportAndScrolls();
      };
      ViewportSizeFeature2.prototype.onCenterViewportResized = function() {
        if (this.centerContainerCtrl.isViewportVisible()) {
          this.checkViewportAndScrolls();
          var newWidth = this.centerContainerCtrl.getCenterWidth();
          if (newWidth !== this.centerWidth) {
            this.centerWidth = newWidth;
            this.columnModel.refreshFlexedColumns({ viewportWidth: this.centerWidth, updateBodyWidths: true, fireResizedEvent: true });
          }
        } else {
          this.bodyHeight = 0;
        }
      };
      ViewportSizeFeature2.prototype.checkViewportAndScrolls = function() {
        this.updateScrollVisibleService();
        this.checkBodyHeight();
        this.onHorizontalViewportChanged();
        this.gridBodyCtrl.getScrollFeature().checkScrollLeft();
      };
      ViewportSizeFeature2.prototype.getBodyHeight = function() {
        return this.bodyHeight;
      };
      ViewportSizeFeature2.prototype.checkBodyHeight = function() {
        var eBodyViewport = this.gridBodyCtrl.getBodyViewportElement();
        var bodyHeight = getInnerHeight(eBodyViewport);
        if (this.bodyHeight !== bodyHeight) {
          this.bodyHeight = bodyHeight;
          var event_1 = {
            type: Events.EVENT_BODY_HEIGHT_CHANGED
          };
          this.eventService.dispatchEvent(event_1);
        }
      };
      ViewportSizeFeature2.prototype.updateScrollVisibleService = function() {
        this.updateScrollVisibleServiceImpl();
        setTimeout(this.updateScrollVisibleServiceImpl.bind(this), 500);
      };
      ViewportSizeFeature2.prototype.updateScrollVisibleServiceImpl = function() {
        var params = {
          horizontalScrollShowing: this.isHorizontalScrollShowing(),
          verticalScrollShowing: this.gridBodyCtrl.isVerticalScrollShowing()
        };
        this.scrollVisibleService.setScrollsVisible(params);
        this.gridBodyCtrl.setVerticalScrollPaddingVisible(params.verticalScrollShowing);
      };
      ViewportSizeFeature2.prototype.isHorizontalScrollShowing = function() {
        var isAlwaysShowHorizontalScroll = this.gridOptionsWrapper.isAlwaysShowHorizontalScroll();
        return isAlwaysShowHorizontalScroll || this.centerContainerCtrl.isViewportHScrollShowing();
      };
      ViewportSizeFeature2.prototype.onHorizontalViewportChanged = function() {
        var scrollWidth = this.centerContainerCtrl.getCenterWidth();
        var scrollPosition = this.centerContainerCtrl.getViewportScrollLeft();
        this.columnModel.setViewportPosition(scrollWidth, scrollPosition);
      };
      __decorate$1L([
        Autowired("ctrlsService")
      ], ViewportSizeFeature2.prototype, "ctrlsService", void 0);
      __decorate$1L([
        Autowired("columnModel")
      ], ViewportSizeFeature2.prototype, "columnModel", void 0);
      __decorate$1L([
        Autowired("scrollVisibleService")
      ], ViewportSizeFeature2.prototype, "scrollVisibleService", void 0);
      __decorate$1L([
        PostConstruct
      ], ViewportSizeFeature2.prototype, "postConstruct", null);
      return ViewportSizeFeature2;
    }(BeanStub);
    __extends$1R = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1K = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    SetPinnedLeftWidthFeature = function(_super) {
      __extends$1R(SetPinnedLeftWidthFeature2, _super);
      function SetPinnedLeftWidthFeature2(element) {
        var _this = _super.call(this) || this;
        _this.element = element;
        return _this;
      }
      SetPinnedLeftWidthFeature2.prototype.postConstruct = function() {
        this.addManagedListener(this.eventService, Events.EVENT_LEFT_PINNED_WIDTH_CHANGED, this.onPinnedLeftWidthChanged.bind(this));
      };
      SetPinnedLeftWidthFeature2.prototype.onPinnedLeftWidthChanged = function() {
        var leftWidth = this.pinnedWidthService.getPinnedLeftWidth();
        var displayed = leftWidth > 0;
        setDisplayed(this.element, displayed);
        if (displayed) {
          setFixedWidth(this.element, leftWidth);
        }
      };
      __decorate$1K([
        Autowired("pinnedWidthService")
      ], SetPinnedLeftWidthFeature2.prototype, "pinnedWidthService", void 0);
      __decorate$1K([
        PostConstruct
      ], SetPinnedLeftWidthFeature2.prototype, "postConstruct", null);
      return SetPinnedLeftWidthFeature2;
    }(BeanStub);
    __extends$1Q = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1J = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    SetPinnedRightWidthFeature = function(_super) {
      __extends$1Q(SetPinnedRightWidthFeature2, _super);
      function SetPinnedRightWidthFeature2(element) {
        var _this = _super.call(this) || this;
        _this.element = element;
        return _this;
      }
      SetPinnedRightWidthFeature2.prototype.postConstruct = function() {
        this.addManagedListener(this.eventService, Events.EVENT_RIGHT_PINNED_WIDTH_CHANGED, this.onPinnedRightWidthChanged.bind(this));
      };
      SetPinnedRightWidthFeature2.prototype.onPinnedRightWidthChanged = function() {
        var rightWidth = this.pinnedWidthService.getPinnedRightWidth();
        var displayed = rightWidth > 0;
        setDisplayed(this.element, displayed);
        if (displayed) {
          setFixedWidth(this.element, rightWidth);
        }
      };
      __decorate$1J([
        Autowired("pinnedWidthService")
      ], SetPinnedRightWidthFeature2.prototype, "pinnedWidthService", void 0);
      __decorate$1J([
        PostConstruct
      ], SetPinnedRightWidthFeature2.prototype, "postConstruct", null);
      return SetPinnedRightWidthFeature2;
    }(BeanStub);
    __extends$1P = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1I = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    SetHeightFeature = function(_super) {
      __extends$1P(SetHeightFeature2, _super);
      function SetHeightFeature2(eContainer, eWrapper) {
        var _this = _super.call(this) || this;
        _this.eContainer = eContainer;
        _this.eWrapper = eWrapper;
        return _this;
      }
      SetHeightFeature2.prototype.postConstruct = function() {
        this.addManagedListener(this.eventService, Events.EVENT_ROW_CONTAINER_HEIGHT_CHANGED, this.onHeightChanged.bind(this));
      };
      SetHeightFeature2.prototype.onHeightChanged = function() {
        var height = this.maxDivHeightScaler.getUiContainerHeight();
        var heightString = height != null ? height + "px" : "";
        this.eContainer.style.height = heightString;
        if (this.eWrapper) {
          this.eWrapper.style.height = heightString;
        }
      };
      __decorate$1I([
        Autowired("rowContainerHeightService")
      ], SetHeightFeature2.prototype, "maxDivHeightScaler", void 0);
      __decorate$1I([
        PostConstruct
      ], SetHeightFeature2.prototype, "postConstruct", null);
      return SetHeightFeature2;
    }(BeanStub);
    __extends$1O = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1H = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    DragListenerFeature = function(_super) {
      __extends$1O(DragListenerFeature2, _super);
      function DragListenerFeature2(eContainer) {
        var _this = _super.call(this) || this;
        _this.eContainer = eContainer;
        return _this;
      }
      DragListenerFeature2.prototype.postConstruct = function() {
        var _this = this;
        if (!this.gridOptionsWrapper.isEnableRangeSelection() || missing(this.rangeService)) {
          return;
        }
        var params = {
          eElement: this.eContainer,
          onDragStart: this.rangeService.onDragStart.bind(this.rangeService),
          onDragStop: this.rangeService.onDragStop.bind(this.rangeService),
          onDragging: this.rangeService.onDragging.bind(this.rangeService)
        };
        this.dragService.addDragSource(params);
        this.addDestroyFunc(function() {
          return _this.dragService.removeDragSource(params);
        });
      };
      __decorate$1H([
        Optional("rangeService")
      ], DragListenerFeature2.prototype, "rangeService", void 0);
      __decorate$1H([
        Autowired("dragService")
      ], DragListenerFeature2.prototype, "dragService", void 0);
      __decorate$1H([
        PostConstruct
      ], DragListenerFeature2.prototype, "postConstruct", null);
      return DragListenerFeature2;
    }(BeanStub);
    __extends$1N = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1G = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    CenterWidthFeature = function(_super) {
      __extends$1N(CenterWidthFeature2, _super);
      function CenterWidthFeature2(callback) {
        var _this = _super.call(this) || this;
        _this.callback = callback;
        return _this;
      }
      CenterWidthFeature2.prototype.postConstruct = function() {
        var listener = this.setWidth.bind(this);
        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_DOM_LAYOUT, listener);
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, listener);
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, listener);
        this.setWidth();
      };
      CenterWidthFeature2.prototype.setWidth = function() {
        var columnModel = this.columnModel;
        var printLayout = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;
        var centerWidth = columnModel.getBodyContainerWidth();
        var leftWidth = columnModel.getDisplayedColumnsLeftWidth();
        var rightWidth = columnModel.getDisplayedColumnsRightWidth();
        var totalWidth = printLayout ? centerWidth + leftWidth + rightWidth : centerWidth;
        this.callback(totalWidth);
      };
      __decorate$1G([
        Autowired("columnModel")
      ], CenterWidthFeature2.prototype, "columnModel", void 0);
      __decorate$1G([
        PostConstruct
      ], CenterWidthFeature2.prototype, "postConstruct", null);
      return CenterWidthFeature2;
    }(BeanStub);
    __extends$1M = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1F = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __read$f = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread$c = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read$f(arguments[i]));
      return ar;
    };
    (function(RowContainerName2) {
      RowContainerName2["LEFT"] = "left";
      RowContainerName2["RIGHT"] = "right";
      RowContainerName2["CENTER"] = "center";
      RowContainerName2["FULL_WIDTH"] = "fullWidth";
      RowContainerName2["TOP_LEFT"] = "topLeft";
      RowContainerName2["TOP_RIGHT"] = "topRight";
      RowContainerName2["TOP_CENTER"] = "topCenter";
      RowContainerName2["TOP_FULL_WIDTH"] = "topFullWidth";
      RowContainerName2["STICKY_TOP_LEFT"] = "stickyTopLeft";
      RowContainerName2["STICKY_TOP_RIGHT"] = "stickyTopRight";
      RowContainerName2["STICKY_TOP_CENTER"] = "stickyTopCenter";
      RowContainerName2["STICKY_TOP_FULL_WIDTH"] = "stickyTopFullWidth";
      RowContainerName2["BOTTOM_LEFT"] = "bottomLeft";
      RowContainerName2["BOTTOM_RIGHT"] = "bottomRight";
      RowContainerName2["BOTTOM_CENTER"] = "bottomCenter";
      RowContainerName2["BOTTOM_FULL_WIDTH"] = "bottomFullWidth";
    })(RowContainerName || (RowContainerName = {}));
    (function(RowContainerType2) {
      RowContainerType2["LEFT"] = "left";
      RowContainerType2["RIGHT"] = "right";
      RowContainerType2["CENTER"] = "center";
      RowContainerType2["FULL_WIDTH"] = "fullWidth";
    })(RowContainerType || (RowContainerType = {}));
    ContainerCssClasses = convertToMap([
      [RowContainerName.CENTER, "ag-center-cols-container"],
      [RowContainerName.LEFT, "ag-pinned-left-cols-container"],
      [RowContainerName.RIGHT, "ag-pinned-right-cols-container"],
      [RowContainerName.FULL_WIDTH, "ag-full-width-container"],
      [RowContainerName.TOP_CENTER, "ag-floating-top-container"],
      [RowContainerName.TOP_LEFT, "ag-pinned-left-floating-top"],
      [RowContainerName.TOP_RIGHT, "ag-pinned-right-floating-top"],
      [RowContainerName.TOP_FULL_WIDTH, "ag-floating-top-full-width-container"],
      [RowContainerName.STICKY_TOP_CENTER, "ag-sticky-top-container"],
      [RowContainerName.STICKY_TOP_LEFT, "ag-pinned-left-sticky-top"],
      [RowContainerName.STICKY_TOP_RIGHT, "ag-pinned-right-sticky-top"],
      [RowContainerName.STICKY_TOP_FULL_WIDTH, "ag-sticky-top-full-width-container"],
      [RowContainerName.BOTTOM_CENTER, "ag-floating-bottom-container"],
      [RowContainerName.BOTTOM_LEFT, "ag-pinned-left-floating-bottom"],
      [RowContainerName.BOTTOM_RIGHT, "ag-pinned-right-floating-bottom"],
      [RowContainerName.BOTTOM_FULL_WIDTH, "ag-floating-bottom-full-width-container"]
    ]);
    ViewportCssClasses = convertToMap([
      [RowContainerName.CENTER, "ag-center-cols-viewport"],
      [RowContainerName.TOP_CENTER, "ag-floating-top-viewport"],
      [RowContainerName.STICKY_TOP_CENTER, "ag-sticky-top-viewport"],
      [RowContainerName.BOTTOM_CENTER, "ag-floating-bottom-viewport"]
    ]);
    WrapperCssClasses = convertToMap([
      [RowContainerName.CENTER, "ag-center-cols-clipper"]
    ]);
    RowContainerCtrl = function(_super) {
      __extends$1M(RowContainerCtrl2, _super);
      function RowContainerCtrl2(name) {
        var _this = _super.call(this) || this;
        _this.name = name;
        return _this;
      }
      RowContainerCtrl2.getRowContainerCssClasses = function(name) {
        var containerClass = ContainerCssClasses.get(name);
        var viewportClass = ViewportCssClasses.get(name);
        var wrapperClass = WrapperCssClasses.get(name);
        return { container: containerClass, viewport: viewportClass, wrapper: wrapperClass };
      };
      RowContainerCtrl2.getPinned = function(name) {
        switch (name) {
          case RowContainerName.BOTTOM_LEFT:
          case RowContainerName.TOP_LEFT:
          case RowContainerName.STICKY_TOP_LEFT:
          case RowContainerName.LEFT:
            return Constants.PINNED_LEFT;
          case RowContainerName.BOTTOM_RIGHT:
          case RowContainerName.TOP_RIGHT:
          case RowContainerName.STICKY_TOP_RIGHT:
          case RowContainerName.RIGHT:
            return Constants.PINNED_RIGHT;
          default:
            return null;
        }
      };
      RowContainerCtrl2.prototype.postConstruct = function() {
        var _this = this;
        this.enableRtl = this.gridOptionsWrapper.isEnableRtl();
        this.embedFullWidthRows = this.gridOptionsWrapper.isEmbedFullWidthRows();
        this.forContainers([RowContainerName.CENTER], function() {
          return _this.viewportSizeFeature = _this.createManagedBean(new ViewportSizeFeature(_this));
        });
      };
      RowContainerCtrl2.prototype.registerWithCtrlsService = function() {
        switch (this.name) {
          case RowContainerName.CENTER:
            this.ctrlsService.registerCenterRowContainerCtrl(this);
            break;
          case RowContainerName.LEFT:
            this.ctrlsService.registerLeftRowContainerCtrl(this);
            break;
          case RowContainerName.RIGHT:
            this.ctrlsService.registerRightRowContainerCtrl(this);
            break;
          case RowContainerName.TOP_CENTER:
            this.ctrlsService.registerTopCenterRowContainerCtrl(this);
            break;
          case RowContainerName.TOP_LEFT:
            this.ctrlsService.registerTopLeftRowContainerCon(this);
            break;
          case RowContainerName.TOP_RIGHT:
            this.ctrlsService.registerTopRightRowContainerCtrl(this);
            break;
          case RowContainerName.STICKY_TOP_CENTER:
            this.ctrlsService.registerStickyTopCenterRowContainerCtrl(this);
            break;
          case RowContainerName.STICKY_TOP_LEFT:
            this.ctrlsService.registerStickyTopLeftRowContainerCon(this);
            break;
          case RowContainerName.STICKY_TOP_RIGHT:
            this.ctrlsService.registerStickyTopRightRowContainerCtrl(this);
            break;
          case RowContainerName.BOTTOM_CENTER:
            this.ctrlsService.registerBottomCenterRowContainerCtrl(this);
            break;
          case RowContainerName.BOTTOM_LEFT:
            this.ctrlsService.registerBottomLeftRowContainerCtrl(this);
            break;
          case RowContainerName.BOTTOM_RIGHT:
            this.ctrlsService.registerBottomRightRowContainerCtrl(this);
            break;
        }
      };
      RowContainerCtrl2.prototype.forContainers = function(names, callback) {
        if (names.indexOf(this.name) >= 0) {
          callback();
        }
      };
      RowContainerCtrl2.prototype.getContainerElement = function() {
        return this.eContainer;
      };
      RowContainerCtrl2.prototype.getViewportSizeFeature = function() {
        return this.viewportSizeFeature;
      };
      RowContainerCtrl2.prototype.setComp = function(view, eContainer, eViewport, eWrapper) {
        var _this = this;
        this.comp = view;
        this.eContainer = eContainer;
        this.eViewport = eViewport;
        this.eWrapper = eWrapper;
        this.createManagedBean(new RowContainerEventsFeature(this.eContainer));
        this.addPreventScrollWhileDragging();
        this.listenOnDomOrder();
        this.stopHScrollOnPinnedRows();
        var allTopNoFW = [RowContainerName.TOP_CENTER, RowContainerName.TOP_LEFT, RowContainerName.TOP_RIGHT];
        var allStickyTopNoFW = [RowContainerName.STICKY_TOP_CENTER, RowContainerName.STICKY_TOP_LEFT, RowContainerName.STICKY_TOP_RIGHT];
        var allBottomNoFW = [RowContainerName.BOTTOM_CENTER, RowContainerName.BOTTOM_LEFT, RowContainerName.BOTTOM_RIGHT];
        var allMiddleNoFW = [RowContainerName.CENTER, RowContainerName.LEFT, RowContainerName.RIGHT];
        var allNoFW = __spread$c(allTopNoFW, allBottomNoFW, allMiddleNoFW, allStickyTopNoFW);
        var allMiddle = [RowContainerName.CENTER, RowContainerName.LEFT, RowContainerName.RIGHT, RowContainerName.FULL_WIDTH];
        var allCenter = [RowContainerName.CENTER, RowContainerName.TOP_CENTER, RowContainerName.STICKY_TOP_CENTER, RowContainerName.BOTTOM_CENTER];
        var allLeft = [RowContainerName.LEFT, RowContainerName.BOTTOM_LEFT, RowContainerName.TOP_LEFT, RowContainerName.STICKY_TOP_LEFT];
        var allRight = [RowContainerName.RIGHT, RowContainerName.BOTTOM_RIGHT, RowContainerName.TOP_RIGHT, RowContainerName.STICKY_TOP_RIGHT];
        this.forContainers(allLeft, function() {
          return _this.createManagedBean(new SetPinnedLeftWidthFeature(_this.eContainer));
        });
        this.forContainers(allRight, function() {
          return _this.createManagedBean(new SetPinnedRightWidthFeature(_this.eContainer));
        });
        this.forContainers(allMiddle, function() {
          return _this.createManagedBean(new SetHeightFeature(_this.eContainer, _this.eWrapper));
        });
        this.forContainers(allNoFW, function() {
          return _this.createManagedBean(new DragListenerFeature(_this.eContainer));
        });
        this.forContainers(allCenter, function() {
          return _this.createManagedBean(new CenterWidthFeature(function(width) {
            return _this.comp.setContainerWidth(width + "px");
          }));
        });
        this.addListeners();
        this.registerWithCtrlsService();
      };
      RowContainerCtrl2.prototype.addListeners = function() {
        var _this = this;
        this.addManagedListener(this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, function() {
          return _this.onScrollVisibilityChanged();
        });
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, function() {
          return _this.onDisplayedColumnsChanged();
        });
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, function() {
          return _this.onDisplayedColumnsWidthChanged();
        });
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_ROWS_CHANGED, function() {
          return _this.onDisplayedRowsChanged();
        });
        this.onScrollVisibilityChanged();
        this.onDisplayedColumnsChanged();
        this.onDisplayedColumnsWidthChanged();
        this.onDisplayedRowsChanged();
      };
      RowContainerCtrl2.prototype.listenOnDomOrder = function() {
        var _this = this;
        var allStickyContainers = [RowContainerName.STICKY_TOP_CENTER, RowContainerName.STICKY_TOP_LEFT, RowContainerName.STICKY_TOP_RIGHT, RowContainerName.STICKY_TOP_FULL_WIDTH];
        var isStickContainer = allStickyContainers.indexOf(this.name) >= 0;
        if (isStickContainer) {
          this.comp.setDomOrder(true);
          return;
        }
        var listener = function() {
          return _this.comp.setDomOrder(_this.gridOptionsWrapper.isEnsureDomOrder());
        };
        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_DOM_LAYOUT, listener);
        listener();
      };
      RowContainerCtrl2.prototype.stopHScrollOnPinnedRows = function() {
        var _this = this;
        this.forContainers([RowContainerName.TOP_CENTER, RowContainerName.STICKY_TOP_CENTER, RowContainerName.BOTTOM_CENTER], function() {
          var resetScrollLeft = function() {
            return _this.eViewport.scrollLeft = 0;
          };
          _this.addManagedListener(_this.eViewport, "scroll", resetScrollLeft);
        });
      };
      RowContainerCtrl2.prototype.onDisplayedColumnsChanged = function() {
        var _this = this;
        this.forContainers([RowContainerName.CENTER], function() {
          return _this.onHorizontalViewportChanged();
        });
      };
      RowContainerCtrl2.prototype.onDisplayedColumnsWidthChanged = function() {
        var _this = this;
        this.forContainers([RowContainerName.CENTER], function() {
          return _this.onHorizontalViewportChanged();
        });
      };
      RowContainerCtrl2.prototype.onScrollVisibilityChanged = function() {
        if (this.name !== RowContainerName.CENTER) {
          return;
        }
        var visible = this.scrollVisibleService.isHorizontalScrollShowing();
        var scrollbarWidth = visible ? this.gridOptionsWrapper.getScrollbarWidth() || 0 : 0;
        var height = scrollbarWidth == 0 ? "100%" : "calc(100% + " + scrollbarWidth + "px)";
        this.comp.setViewportHeight(height);
      };
      RowContainerCtrl2.prototype.addPreventScrollWhileDragging = function() {
        var _this = this;
        var preventScroll = function(e) {
          if (_this.dragService.isDragging()) {
            if (e.cancelable) {
              e.preventDefault();
            }
          }
        };
        this.eContainer.addEventListener("touchmove", preventScroll, { passive: false });
        this.addDestroyFunc(function() {
          return _this.eContainer.removeEventListener("touchmove", preventScroll);
        });
      };
      RowContainerCtrl2.prototype.onHorizontalViewportChanged = function() {
        var scrollWidth = this.getCenterWidth();
        var scrollPosition = this.getCenterViewportScrollLeft();
        this.columnModel.setViewportPosition(scrollWidth, scrollPosition);
      };
      RowContainerCtrl2.prototype.getCenterWidth = function() {
        return getInnerWidth(this.eViewport);
      };
      RowContainerCtrl2.prototype.getCenterViewportScrollLeft = function() {
        return getScrollLeft(this.eViewport, this.enableRtl);
      };
      RowContainerCtrl2.prototype.registerViewportResizeListener = function(listener) {
        var unsubscribeFromResize = this.resizeObserverService.observeResize(this.eViewport, listener);
        this.addDestroyFunc(function() {
          return unsubscribeFromResize();
        });
      };
      RowContainerCtrl2.prototype.isViewportVisible = function() {
        return isVisible(this.eViewport);
      };
      RowContainerCtrl2.prototype.isViewportHScrollShowing = function() {
        return isHorizontalScrollShowing(this.eViewport);
      };
      RowContainerCtrl2.prototype.getViewportScrollLeft = function() {
        return getScrollLeft(this.eViewport, this.enableRtl);
      };
      RowContainerCtrl2.prototype.isHorizontalScrollShowing = function() {
        var isAlwaysShowHorizontalScroll = this.gridOptionsWrapper.isAlwaysShowHorizontalScroll();
        return isAlwaysShowHorizontalScroll || isHorizontalScrollShowing(this.eViewport);
      };
      RowContainerCtrl2.prototype.getViewportElement = function() {
        return this.eViewport;
      };
      RowContainerCtrl2.prototype.setContainerTranslateX = function(amount) {
        this.eContainer.style.transform = "translateX(" + amount + "px)";
      };
      RowContainerCtrl2.prototype.getHScrollPosition = function() {
        var res = {
          left: this.eViewport.scrollLeft,
          right: this.eViewport.scrollLeft + this.eViewport.offsetWidth
        };
        return res;
      };
      RowContainerCtrl2.prototype.setCenterViewportScrollLeft = function(value) {
        setScrollLeft(this.eViewport, value, this.enableRtl);
      };
      RowContainerCtrl2.prototype.onDisplayedRowsChanged = function() {
        var _this = this;
        var fullWithContainer = this.name === RowContainerName.TOP_FULL_WIDTH || this.name === RowContainerName.STICKY_TOP_FULL_WIDTH || this.name === RowContainerName.BOTTOM_FULL_WIDTH || this.name === RowContainerName.FULL_WIDTH;
        var doesRowMatch = function(rowCtrl) {
          var fullWidthRow = rowCtrl.isFullWidth();
          var printLayout = _this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;
          var embedFW = _this.embedFullWidthRows || printLayout;
          var match = fullWithContainer ? !embedFW && fullWidthRow : embedFW || !fullWidthRow;
          return match;
        };
        var allRowsRegardlessOfFullWidth = this.getRowCtrls();
        var rowsThisContainer = allRowsRegardlessOfFullWidth.filter(doesRowMatch);
        this.comp.setRowCtrls(rowsThisContainer);
      };
      RowContainerCtrl2.prototype.getRowCtrls = function() {
        switch (this.name) {
          case RowContainerName.TOP_CENTER:
          case RowContainerName.TOP_LEFT:
          case RowContainerName.TOP_RIGHT:
          case RowContainerName.TOP_FULL_WIDTH:
            return this.rowRenderer.getTopRowCtrls();
          case RowContainerName.STICKY_TOP_CENTER:
          case RowContainerName.STICKY_TOP_LEFT:
          case RowContainerName.STICKY_TOP_RIGHT:
          case RowContainerName.STICKY_TOP_FULL_WIDTH:
            return this.rowRenderer.getStickyTopRowCtrls();
          case RowContainerName.BOTTOM_CENTER:
          case RowContainerName.BOTTOM_LEFT:
          case RowContainerName.BOTTOM_RIGHT:
          case RowContainerName.BOTTOM_FULL_WIDTH:
            return this.rowRenderer.getBottomRowCtrls();
          default:
            return this.rowRenderer.getRowCtrls();
        }
      };
      __decorate$1F([
        Autowired("scrollVisibleService")
      ], RowContainerCtrl2.prototype, "scrollVisibleService", void 0);
      __decorate$1F([
        Autowired("dragService")
      ], RowContainerCtrl2.prototype, "dragService", void 0);
      __decorate$1F([
        Autowired("ctrlsService")
      ], RowContainerCtrl2.prototype, "ctrlsService", void 0);
      __decorate$1F([
        Autowired("columnModel")
      ], RowContainerCtrl2.prototype, "columnModel", void 0);
      __decorate$1F([
        Autowired("resizeObserverService")
      ], RowContainerCtrl2.prototype, "resizeObserverService", void 0);
      __decorate$1F([
        Autowired("rowRenderer")
      ], RowContainerCtrl2.prototype, "rowRenderer", void 0);
      __decorate$1F([
        PostConstruct
      ], RowContainerCtrl2.prototype, "postConstruct", null);
      return RowContainerCtrl2;
    }(BeanStub);
    __extends$1L = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1E = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    GRID_BODY_TEMPLATE = '<div class="ag-root ag-unselectable" role="grid">\n        <ag-header-root ref="gridHeader"></ag-header-root>\n        <div class="ag-floating-top" ref="eTop" role="presentation">\n            <ag-row-container ref="topLeftContainer" name="' + RowContainerName.TOP_LEFT + '"></ag-row-container>\n            <ag-row-container ref="topCenterContainer" name="' + RowContainerName.TOP_CENTER + '"></ag-row-container>\n            <ag-row-container ref="topRightContainer" name="' + RowContainerName.TOP_RIGHT + '"></ag-row-container>\n            <ag-row-container ref="topFullWidthContainer" name="' + RowContainerName.TOP_FULL_WIDTH + '"></ag-row-container>\n        </div>\n        <div class="ag-body-viewport" ref="eBodyViewport" role="presentation">\n            <ag-row-container ref="leftContainer" name="' + RowContainerName.LEFT + '"></ag-row-container>\n            <ag-row-container ref="centerContainer" name="' + RowContainerName.CENTER + '"></ag-row-container>\n            <ag-row-container ref="rightContainer" name="' + RowContainerName.RIGHT + '"></ag-row-container>\n            <ag-row-container ref="fullWidthContainer" name="' + RowContainerName.FULL_WIDTH + '"></ag-row-container>\n        </div>\n        <div class="ag-sticky-top" ref="eStickyTop" role="presentation">\n            <ag-row-container ref="stickyTopLeftContainer" name="' + RowContainerName.STICKY_TOP_LEFT + '"></ag-row-container>\n            <ag-row-container ref="stickyTopCenterContainer" name="' + RowContainerName.STICKY_TOP_CENTER + '"></ag-row-container>\n            <ag-row-container ref="stickyTopRightContainer" name="' + RowContainerName.STICKY_TOP_RIGHT + '"></ag-row-container>\n            <ag-row-container ref="stickyTopFullWidthContainer" name="' + RowContainerName.STICKY_TOP_FULL_WIDTH + '"></ag-row-container>\n        </div>\n        <div class="ag-floating-bottom" ref="eBottom" role="presentation">\n            <ag-row-container ref="bottomLeftContainer" name="' + RowContainerName.BOTTOM_LEFT + '"></ag-row-container>\n            <ag-row-container ref="bottomCenterContainer" name="' + RowContainerName.BOTTOM_CENTER + '"></ag-row-container>\n            <ag-row-container ref="bottomRightContainer" name="' + RowContainerName.BOTTOM_RIGHT + '"></ag-row-container>\n            <ag-row-container ref="bottomFullWidthContainer" name="' + RowContainerName.BOTTOM_FULL_WIDTH + '"></ag-row-container>\n        </div>\n        <ag-fake-horizontal-scroll></ag-fake-horizontal-scroll>\n        <ag-overlay-wrapper></ag-overlay-wrapper>\n    </div>';
    GridBodyComp = function(_super) {
      __extends$1L(GridBodyComp2, _super);
      function GridBodyComp2() {
        return _super.call(this, GRID_BODY_TEMPLATE) || this;
      }
      GridBodyComp2.prototype.init = function() {
        var _this = this;
        var setHeight = function(height, element) {
          var heightString = height + "px";
          element.style.minHeight = heightString;
          element.style.height = heightString;
        };
        var compProxy = {
          setRowAnimationCssOnBodyViewport: function(cssClass, animate) {
            return _this.setRowAnimationCssOnBodyViewport(cssClass, animate);
          },
          setColumnCount: function(count) {
            return setAriaColCount(_this.getGui(), count);
          },
          setRowCount: function(count) {
            return setAriaRowCount(_this.getGui(), count);
          },
          setTopHeight: function(height) {
            return setHeight(height, _this.eTop);
          },
          setBottomHeight: function(height) {
            return setHeight(height, _this.eBottom);
          },
          setTopDisplay: function(display) {
            return _this.eTop.style.display = display;
          },
          setBottomDisplay: function(display) {
            return _this.eBottom.style.display = display;
          },
          setStickyTopHeight: function(height) {
            return _this.eStickyTop.style.height = height;
          },
          setStickyTopTop: function(top) {
            return _this.eStickyTop.style.top = top;
          },
          setStickyTopWidth: function(width) {
            return _this.eStickyTop.style.width = width;
          },
          setColumnMovingCss: function(cssClass, flag) {
            return _this.addOrRemoveCssClass(CSS_CLASS_COLUMN_MOVING, flag);
          },
          updateLayoutClasses: function(cssClass, params) {
            var bodyViewportClassList = _this.eBodyViewport.classList;
            bodyViewportClassList.toggle(LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);
            bodyViewportClassList.toggle(LayoutCssClasses.NORMAL, params.normal);
            bodyViewportClassList.toggle(LayoutCssClasses.PRINT, params.print);
            _this.addOrRemoveCssClass(LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);
            _this.addOrRemoveCssClass(LayoutCssClasses.NORMAL, params.normal);
            _this.addOrRemoveCssClass(LayoutCssClasses.PRINT, params.print);
          },
          setAlwaysVerticalScrollClass: function(cssClass, on) {
            return _this.eBodyViewport.classList.toggle(CSS_CLASS_FORCE_VERTICAL_SCROLL, on);
          },
          registerBodyViewportResizeListener: function(listener) {
            var unsubscribeFromResize = _this.resizeObserverService.observeResize(_this.eBodyViewport, listener);
            _this.addDestroyFunc(function() {
              return unsubscribeFromResize();
            });
          },
          setPinnedTopBottomOverflowY: function(overflow) {
            return _this.eTop.style.overflowY = _this.eBottom.style.overflowY = overflow;
          },
          setCellSelectableCss: function(cssClass, selectable) {
            [_this.eTop, _this.eBodyViewport, _this.eBottom].forEach(function(ct) {
              return ct.classList.toggle(CSS_CLASS_CELL_SELECTABLE, selectable);
            });
          }
        };
        this.ctrl = this.createManagedBean(new GridBodyCtrl());
        this.ctrl.setComp(compProxy, this.getGui(), this.eBodyViewport, this.eTop, this.eBottom, this.eStickyTop);
        if (this.rangeService || this.gridOptionsWrapper.isRowSelectionMulti()) {
          setAriaMultiSelectable(this.getGui(), true);
        }
      };
      GridBodyComp2.prototype.setRowAnimationCssOnBodyViewport = function(cssClass, animateRows) {
        var bodyViewportClassList = this.eBodyViewport.classList;
        bodyViewportClassList.toggle(RowAnimationCssClasses.ANIMATION_ON, animateRows);
        bodyViewportClassList.toggle(RowAnimationCssClasses.ANIMATION_OFF, !animateRows);
      };
      GridBodyComp2.prototype.getFloatingTopBottom = function() {
        return [this.eTop, this.eBottom];
      };
      __decorate$1E([
        Autowired("resizeObserverService")
      ], GridBodyComp2.prototype, "resizeObserverService", void 0);
      __decorate$1E([
        Optional("rangeService")
      ], GridBodyComp2.prototype, "rangeService", void 0);
      __decorate$1E([
        RefSelector("eBodyViewport")
      ], GridBodyComp2.prototype, "eBodyViewport", void 0);
      __decorate$1E([
        RefSelector("eStickyTop")
      ], GridBodyComp2.prototype, "eStickyTop", void 0);
      __decorate$1E([
        RefSelector("eTop")
      ], GridBodyComp2.prototype, "eTop", void 0);
      __decorate$1E([
        RefSelector("eBottom")
      ], GridBodyComp2.prototype, "eBottom", void 0);
      __decorate$1E([
        RefSelector("gridHeader")
      ], GridBodyComp2.prototype, "headerRootComp", void 0);
      __decorate$1E([
        PostConstruct
      ], GridBodyComp2.prototype, "init", null);
      return GridBodyComp2;
    }(Component);
    __extends$1K = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1D = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    ScrollVisibleService = function(_super) {
      __extends$1K(ScrollVisibleService2, _super);
      function ScrollVisibleService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      ScrollVisibleService2.prototype.postConstruct = function() {
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onDisplayedColumnsWidthChanged.bind(this));
      };
      ScrollVisibleService2.prototype.onDisplayedColumnsChanged = function() {
        this.update();
      };
      ScrollVisibleService2.prototype.onDisplayedColumnsWidthChanged = function() {
        this.update();
      };
      ScrollVisibleService2.prototype.update = function() {
        this.updateImpl();
        setTimeout(this.updateImpl.bind(this), 500);
      };
      ScrollVisibleService2.prototype.updateImpl = function() {
        var centerRowCtrl = this.ctrlsService.getCenterRowContainerCtrl();
        if (!centerRowCtrl) {
          return;
        }
        var params = {
          horizontalScrollShowing: centerRowCtrl.isHorizontalScrollShowing(),
          verticalScrollShowing: this.isVerticalScrollShowing()
        };
        this.setScrollsVisible(params);
      };
      ScrollVisibleService2.prototype.setScrollsVisible = function(params) {
        var atLeastOneDifferent = this.horizontalScrollShowing !== params.horizontalScrollShowing || this.verticalScrollShowing !== params.verticalScrollShowing;
        if (atLeastOneDifferent) {
          this.horizontalScrollShowing = params.horizontalScrollShowing;
          this.verticalScrollShowing = params.verticalScrollShowing;
          var event_1 = {
            type: Events.EVENT_SCROLL_VISIBILITY_CHANGED
          };
          this.eventService.dispatchEvent(event_1);
        }
      };
      ScrollVisibleService2.prototype.isHorizontalScrollShowing = function() {
        return this.horizontalScrollShowing;
      };
      ScrollVisibleService2.prototype.isVerticalScrollShowing = function() {
        return this.verticalScrollShowing;
      };
      __decorate$1D([
        Autowired("ctrlsService")
      ], ScrollVisibleService2.prototype, "ctrlsService", void 0);
      __decorate$1D([
        PostConstruct
      ], ScrollVisibleService2.prototype, "postConstruct", null);
      ScrollVisibleService2 = __decorate$1D([
        Bean("scrollVisibleService")
      ], ScrollVisibleService2);
      return ScrollVisibleService2;
    }(BeanStub);
    __extends$1J = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1C = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    MouseEventService = function(_super) {
      __extends$1J(MouseEventService2, _super);
      function MouseEventService2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.gridInstanceId = MouseEventService_1.gridInstanceSequence.next();
        return _this;
      }
      MouseEventService_1 = MouseEventService2;
      MouseEventService2.prototype.stampTopLevelGridCompWithGridInstance = function(eGridDiv) {
        eGridDiv[MouseEventService_1.GRID_DOM_KEY] = this.gridInstanceId;
      };
      MouseEventService2.prototype.getRenderedCellForEvent = function(event) {
        return getCtrlForEvent(this.gridOptionsWrapper, event, CellCtrl.DOM_DATA_KEY_CELL_CTRL);
      };
      MouseEventService2.prototype.isEventFromThisGrid = function(event) {
        var res = this.isElementInThisGrid(event.target);
        return res;
      };
      MouseEventService2.prototype.isElementInThisGrid = function(element) {
        var pointer = element;
        while (pointer) {
          var instanceId = pointer[MouseEventService_1.GRID_DOM_KEY];
          if (exists(instanceId)) {
            var eventFromThisGrid = instanceId === this.gridInstanceId;
            return eventFromThisGrid;
          }
          pointer = pointer.parentElement;
        }
        return false;
      };
      MouseEventService2.prototype.getCellPositionForEvent = function(event) {
        var cellComp = this.getRenderedCellForEvent(event);
        return cellComp ? cellComp.getCellPosition() : null;
      };
      MouseEventService2.prototype.getNormalisedPosition = function(event) {
        var gridPanelHasScrolls = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_NORMAL;
        var e = event;
        var x;
        var y;
        if (e.clientX != null || e.clientY != null) {
          x = e.clientX;
          y = e.clientY;
        } else {
          x = e.x;
          y = e.y;
        }
        if (gridPanelHasScrolls) {
          var gridBodyCon = this.ctrlsService.getGridBodyCtrl();
          var vRange = gridBodyCon.getScrollFeature().getVScrollPosition();
          var hRange = gridBodyCon.getScrollFeature().getHScrollPosition();
          x += hRange.left;
          y += vRange.top;
        }
        return { x, y };
      };
      var MouseEventService_1;
      MouseEventService2.gridInstanceSequence = new NumberSequence();
      MouseEventService2.GRID_DOM_KEY = "__ag_grid_instance";
      __decorate$1C([
        Autowired("ctrlsService")
      ], MouseEventService2.prototype, "ctrlsService", void 0);
      MouseEventService2 = MouseEventService_1 = __decorate$1C([
        Bean("mouseEventService")
      ], MouseEventService2);
      return MouseEventService2;
    }(BeanStub);
    __extends$1I = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign$4 = function() {
      __assign$4 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$4.apply(this, arguments);
    };
    __decorate$1B = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    NavigationService = function(_super) {
      __extends$1I(NavigationService2, _super);
      function NavigationService2() {
        var _this = _super.call(this) || this;
        _this.onPageDown = throttle(_this.onPageDown, 100);
        _this.onPageUp = throttle(_this.onPageUp, 100);
        return _this;
      }
      NavigationService2.prototype.postConstruct = function() {
        var _this = this;
        this.ctrlsService.whenReady(function(p) {
          _this.gridBodyCon = p.gridBodyCtrl;
        });
      };
      NavigationService2.prototype.handlePageScrollingKey = function(event) {
        var key = event.key;
        var alt = event.altKey;
        var ctrl = event.ctrlKey || event.metaKey;
        var rangeServiceShouldHandleShift = !!this.rangeService && event.shiftKey;
        var currentCell = this.mouseEventService.getCellPositionForEvent(event);
        if (!currentCell) {
          return false;
        }
        var processed = false;
        switch (key) {
          case KeyCode.PAGE_HOME:
          case KeyCode.PAGE_END:
            if (!ctrl && !alt) {
              this.onHomeOrEndKey(key);
              processed = true;
            }
            break;
          case KeyCode.LEFT:
          case KeyCode.RIGHT:
          case KeyCode.UP:
          case KeyCode.DOWN:
            if (ctrl && !alt && !rangeServiceShouldHandleShift) {
              this.onCtrlUpDownLeftRight(key, currentCell);
              processed = true;
            }
            break;
          case KeyCode.PAGE_DOWN:
            if (!ctrl && !alt) {
              this.onPageDown(currentCell);
              processed = true;
            }
            break;
          case KeyCode.PAGE_UP:
            if (!ctrl && !alt) {
              this.onPageUp(currentCell);
              processed = true;
            }
            break;
        }
        if (processed) {
          event.preventDefault();
        }
        return processed;
      };
      NavigationService2.prototype.navigateTo = function(navigateParams) {
        var scrollIndex = navigateParams.scrollIndex, scrollType = navigateParams.scrollType, scrollColumn = navigateParams.scrollColumn, focusIndex = navigateParams.focusIndex, focusColumn = navigateParams.focusColumn;
        if (exists(scrollColumn) && !scrollColumn.isPinned()) {
          this.gridBodyCon.getScrollFeature().ensureColumnVisible(scrollColumn);
        }
        if (exists(scrollIndex)) {
          this.gridBodyCon.getScrollFeature().ensureIndexVisible(scrollIndex, scrollType);
        }
        if (!navigateParams.isAsync) {
          this.gridBodyCon.getScrollFeature().ensureIndexVisible(focusIndex);
        }
        this.focusService.setFocusedCell({ rowIndex: focusIndex, column: focusColumn, rowPinned: null, forceBrowserFocus: true });
        if (this.rangeService) {
          var cellPosition = { rowIndex: focusIndex, rowPinned: null, column: focusColumn };
          this.rangeService.setRangeToCell(cellPosition);
        }
      };
      NavigationService2.prototype.onPageDown = function(gridCell) {
        var gridBodyCon = this.ctrlsService.getGridBodyCtrl();
        var scrollPosition = gridBodyCon.getScrollFeature().getVScrollPosition();
        var pixelsInOnePage = this.getViewportHeight();
        var pagingPixelOffset = this.paginationProxy.getPixelOffset();
        var currentPageBottomPixel = scrollPosition.top + pixelsInOnePage;
        var currentPageBottomRow = this.paginationProxy.getRowIndexAtPixel(currentPageBottomPixel + pagingPixelOffset);
        if (this.columnModel.isAutoRowHeightActive()) {
          this.navigateToNextPageWithAutoHeight(gridCell, currentPageBottomRow);
        } else {
          this.navigateToNextPage(gridCell, currentPageBottomRow);
        }
      };
      NavigationService2.prototype.onPageUp = function(gridCell) {
        var gridBodyCon = this.ctrlsService.getGridBodyCtrl();
        var scrollPosition = gridBodyCon.getScrollFeature().getVScrollPosition();
        var pagingPixelOffset = this.paginationProxy.getPixelOffset();
        var currentPageTopPixel = scrollPosition.top;
        var currentPageTopRow = this.paginationProxy.getRowIndexAtPixel(currentPageTopPixel + pagingPixelOffset);
        if (this.columnModel.isAutoRowHeightActive()) {
          this.navigateToNextPageWithAutoHeight(gridCell, currentPageTopRow, true);
        } else {
          this.navigateToNextPage(gridCell, currentPageTopRow, true);
        }
      };
      NavigationService2.prototype.navigateToNextPage = function(gridCell, scrollIndex, up) {
        if (up === void 0) {
          up = false;
        }
        var _a, _b;
        var pixelsInOnePage = this.getViewportHeight();
        var firstRow = this.paginationProxy.getPageFirstRow();
        var lastRow = this.paginationProxy.getPageLastRow();
        var pagingPixelOffset = this.paginationProxy.getPixelOffset();
        var currentRowNode = this.paginationProxy.getRow(gridCell.rowIndex);
        var rowPixelDiff = up ? ((_a = currentRowNode) === null || _a === void 0 ? void 0 : _a.rowHeight) - pixelsInOnePage - pagingPixelOffset : pixelsInOnePage - pagingPixelOffset;
        var nextCellPixel = ((_b = currentRowNode) === null || _b === void 0 ? void 0 : _b.rowTop) + rowPixelDiff;
        var focusIndex = this.paginationProxy.getRowIndexAtPixel(nextCellPixel + pagingPixelOffset);
        if (focusIndex === gridCell.rowIndex) {
          var diff = up ? -1 : 1;
          scrollIndex = focusIndex = gridCell.rowIndex + diff;
        }
        var scrollType;
        if (up) {
          scrollType = "bottom";
          if (focusIndex < firstRow) {
            focusIndex = firstRow;
          }
          if (scrollIndex < firstRow) {
            scrollIndex = firstRow;
          }
        } else {
          scrollType = "top";
          if (focusIndex > lastRow) {
            focusIndex = lastRow;
          }
          if (scrollIndex > lastRow) {
            scrollIndex = lastRow;
          }
        }
        if (this.isRowTallerThanView(focusIndex)) {
          scrollIndex = focusIndex;
          scrollType = "top";
        }
        this.navigateTo({
          scrollIndex,
          scrollType,
          scrollColumn: null,
          focusIndex,
          focusColumn: gridCell.column
        });
      };
      NavigationService2.prototype.navigateToNextPageWithAutoHeight = function(gridCell, scrollIndex, up) {
        var _this = this;
        if (up === void 0) {
          up = false;
        }
        this.navigateTo({
          scrollIndex,
          scrollType: up ? "bottom" : "top",
          scrollColumn: null,
          focusIndex: scrollIndex,
          focusColumn: gridCell.column
        });
        setTimeout(function() {
          var focusIndex = _this.getNextFocusIndexForAutoHeight(gridCell, up);
          _this.navigateTo({
            scrollIndex,
            scrollType: up ? "bottom" : "top",
            scrollColumn: null,
            focusIndex,
            focusColumn: gridCell.column,
            isAsync: true
          });
        }, 50);
      };
      NavigationService2.prototype.getNextFocusIndexForAutoHeight = function(gridCell, up) {
        if (up === void 0) {
          up = false;
        }
        var _a;
        var step = up ? -1 : 1;
        var pixelsInOnePage = this.getViewportHeight();
        var lastRowIndex = this.paginationProxy.getPageLastRow();
        var pixelSum = 0;
        var currentIndex = gridCell.rowIndex;
        while (currentIndex >= 0 && currentIndex <= lastRowIndex) {
          var currentCell = this.paginationProxy.getRow(currentIndex);
          if (currentCell) {
            var currentCellHeight = (_a = currentCell.rowHeight, _a !== null && _a !== void 0 ? _a : 0);
            if (pixelSum + currentCellHeight > pixelsInOnePage) {
              break;
            }
            pixelSum += currentCellHeight;
          }
          currentIndex += step;
        }
        return Math.max(0, Math.min(currentIndex, lastRowIndex));
      };
      NavigationService2.prototype.getViewportHeight = function() {
        var gridBodyCon = this.ctrlsService.getGridBodyCtrl();
        var scrollPosition = gridBodyCon.getScrollFeature().getVScrollPosition();
        var scrollbarWidth = this.gridOptionsWrapper.getScrollbarWidth();
        var pixelsInOnePage = scrollPosition.bottom - scrollPosition.top;
        if (this.ctrlsService.getCenterRowContainerCtrl().isHorizontalScrollShowing()) {
          pixelsInOnePage -= scrollbarWidth;
        }
        return pixelsInOnePage;
      };
      NavigationService2.prototype.isRowTallerThanView = function(rowIndex) {
        var rowNode = this.paginationProxy.getRow(rowIndex);
        if (!rowNode) {
          return false;
        }
        var rowHeight = rowNode.rowHeight;
        if (typeof rowHeight !== "number") {
          return false;
        }
        return rowHeight > this.getViewportHeight();
      };
      NavigationService2.prototype.onCtrlUpDownLeftRight = function(key, gridCell) {
        var cellToFocus = this.cellNavigationService.getNextCellToFocus(key, gridCell, true);
        var rowIndex = cellToFocus.rowIndex, column = cellToFocus.column;
        this.navigateTo({
          scrollIndex: rowIndex,
          scrollType: null,
          scrollColumn: column,
          focusIndex: rowIndex,
          focusColumn: column
        });
      };
      NavigationService2.prototype.onHomeOrEndKey = function(key) {
        var homeKey = key === KeyCode.PAGE_HOME;
        var allColumns = this.columnModel.getAllDisplayedColumns();
        var columnToSelect = homeKey ? allColumns[0] : last(allColumns);
        var scrollIndex = homeKey ? this.paginationProxy.getPageFirstRow() : this.paginationProxy.getPageLastRow();
        this.navigateTo({
          scrollIndex,
          scrollType: null,
          scrollColumn: columnToSelect,
          focusIndex: scrollIndex,
          focusColumn: columnToSelect
        });
      };
      NavigationService2.prototype.onTabKeyDown = function(previous, keyboardEvent) {
        var backwards = keyboardEvent.shiftKey;
        var movedToNextCell = this.tabToNextCellCommon(previous, backwards, keyboardEvent);
        if (movedToNextCell) {
          keyboardEvent.preventDefault();
          return;
        }
        if (backwards) {
          var _a = previous.getRowPosition(), rowIndex = _a.rowIndex, rowPinned = _a.rowPinned;
          var firstRow = rowPinned ? rowIndex === 0 : rowIndex === this.paginationProxy.getPageFirstRow();
          if (firstRow) {
            keyboardEvent.preventDefault();
            this.focusService.focusLastHeader(keyboardEvent);
          }
        } else {
          if (previous instanceof CellCtrl) {
            previous.focusCell(true);
          }
          if (this.focusService.focusNextGridCoreContainer(backwards)) {
            keyboardEvent.preventDefault();
          }
        }
      };
      NavigationService2.prototype.tabToNextCell = function(backwards, event) {
        var focusedCell = this.focusService.getFocusedCell();
        if (!focusedCell) {
          return false;
        }
        var cellOrRow = this.getCellByPosition(focusedCell);
        if (!cellOrRow) {
          cellOrRow = this.rowRenderer.getRowByPosition(focusedCell);
          if (!cellOrRow || !cellOrRow.isFullWidth()) {
            return false;
          }
        }
        return this.tabToNextCellCommon(cellOrRow, backwards, event);
      };
      NavigationService2.prototype.tabToNextCellCommon = function(previous, backwards, event) {
        var editing = previous.isEditing();
        if (!editing && previous instanceof CellCtrl) {
          var cell = previous;
          var row = cell.getRowCtrl();
          if (row) {
            editing = row.isEditing();
          }
        }
        var res;
        if (editing) {
          if (this.gridOptionsWrapper.isFullRowEdit()) {
            res = this.moveToNextEditingRow(previous, backwards, event);
          } else {
            res = this.moveToNextEditingCell(previous, backwards, event);
          }
        } else {
          res = this.moveToNextCellNotEditing(previous, backwards);
        }
        return res || !!this.focusService.getFocusedHeader();
      };
      NavigationService2.prototype.moveToNextEditingCell = function(previousCell, backwards, event) {
        if (event === void 0) {
          event = null;
        }
        var previousPos = previousCell.getCellPosition();
        previousCell.getGui().focus();
        previousCell.stopEditing();
        var nextCell = this.findNextCellToFocusOn(previousPos, backwards, true);
        if (nextCell == null) {
          return false;
        }
        nextCell.startEditing(null, null, true, event);
        nextCell.focusCell(false);
        return true;
      };
      NavigationService2.prototype.moveToNextEditingRow = function(previousCell, backwards, event) {
        if (event === void 0) {
          event = null;
        }
        var previousPos = previousCell.getCellPosition();
        var nextCell = this.findNextCellToFocusOn(previousPos, backwards, true);
        if (nextCell == null) {
          return false;
        }
        var nextPos = nextCell.getCellPosition();
        var previousEditable = this.isCellEditable(previousPos);
        var nextEditable = this.isCellEditable(nextPos);
        var rowsMatch = nextPos && previousPos.rowIndex === nextPos.rowIndex && previousPos.rowPinned === nextPos.rowPinned;
        if (previousEditable) {
          previousCell.setFocusOutOnEditor();
        }
        if (!rowsMatch) {
          var pRow = previousCell.getRowCtrl();
          pRow.stopEditing();
          var nRow = nextCell.getRowCtrl();
          nRow.startRowEditing(void 0, void 0, void 0, event);
        }
        if (nextEditable) {
          nextCell.setFocusInOnEditor();
          nextCell.focusCell();
        } else {
          nextCell.focusCell(true);
        }
        return true;
      };
      NavigationService2.prototype.moveToNextCellNotEditing = function(previousCell, backwards) {
        var displayedColumns = this.columnModel.getAllDisplayedColumns();
        var cellPos;
        if (previousCell instanceof RowCtrl) {
          cellPos = __assign$4(__assign$4({}, previousCell.getRowPosition()), { column: backwards ? displayedColumns[0] : last(displayedColumns) });
        } else {
          cellPos = previousCell.getCellPosition();
        }
        var nextCell = this.findNextCellToFocusOn(cellPos, backwards, false);
        if (nextCell instanceof CellCtrl) {
          nextCell.focusCell(true);
        } else if (nextCell) {
          return this.tryToFocusFullWidthRow(nextCell.getRowPosition(), backwards);
        }
        return exists(nextCell);
      };
      NavigationService2.prototype.findNextCellToFocusOn = function(previousPosition, backwards, startEditing) {
        var nextPosition = previousPosition;
        while (true) {
          if (previousPosition !== nextPosition) {
            previousPosition = nextPosition;
          }
          if (!backwards) {
            nextPosition = this.getLastCellOfColSpan(nextPosition);
          }
          nextPosition = this.cellNavigationService.getNextTabbedCell(nextPosition, backwards);
          var userFunc = this.gridOptionsWrapper.getTabToNextCellFunc();
          if (exists(userFunc)) {
            var params = {
              backwards,
              editing: startEditing,
              previousCellPosition: previousPosition,
              nextCellPosition: nextPosition ? nextPosition : null
            };
            var userCell = userFunc(params);
            if (exists(userCell)) {
              if (userCell.floating) {
                doOnce(function() {
                  console.warn("AG Grid: tabToNextCellFunc return type should have attributes: rowIndex, rowPinned, column. However you had 'floating', maybe you meant 'rowPinned'?");
                }, "no floating in userCell");
                userCell.rowPinned = userCell.floating;
              }
              nextPosition = {
                rowIndex: userCell.rowIndex,
                column: userCell.column,
                rowPinned: userCell.rowPinned
              };
            } else {
              nextPosition = null;
            }
          }
          if (!nextPosition) {
            return null;
          }
          if (nextPosition.rowIndex < 0) {
            var headerLen = this.headerNavigationService.getHeaderRowCount();
            this.focusService.focusHeaderPosition({
              headerPosition: {
                headerRowIndex: headerLen + nextPosition.rowIndex,
                column: nextPosition.column
              }
            });
            return null;
          }
          var fullRowEdit = this.gridOptionsWrapper.isFullRowEdit();
          if (startEditing && !fullRowEdit) {
            var cellIsEditable = this.isCellEditable(nextPosition);
            if (!cellIsEditable) {
              continue;
            }
          }
          this.ensureCellVisible(nextPosition);
          var nextCell = this.getCellByPosition(nextPosition);
          if (!nextCell) {
            var row = this.rowRenderer.getRowByPosition(nextPosition);
            if (!row || !row.isFullWidth()) {
              continue;
            } else {
              return row;
            }
          }
          if (nextCell.isSuppressNavigable()) {
            continue;
          }
          if (this.rangeService) {
            this.rangeService.setRangeToCell(nextPosition);
          }
          return nextCell;
        }
      };
      NavigationService2.prototype.isCellEditable = function(cell) {
        var rowNode = this.lookupRowNodeForCell(cell);
        if (rowNode) {
          return cell.column.isCellEditable(rowNode);
        }
        return false;
      };
      NavigationService2.prototype.getCellByPosition = function(cellPosition) {
        var rowCtrl = this.rowRenderer.getRowByPosition(cellPosition);
        if (!rowCtrl) {
          return null;
        }
        return rowCtrl.getCellCtrl(cellPosition.column);
      };
      NavigationService2.prototype.lookupRowNodeForCell = function(cell) {
        if (cell.rowPinned === Constants.PINNED_TOP) {
          return this.pinnedRowModel.getPinnedTopRow(cell.rowIndex);
        }
        if (cell.rowPinned === Constants.PINNED_BOTTOM) {
          return this.pinnedRowModel.getPinnedBottomRow(cell.rowIndex);
        }
        return this.paginationProxy.getRow(cell.rowIndex);
      };
      NavigationService2.prototype.navigateToNextCell = function(event, key, currentCell, allowUserOverride) {
        var nextCell = currentCell;
        var hitEdgeOfGrid = false;
        while (nextCell && (nextCell === currentCell || !this.isValidNavigateCell(nextCell))) {
          if (this.gridOptionsWrapper.isEnableRtl()) {
            if (key === KeyCode.LEFT) {
              nextCell = this.getLastCellOfColSpan(nextCell);
            }
          } else if (key === KeyCode.RIGHT) {
            nextCell = this.getLastCellOfColSpan(nextCell);
          }
          nextCell = this.cellNavigationService.getNextCellToFocus(key, nextCell);
          hitEdgeOfGrid = missing(nextCell);
        }
        if (hitEdgeOfGrid && event && event.key === KeyCode.UP) {
          nextCell = {
            rowIndex: -1,
            rowPinned: null,
            column: currentCell.column
          };
        }
        if (allowUserOverride) {
          var userFunc = this.gridOptionsWrapper.getNavigateToNextCellFunc();
          if (exists(userFunc)) {
            var params = {
              key,
              previousCellPosition: currentCell,
              nextCellPosition: nextCell ? nextCell : null,
              event
            };
            var userCell = userFunc(params);
            if (exists(userCell)) {
              if (userCell.floating) {
                doOnce(function() {
                  console.warn("AG Grid: tabToNextCellFunc return type should have attributes: rowIndex, rowPinned, column. However you had 'floating', maybe you meant 'rowPinned'?");
                }, "no floating in userCell");
                userCell.rowPinned = userCell.floating;
              }
              nextCell = {
                rowPinned: userCell.rowPinned,
                rowIndex: userCell.rowIndex,
                column: userCell.column
              };
            } else {
              nextCell = null;
            }
          }
        }
        if (!nextCell) {
          return;
        }
        if (nextCell.rowIndex < 0) {
          var headerLen = this.headerNavigationService.getHeaderRowCount();
          this.focusService.focusHeaderPosition({
            headerPosition: { headerRowIndex: headerLen + nextCell.rowIndex, column: currentCell.column },
            event: event || void 0
          });
          return;
        }
        var normalisedPosition = this.getNormalisedPosition(nextCell);
        if (normalisedPosition) {
          this.focusPosition(normalisedPosition);
        } else {
          this.tryToFocusFullWidthRow(nextCell);
        }
      };
      NavigationService2.prototype.getNormalisedPosition = function(cellPosition) {
        this.ensureCellVisible(cellPosition);
        var cellCtrl = this.getCellByPosition(cellPosition);
        if (!cellCtrl) {
          return null;
        }
        cellPosition = cellCtrl.getCellPosition();
        this.ensureCellVisible(cellPosition);
        return cellPosition;
      };
      NavigationService2.prototype.tryToFocusFullWidthRow = function(position, backwards) {
        if (backwards === void 0) {
          backwards = false;
        }
        var displayedColumns = this.columnModel.getAllDisplayedColumns();
        var rowComp = this.rowRenderer.getRowByPosition(position);
        if (!rowComp || !rowComp.isFullWidth()) {
          return false;
        }
        var currentCellFocused = this.focusService.getFocusedCell();
        var cellPosition = {
          rowIndex: position.rowIndex,
          rowPinned: position.rowPinned,
          column: position.column || (backwards ? last(displayedColumns) : displayedColumns[0])
        };
        this.focusPosition(cellPosition);
        var fromBelow = currentCellFocused != null ? this.rowPositionUtils.before(cellPosition, currentCellFocused) : false;
        var focusEvent = {
          type: Events.EVENT_FULL_WIDTH_ROW_FOCUSED,
          rowIndex: cellPosition.rowIndex,
          rowPinned: cellPosition.rowPinned,
          column: cellPosition.column,
          isFullWidthCell: true,
          floating: cellPosition.rowPinned,
          fromBelow
        };
        this.eventService.dispatchEvent(focusEvent);
        return true;
      };
      NavigationService2.prototype.focusPosition = function(cellPosition) {
        this.focusService.setFocusedCell({
          rowIndex: cellPosition.rowIndex,
          column: cellPosition.column,
          rowPinned: cellPosition.rowPinned,
          forceBrowserFocus: true
        });
        if (this.rangeService) {
          this.rangeService.setRangeToCell(cellPosition);
        }
      };
      NavigationService2.prototype.isValidNavigateCell = function(cell) {
        var rowNode = this.rowPositionUtils.getRowNode(cell);
        return !!rowNode;
      };
      NavigationService2.prototype.getLastCellOfColSpan = function(cell) {
        var cellCtrl = this.getCellByPosition(cell);
        if (!cellCtrl) {
          return cell;
        }
        var colSpanningList = cellCtrl.getColSpanningList();
        if (colSpanningList.length === 1) {
          return cell;
        }
        return {
          rowIndex: cell.rowIndex,
          column: last(colSpanningList),
          rowPinned: cell.rowPinned
        };
      };
      NavigationService2.prototype.ensureCellVisible = function(gridCell) {
        var _a;
        var isGroupStickyEnabled = this.gridOptionsWrapper.isGroupRowsSticky();
        var rowNode = this.rowModel.getRow(gridCell.rowIndex);
        var skipScrollToRow = isGroupStickyEnabled && ((_a = rowNode) === null || _a === void 0 ? void 0 : _a.sticky);
        if (!skipScrollToRow && missing(gridCell.rowPinned)) {
          this.gridBodyCon.getScrollFeature().ensureIndexVisible(gridCell.rowIndex);
        }
        if (!gridCell.column.isPinned()) {
          this.gridBodyCon.getScrollFeature().ensureColumnVisible(gridCell.column);
        }
      };
      __decorate$1B([
        Autowired("mouseEventService")
      ], NavigationService2.prototype, "mouseEventService", void 0);
      __decorate$1B([
        Autowired("paginationProxy")
      ], NavigationService2.prototype, "paginationProxy", void 0);
      __decorate$1B([
        Autowired("focusService")
      ], NavigationService2.prototype, "focusService", void 0);
      __decorate$1B([
        Optional("rangeService")
      ], NavigationService2.prototype, "rangeService", void 0);
      __decorate$1B([
        Autowired("columnModel")
      ], NavigationService2.prototype, "columnModel", void 0);
      __decorate$1B([
        Autowired("rowModel")
      ], NavigationService2.prototype, "rowModel", void 0);
      __decorate$1B([
        Autowired("ctrlsService")
      ], NavigationService2.prototype, "ctrlsService", void 0);
      __decorate$1B([
        Autowired("rowRenderer")
      ], NavigationService2.prototype, "rowRenderer", void 0);
      __decorate$1B([
        Autowired("headerNavigationService")
      ], NavigationService2.prototype, "headerNavigationService", void 0);
      __decorate$1B([
        Autowired("rowPositionUtils")
      ], NavigationService2.prototype, "rowPositionUtils", void 0);
      __decorate$1B([
        Autowired("cellNavigationService")
      ], NavigationService2.prototype, "cellNavigationService", void 0);
      __decorate$1B([
        Autowired("pinnedRowModel")
      ], NavigationService2.prototype, "pinnedRowModel", void 0);
      __decorate$1B([
        PostConstruct
      ], NavigationService2.prototype, "postConstruct", null);
      NavigationService2 = __decorate$1B([
        Bean("navigationService")
      ], NavigationService2);
      return NavigationService2;
    }(BeanStub);
    __extends$1H = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1A = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    PopupEditorWrapper = function(_super) {
      __extends$1H(PopupEditorWrapper2, _super);
      function PopupEditorWrapper2(params) {
        var _this = _super.call(this, '<div class="ag-popup-editor" tabindex="-1"/>') || this;
        _this.params = params;
        return _this;
      }
      PopupEditorWrapper2.prototype.postConstruct = function() {
        this.gridOptionsWrapper.setDomData(this.getGui(), PopupEditorWrapper2.DOM_KEY_POPUP_EDITOR_WRAPPER, true);
        this.addKeyDownListener();
      };
      PopupEditorWrapper2.prototype.addKeyDownListener = function() {
        var _this = this;
        var eGui = this.getGui();
        var params = this.params;
        var listener = function(event) {
          if (!isUserSuppressingKeyboardEvent(_this.gridOptionsWrapper, event, params.node, params.column, true)) {
            params.onKeyDown(event);
          }
        };
        this.addManagedListener(eGui, "keydown", listener);
      };
      PopupEditorWrapper2.DOM_KEY_POPUP_EDITOR_WRAPPER = "popupEditorWrapper";
      __decorate$1A([
        PostConstruct
      ], PopupEditorWrapper2.prototype, "postConstruct", null);
      return PopupEditorWrapper2;
    }(PopupComponent);
    __extends$1G = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    CellComp = function(_super) {
      __extends$1G(CellComp2, _super);
      function CellComp2(beans, cellCtrl, printLayout, eRow, editingRow) {
        var _this = _super.call(this) || this;
        _this.rendererVersion = 0;
        _this.editorVersion = 0;
        _this.beans = beans;
        _this.column = cellCtrl.getColumn();
        _this.rowNode = cellCtrl.getRowNode();
        _this.rowCtrl = cellCtrl.getRowCtrl();
        _this.eRow = eRow;
        _this.setTemplate('<div comp-id="' + _this.getCompId() + '"/>');
        var eGui = _this.getGui();
        _this.forceWrapper = cellCtrl.isForceWrapper();
        _this.refreshWrapper(false);
        var setAttribute = function(name, value, element) {
          var actualElement = element ? element : eGui;
          if (value != null && value != "") {
            actualElement.setAttribute(name, value);
          } else {
            actualElement.removeAttribute(name);
          }
        };
        var compProxy = {
          addOrRemoveCssClass: function(cssClassName, on) {
            return _this.addOrRemoveCssClass(cssClassName, on);
          },
          setUserStyles: function(styles) {
            return addStylesToElement(eGui, styles);
          },
          getFocusableElement: function() {
            return _this.getFocusableElement();
          },
          setTabIndex: function(tabIndex) {
            return setAttribute("tabindex", tabIndex.toString());
          },
          setRole: function(role) {
            return setAriaRole(eGui, role);
          },
          setColId: function(colId) {
            return setAttribute("col-id", colId);
          },
          setTitle: function(title) {
            return setAttribute("title", title);
          },
          setIncludeSelection: function(include) {
            return _this.includeSelection = include;
          },
          setIncludeRowDrag: function(include) {
            return _this.includeRowDrag = include;
          },
          setIncludeDndSource: function(include) {
            return _this.includeDndSource = include;
          },
          setRenderDetails: function(compDetails, valueToDisplay, force) {
            return _this.setRenderDetails(compDetails, valueToDisplay, force);
          },
          setEditDetails: function(compDetails, popup, position) {
            return _this.setEditDetails(compDetails, popup, position);
          },
          getCellEditor: function() {
            return _this.cellEditor || null;
          },
          getCellRenderer: function() {
            return _this.cellRenderer || null;
          },
          getParentOfValue: function() {
            return _this.getParentOfValue();
          }
        };
        _this.cellCtrl = cellCtrl;
        cellCtrl.setComp(compProxy, _this.getGui(), _this.eCellWrapper, printLayout, editingRow);
        return _this;
      }
      CellComp2.prototype.getParentOfValue = function() {
        if (this.eCellValue) {
          return this.eCellValue;
        }
        if (this.eCellWrapper) {
          return this.eCellWrapper;
        }
        return this.getGui();
      };
      CellComp2.prototype.setRenderDetails = function(compDetails, valueToDisplay, forceNewCellRendererInstance) {
        var isInlineEditing = this.cellEditor && !this.cellEditorPopupWrapper;
        if (isInlineEditing) {
          return;
        }
        this.firstRender = this.firstRender == null;
        var controlWrapperChanged = this.refreshWrapper(false);
        if (compDetails) {
          var neverRefresh = forceNewCellRendererInstance || controlWrapperChanged;
          var cellRendererRefreshSuccessful = neverRefresh ? false : this.refreshCellRenderer(compDetails);
          if (!cellRendererRefreshSuccessful) {
            this.destroyRenderer();
            this.createCellRendererInstance(compDetails);
          }
        } else {
          this.destroyRenderer();
          this.insertValueWithoutCellRenderer(valueToDisplay);
        }
      };
      CellComp2.prototype.setEditDetails = function(compDetails, popup, position) {
        if (compDetails) {
          this.createCellEditorInstance(compDetails, popup, position);
        } else {
          this.destroyEditor();
        }
      };
      CellComp2.prototype.removeControls = function() {
        this.checkboxSelectionComp = this.beans.context.destroyBean(this.checkboxSelectionComp);
        this.dndSourceComp = this.beans.context.destroyBean(this.dndSourceComp);
        this.rowDraggingComp = this.beans.context.destroyBean(this.rowDraggingComp);
      };
      CellComp2.prototype.refreshWrapper = function(editing) {
        var providingControls = this.includeRowDrag || this.includeDndSource || this.includeSelection;
        var usingWrapper = providingControls || this.forceWrapper;
        var putWrapperIn = usingWrapper && this.eCellWrapper == null;
        if (putWrapperIn) {
          this.eCellWrapper = loadTemplate('<div class="ag-cell-wrapper" role="presentation"></div>');
          this.getGui().appendChild(this.eCellWrapper);
        }
        var takeWrapperOut = !usingWrapper && this.eCellWrapper != null;
        if (takeWrapperOut) {
          removeFromParent(this.eCellWrapper);
          this.eCellWrapper = void 0;
        }
        this.addOrRemoveCssClass("ag-cell-value", !usingWrapper);
        var usingCellValue = !editing && usingWrapper;
        var putCellValueIn = usingCellValue && this.eCellValue == null;
        if (putCellValueIn) {
          this.eCellValue = loadTemplate('<span class="ag-cell-value" role="presentation"></span>');
          this.eCellWrapper.appendChild(this.eCellValue);
        }
        var takeCellValueOut = !usingCellValue && this.eCellValue != null;
        if (takeCellValueOut) {
          removeFromParent(this.eCellValue);
          this.eCellValue = void 0;
        }
        var templateChanged = putWrapperIn || takeWrapperOut || putCellValueIn || takeCellValueOut;
        if (templateChanged) {
          this.removeControls();
        }
        if (!editing && providingControls) {
          this.addControls();
        }
        return templateChanged;
      };
      CellComp2.prototype.addControls = function() {
        var id = this.eCellValue.id = "cell-" + this.getCompId();
        var describedByIds = [];
        setAriaHidden(this.eCellWrapper, true);
        if (this.includeRowDrag) {
          if (this.rowDraggingComp == null) {
            this.rowDraggingComp = this.cellCtrl.createRowDragComp();
            if (this.rowDraggingComp) {
              this.eCellWrapper.insertBefore(this.rowDraggingComp.getGui(), this.eCellValue);
            }
          }
        }
        if (this.includeDndSource) {
          if (this.dndSourceComp == null) {
            this.dndSourceComp = this.cellCtrl.createDndSource();
            this.eCellWrapper.insertBefore(this.dndSourceComp.getGui(), this.eCellValue);
          }
        }
        if (this.includeSelection) {
          if (this.checkboxSelectionComp == null) {
            this.checkboxSelectionComp = this.cellCtrl.createSelectionCheckbox();
            this.eCellWrapper.insertBefore(this.checkboxSelectionComp.getGui(), this.eCellValue);
          }
          describedByIds.push(this.checkboxSelectionComp.getCheckboxId());
        }
        describedByIds.push(id);
        setAriaDescribedBy(this.getGui(), describedByIds.join(" "));
      };
      CellComp2.prototype.createCellEditorInstance = function(compDetails, popup, position) {
        var _this = this;
        var versionCopy = this.editorVersion;
        var cellEditorPromise = compDetails.newAgStackInstance();
        if (!cellEditorPromise) {
          return;
        }
        var params = compDetails.params;
        cellEditorPromise.then(function(c) {
          return _this.afterCellEditorCreated(versionCopy, c, params, popup, position);
        });
        var cellEditorAsync = missing(this.cellEditor);
        if (cellEditorAsync && params.cellStartedEdit) {
          this.cellCtrl.focusCell(true);
        }
      };
      CellComp2.prototype.insertValueWithoutCellRenderer = function(valueToDisplay) {
        var eParent = this.getParentOfValue();
        clearElement(eParent);
        var escapedValue = valueToDisplay != null ? escapeString(valueToDisplay) : null;
        if (escapedValue != null) {
          eParent.innerHTML = escapedValue;
        }
      };
      CellComp2.prototype.destroyEditorAndRenderer = function() {
        this.destroyRenderer();
        this.destroyEditor();
      };
      CellComp2.prototype.destroyRenderer = function() {
        var context = this.beans.context;
        this.cellRenderer = context.destroyBean(this.cellRenderer);
        removeFromParent(this.cellRendererGui);
        this.cellRendererGui = null;
        this.rendererVersion++;
      };
      CellComp2.prototype.destroyEditor = function() {
        var context = this.beans.context;
        if (this.hideEditorPopup) {
          this.hideEditorPopup();
        }
        this.hideEditorPopup = void 0;
        this.cellEditor = context.destroyBean(this.cellEditor);
        this.cellEditorPopupWrapper = context.destroyBean(this.cellEditorPopupWrapper);
        removeFromParent(this.cellEditorGui);
        this.cellEditorGui = null;
        this.editorVersion++;
      };
      CellComp2.prototype.refreshCellRenderer = function(compClassAndParams) {
        if (this.cellRenderer == null || this.cellRenderer.refresh == null) {
          return false;
        }
        if (this.cellRendererClass !== compClassAndParams.componentClass) {
          return false;
        }
        var result = this.cellRenderer.refresh(compClassAndParams.params);
        return result === true || result === void 0;
      };
      CellComp2.prototype.createCellRendererInstance = function(compDetails) {
        var _this = this;
        var angularCompileRows = this.beans.gridOptionsWrapper.isAngularCompileRows();
        var suppressAnimationFrame = this.beans.gridOptionsWrapper.isSuppressAnimationFrame();
        var useTaskService = !angularCompileRows && !suppressAnimationFrame;
        var displayComponentVersionCopy = this.rendererVersion;
        var componentClass = compDetails.componentClass;
        var createCellRendererFunc = function() {
          var staleTask = _this.rendererVersion !== displayComponentVersionCopy || !_this.isAlive();
          if (staleTask) {
            return;
          }
          var componentPromise = compDetails.newAgStackInstance();
          var callback = _this.afterCellRendererCreated.bind(_this, displayComponentVersionCopy, componentClass);
          if (componentPromise) {
            componentPromise.then(callback);
          }
        };
        if (useTaskService && this.firstRender) {
          this.beans.animationFrameService.createTask(createCellRendererFunc, this.rowNode.rowIndex, "createTasksP2");
        } else {
          createCellRendererFunc();
        }
      };
      CellComp2.prototype.getCtrl = function() {
        return this.cellCtrl;
      };
      CellComp2.prototype.getRowCtrl = function() {
        return this.rowCtrl;
      };
      CellComp2.prototype.getCellRenderer = function() {
        return this.cellRenderer;
      };
      CellComp2.prototype.getCellEditor = function() {
        return this.cellEditor;
      };
      CellComp2.prototype.afterCellRendererCreated = function(cellRendererVersion, cellRendererClass, cellRenderer) {
        var staleTask = !this.isAlive() || cellRendererVersion !== this.rendererVersion;
        if (staleTask) {
          this.beans.context.destroyBean(cellRenderer);
          return;
        }
        this.cellRenderer = cellRenderer;
        this.cellRendererClass = cellRendererClass;
        this.cellRendererGui = this.cellRenderer.getGui();
        if (this.cellRendererGui != null) {
          var eParent = this.getParentOfValue();
          clearElement(eParent);
          eParent.appendChild(this.cellRendererGui);
        }
      };
      CellComp2.prototype.afterCellEditorCreated = function(requestVersion, cellEditor, params, popup, position) {
        var staleComp = requestVersion !== this.editorVersion;
        if (staleComp) {
          this.beans.context.destroyBean(cellEditor);
          return;
        }
        var editingCancelledByUserComp = cellEditor.isCancelBeforeStart && cellEditor.isCancelBeforeStart();
        if (editingCancelledByUserComp) {
          this.beans.context.destroyBean(cellEditor);
          this.cellCtrl.stopEditing();
          return;
        }
        if (!cellEditor.getGui) {
          console.warn("AG Grid: cellEditor for column " + this.column.getId() + " is missing getGui() method");
          this.beans.context.destroyBean(cellEditor);
          return;
        }
        this.cellEditor = cellEditor;
        this.cellEditorGui = cellEditor.getGui();
        var cellEditorInPopup = popup || cellEditor.isPopup !== void 0 && cellEditor.isPopup();
        if (cellEditorInPopup) {
          if (!popup) {
            this.cellCtrl.hackSayEditingInPopup();
          }
          this.addPopupCellEditor(params, position);
        } else {
          this.addInCellEditor();
        }
        if (cellEditor.afterGuiAttached) {
          cellEditor.afterGuiAttached();
        }
      };
      CellComp2.prototype.addInCellEditor = function() {
        var eGui = this.getGui();
        var eDocument = this.beans.gridOptionsWrapper.getDocument();
        if (eGui.contains(eDocument.activeElement)) {
          eGui.focus();
        }
        this.destroyRenderer();
        this.refreshWrapper(true);
        this.clearParentOfValue();
        if (this.cellEditorGui) {
          var eParent = this.getParentOfValue();
          eParent.appendChild(this.cellEditorGui);
        }
      };
      CellComp2.prototype.addPopupCellEditor = function(params, position) {
        var _this = this;
        if (this.beans.gridOptionsWrapper.isFullRowEdit()) {
          console.warn("AG Grid: popup cellEditor does not work with fullRowEdit - you cannot use them both - either turn off fullRowEdit, or stop using popup editors.");
        }
        var cellEditor = this.cellEditor;
        this.cellEditorPopupWrapper = this.beans.context.createBean(new PopupEditorWrapper(params));
        var ePopupGui = this.cellEditorPopupWrapper.getGui();
        if (this.cellEditorGui) {
          ePopupGui.appendChild(this.cellEditorGui);
        }
        var popupService = this.beans.popupService;
        var useModelPopup = this.beans.gridOptionsWrapper.isStopEditingWhenCellsLoseFocus();
        var positionToUse = position != null ? position : cellEditor.getPopupPosition ? cellEditor.getPopupPosition() : "over";
        var positionParams = {
          column: this.column,
          rowNode: this.rowNode,
          type: "popupCellEditor",
          eventSource: this.getGui(),
          ePopup: ePopupGui,
          keepWithinBounds: true
        };
        var positionCallback = positionToUse === "under" ? popupService.positionPopupUnderComponent.bind(popupService, positionParams) : popupService.positionPopupOverComponent.bind(popupService, positionParams);
        var translate = this.beans.gridOptionsWrapper.getLocaleTextFunc();
        var addPopupRes = popupService.addPopup({
          modal: useModelPopup,
          eChild: ePopupGui,
          closeOnEsc: true,
          closedCallback: function() {
            _this.cellCtrl.onPopupEditorClosed();
          },
          anchorToElement: this.getGui(),
          positionCallback,
          ariaLabel: translate("ariaLabelCellEditor", "Cell Editor")
        });
        if (addPopupRes) {
          this.hideEditorPopup = addPopupRes.hideFunc;
        }
      };
      CellComp2.prototype.detach = function() {
        this.eRow.removeChild(this.getGui());
      };
      CellComp2.prototype.destroy = function() {
        this.cellCtrl.stopEditing();
        this.destroyEditorAndRenderer();
        this.removeControls();
        _super.prototype.destroy.call(this);
      };
      CellComp2.prototype.clearParentOfValue = function() {
        var eGui = this.getGui();
        var eDocument = this.beans.gridOptionsWrapper.getDocument();
        if (eGui.contains(eDocument.activeElement) && browserSupportsPreventScroll()) {
          eGui.focus({ preventScroll: true });
        }
        clearElement(this.getParentOfValue());
      };
      return CellComp2;
    }(Component);
    __extends$1F = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    RowComp = function(_super) {
      __extends$1F(RowComp2, _super);
      function RowComp2(ctrl, beans, containerType) {
        var _this = _super.call(this) || this;
        _this.cellComps = {};
        _this.beans = beans;
        _this.rowCtrl = ctrl;
        _this.setTemplate('<div comp-id="' + _this.getCompId() + '" style="' + _this.getInitialStyle() + '"/>');
        var eGui = _this.getGui();
        var style = eGui.style;
        var compProxy = {
          setDomOrder: function(domOrder) {
            return _this.domOrder = domOrder;
          },
          setCellCtrls: function(cellCtrls) {
            return _this.setCellCtrls(cellCtrls);
          },
          showFullWidth: function(compDetails) {
            return _this.showFullWidth(compDetails);
          },
          getFullWidthCellRenderer: function() {
            return _this.getFullWidthCellRenderer();
          },
          addOrRemoveCssClass: function(name, on) {
            return _this.addOrRemoveCssClass(name, on);
          },
          setUserStyles: function(styles) {
            return addStylesToElement(eGui, styles);
          },
          setTop: function(top) {
            return style.top = top;
          },
          setTransform: function(transform) {
            return style.transform = transform;
          },
          setRowIndex: function(rowIndex) {
            return eGui.setAttribute("row-index", rowIndex);
          },
          setRole: function(role) {
            return setAriaRole(eGui, role);
          },
          setRowId: function(rowId) {
            return eGui.setAttribute("row-id", rowId);
          },
          setRowBusinessKey: function(businessKey) {
            return eGui.setAttribute("row-business-key", businessKey);
          },
          setTabIndex: function(tabIndex) {
            return eGui.setAttribute("tabindex", tabIndex.toString());
          }
        };
        ctrl.setComp(compProxy, _this.getGui(), containerType);
        return _this;
      }
      RowComp2.prototype.getInitialStyle = function() {
        var transform = this.rowCtrl.getInitialTransform();
        var top = this.rowCtrl.getInitialRowTop();
        return transform ? "transform: " + transform : "top: " + top;
      };
      RowComp2.prototype.showFullWidth = function(compDetails) {
        var _this = this;
        var callback = function(cellRenderer) {
          if (_this.isAlive()) {
            var eGui = cellRenderer.getGui();
            _this.getGui().appendChild(eGui);
            _this.rowCtrl.setupDetailRowAutoHeight(eGui);
            _this.setFullWidthRowComp(cellRenderer);
          } else {
            _this.beans.context.destroyBean(cellRenderer);
          }
        };
        var res = compDetails.newAgStackInstance();
        if (!res) {
          return;
        }
        res.then(callback);
      };
      RowComp2.prototype.setCellCtrls = function(cellCtrls) {
        var _this = this;
        var cellsToRemove = Object.assign({}, this.cellComps);
        cellCtrls.forEach(function(cellCtrl) {
          var key = cellCtrl.getInstanceId();
          var existingCellComp = _this.cellComps[key];
          if (existingCellComp == null) {
            _this.newCellComp(cellCtrl);
          } else {
            cellsToRemove[key] = null;
          }
        });
        var cellCompsToRemove = getAllValuesInObject(cellsToRemove).filter(function(cellComp) {
          return cellComp != null;
        });
        this.destroyCells(cellCompsToRemove);
        this.ensureDomOrder(cellCtrls);
      };
      RowComp2.prototype.ensureDomOrder = function(cellCtrls) {
        var _this = this;
        if (!this.domOrder) {
          return;
        }
        var elementsInOrder = [];
        cellCtrls.forEach(function(cellCtrl) {
          var cellComp = _this.cellComps[cellCtrl.getInstanceId()];
          if (cellComp) {
            elementsInOrder.push(cellComp.getGui());
          }
        });
        setDomChildOrder(this.getGui(), elementsInOrder);
      };
      RowComp2.prototype.newCellComp = function(cellCtrl) {
        var cellComp = new CellComp(this.beans, cellCtrl, this.rowCtrl.isPrintLayout(), this.getGui(), this.rowCtrl.isEditing());
        this.cellComps[cellCtrl.getInstanceId()] = cellComp;
        this.getGui().appendChild(cellComp.getGui());
      };
      RowComp2.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
        this.destroyAllCells();
      };
      RowComp2.prototype.destroyAllCells = function() {
        var cellsToDestroy = getAllValuesInObject(this.cellComps).filter(function(cp) {
          return cp != null;
        });
        this.destroyCells(cellsToDestroy);
      };
      RowComp2.prototype.setFullWidthRowComp = function(fullWidthRowComponent) {
        var _this = this;
        if (this.fullWidthCellRenderer) {
          console.error("AG Grid - should not be setting fullWidthRowComponent twice");
        }
        this.fullWidthCellRenderer = fullWidthRowComponent;
        this.addDestroyFunc(function() {
          _this.fullWidthCellRenderer = _this.beans.context.destroyBean(_this.fullWidthCellRenderer);
        });
      };
      RowComp2.prototype.getFullWidthCellRenderer = function() {
        return this.fullWidthCellRenderer;
      };
      RowComp2.prototype.destroyCells = function(cellComps) {
        var _this = this;
        cellComps.forEach(function(cellComp) {
          if (!cellComp) {
            return;
          }
          var instanceId = cellComp.getCtrl().getInstanceId();
          if (_this.cellComps[instanceId] !== cellComp) {
            return;
          }
          cellComp.detach();
          cellComp.destroy();
          _this.cellComps[instanceId] = null;
        });
      };
      return RowComp2;
    }(Component);
    __extends$1E = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign$3 = function() {
      __assign$3 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$3.apply(this, arguments);
    };
    __decorate$1z = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    RowContainerComp = function(_super) {
      __extends$1E(RowContainerComp2, _super);
      function RowContainerComp2() {
        var _this = _super.call(this, templateFactory()) || this;
        _this.rowComps = {};
        _this.name = Component.elementGettingCreated.getAttribute("name");
        _this.type = getRowContainerTypeForName(_this.name);
        return _this;
      }
      RowContainerComp2.prototype.postConstruct = function() {
        var _this = this;
        var compProxy = {
          setViewportHeight: function(height) {
            return _this.eViewport.style.height = height;
          },
          setRowCtrls: function(rowCtrls) {
            return _this.setRowCtrls(rowCtrls);
          },
          setDomOrder: function(domOrder) {
            _this.domOrder = domOrder;
          },
          setContainerWidth: function(width) {
            return _this.eContainer.style.width = width;
          }
        };
        var ctrl = this.createManagedBean(new RowContainerCtrl(this.name));
        ctrl.setComp(compProxy, this.eContainer, this.eViewport, this.eWrapper);
      };
      RowContainerComp2.prototype.preDestroy = function() {
        this.setRowCtrls([]);
      };
      RowContainerComp2.prototype.setRowCtrls = function(rowCtrls) {
        var _this = this;
        var oldRows = __assign$3({}, this.rowComps);
        this.rowComps = {};
        this.lastPlacedElement = null;
        var processRow = function(rowCon) {
          var instanceId = rowCon.getInstanceId();
          var existingRowComp = oldRows[instanceId];
          if (existingRowComp) {
            _this.rowComps[instanceId] = existingRowComp;
            delete oldRows[instanceId];
            _this.ensureDomOrder(existingRowComp.getGui());
          } else {
            var rowComp = _this.newRowComp(rowCon);
            _this.rowComps[instanceId] = rowComp;
            _this.appendRow(rowComp.getGui());
          }
        };
        rowCtrls.forEach(processRow);
        getAllValuesInObject(oldRows).forEach(function(oldRowComp) {
          _this.eContainer.removeChild(oldRowComp.getGui());
          oldRowComp.destroy();
        });
        setAriaRole(this.eContainer, rowCtrls.length ? "rowgroup" : "presentation");
      };
      RowContainerComp2.prototype.appendRow = function(element) {
        if (this.domOrder) {
          insertWithDomOrder(this.eContainer, element, this.lastPlacedElement);
        } else {
          this.eContainer.appendChild(element);
        }
        this.lastPlacedElement = element;
      };
      RowContainerComp2.prototype.ensureDomOrder = function(eRow) {
        if (this.domOrder) {
          ensureDomOrder(this.eContainer, eRow, this.lastPlacedElement);
          this.lastPlacedElement = eRow;
        }
      };
      RowContainerComp2.prototype.newRowComp = function(rowCtrl) {
        RowContainerCtrl.getPinned(this.name);
        var res = new RowComp(rowCtrl, this.beans, this.type);
        return res;
      };
      __decorate$1z([
        Autowired("beans")
      ], RowContainerComp2.prototype, "beans", void 0);
      __decorate$1z([
        RefSelector("eViewport")
      ], RowContainerComp2.prototype, "eViewport", void 0);
      __decorate$1z([
        RefSelector("eContainer")
      ], RowContainerComp2.prototype, "eContainer", void 0);
      __decorate$1z([
        RefSelector("eWrapper")
      ], RowContainerComp2.prototype, "eWrapper", void 0);
      __decorate$1z([
        PostConstruct
      ], RowContainerComp2.prototype, "postConstruct", null);
      __decorate$1z([
        PreDestroy
      ], RowContainerComp2.prototype, "preDestroy", null);
      return RowContainerComp2;
    }(Component);
    __decorate$1y = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    BodyDropPivotTarget = function() {
      function BodyDropPivotTarget2(pinned) {
        this.columnsToAggregate = [];
        this.columnsToGroup = [];
        this.columnsToPivot = [];
        this.pinned = pinned;
      }
      BodyDropPivotTarget2.prototype.onDragEnter = function(draggingEvent) {
        var _this = this;
        this.clearColumnsList();
        if (this.gridOptionsWrapper.isFunctionsReadOnly()) {
          return;
        }
        var dragColumns = draggingEvent.dragItem.columns;
        if (!dragColumns) {
          return;
        }
        dragColumns.forEach(function(column) {
          if (!column.isPrimary()) {
            return;
          }
          if (column.isAnyFunctionActive()) {
            return;
          }
          if (column.isAllowValue()) {
            _this.columnsToAggregate.push(column);
          } else if (column.isAllowRowGroup()) {
            _this.columnsToGroup.push(column);
          } else if (column.isAllowPivot()) {
            _this.columnsToPivot.push(column);
          }
        });
      };
      BodyDropPivotTarget2.prototype.getIconName = function() {
        var totalColumns = this.columnsToAggregate.length + this.columnsToGroup.length + this.columnsToPivot.length;
        if (totalColumns > 0) {
          return this.pinned ? DragAndDropService.ICON_PINNED : DragAndDropService.ICON_MOVE;
        }
        return null;
      };
      BodyDropPivotTarget2.prototype.onDragLeave = function(draggingEvent) {
        this.clearColumnsList();
      };
      BodyDropPivotTarget2.prototype.clearColumnsList = function() {
        this.columnsToAggregate.length = 0;
        this.columnsToGroup.length = 0;
        this.columnsToPivot.length = 0;
      };
      BodyDropPivotTarget2.prototype.onDragging = function(draggingEvent) {
      };
      BodyDropPivotTarget2.prototype.onDragStop = function(draggingEvent) {
        if (this.columnsToAggregate.length > 0) {
          this.columnModel.addValueColumns(this.columnsToAggregate, "toolPanelDragAndDrop");
        }
        if (this.columnsToGroup.length > 0) {
          this.columnModel.addRowGroupColumns(this.columnsToGroup, "toolPanelDragAndDrop");
        }
        if (this.columnsToPivot.length > 0) {
          this.columnModel.addPivotColumns(this.columnsToPivot, "toolPanelDragAndDrop");
        }
      };
      __decorate$1y([
        Autowired("columnModel")
      ], BodyDropPivotTarget2.prototype, "columnModel", void 0);
      __decorate$1y([
        Autowired("gridOptionsWrapper")
      ], BodyDropPivotTarget2.prototype, "gridOptionsWrapper", void 0);
      return BodyDropPivotTarget2;
    }();
    __decorate$1x = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __read$e = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    MoveColumnFeature = function() {
      function MoveColumnFeature2(pinned, eContainer) {
        this.needToMoveLeft = false;
        this.needToMoveRight = false;
        this.pinned = pinned;
        this.eContainer = eContainer;
        this.centerContainer = !exists(pinned);
      }
      MoveColumnFeature2.prototype.init = function() {
        var _this = this;
        this.ctrlsService.whenReady(function() {
          _this.gridBodyCon = _this.ctrlsService.getGridBodyCtrl();
        });
      };
      MoveColumnFeature2.prototype.getIconName = function() {
        return this.pinned ? DragAndDropService.ICON_PINNED : DragAndDropService.ICON_MOVE;
      };
      MoveColumnFeature2.prototype.onDragEnter = function(draggingEvent) {
        var columns = draggingEvent.dragItem.columns;
        var dragCameFromToolPanel = draggingEvent.dragSource.type === DragSourceType.ToolPanel;
        if (dragCameFromToolPanel) {
          this.setColumnsVisible(columns, true, "uiColumnDragged");
        } else {
          var visibleState_1 = draggingEvent.dragItem.visibleState;
          var visibleColumns = (columns || []).filter(function(column) {
            return visibleState_1[column.getId()];
          });
          this.setColumnsVisible(visibleColumns, true, "uiColumnDragged");
        }
        this.setColumnsPinned(columns, this.pinned, "uiColumnDragged");
        this.onDragging(draggingEvent, true, true);
      };
      MoveColumnFeature2.prototype.onDragLeave = function(draggingEvent) {
        this.ensureIntervalCleared();
      };
      MoveColumnFeature2.prototype.setColumnsVisible = function(columns, visible, source) {
        if (source === void 0) {
          source = "api";
        }
        if (columns) {
          var allowedCols = columns.filter(function(c) {
            return !c.getColDef().lockVisible;
          });
          this.columnModel.setColumnsVisible(allowedCols, visible, source);
        }
      };
      MoveColumnFeature2.prototype.setColumnsPinned = function(columns, pinned, source) {
        if (source === void 0) {
          source = "api";
        }
        if (columns) {
          var allowedCols = columns.filter(function(c) {
            return !c.getColDef().lockPinned;
          });
          this.columnModel.setColumnsPinned(allowedCols, pinned, source);
        }
      };
      MoveColumnFeature2.prototype.onDragStop = function() {
        this.ensureIntervalCleared();
      };
      MoveColumnFeature2.prototype.normaliseX = function(x) {
        if (this.gridOptionsWrapper.isEnableRtl()) {
          var clientWidth = this.eContainer.clientWidth;
          x = clientWidth - x;
        }
        if (this.centerContainer) {
          x += this.ctrlsService.getCenterRowContainerCtrl().getCenterViewportScrollLeft();
        }
        return x;
      };
      MoveColumnFeature2.prototype.checkCenterForScrolling = function(xAdjustedForScroll) {
        if (this.centerContainer) {
          var firstVisiblePixel = this.ctrlsService.getCenterRowContainerCtrl().getCenterViewportScrollLeft();
          var lastVisiblePixel = firstVisiblePixel + this.ctrlsService.getCenterRowContainerCtrl().getCenterWidth();
          if (this.gridOptionsWrapper.isEnableRtl()) {
            this.needToMoveRight = xAdjustedForScroll < firstVisiblePixel + 50;
            this.needToMoveLeft = xAdjustedForScroll > lastVisiblePixel - 50;
          } else {
            this.needToMoveLeft = xAdjustedForScroll < firstVisiblePixel + 50;
            this.needToMoveRight = xAdjustedForScroll > lastVisiblePixel - 50;
          }
          if (this.needToMoveLeft || this.needToMoveRight) {
            this.ensureIntervalStarted();
          } else {
            this.ensureIntervalCleared();
          }
        }
      };
      MoveColumnFeature2.prototype.onDragging = function(draggingEvent, fromEnter, fakeEvent) {
        var _this = this;
        if (fromEnter === void 0) {
          fromEnter = false;
        }
        if (fakeEvent === void 0) {
          fakeEvent = false;
        }
        this.lastDraggingEvent = draggingEvent;
        if (missing(draggingEvent.hDirection)) {
          return;
        }
        var mouseXNormalised = this.normaliseX(draggingEvent.x);
        if (!fromEnter) {
          this.checkCenterForScrolling(mouseXNormalised);
        }
        var hDirectionNormalised = this.normaliseDirection(draggingEvent.hDirection);
        var dragSourceType = draggingEvent.dragSource.type;
        var columnsToMove = draggingEvent.dragSource.getDragItem().columns;
        columnsToMove = columnsToMove.filter(function(col) {
          if (col.getColDef().lockPinned) {
            return col.getPinned() == _this.pinned;
          }
          return true;
        });
        this.attemptMoveColumns(dragSourceType, columnsToMove, hDirectionNormalised, mouseXNormalised, fromEnter, fakeEvent);
      };
      MoveColumnFeature2.prototype.normaliseDirection = function(hDirection) {
        if (this.gridOptionsWrapper.isEnableRtl()) {
          switch (hDirection) {
            case HorizontalDirection.Left:
              return HorizontalDirection.Right;
            case HorizontalDirection.Right:
              return HorizontalDirection.Left;
            default:
              console.error("AG Grid: Unknown direction " + hDirection);
          }
        } else {
          return hDirection;
        }
      };
      MoveColumnFeature2.prototype.calculateOldIndex = function(movingCols) {
        var gridCols = this.columnModel.getAllGridColumns();
        var indexes = sortNumerically(movingCols.map(function(col) {
          return gridCols.indexOf(col);
        }));
        var firstIndex = indexes[0];
        var lastIndex = last(indexes);
        var spread = lastIndex - firstIndex;
        var gapsExist = spread !== indexes.length - 1;
        return gapsExist ? null : firstIndex;
      };
      MoveColumnFeature2.prototype.attemptMoveColumns = function(dragSourceType, allMovingColumns, hDirection, mouseX, fromEnter, fakeEvent) {
        var draggingLeft = hDirection === HorizontalDirection.Left;
        var draggingRight = hDirection === HorizontalDirection.Right;
        if (dragSourceType === DragSourceType.HeaderCell) {
          var newCols_1 = [];
          allMovingColumns.forEach(function(col) {
            var movingGroup = null;
            var parent = col.getParent();
            while (parent != null && parent.getDisplayedLeafColumns().length === 1) {
              movingGroup = parent;
              parent = parent.getParent();
            }
            if (movingGroup != null) {
              movingGroup.getLeafColumns().forEach(function(newCol) {
                if (!newCols_1.includes(newCol)) {
                  newCols_1.push(newCol);
                }
              });
            } else if (!newCols_1.includes(col)) {
              newCols_1.push(col);
            }
          });
          allMovingColumns = newCols_1;
        }
        var allMovingColumnsOrdered = allMovingColumns.slice();
        this.columnModel.sortColumnsLikeGridColumns(allMovingColumnsOrdered);
        var validMoves = this.calculateValidMoves(allMovingColumnsOrdered, draggingRight, mouseX);
        var oldIndex = this.calculateOldIndex(allMovingColumnsOrdered);
        if (validMoves.length === 0) {
          return;
        }
        var firstValidMove = validMoves[0];
        var constrainDirection = oldIndex !== null && !fromEnter;
        if (dragSourceType == DragSourceType.HeaderCell) {
          constrainDirection = oldIndex !== null;
        }
        if (constrainDirection && !fakeEvent) {
          if (draggingLeft && firstValidMove >= oldIndex) {
            return;
          }
          if (draggingRight && firstValidMove <= oldIndex) {
            return;
          }
        }
        var displayedCols = this.columnModel.getAllDisplayedColumns();
        var potentialMoves = [];
        var targetOrder = null;
        for (var i = 0; i < validMoves.length; i++) {
          var move = validMoves[i];
          var order = this.columnModel.getProposedColumnOrder(allMovingColumnsOrdered, move);
          if (!this.columnModel.doesOrderPassRules(order)) {
            continue;
          }
          var displayedOrder = order.filter(function(col) {
            return displayedCols.includes(col);
          });
          if (targetOrder === null) {
            targetOrder = displayedOrder;
          } else if (!_.areEqual(displayedOrder, targetOrder)) {
            break;
          }
          var fragCount = this.groupFragCount(order);
          potentialMoves.push({ move, fragCount });
        }
        if (potentialMoves.length === 0) {
          return;
        }
        potentialMoves.sort(function(a, b) {
          return a.fragCount - b.fragCount;
        });
        var bestMove = potentialMoves[0].move;
        this.columnModel.moveColumns(allMovingColumnsOrdered, bestMove, "uiColumnDragged");
      };
      MoveColumnFeature2.prototype.groupFragCount = function(columns) {
        function parents(col) {
          var result = [];
          var parent = col.getOriginalParent();
          while (parent != null) {
            result.push(parent);
            parent = parent.getOriginalParent();
          }
          return result;
        }
        var count = 0;
        var _loop_1 = function(i2) {
          var _a;
          var a = parents(columns[i2]);
          var b = parents(columns[i2 + 1]);
          _a = __read$e(a.length > b.length ? [a, b] : [b, a], 2), a = _a[0], b = _a[1];
          a.forEach(function(parent) {
            if (b.indexOf(parent) === -1) {
              count++;
            }
          });
        };
        for (var i = 0; i < columns.length - 1; i++) {
          _loop_1(i);
        }
        return count;
      };
      MoveColumnFeature2.prototype.calculateValidMoves = function(movingCols, draggingRight, mouseX) {
        var isMoveBlocked = this.gridOptionsWrapper.isSuppressMovableColumns() || movingCols.some(function(col2) {
          return col2.getColDef().suppressMovable;
        });
        if (isMoveBlocked) {
          return [];
        }
        var allDisplayedCols = this.columnModel.getDisplayedColumns(this.pinned);
        var allGridCols = this.columnModel.getAllGridColumns();
        var movingDisplayedCols = allDisplayedCols.filter(function(col2) {
          return includes(movingCols, col2);
        });
        var otherDisplayedCols = allDisplayedCols.filter(function(col2) {
          return !includes(movingCols, col2);
        });
        var otherGridCols = allGridCols.filter(function(col2) {
          return !includes(movingCols, col2);
        });
        var displayIndex = 0;
        var availableWidth = mouseX;
        if (draggingRight) {
          var widthOfMovingDisplayedCols_1 = 0;
          movingDisplayedCols.forEach(function(col2) {
            return widthOfMovingDisplayedCols_1 += col2.getActualWidth();
          });
          availableWidth -= widthOfMovingDisplayedCols_1;
        }
        if (availableWidth > 0) {
          for (var i = 0; i < otherDisplayedCols.length; i++) {
            var col = otherDisplayedCols[i];
            availableWidth -= col.getActualWidth();
            if (availableWidth < 0) {
              break;
            }
            displayIndex++;
          }
          if (draggingRight) {
            displayIndex++;
          }
        }
        var firstValidMove;
        if (displayIndex > 0) {
          var leftColumn = otherDisplayedCols[displayIndex - 1];
          firstValidMove = otherGridCols.indexOf(leftColumn) + 1;
        } else {
          firstValidMove = otherGridCols.indexOf(otherDisplayedCols[0]);
          if (firstValidMove === -1) {
            firstValidMove = 0;
          }
        }
        var validMoves = [firstValidMove];
        var numberComparator = function(a, b) {
          return a - b;
        };
        if (draggingRight) {
          var pointer = firstValidMove + 1;
          var lastIndex = allGridCols.length - 1;
          while (pointer <= lastIndex) {
            validMoves.push(pointer);
            pointer++;
          }
          validMoves.sort(numberComparator);
        } else {
          var pointer = firstValidMove;
          var lastIndex = allGridCols.length - 1;
          var displacedCol = allGridCols[pointer];
          while (pointer <= lastIndex && this.isColumnHidden(allDisplayedCols, displacedCol)) {
            pointer++;
            validMoves.push(pointer);
            displacedCol = allGridCols[pointer];
          }
          pointer = firstValidMove - 1;
          var firstDisplayIndex = 0;
          while (pointer >= firstDisplayIndex) {
            validMoves.push(pointer);
            pointer--;
          }
          validMoves.sort(numberComparator).reverse();
        }
        return validMoves;
      };
      MoveColumnFeature2.prototype.isColumnHidden = function(displayedColumns, col) {
        return displayedColumns.indexOf(col) < 0;
      };
      MoveColumnFeature2.prototype.ensureIntervalStarted = function() {
        if (!this.movingIntervalId) {
          this.intervalCount = 0;
          this.failedMoveAttempts = 0;
          this.movingIntervalId = window.setInterval(this.moveInterval.bind(this), 100);
          if (this.needToMoveLeft) {
            this.dragAndDropService.setGhostIcon(DragAndDropService.ICON_LEFT, true);
          } else {
            this.dragAndDropService.setGhostIcon(DragAndDropService.ICON_RIGHT, true);
          }
        }
      };
      MoveColumnFeature2.prototype.ensureIntervalCleared = function() {
        if (this.movingIntervalId) {
          window.clearInterval(this.movingIntervalId);
          this.movingIntervalId = null;
          this.dragAndDropService.setGhostIcon(DragAndDropService.ICON_MOVE);
        }
      };
      MoveColumnFeature2.prototype.moveInterval = function() {
        var pixelsToMove;
        this.intervalCount++;
        pixelsToMove = 10 + this.intervalCount * 5;
        if (pixelsToMove > 100) {
          pixelsToMove = 100;
        }
        var pixelsMoved = null;
        var scrollFeature = this.gridBodyCon.getScrollFeature();
        if (this.needToMoveLeft) {
          pixelsMoved = scrollFeature.scrollHorizontally(-pixelsToMove);
        } else if (this.needToMoveRight) {
          pixelsMoved = scrollFeature.scrollHorizontally(pixelsToMove);
        }
        if (pixelsMoved !== 0) {
          this.onDragging(this.lastDraggingEvent);
          this.failedMoveAttempts = 0;
        } else {
          this.failedMoveAttempts++;
          var columns = this.lastDraggingEvent.dragItem.columns;
          var columnsThatCanPin = columns.filter(function(c) {
            return !c.getColDef().lockPinned;
          });
          if (columnsThatCanPin.length > 0) {
            this.dragAndDropService.setGhostIcon(DragAndDropService.ICON_PINNED);
            if (this.failedMoveAttempts > 7) {
              var pinType = this.needToMoveLeft ? Constants.PINNED_LEFT : Constants.PINNED_RIGHT;
              this.setColumnsPinned(columnsThatCanPin, pinType, "uiColumnDragged");
              this.dragAndDropService.nudge();
            }
          }
        }
      };
      __decorate$1x([
        Autowired("columnModel")
      ], MoveColumnFeature2.prototype, "columnModel", void 0);
      __decorate$1x([
        Autowired("dragAndDropService")
      ], MoveColumnFeature2.prototype, "dragAndDropService", void 0);
      __decorate$1x([
        Autowired("gridOptionsWrapper")
      ], MoveColumnFeature2.prototype, "gridOptionsWrapper", void 0);
      __decorate$1x([
        Autowired("ctrlsService")
      ], MoveColumnFeature2.prototype, "ctrlsService", void 0);
      __decorate$1x([
        PostConstruct
      ], MoveColumnFeature2.prototype, "init", null);
      return MoveColumnFeature2;
    }();
    __extends$1D = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1w = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    BodyDropTarget = function(_super) {
      __extends$1D(BodyDropTarget2, _super);
      function BodyDropTarget2(pinned, eContainer) {
        var _this = _super.call(this) || this;
        _this.pinned = pinned;
        _this.eContainer = eContainer;
        return _this;
      }
      BodyDropTarget2.prototype.postConstruct = function() {
        var _this = this;
        this.ctrlsService.whenReady(function(p) {
          switch (_this.pinned) {
            case Constants.PINNED_LEFT:
              _this.eSecondaryContainers = [
                [p.gridBodyCtrl.getBodyViewportElement(), p.leftRowContainerCtrl.getContainerElement()],
                [p.bottomLeftRowContainerCtrl.getContainerElement()],
                [p.topLeftRowContainerCtrl.getContainerElement()]
              ];
              break;
            case Constants.PINNED_RIGHT:
              _this.eSecondaryContainers = [
                [p.gridBodyCtrl.getBodyViewportElement(), p.rightRowContainerCtrl.getContainerElement()],
                [p.bottomRightRowContainerCtrl.getContainerElement()],
                [p.topRightRowContainerCtrl.getContainerElement()]
              ];
              break;
            default:
              _this.eSecondaryContainers = [
                [p.gridBodyCtrl.getBodyViewportElement(), p.centerRowContainerCtrl.getViewportElement()],
                [p.bottomCenterRowContainerCtrl.getViewportElement()],
                [p.topCenterRowContainerCtrl.getViewportElement()]
              ];
              break;
          }
        });
      };
      BodyDropTarget2.prototype.isInterestedIn = function(type) {
        return type === DragSourceType.HeaderCell || type === DragSourceType.ToolPanel && this.gridOptionsWrapper.isAllowDragFromColumnsToolPanel();
      };
      BodyDropTarget2.prototype.getSecondaryContainers = function() {
        return this.eSecondaryContainers;
      };
      BodyDropTarget2.prototype.getContainer = function() {
        return this.eContainer;
      };
      BodyDropTarget2.prototype.init = function() {
        this.moveColumnFeature = this.createManagedBean(new MoveColumnFeature(this.pinned, this.eContainer));
        this.bodyDropPivotTarget = this.createManagedBean(new BodyDropPivotTarget(this.pinned));
        this.dragAndDropService.addDropTarget(this);
      };
      BodyDropTarget2.prototype.getIconName = function() {
        return this.currentDropListener.getIconName();
      };
      BodyDropTarget2.prototype.isDropColumnInPivotMode = function(draggingEvent) {
        return this.columnModel.isPivotMode() && draggingEvent.dragSource.type === DragSourceType.ToolPanel;
      };
      BodyDropTarget2.prototype.onDragEnter = function(draggingEvent) {
        this.currentDropListener = this.isDropColumnInPivotMode(draggingEvent) ? this.bodyDropPivotTarget : this.moveColumnFeature;
        this.currentDropListener.onDragEnter(draggingEvent);
      };
      BodyDropTarget2.prototype.onDragLeave = function(params) {
        this.currentDropListener.onDragLeave(params);
      };
      BodyDropTarget2.prototype.onDragging = function(params) {
        this.currentDropListener.onDragging(params);
      };
      BodyDropTarget2.prototype.onDragStop = function(params) {
        this.currentDropListener.onDragStop(params);
      };
      __decorate$1w([
        Autowired("dragAndDropService")
      ], BodyDropTarget2.prototype, "dragAndDropService", void 0);
      __decorate$1w([
        Autowired("columnModel")
      ], BodyDropTarget2.prototype, "columnModel", void 0);
      __decorate$1w([
        Autowired("ctrlsService")
      ], BodyDropTarget2.prototype, "ctrlsService", void 0);
      __decorate$1w([
        PostConstruct
      ], BodyDropTarget2.prototype, "postConstruct", null);
      __decorate$1w([
        PostConstruct
      ], BodyDropTarget2.prototype, "init", null);
      return BodyDropTarget2;
    }(BeanStub);
    __read$d = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread$b = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read$d(arguments[i]));
      return ar;
    };
    CssClassApplier = function() {
      function CssClassApplier2() {
      }
      CssClassApplier2.getHeaderClassesFromColDef = function(abstractColDef, gridOptionsWrapper, column, columnGroup) {
        if (missing(abstractColDef)) {
          return [];
        }
        return this.getColumnClassesFromCollDef(abstractColDef.headerClass, abstractColDef, gridOptionsWrapper, column, columnGroup);
      };
      CssClassApplier2.getToolPanelClassesFromColDef = function(abstractColDef, gridOptionsWrapper, column, columnGroup) {
        if (missing(abstractColDef)) {
          return [];
        }
        return this.getColumnClassesFromCollDef(abstractColDef.toolPanelClass, abstractColDef, gridOptionsWrapper, column, columnGroup);
      };
      CssClassApplier2.getClassParams = function(abstractColDef, gridOptionsWrapper, column, columnGroup) {
        return {
          colDef: abstractColDef,
          column,
          columnGroup,
          api: gridOptionsWrapper.getApi(),
          columnApi: gridOptionsWrapper.getColumnApi(),
          context: gridOptionsWrapper.getContext()
        };
      };
      CssClassApplier2.getColumnClassesFromCollDef = function(classesOrFunc, abstractColDef, gridOptionsWrapper, column, columnGroup) {
        if (missing(classesOrFunc)) {
          return [];
        }
        var classToUse;
        if (typeof classesOrFunc === "function") {
          var params = this.getClassParams(abstractColDef, gridOptionsWrapper, column, columnGroup);
          classToUse = classesOrFunc(params);
        } else {
          classToUse = classesOrFunc;
        }
        if (typeof classToUse === "string") {
          return [classToUse];
        }
        if (Array.isArray(classToUse)) {
          return __spread$b(classToUse);
        }
        return [];
      };
      return CssClassApplier2;
    }();
    __extends$1C = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1v = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    HeaderCellComp = function(_super) {
      __extends$1C(HeaderCellComp2, _super);
      function HeaderCellComp2(ctrl) {
        var _this = _super.call(this, HeaderCellComp2.TEMPLATE, ctrl) || this;
        _this.headerCompVersion = 0;
        _this.column = ctrl.getColumnGroupChild();
        _this.pinned = ctrl.getPinned();
        return _this;
      }
      HeaderCellComp2.prototype.postConstruct = function() {
        var _this = this;
        var eGui = this.getGui();
        var setAttribute = function(name, value, element) {
          var actualElement = element ? element : eGui;
          if (value != null && value != "") {
            actualElement.setAttribute(name, value);
          } else {
            actualElement.removeAttribute(name);
          }
        };
        var compProxy = {
          setWidth: function(width) {
            return eGui.style.width = width;
          },
          addOrRemoveCssClass: function(cssClassName, on) {
            return _this.addOrRemoveCssClass(cssClassName, on);
          },
          setColId: function(id) {
            return setAttribute("col-id", id);
          },
          setTitle: function(title) {
            return setAttribute("title", title);
          },
          setAriaDescription: function(label) {
            return setAriaDescription(eGui, label);
          },
          setAriaSort: function(sort) {
            return sort ? setAriaSort(eGui, sort) : removeAriaSort(eGui);
          },
          setUserCompDetails: function(compDetails) {
            return _this.setUserCompDetails(compDetails);
          },
          getUserCompInstance: function() {
            return _this.headerComp;
          }
        };
        this.ctrl.setComp(compProxy, this.getGui(), this.eResize, this.eHeaderCompWrapper);
        var selectAllGui = this.ctrl.getSelectAllGui();
        this.eResize.insertAdjacentElement("afterend", selectAllGui);
      };
      HeaderCellComp2.prototype.destroyHeaderComp = function() {
        if (this.headerComp) {
          this.eHeaderCompWrapper.removeChild(this.headerCompGui);
          this.headerComp = this.destroyBean(this.headerComp);
          this.headerCompGui = void 0;
        }
      };
      HeaderCellComp2.prototype.setUserCompDetails = function(compDetails) {
        var _this = this;
        this.headerCompVersion++;
        var versionCopy = this.headerCompVersion;
        compDetails.newAgStackInstance().then(function(comp) {
          return _this.afterCompCreated(versionCopy, comp);
        });
      };
      HeaderCellComp2.prototype.afterCompCreated = function(version, headerComp) {
        if (version != this.headerCompVersion || !this.isAlive()) {
          this.destroyBean(headerComp);
          return;
        }
        this.destroyHeaderComp();
        this.headerComp = headerComp;
        this.headerCompGui = headerComp.getGui();
        this.eHeaderCompWrapper.appendChild(this.headerCompGui);
        this.ctrl.setDragSource(this.getGui());
      };
      HeaderCellComp2.TEMPLATE = '<div class="ag-header-cell" role="columnheader" tabindex="-1">\n            <div ref="eResize" class="ag-header-cell-resize" role="presentation"></div>\n            <div ref="eHeaderCompWrapper" class="ag-header-cell-comp-wrapper" role="presentation"></div>\n        </div>';
      __decorate$1v([
        RefSelector("eResize")
      ], HeaderCellComp2.prototype, "eResize", void 0);
      __decorate$1v([
        RefSelector("eHeaderCompWrapper")
      ], HeaderCellComp2.prototype, "eHeaderCompWrapper", void 0);
      __decorate$1v([
        PostConstruct
      ], HeaderCellComp2.prototype, "postConstruct", null);
      __decorate$1v([
        PreDestroy
      ], HeaderCellComp2.prototype, "destroyHeaderComp", null);
      return HeaderCellComp2;
    }(AbstractHeaderCellComp);
    __extends$1B = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1u = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    HeaderGroupCellComp = function(_super) {
      __extends$1B(HeaderGroupCellComp2, _super);
      function HeaderGroupCellComp2(ctrl) {
        return _super.call(this, HeaderGroupCellComp2.TEMPLATE, ctrl) || this;
      }
      HeaderGroupCellComp2.prototype.postConstruct = function() {
        var _this = this;
        var eGui = this.getGui();
        var setAttribute = function(key, value) {
          return value != void 0 ? eGui.setAttribute(key, value) : eGui.removeAttribute(key);
        };
        var compProxy = {
          addOrRemoveCssClass: function(cssClassName, on) {
            return _this.addOrRemoveCssClass(cssClassName, on);
          },
          addOrRemoveResizableCssClass: function(cssClassName, on) {
            return _this.eResize.classList.toggle(cssClassName, on);
          },
          setWidth: function(width) {
            return eGui.style.width = width;
          },
          setColId: function(id) {
            return eGui.setAttribute("col-id", id);
          },
          setAriaExpanded: function(expanded) {
            return setAttribute("aria-expanded", expanded);
          },
          setTitle: function(title) {
            return setAttribute("title", title);
          },
          setUserCompDetails: function(details) {
            return _this.setUserCompDetails(details);
          }
        };
        this.ctrl.setComp(compProxy, eGui, this.eResize);
      };
      HeaderGroupCellComp2.prototype.setUserCompDetails = function(details) {
        var _this = this;
        details.newAgStackInstance().then(function(comp) {
          return _this.afterHeaderCompCreated(comp);
        });
      };
      HeaderGroupCellComp2.prototype.afterHeaderCompCreated = function(headerGroupComp) {
        var _this = this;
        var destroyFunc = function() {
          return _this.destroyBean(headerGroupComp);
        };
        if (!this.isAlive()) {
          destroyFunc();
          return;
        }
        this.getGui().appendChild(headerGroupComp.getGui());
        this.addDestroyFunc(destroyFunc);
        this.ctrl.setDragSource(headerGroupComp.getGui());
      };
      HeaderGroupCellComp2.TEMPLATE = '<div class="ag-header-group-cell" role="columnheader" tabindex="-1">\n            <div ref="eResize" class="ag-header-cell-resize" role="presentation"></div>\n        </div>';
      __decorate$1u([
        Autowired("userComponentFactory")
      ], HeaderGroupCellComp2.prototype, "userComponentFactory", void 0);
      __decorate$1u([
        RefSelector("eResize")
      ], HeaderGroupCellComp2.prototype, "eResize", void 0);
      __decorate$1u([
        PostConstruct
      ], HeaderGroupCellComp2.prototype, "postConstruct", null);
      return HeaderGroupCellComp2;
    }(AbstractHeaderCellComp);
    __extends$1A = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1t = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    (function(HeaderRowType2) {
      HeaderRowType2["COLUMN_GROUP"] = "group";
      HeaderRowType2["COLUMN"] = "column";
      HeaderRowType2["FLOATING_FILTER"] = "filter";
    })(HeaderRowType || (HeaderRowType = {}));
    HeaderRowComp = function(_super) {
      __extends$1A(HeaderRowComp2, _super);
      function HeaderRowComp2(ctrl) {
        var _this = _super.call(this) || this;
        _this.headerComps = {};
        var extraClass = ctrl.getType() == HeaderRowType.COLUMN_GROUP ? "ag-header-row-column-group" : ctrl.getType() == HeaderRowType.FLOATING_FILTER ? "ag-header-row-column-filter" : "ag-header-row-column";
        _this.setTemplate('<div class="ag-header-row ' + extraClass + '" role="row"></div>');
        _this.ctrl = ctrl;
        return _this;
      }
      HeaderRowComp2.prototype.init = function() {
        var _this = this;
        var compProxy = {
          setTransform: function(transform) {
            return _this.getGui().style.transform = transform;
          },
          setHeight: function(height) {
            return _this.getGui().style.height = height;
          },
          setTop: function(top) {
            return _this.getGui().style.top = top;
          },
          setHeaderCtrls: function(ctrls) {
            return _this.setHeaderCtrls(ctrls);
          },
          setWidth: function(width) {
            return _this.getGui().style.width = width;
          },
          setAriaRowIndex: function(rowIndex) {
            return setAriaRowIndex(_this.getGui(), rowIndex);
          }
        };
        this.ctrl.setComp(compProxy);
      };
      HeaderRowComp2.prototype.destroyHeaderCtrls = function() {
        this.setHeaderCtrls([]);
      };
      HeaderRowComp2.prototype.setHeaderCtrls = function(ctrls) {
        var _this = this;
        if (!this.isAlive()) {
          return;
        }
        var oldComps = this.headerComps;
        this.headerComps = {};
        ctrls.forEach(function(ctrl) {
          var id = ctrl.getInstanceId();
          var comp = oldComps[id];
          delete oldComps[id];
          if (comp == null) {
            comp = _this.createHeaderComp(ctrl);
            _this.getGui().appendChild(comp.getGui());
          }
          _this.headerComps[id] = comp;
        });
        iterateObject(oldComps, function(id, comp) {
          _this.getGui().removeChild(comp.getGui());
          _this.destroyBean(comp);
        });
        var ensureDomOrder2 = this.gridOptionsWrapper.isEnsureDomOrder();
        if (ensureDomOrder2) {
          var comps = getAllValuesInObject(this.headerComps);
          comps.sort(function(a, b) {
            var leftA = a.getCtrl().getColumnGroupChild().getLeft();
            var leftB = b.getCtrl().getColumnGroupChild().getLeft();
            return leftA - leftB;
          });
          var elementsInOrder = comps.map(function(c) {
            return c.getGui();
          });
          setDomChildOrder(this.getGui(), elementsInOrder);
        }
      };
      HeaderRowComp2.prototype.createHeaderComp = function(headerCtrl) {
        var result;
        switch (this.ctrl.getType()) {
          case HeaderRowType.COLUMN_GROUP:
            result = new HeaderGroupCellComp(headerCtrl);
            break;
          case HeaderRowType.FLOATING_FILTER:
            result = new HeaderFilterCellComp(headerCtrl);
            break;
          default:
            result = new HeaderCellComp(headerCtrl);
            break;
        }
        this.createBean(result);
        result.setParentComponent(this);
        return result;
      };
      __decorate$1t([
        PostConstruct
      ], HeaderRowComp2.prototype, "init", null);
      __decorate$1t([
        PreDestroy
      ], HeaderRowComp2.prototype, "destroyHeaderCtrls", null);
      return HeaderRowComp2;
    }(Component);
    __extends$1z = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1s = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    instanceIdSequence$1 = 0;
    AbstractHeaderCellCtrl = function(_super) {
      __extends$1z(AbstractHeaderCellCtrl2, _super);
      function AbstractHeaderCellCtrl2(columnGroupChild, parentRowCtrl) {
        var _this = _super.call(this) || this;
        _this.lastFocusEvent = null;
        _this.columnGroupChild = columnGroupChild;
        _this.parentRowCtrl = parentRowCtrl;
        _this.instanceId = columnGroupChild.getUniqueId() + "-" + instanceIdSequence$1++;
        return _this;
      }
      AbstractHeaderCellCtrl2.prototype.shouldStopEventPropagation = function(e) {
        var _a = this.focusService.getFocusedHeader(), headerRowIndex = _a.headerRowIndex, column = _a.column;
        return isUserSuppressingHeaderKeyboardEvent(this.gridOptionsWrapper, e, headerRowIndex, column);
      };
      AbstractHeaderCellCtrl2.prototype.getWrapperHasFocus = function() {
        var eDocument = this.gridOptionsWrapper.getDocument();
        var activeEl = eDocument.activeElement;
        return activeEl === this.eGui;
      };
      AbstractHeaderCellCtrl2.prototype.setGui = function(eGui) {
        this.eGui = eGui;
        this.addDomData();
      };
      AbstractHeaderCellCtrl2.prototype.handleKeyDown = function(e) {
        var wrapperHasFocus = this.getWrapperHasFocus();
        switch (e.key) {
          case KeyCode.PAGE_DOWN:
          case KeyCode.PAGE_UP:
          case KeyCode.PAGE_HOME:
          case KeyCode.PAGE_END:
            if (wrapperHasFocus) {
              e.preventDefault();
            }
        }
      };
      AbstractHeaderCellCtrl2.prototype.addDomData = function() {
        var _this = this;
        var key = AbstractHeaderCellCtrl2.DOM_DATA_KEY_HEADER_CTRL;
        this.gridOptionsWrapper.setDomData(this.eGui, key, this);
        this.addDestroyFunc(function() {
          return _this.gridOptionsWrapper.setDomData(_this.eGui, key, null);
        });
      };
      AbstractHeaderCellCtrl2.prototype.getGui = function() {
        return this.eGui;
      };
      AbstractHeaderCellCtrl2.prototype.focus = function(event) {
        if (!this.eGui) {
          return false;
        }
        this.lastFocusEvent = event || null;
        this.eGui.focus();
        return true;
      };
      AbstractHeaderCellCtrl2.prototype.getRowIndex = function() {
        return this.parentRowCtrl.getRowIndex();
      };
      AbstractHeaderCellCtrl2.prototype.getParentRowCtrl = function() {
        return this.parentRowCtrl;
      };
      AbstractHeaderCellCtrl2.prototype.getPinned = function() {
        return this.parentRowCtrl.getPinned();
      };
      AbstractHeaderCellCtrl2.prototype.getInstanceId = function() {
        return this.instanceId;
      };
      AbstractHeaderCellCtrl2.prototype.getColumnGroupChild = function() {
        return this.columnGroupChild;
      };
      AbstractHeaderCellCtrl2.DOM_DATA_KEY_HEADER_CTRL = "headerCtrl";
      __decorate$1s([
        Autowired("focusService")
      ], AbstractHeaderCellCtrl2.prototype, "focusService", void 0);
      __decorate$1s([
        Autowired("beans")
      ], AbstractHeaderCellCtrl2.prototype, "beans", void 0);
      __decorate$1s([
        Autowired("userComponentFactory")
      ], AbstractHeaderCellCtrl2.prototype, "userComponentFactory", void 0);
      return AbstractHeaderCellCtrl2;
    }(BeanStub);
    (function(ClientSideRowModelSteps2) {
      ClientSideRowModelSteps2["EVERYTHING"] = "group";
      ClientSideRowModelSteps2["FILTER"] = "filter";
      ClientSideRowModelSteps2["SORT"] = "sort";
      ClientSideRowModelSteps2["MAP"] = "map";
      ClientSideRowModelSteps2["AGGREGATE"] = "aggregate";
      ClientSideRowModelSteps2["FILTER_AGGREGATES"] = "filter_aggregates";
      ClientSideRowModelSteps2["PIVOT"] = "pivot";
      ClientSideRowModelSteps2["NOTHING"] = "nothing";
    })(ClientSideRowModelSteps || (ClientSideRowModelSteps = {}));
    __decorate$1r = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    GridApi = function() {
      function GridApi2() {
        this.detailGridInfoMap = {};
        this.destroyCalled = false;
      }
      GridApi2.prototype.registerOverlayWrapperComp = function(overlayWrapperComp) {
        this.overlayWrapperComp = overlayWrapperComp;
      };
      GridApi2.prototype.registerSideBarComp = function(sideBarComp) {
        this.sideBarComp = sideBarComp;
      };
      GridApi2.prototype.init = function() {
        var _this = this;
        switch (this.rowModel.getType()) {
          case Constants.ROW_MODEL_TYPE_CLIENT_SIDE:
            this.clientSideRowModel = this.rowModel;
            break;
          case Constants.ROW_MODEL_TYPE_INFINITE:
            this.infiniteRowModel = this.rowModel;
            break;
          case Constants.ROW_MODEL_TYPE_SERVER_SIDE:
            this.serverSideRowModel = this.rowModel;
            break;
        }
        this.ctrlsService.whenReady(function() {
          _this.gridBodyCtrl = _this.ctrlsService.getGridBodyCtrl();
        });
      };
      GridApi2.prototype.__getAlignedGridService = function() {
        return this.alignedGridsService;
      };
      GridApi2.prototype.__getContext = function() {
        return this.context;
      };
      GridApi2.prototype.addDetailGridInfo = function(id, gridInfo) {
        this.detailGridInfoMap[id] = gridInfo;
      };
      GridApi2.prototype.removeDetailGridInfo = function(id) {
        this.detailGridInfoMap[id] = void 0;
      };
      GridApi2.prototype.getDetailGridInfo = function(id) {
        return this.detailGridInfoMap[id];
      };
      GridApi2.prototype.forEachDetailGridInfo = function(callback) {
        var index = 0;
        iterateObject(this.detailGridInfoMap, function(id, gridInfo) {
          if (exists(gridInfo)) {
            callback(gridInfo, index);
            index++;
          }
        });
      };
      GridApi2.prototype.getDataAsCsv = function(params) {
        if (ModuleRegistry.assertRegistered(ModuleNames.CsvExportModule, "api.getDataAsCsv")) {
          return this.csvCreator.getDataAsCsv(params);
        }
      };
      GridApi2.prototype.exportDataAsCsv = function(params) {
        if (ModuleRegistry.assertRegistered(ModuleNames.CsvExportModule, "api.exportDataAsCSv")) {
          this.csvCreator.exportDataAsCsv(params);
        }
      };
      GridApi2.prototype.getExcelExportMode = function(params) {
        var baseParams = this.gridOptionsWrapper.getDefaultExportParams("excel");
        var mergedParams = Object.assign({ exportMode: "xlsx" }, baseParams, params);
        return mergedParams.exportMode;
      };
      GridApi2.prototype.getDataAsExcel = function(params) {
        if (!ModuleRegistry.assertRegistered(ModuleNames.ExcelExportModule, "api.getDataAsExcel")) {
          return;
        }
        var exportMode = this.getExcelExportMode(params);
        if (this.excelCreator.getFactoryMode(exportMode) === ExcelFactoryMode.MULTI_SHEET) {
          console.warn("AG Grid: The Excel Exporter is currently on Multi Sheet mode. End that operation by calling `api.getMultipleSheetAsExcel()` or `api.exportMultipleSheetsAsExcel()`");
          return;
        }
        return this.excelCreator.getDataAsExcel(params);
      };
      GridApi2.prototype.exportDataAsExcel = function(params) {
        if (!ModuleRegistry.assertRegistered(ModuleNames.ExcelExportModule, "api.exportDataAsExcel")) {
          return;
        }
        var exportMode = this.getExcelExportMode(params);
        if (this.excelCreator.getFactoryMode(exportMode) === ExcelFactoryMode.MULTI_SHEET) {
          console.warn("AG Grid: The Excel Exporter is currently on Multi Sheet mode. End that operation by calling `api.getMultipleSheetAsExcel()` or `api.exportMultipleSheetsAsExcel()`");
          return;
        }
        this.excelCreator.exportDataAsExcel(params);
      };
      GridApi2.prototype.getSheetDataForExcel = function(params) {
        if (!ModuleRegistry.assertRegistered(ModuleNames.ExcelExportModule, "api.getSheetDataForExcel")) {
          return;
        }
        var exportMode = this.getExcelExportMode(params);
        this.excelCreator.setFactoryMode(ExcelFactoryMode.MULTI_SHEET, exportMode);
        return this.excelCreator.getSheetDataForExcel(params);
      };
      GridApi2.prototype.getMultipleSheetsAsExcel = function(params) {
        if (ModuleRegistry.assertRegistered(ModuleNames.ExcelExportModule, "api.getMultipleSheetsAsExcel")) {
          return this.excelCreator.getMultipleSheetsAsExcel(params);
        }
      };
      GridApi2.prototype.exportMultipleSheetsAsExcel = function(params) {
        if (ModuleRegistry.assertRegistered(ModuleNames.ExcelExportModule, "api.exportMultipleSheetsAsExcel")) {
          return this.excelCreator.exportMultipleSheetsAsExcel(params);
        }
      };
      GridApi2.prototype.setEnterpriseDatasource = function(datasource) {
        console.warn("AG Grid: since version 18.x, api.setEnterpriseDatasource() should be replaced with api.setServerSideDatasource()");
        this.setServerSideDatasource(datasource);
      };
      GridApi2.prototype.setGridAriaProperty = function(property, value) {
        if (!property) {
          return;
        }
        var eGrid = this.ctrlsService.getGridBodyCtrl().getGui();
        var ariaProperty = "aria-" + property;
        if (value === null) {
          eGrid.removeAttribute(ariaProperty);
        } else {
          eGrid.setAttribute(ariaProperty, value);
        }
      };
      GridApi2.prototype.setServerSideDatasource = function(datasource) {
        if (this.serverSideRowModel) {
          this.serverSideRowModel.setDatasource(datasource);
        } else {
          console.warn("AG Grid: you can only use an enterprise datasource when gridOptions.rowModelType is '" + Constants.ROW_MODEL_TYPE_SERVER_SIDE + "'");
        }
      };
      GridApi2.prototype.setCacheBlockSize = function(blockSize) {
        if (!this.serverSideRowModel) {
          console.warn("AG Grid: you can only set cacheBlockSize with gridOptions.rowModelType '" + Constants.ROW_MODEL_TYPE_SERVER_SIDE + "'");
          return;
        }
        this.gridOptionsWrapper.setProperty("cacheBlockSize", blockSize);
        this.serverSideRowModel.resetRootStore();
      };
      GridApi2.prototype.setDatasource = function(datasource) {
        if (this.gridOptionsWrapper.isRowModelInfinite()) {
          this.rowModel.setDatasource(datasource);
        } else {
          console.warn("AG Grid: you can only use a datasource when gridOptions.rowModelType is '" + Constants.ROW_MODEL_TYPE_INFINITE + "'");
        }
      };
      GridApi2.prototype.setViewportDatasource = function(viewportDatasource) {
        if (this.gridOptionsWrapper.isRowModelViewport()) {
          this.rowModel.setViewportDatasource(viewportDatasource);
        } else {
          console.warn("AG Grid: you can only use a viewport datasource when gridOptions.rowModelType is '" + Constants.ROW_MODEL_TYPE_VIEWPORT + "'");
        }
      };
      GridApi2.prototype.setRowData = function(rowData) {
        var missingImmutableService = this.immutableService == null;
        if (missingImmutableService) {
          console.warn("AG Grid: you can only set rowData when using the Client Side Row Model");
          return;
        }
        if (this.immutableService.isActive()) {
          this.immutableService.setRowData(rowData);
        } else {
          this.selectionService.reset();
          this.clientSideRowModel.setRowData(rowData);
        }
      };
      GridApi2.prototype.setFloatingTopRowData = function(rows) {
        console.warn("AG Grid: since v12, api.setFloatingTopRowData() is now api.setPinnedTopRowData()");
        this.setPinnedTopRowData(rows);
      };
      GridApi2.prototype.setFloatingBottomRowData = function(rows) {
        console.warn("AG Grid: since v12, api.setFloatingBottomRowData() is now api.setPinnedBottomRowData()");
        this.setPinnedBottomRowData(rows);
      };
      GridApi2.prototype.getFloatingTopRowCount = function() {
        console.warn("AG Grid: since v12, api.getFloatingTopRowCount() is now api.getPinnedTopRowCount()");
        return this.getPinnedTopRowCount();
      };
      GridApi2.prototype.getFloatingBottomRowCount = function() {
        console.warn("AG Grid: since v12, api.getFloatingBottomRowCount() is now api.getPinnedBottomRowCount()");
        return this.getPinnedBottomRowCount();
      };
      GridApi2.prototype.getFloatingTopRow = function(index) {
        console.warn("AG Grid: since v12, api.getFloatingTopRow() is now api.getPinnedTopRow()");
        return this.getPinnedTopRow(index);
      };
      GridApi2.prototype.getFloatingBottomRow = function(index) {
        console.warn("AG Grid: since v12, api.getFloatingBottomRow() is now api.getPinnedBottomRow()");
        return this.getPinnedBottomRow(index);
      };
      GridApi2.prototype.setPinnedTopRowData = function(rows) {
        this.pinnedRowModel.setPinnedTopRowData(rows);
      };
      GridApi2.prototype.setPinnedBottomRowData = function(rows) {
        this.pinnedRowModel.setPinnedBottomRowData(rows);
      };
      GridApi2.prototype.getPinnedTopRowCount = function() {
        return this.pinnedRowModel.getPinnedTopRowCount();
      };
      GridApi2.prototype.getPinnedBottomRowCount = function() {
        return this.pinnedRowModel.getPinnedBottomRowCount();
      };
      GridApi2.prototype.getPinnedTopRow = function(index) {
        return this.pinnedRowModel.getPinnedTopRow(index);
      };
      GridApi2.prototype.getPinnedBottomRow = function(index) {
        return this.pinnedRowModel.getPinnedBottomRow(index);
      };
      GridApi2.prototype.setColumnDefs = function(colDefs, source) {
        if (source === void 0) {
          source = "api";
        }
        this.columnModel.setColumnDefs(colDefs, source);
      };
      GridApi2.prototype.setAutoGroupColumnDef = function(colDef, source) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_AUTO_GROUP_COLUMN_DEF, colDef, true);
      };
      GridApi2.prototype.setDefaultColDef = function(colDef, source) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_DEFAULT_COL_DEF, colDef, true);
      };
      GridApi2.prototype.expireValueCache = function() {
        this.valueCache.expire();
      };
      GridApi2.prototype.getVerticalPixelRange = function() {
        return this.gridBodyCtrl.getScrollFeature().getVScrollPosition();
      };
      GridApi2.prototype.getHorizontalPixelRange = function() {
        return this.gridBodyCtrl.getScrollFeature().getHScrollPosition();
      };
      GridApi2.prototype.setAlwaysShowHorizontalScroll = function(show) {
        this.gridOptionsWrapper.setProperty("alwaysShowHorizontalScroll", show);
      };
      GridApi2.prototype.setAlwaysShowVerticalScroll = function(show) {
        this.gridOptionsWrapper.setProperty("alwaysShowVerticalScroll", show);
      };
      GridApi2.prototype.refreshToolPanel = function() {
        if (!this.sideBarComp) {
          return;
        }
        this.sideBarComp.refresh();
      };
      GridApi2.prototype.refreshCells = function(params) {
        if (params === void 0) {
          params = {};
        }
        if (Array.isArray(params)) {
          console.warn("since AG Grid v11.1, refreshCells() now takes parameters, please see the documentation.");
          return;
        }
        this.rowRenderer.refreshCells(params);
      };
      GridApi2.prototype.flashCells = function(params) {
        if (params === void 0) {
          params = {};
        }
        this.rowRenderer.flashCells(params);
      };
      GridApi2.prototype.redrawRows = function(params) {
        if (params === void 0) {
          params = {};
        }
        var rowNodes = params ? params.rowNodes : void 0;
        this.rowRenderer.redrawRows(rowNodes);
      };
      GridApi2.prototype.setFunctionsReadOnly = function(readOnly) {
        this.gridOptionsWrapper.setProperty("functionsReadOnly", readOnly);
      };
      GridApi2.prototype.refreshHeader = function() {
        this.ctrlsService.getHeaderRowContainerCtrls().forEach(function(c) {
          return c.refresh();
        });
      };
      GridApi2.prototype.isAnyFilterPresent = function() {
        return this.filterManager.isAnyFilterPresent();
      };
      GridApi2.prototype.isColumnFilterPresent = function() {
        return this.filterManager.isColumnFilterPresent() || this.filterManager.isAggregateFilterPresent();
      };
      GridApi2.prototype.isQuickFilterPresent = function() {
        return this.filterManager.isQuickFilterPresent();
      };
      GridApi2.prototype.getModel = function() {
        return this.rowModel;
      };
      GridApi2.prototype.setRowNodeExpanded = function(rowNode, expanded) {
        if (rowNode) {
          rowNode.setExpanded(expanded);
        }
      };
      GridApi2.prototype.onGroupExpandedOrCollapsed = function(deprecated_refreshFromIndex) {
        if (missing(this.clientSideRowModel)) {
          console.warn("AG Grid: cannot call onGroupExpandedOrCollapsed unless using normal row model");
        }
        if (exists(deprecated_refreshFromIndex)) {
          console.warn("AG Grid: api.onGroupExpandedOrCollapsed - refreshFromIndex parameter is no longer used, the grid will refresh all rows");
        }
        this.clientSideRowModel.refreshModel({ step: ClientSideRowModelSteps.MAP });
      };
      GridApi2.prototype.refreshInMemoryRowModel = function(step) {
        console.warn("AG Grid: since version 18.x, api.refreshInMemoryRowModel() should be replaced with api.refreshClientSideRowModel()");
        this.refreshClientSideRowModel(step);
      };
      GridApi2.prototype.refreshClientSideRowModel = function(step) {
        if (missing(this.clientSideRowModel)) {
          console.warn("cannot call refreshClientSideRowModel unless using normal row model");
        }
        var paramsStep = ClientSideRowModelSteps.EVERYTHING;
        var stepsMapped = {
          everything: ClientSideRowModelSteps.EVERYTHING,
          group: ClientSideRowModelSteps.EVERYTHING,
          filter: ClientSideRowModelSteps.FILTER,
          map: ClientSideRowModelSteps.MAP,
          aggregate: ClientSideRowModelSteps.AGGREGATE,
          sort: ClientSideRowModelSteps.SORT,
          pivot: ClientSideRowModelSteps.PIVOT
        };
        if (exists(step)) {
          paramsStep = stepsMapped[step];
        }
        if (missing(paramsStep)) {
          console.error("AG Grid: invalid step " + step + ", available steps are " + Object.keys(stepsMapped).join(", "));
          return;
        }
        var animate = !this.gridOptionsWrapper.isSuppressAnimationFrame();
        var modelParams = {
          step: paramsStep,
          keepRenderedRows: true,
          keepEditingRows: true,
          animate
        };
        this.clientSideRowModel.refreshModel(modelParams);
      };
      GridApi2.prototype.isAnimationFrameQueueEmpty = function() {
        return this.animationFrameService.isQueueEmpty();
      };
      GridApi2.prototype.flushAllAnimationFrames = function() {
        this.animationFrameService.flushAllFrames();
      };
      GridApi2.prototype.getRowNode = function(id) {
        return this.rowModel.getRowNode(id);
      };
      GridApi2.prototype.getSizesForCurrentTheme = function() {
        return {
          rowHeight: this.gridOptionsWrapper.getRowHeightAsNumber(),
          headerHeight: this.gridOptionsWrapper.getHeaderHeight()
        };
      };
      GridApi2.prototype.expandAll = function() {
        if (this.clientSideRowModel) {
          this.clientSideRowModel.expandOrCollapseAll(true);
        } else if (this.serverSideRowModel) {
          this.serverSideRowModel.expandAll(true);
        } else {
          console.warn("AG Grid: expandAll only works with Client Side Row Model and Server Side Row Model");
        }
      };
      GridApi2.prototype.collapseAll = function() {
        if (this.clientSideRowModel) {
          this.clientSideRowModel.expandOrCollapseAll(false);
        } else if (this.serverSideRowModel) {
          this.serverSideRowModel.expandAll(false);
        } else {
          console.warn("AG Grid: collapseAll only works with Client Side Row Model and Server Side Row Model");
        }
      };
      GridApi2.prototype.getToolPanelInstance = function(id) {
        if (!this.sideBarComp) {
          console.warn("AG Grid: toolPanel is only available in AG Grid Enterprise");
          return;
        }
        var comp = this.sideBarComp.getToolPanelInstance(id);
        return unwrapUserComp(comp);
      };
      GridApi2.prototype.addVirtualRowListener = function(eventName, rowIndex, callback) {
        if (typeof eventName !== "string") {
          console.warn("AG Grid: addVirtualRowListener is deprecated, please use addRenderedRowListener.");
        }
        this.addRenderedRowListener(eventName, rowIndex, callback);
      };
      GridApi2.prototype.addRenderedRowListener = function(eventName, rowIndex, callback) {
        if (eventName === "virtualRowSelected") {
          console.warn("AG Grid: event virtualRowSelected is deprecated, to register for individual row\n                selection events, add a listener directly to the row node.");
        }
        this.rowRenderer.addRenderedRowListener(eventName, rowIndex, callback);
      };
      GridApi2.prototype.setQuickFilter = function(newFilter) {
        this.filterManager.setQuickFilter(newFilter);
      };
      GridApi2.prototype.selectIndex = function(index, tryMulti, suppressEvents) {
        console.warn("AG Grid: do not use api for selection, call rowNode.setSelected(value) instead");
        if (suppressEvents) {
          console.warn("AG Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it");
        }
        this.selectionService.selectIndex(index, tryMulti);
      };
      GridApi2.prototype.deselectIndex = function(index, suppressEvents) {
        if (suppressEvents === void 0) {
          suppressEvents = false;
        }
        console.warn("AG Grid: do not use api for selection, call rowNode.setSelected(value) instead");
        if (suppressEvents) {
          console.warn("AG Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it");
        }
        this.selectionService.deselectIndex(index);
      };
      GridApi2.prototype.selectNode = function(node, tryMulti, suppressEvents) {
        if (tryMulti === void 0) {
          tryMulti = false;
        }
        if (suppressEvents === void 0) {
          suppressEvents = false;
        }
        console.warn("AG Grid: API for selection is deprecated, call rowNode.setSelected(value) instead");
        if (suppressEvents) {
          console.warn("AG Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it");
        }
        node.setSelectedParams({ newValue: true, clearSelection: !tryMulti });
      };
      GridApi2.prototype.deselectNode = function(node, suppressEvents) {
        if (suppressEvents === void 0) {
          suppressEvents = false;
        }
        console.warn("AG Grid: API for selection is deprecated, call rowNode.setSelected(value) instead");
        if (suppressEvents) {
          console.warn("AG Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it");
        }
        node.setSelectedParams({ newValue: false });
      };
      GridApi2.prototype.selectAll = function() {
        this.selectionService.selectAllRowNodes();
      };
      GridApi2.prototype.deselectAll = function() {
        this.selectionService.deselectAllRowNodes();
      };
      GridApi2.prototype.selectAllFiltered = function() {
        this.selectionService.selectAllRowNodes(true);
      };
      GridApi2.prototype.deselectAllFiltered = function() {
        this.selectionService.deselectAllRowNodes(true);
      };
      GridApi2.prototype.recomputeAggregates = function() {
        if (missing(this.clientSideRowModel)) {
          console.warn("cannot call recomputeAggregates unless using normal row model");
        }
        console.warn("recomputeAggregates is deprecated, please call api.refreshClientSideRowModel('aggregate') instead");
        this.clientSideRowModel.refreshModel({ step: ClientSideRowModelSteps.AGGREGATE });
      };
      GridApi2.prototype.sizeColumnsToFit = function(params) {
        this.gridBodyCtrl.sizeColumnsToFit(params);
      };
      GridApi2.prototype.showLoadingOverlay = function() {
        this.overlayWrapperComp.showLoadingOverlay();
      };
      GridApi2.prototype.showNoRowsOverlay = function() {
        this.overlayWrapperComp.showNoRowsOverlay();
      };
      GridApi2.prototype.hideOverlay = function() {
        this.overlayWrapperComp.hideOverlay();
      };
      GridApi2.prototype.isNodeSelected = function(node) {
        console.warn("AG Grid: no need to call api.isNodeSelected(), just call node.isSelected() instead");
        return node.isSelected();
      };
      GridApi2.prototype.getSelectedNodesById = function() {
        console.error("AG Grid: since version 3.4, getSelectedNodesById no longer exists, use getSelectedNodes() instead");
        return null;
      };
      GridApi2.prototype.getSelectedNodes = function() {
        return this.selectionService.getSelectedNodes();
      };
      GridApi2.prototype.getSelectedRows = function() {
        return this.selectionService.getSelectedRows();
      };
      GridApi2.prototype.getBestCostNodeSelection = function() {
        return this.selectionService.getBestCostNodeSelection();
      };
      GridApi2.prototype.getRenderedNodes = function() {
        return this.rowRenderer.getRenderedNodes();
      };
      GridApi2.prototype.ensureColIndexVisible = function(index) {
        console.warn("AG Grid: ensureColIndexVisible(index) no longer supported, use ensureColumnVisible(colKey) instead.");
      };
      GridApi2.prototype.ensureColumnVisible = function(key, position) {
        if (position === void 0) {
          position = "auto";
        }
        this.gridBodyCtrl.getScrollFeature().ensureColumnVisible(key, position);
      };
      GridApi2.prototype.ensureIndexVisible = function(index, position) {
        this.gridBodyCtrl.getScrollFeature().ensureIndexVisible(index, position);
      };
      GridApi2.prototype.ensureNodeVisible = function(nodeSelector, position) {
        if (position === void 0) {
          position = null;
        }
        this.gridBodyCtrl.getScrollFeature().ensureNodeVisible(nodeSelector, position);
      };
      GridApi2.prototype.forEachLeafNode = function(callback) {
        if (missing(this.clientSideRowModel)) {
          console.warn("cannot call forEachNode unless using normal row model");
        }
        this.clientSideRowModel.forEachLeafNode(callback);
      };
      GridApi2.prototype.forEachNode = function(callback) {
        this.rowModel.forEachNode(callback);
      };
      GridApi2.prototype.forEachNodeAfterFilter = function(callback) {
        if (missing(this.clientSideRowModel)) {
          console.warn("cannot call forEachNodeAfterFilter unless using normal row model");
        }
        this.clientSideRowModel.forEachNodeAfterFilter(callback);
      };
      GridApi2.prototype.forEachNodeAfterFilterAndSort = function(callback) {
        if (missing(this.clientSideRowModel)) {
          console.warn("cannot call forEachNodeAfterFilterAndSort unless using normal row model");
        }
        this.clientSideRowModel.forEachNodeAfterFilterAndSort(callback);
      };
      GridApi2.prototype.getFilterInstance = function(key, callback) {
        var res = this.getFilterInstanceImpl(key, function(instance) {
          if (!callback) {
            return;
          }
          var unwrapped2 = unwrapUserComp(instance);
          callback(unwrapped2);
        });
        var unwrapped = unwrapUserComp(res);
        return unwrapped;
      };
      GridApi2.prototype.getFilterInstanceImpl = function(key, callback) {
        var column = this.columnModel.getPrimaryColumn(key);
        if (!column) {
          return void 0;
        }
        var filterPromise = this.filterManager.getFilterComponent(column, "NO_UI");
        var currentValue = filterPromise && filterPromise.resolveNow(null, function(filterComp) {
          return filterComp;
        });
        if (currentValue) {
          setTimeout(callback, 0, currentValue);
        } else if (filterPromise) {
          filterPromise.then(function(comp) {
            callback(comp);
          });
        }
        return currentValue;
      };
      GridApi2.prototype.destroyFilter = function(key) {
        var column = this.columnModel.getPrimaryColumn(key);
        if (column) {
          return this.filterManager.destroyFilter(column, "filterDestroyed");
        }
      };
      GridApi2.prototype.getStatusPanel = function(key) {
        if (!this.statusBarService) {
          return;
        }
        var comp = this.statusBarService.getStatusPanel(key);
        return unwrapUserComp(comp);
      };
      GridApi2.prototype.getColumnDef = function(key) {
        var column = this.columnModel.getPrimaryColumn(key);
        if (column) {
          return column.getColDef();
        }
        return null;
      };
      GridApi2.prototype.getColumnDefs = function() {
        return this.columnModel.getColumnDefs();
      };
      GridApi2.prototype.onFilterChanged = function() {
        this.filterManager.onFilterChanged();
      };
      GridApi2.prototype.onSortChanged = function() {
        this.sortController.onSortChanged("api");
      };
      GridApi2.prototype.setFilterModel = function(model) {
        this.filterManager.setFilterModel(model);
      };
      GridApi2.prototype.getFilterModel = function() {
        return this.filterManager.getFilterModel();
      };
      GridApi2.prototype.getFocusedCell = function() {
        return this.focusService.getFocusedCell();
      };
      GridApi2.prototype.clearFocusedCell = function() {
        return this.focusService.clearFocusedCell();
      };
      GridApi2.prototype.setFocusedCell = function(rowIndex, colKey, rowPinned) {
        this.focusService.setFocusedCell({ rowIndex, column: colKey, rowPinned, forceBrowserFocus: true });
      };
      GridApi2.prototype.setSuppressRowDrag = function(value) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_SUPPRESS_ROW_DRAG, value);
      };
      GridApi2.prototype.setSuppressMoveWhenRowDragging = function(value) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_SUPPRESS_MOVE_WHEN_ROW_DRAG, value);
      };
      GridApi2.prototype.setSuppressRowClickSelection = function(value) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_SUPPRESS_ROW_CLICK_SELECTION, value);
      };
      GridApi2.prototype.addRowDropZone = function(params) {
        this.gridBodyCtrl.getRowDragFeature().addRowDropZone(params);
      };
      GridApi2.prototype.removeRowDropZone = function(params) {
        var activeDropTarget = this.dragAndDropService.findExternalZone(params);
        if (activeDropTarget) {
          this.dragAndDropService.removeDropTarget(activeDropTarget);
        }
      };
      GridApi2.prototype.getRowDropZoneParams = function(events) {
        return this.gridBodyCtrl.getRowDragFeature().getRowDropZone(events);
      };
      GridApi2.prototype.setHeaderHeight = function(headerHeight) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_HEADER_HEIGHT, headerHeight);
      };
      GridApi2.prototype.setDomLayout = function(domLayout) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_DOM_LAYOUT, domLayout);
      };
      GridApi2.prototype.setEnableCellTextSelection = function(selectable) {
        this.gridBodyCtrl.setCellTextSelection(selectable);
      };
      GridApi2.prototype.setFillHandleDirection = function(direction) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_FILL_HANDLE_DIRECTION, direction);
      };
      GridApi2.prototype.setGroupHeaderHeight = function(headerHeight) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GROUP_HEADER_HEIGHT, headerHeight);
      };
      GridApi2.prototype.setFloatingFiltersHeight = function(headerHeight) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_FLOATING_FILTERS_HEIGHT, headerHeight);
      };
      GridApi2.prototype.setPivotHeaderHeight = function(headerHeight) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PIVOT_HEADER_HEIGHT, headerHeight);
      };
      GridApi2.prototype.setPivotGroupHeaderHeight = function(headerHeight) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PIVOT_GROUP_HEADER_HEIGHT, headerHeight);
      };
      GridApi2.prototype.setIsExternalFilterPresent = function(isExternalFilterPresentFunc) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_IS_EXTERNAL_FILTER_PRESENT, isExternalFilterPresentFunc);
      };
      GridApi2.prototype.setDoesExternalFilterPass = function(doesExternalFilterPassFunc) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_DOES_EXTERNAL_FILTER_PASS, doesExternalFilterPassFunc);
      };
      GridApi2.prototype.setNavigateToNextCell = function(navigateToNextCellFunc) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_NAVIGATE_TO_NEXT_CELL, navigateToNextCellFunc);
      };
      GridApi2.prototype.setTabToNextCell = function(tabToNextCellFunc) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_TAB_TO_NEXT_CELL, tabToNextCellFunc);
      };
      GridApi2.prototype.setTabToNextHeader = function(tabToNextHeaderFunc) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_TAB_TO_NEXT_HEADER, tabToNextHeaderFunc);
      };
      GridApi2.prototype.setNavigateToNextHeader = function(navigateToNextHeaderFunc) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_NAVIGATE_TO_NEXT_HEADER, navigateToNextHeaderFunc);
      };
      GridApi2.prototype.setRowGroupPanelShow = function(rowGroupPanelShow) {
        this.gridOptionsWrapper.setProperty("rowGroupPanelShow", rowGroupPanelShow);
      };
      GridApi2.prototype.setGroupRowAggNodes = function(groupRowAggNodesFunc) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GROUP_ROW_AGG_NODES, groupRowAggNodesFunc);
      };
      GridApi2.prototype.setGetGroupRowAgg = function(getGroupRowAggFunc) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_GROUP_ROW_AGG, getGroupRowAggFunc);
      };
      GridApi2.prototype.setGetBusinessKeyForNode = function(getBusinessKeyForNodeFunc) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_BUSINESS_KEY_FOR_NODE, getBusinessKeyForNodeFunc);
      };
      GridApi2.prototype.setGetChildCount = function(getChildCountFunc) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_CHILD_COUNT, getChildCountFunc);
      };
      GridApi2.prototype.setProcessRowPostCreate = function(processRowPostCreateFunc) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PROCESS_ROW_POST_CREATE, processRowPostCreateFunc);
      };
      GridApi2.prototype.setGetRowNodeId = function(getRowNodeIdFunc) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_ROW_NODE_ID, getRowNodeIdFunc);
      };
      GridApi2.prototype.setGetRowId = function(getRowIdFunc) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_ROW_ID, getRowIdFunc);
      };
      GridApi2.prototype.setGetRowClass = function(rowClassFunc) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_ROW_CLASS, rowClassFunc);
      };
      GridApi2.prototype.setIsFullWidthCell = function(isFullWidthCellFunc) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_IS_FULL_WIDTH_CELL, isFullWidthCellFunc);
      };
      GridApi2.prototype.setIsFullWidthRow = function(isFullWidthRowFunc) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_IS_FULL_WIDTH_ROW, isFullWidthRowFunc);
      };
      GridApi2.prototype.setIsRowSelectable = function(isRowSelectableFunc) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_IS_ROW_SELECTABLE, isRowSelectableFunc);
      };
      GridApi2.prototype.setIsRowMaster = function(isRowMasterFunc) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_IS_ROW_MASTER, isRowMasterFunc);
      };
      GridApi2.prototype.setPostSort = function(postSortFunc) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_POST_SORT, postSortFunc);
      };
      GridApi2.prototype.setPostSortRows = function(postSortRowsFunc) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_POST_SORT_ROWS, postSortRowsFunc);
      };
      GridApi2.prototype.setGetDocument = function(getDocumentFunc) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_DOCUMENT, getDocumentFunc);
      };
      GridApi2.prototype.setGetContextMenuItems = function(getContextMenuItemsFunc) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_CONTEXT_MENU_ITEMS, getContextMenuItemsFunc);
      };
      GridApi2.prototype.setGetMainMenuItems = function(getMainMenuItemsFunc) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_MAIN_MENU_ITEMS, getMainMenuItemsFunc);
      };
      GridApi2.prototype.setProcessCellForClipboard = function(processCellForClipboardFunc) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PROCESS_CELL_FOR_CLIPBOARD, processCellForClipboardFunc);
      };
      GridApi2.prototype.setSendToClipboard = function(sendToClipboardFunc) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_SEND_TO_CLIPBOARD, sendToClipboardFunc);
      };
      GridApi2.prototype.setProcessCellFromClipboard = function(processCellFromClipboardFunc) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PROCESS_CELL_FROM_CLIPBOARD, processCellFromClipboardFunc);
      };
      GridApi2.prototype.setProcessSecondaryColDef = function(processSecondaryColDefFunc) {
        console.warn("AG Grid: since version 28.0.x setProcessSecondaryColDef has been renamed, please use setProcessPivotResultColDef instead");
        this.setProcessPivotResultColDef(processSecondaryColDefFunc);
      };
      GridApi2.prototype.setProcessSecondaryColGroupDef = function(processSecondaryColGroupDefFunc) {
        console.warn("AG Grid: since version 28.0.x setProcessSecondaryColGroupDef has been renamed, please use setProcessPivotResultColGroupDef instead");
        this.setProcessPivotResultColGroupDef(processSecondaryColGroupDefFunc);
      };
      GridApi2.prototype.setProcessPivotResultColDef = function(processPivotResultColDefFunc) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PROCESS_PIVOT_RESULT_COL_DEF, processPivotResultColDefFunc);
      };
      GridApi2.prototype.setProcessPivotResultColGroupDef = function(processPivotResultColGroupDefFunc) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PROCESS_PIVOT_RESULT_COL_GROUP_DEF, processPivotResultColGroupDefFunc);
      };
      GridApi2.prototype.setPostProcessPopup = function(postProcessPopupFunc) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_POST_PROCESS_POPUP, postProcessPopupFunc);
      };
      GridApi2.prototype.setDefaultGroupOrderComparator = function(defaultGroupOrderComparatorFunc) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_DEFAULT_GROUP_ORDER_COMPARATOR, defaultGroupOrderComparatorFunc);
      };
      GridApi2.prototype.setInitialGroupOrderComparator = function(initialGroupOrderComparatorFunc) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_INITIAL_GROUP_ORDER_COMPARATOR, initialGroupOrderComparatorFunc);
      };
      GridApi2.prototype.setGetChartToolbarItems = function(getChartToolbarItemsFunc) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_CHART_TOOLBAR_ITEMS, getChartToolbarItemsFunc);
      };
      GridApi2.prototype.setPaginationNumberFormatter = function(paginationNumberFormatterFunc) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PAGINATION_NUMBER_FORMATTER, paginationNumberFormatterFunc);
      };
      GridApi2.prototype.setGetServerSideStoreParams = function(getServerSideStoreParamsFunc) {
        this.setGetServerSideGroupLevelParams(getServerSideStoreParamsFunc);
      };
      GridApi2.prototype.setGetServerSideGroupLevelParams = function(getServerSideGroupLevelParamsFunc) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_SERVER_SIDE_GROUP_PARAMS, getServerSideGroupLevelParamsFunc);
      };
      GridApi2.prototype.setIsServerSideGroupOpenByDefault = function(isServerSideGroupOpenByDefaultFunc) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_IS_SERVER_SIDE_GROUPS_OPEN_BY_DEFAULT, isServerSideGroupOpenByDefaultFunc);
      };
      GridApi2.prototype.setIsApplyServerSideTransaction = function(isApplyServerSideTransactionFunc) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_IS_APPLY_SERVER_SIDE_TRANSACTION, isApplyServerSideTransactionFunc);
      };
      GridApi2.prototype.setIsServerSideGroup = function(isServerSideGroupFunc) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_IS_SERVER_SIDE_GROUP, isServerSideGroupFunc);
      };
      GridApi2.prototype.setGetServerSideGroupKey = function(getServerSideGroupKeyFunc) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_SERVER_SIDE_GROUP_KEY, getServerSideGroupKeyFunc);
      };
      GridApi2.prototype.setGetRowStyle = function(rowStyleFunc) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_ROW_STYLE, rowStyleFunc);
      };
      GridApi2.prototype.setGetRowHeight = function(rowHeightFunc) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_ROW_HEIGHT, rowHeightFunc);
      };
      GridApi2.prototype.isSideBarVisible = function() {
        return this.sideBarComp ? this.sideBarComp.isDisplayed() : false;
      };
      GridApi2.prototype.setSideBarVisible = function(show) {
        if (!this.sideBarComp) {
          if (show) {
            console.warn("AG Grid: sideBar is not loaded");
          }
          return;
        }
        this.sideBarComp.setDisplayed(show);
      };
      GridApi2.prototype.setSideBarPosition = function(position) {
        if (!this.sideBarComp) {
          console.warn("AG Grid: sideBar is not loaded");
          return;
        }
        this.sideBarComp.setSideBarPosition(position);
      };
      GridApi2.prototype.openToolPanel = function(key) {
        if (!this.sideBarComp) {
          console.warn("AG Grid: toolPanel is only available in AG Grid Enterprise");
          return;
        }
        this.sideBarComp.openToolPanel(key);
      };
      GridApi2.prototype.closeToolPanel = function() {
        if (!this.sideBarComp) {
          console.warn("AG Grid: toolPanel is only available in AG Grid Enterprise");
          return;
        }
        this.sideBarComp.close();
      };
      GridApi2.prototype.getOpenedToolPanel = function() {
        return this.sideBarComp ? this.sideBarComp.openedItem() : null;
      };
      GridApi2.prototype.getSideBar = function() {
        return this.gridOptionsWrapper.getSideBar();
      };
      GridApi2.prototype.setSideBar = function(def) {
        this.gridOptionsWrapper.setProperty("sideBar", SideBarDefParser.parse(def));
      };
      GridApi2.prototype.setSuppressClipboardPaste = function(value) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_SUPPRESS_CLIPBOARD_PASTE, value);
      };
      GridApi2.prototype.isToolPanelShowing = function() {
        return this.sideBarComp.isToolPanelShowing();
      };
      GridApi2.prototype.doLayout = function() {
        var message2 = "AG Grid - since version 25.1, doLayout was taken out, as it's not needed. The grid responds to grid size changes automatically";
        doOnce(function() {
          return console.warn(message2);
        }, "doLayoutDeprecated");
      };
      GridApi2.prototype.resetRowHeights = function() {
        if (exists(this.clientSideRowModel)) {
          if (this.columnModel.isAutoRowHeightActive()) {
            console.warn("AG Grid: calling gridApi.resetRowHeights() makes no sense when using Auto Row Height.");
            return;
          }
          this.clientSideRowModel.resetRowHeights();
        }
      };
      GridApi2.prototype.setGroupRemoveSingleChildren = function(value) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GROUP_REMOVE_SINGLE_CHILDREN, value);
      };
      GridApi2.prototype.setGroupRemoveLowestSingleChildren = function(value) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN, value);
      };
      GridApi2.prototype.setGroupDisplayType = function(value) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GROUP_DISPLAY_TYPE, value);
      };
      GridApi2.prototype.onRowHeightChanged = function() {
        if (this.clientSideRowModel) {
          this.clientSideRowModel.onRowHeightChanged();
        } else if (this.serverSideRowModel) {
          this.serverSideRowModel.onRowHeightChanged();
        }
      };
      GridApi2.prototype.getValue = function(colKey, rowNode) {
        var column = this.columnModel.getPrimaryColumn(colKey);
        if (missing(column)) {
          column = this.columnModel.getGridColumn(colKey);
        }
        if (missing(column)) {
          return null;
        }
        return this.valueService.getValue(column, rowNode);
      };
      GridApi2.prototype.addEventListener = function(eventType, listener) {
        var async = this.gridOptionsWrapper.useAsyncEvents();
        this.eventService.addEventListener(eventType, listener, async);
      };
      GridApi2.prototype.addGlobalListener = function(listener) {
        var async = this.gridOptionsWrapper.useAsyncEvents();
        this.eventService.addGlobalListener(listener, async);
      };
      GridApi2.prototype.removeEventListener = function(eventType, listener) {
        var async = this.gridOptionsWrapper.useAsyncEvents();
        this.eventService.removeEventListener(eventType, listener, async);
      };
      GridApi2.prototype.removeGlobalListener = function(listener) {
        var async = this.gridOptionsWrapper.useAsyncEvents();
        this.eventService.removeGlobalListener(listener, async);
      };
      GridApi2.prototype.dispatchEvent = function(event) {
        this.eventService.dispatchEvent(event);
      };
      GridApi2.prototype.destroy = function() {
        if (this.destroyCalled) {
          return;
        }
        this.destroyCalled = true;
        var gridCtrl = this.ctrlsService.getGridCtrl();
        if (gridCtrl) {
          gridCtrl.destroyGridUi();
        }
        this.context.destroy();
      };
      GridApi2.prototype.cleanDownReferencesToAvoidMemoryLeakInCaseApplicationIsKeepingReferenceToDestroyedGrid = function() {
        setTimeout(removeAllReferences.bind(window, this, "Grid API"), 100);
      };
      GridApi2.prototype.warnIfDestroyed = function(methodName) {
        if (this.destroyCalled) {
          console.warn("AG Grid: Grid API method " + methodName + " was called on a grid that was destroyed.");
        }
        return this.destroyCalled;
      };
      GridApi2.prototype.resetQuickFilter = function() {
        if (this.warnIfDestroyed("resetQuickFilter")) {
          return;
        }
        this.rowModel.forEachNode(function(node) {
          return node.quickFilterAggregateText = null;
        });
      };
      GridApi2.prototype.getRangeSelections = function() {
        console.warn("AG Grid: in v20.1.x, api.getRangeSelections() is gone, please use getCellRanges() instead.\n        We had to change how cell selections works a small bit to allow charting to integrate. The return type of\n        getCellRanges() is a bit different, please check the AG Grid documentation.");
        return null;
      };
      GridApi2.prototype.getCellRanges = function() {
        if (this.rangeService) {
          return this.rangeService.getCellRanges();
        }
        console.warn("AG Grid: cell range selection is only available in AG Grid Enterprise");
        return null;
      };
      GridApi2.prototype.camelCaseToHumanReadable = function(camelCase) {
        return camelCaseToHumanText(camelCase);
      };
      GridApi2.prototype.addRangeSelection = function(deprecatedNoLongerUsed) {
        console.warn("AG Grid: As of version 21.x, range selection changed slightly to allow charting integration. Please call api.addCellRange() instead of api.addRangeSelection()");
      };
      GridApi2.prototype.addCellRange = function(params) {
        if (!this.rangeService) {
          console.warn("AG Grid: cell range selection is only available in AG Grid Enterprise");
        }
        this.rangeService.addCellRange(params);
      };
      GridApi2.prototype.clearRangeSelection = function() {
        if (!this.rangeService) {
          console.warn("AG Grid: cell range selection is only available in AG Grid Enterprise");
        }
        this.rangeService.removeAllCellRanges();
      };
      GridApi2.prototype.undoCellEditing = function() {
        this.undoRedoService.undo();
      };
      GridApi2.prototype.redoCellEditing = function() {
        this.undoRedoService.redo();
      };
      GridApi2.prototype.getCurrentUndoSize = function() {
        return this.undoRedoService.getCurrentUndoStackSize();
      };
      GridApi2.prototype.getCurrentRedoSize = function() {
        return this.undoRedoService.getCurrentRedoStackSize();
      };
      GridApi2.prototype.getChartModels = function() {
        if (ModuleRegistry.assertRegistered(ModuleNames.RangeSelectionModule, "api.getChartModels") && ModuleRegistry.assertRegistered(ModuleNames.GridChartsModule, "api.getChartModels")) {
          return this.chartService.getChartModels();
        }
      };
      GridApi2.prototype.getChartRef = function(chartId) {
        if (ModuleRegistry.assertRegistered(ModuleNames.RangeSelectionModule, "api.getChartRef") && ModuleRegistry.assertRegistered(ModuleNames.GridChartsModule, "api.getChartRef")) {
          return this.chartService.getChartRef(chartId);
        }
      };
      GridApi2.prototype.getChartImageDataURL = function(params) {
        if (ModuleRegistry.assertRegistered(ModuleNames.GridChartsModule, "api.getChartImageDataURL")) {
          return this.chartService.getChartImageDataURL(params);
        }
      };
      GridApi2.prototype.downloadChart = function(params) {
        if (ModuleRegistry.assertRegistered(ModuleNames.GridChartsModule, "api.downloadChart")) {
          return this.chartService.downloadChart(params);
        }
      };
      GridApi2.prototype.openChartToolPanel = function(params) {
        if (ModuleRegistry.assertRegistered(ModuleNames.GridChartsModule, "api.openChartToolPanel")) {
          return this.chartService.openChartToolPanel(params);
        }
      };
      GridApi2.prototype.closeChartToolPanel = function(params) {
        if (ModuleRegistry.assertRegistered(ModuleNames.GridChartsModule, "api.closeChartToolPanel")) {
          return this.chartService.closeChartToolPanel(params.chartId);
        }
      };
      GridApi2.prototype.createRangeChart = function(params) {
        if (ModuleRegistry.assertRegistered(ModuleNames.RangeSelectionModule, "api.createRangeChart") && ModuleRegistry.assertRegistered(ModuleNames.GridChartsModule, "api.createRangeChart")) {
          return this.chartService.createRangeChart(params);
        }
      };
      GridApi2.prototype.createCrossFilterChart = function(params) {
        if (ModuleRegistry.assertRegistered(ModuleNames.RangeSelectionModule, "api.createCrossFilterChart") && ModuleRegistry.assertRegistered(ModuleNames.GridChartsModule, "api.createCrossFilterChart")) {
          return this.chartService.createCrossFilterChart(params);
        }
      };
      GridApi2.prototype.restoreChart = function(chartModel, chartContainer) {
        if (ModuleRegistry.assertRegistered(ModuleNames.RangeSelectionModule, "api.restoreChart") && ModuleRegistry.assertRegistered(ModuleNames.GridChartsModule, "api.restoreChart")) {
          return this.chartService.restoreChart(chartModel, chartContainer);
        }
      };
      GridApi2.prototype.createPivotChart = function(params) {
        if (ModuleRegistry.assertRegistered(ModuleNames.RangeSelectionModule, "api.createPivotChart") && ModuleRegistry.assertRegistered(ModuleNames.GridChartsModule, "api.createPivotChart")) {
          return this.chartService.createPivotChart(params);
        }
      };
      GridApi2.prototype.copyToClipboard = function(params) {
        if (!this.clipboardService) {
          console.warn("AG Grid: clipboard is only available in AG Grid Enterprise");
        }
        this.clipboardService.copyToClipboard(params);
      };
      GridApi2.prototype.copySelectedRowsToClipboard = function(params) {
        if (!this.clipboardService) {
          console.warn("AG Grid: clipboard is only available in AG Grid Enterprise");
        }
        this.clipboardService.copySelectedRowsToClipboard(params);
      };
      GridApi2.prototype.copySelectedRangeToClipboard = function(params) {
        if (!this.clipboardService) {
          console.warn("AG Grid: clipboard is only available in AG Grid Enterprise");
        }
        this.clipboardService.copySelectedRangeToClipboard(params);
      };
      GridApi2.prototype.copySelectedRangeDown = function() {
        if (!this.clipboardService) {
          console.warn("AG Grid: clipboard is only available in AG Grid Enterprise");
        }
        this.clipboardService.copyRangeDown();
      };
      GridApi2.prototype.showColumnMenuAfterButtonClick = function(colKey, buttonElement) {
        var column = this.columnModel.getGridColumn(colKey);
        this.menuFactory.showMenuAfterButtonClick(column, buttonElement, "columnMenu");
      };
      GridApi2.prototype.showColumnMenuAfterMouseClick = function(colKey, mouseEvent) {
        var column = this.columnModel.getGridColumn(colKey);
        if (!column) {
          column = this.columnModel.getPrimaryColumn(colKey);
        }
        if (!column) {
          console.error("AG Grid: column '" + colKey + "' not found");
          return;
        }
        this.menuFactory.showMenuAfterMouseEvent(column, mouseEvent);
      };
      GridApi2.prototype.hidePopupMenu = function() {
        if (this.contextMenuFactory) {
          this.contextMenuFactory.hideActiveMenu();
        }
        this.menuFactory.hideActiveMenu();
      };
      GridApi2.prototype.setPopupParent = function(ePopupParent) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_POPUP_PARENT, ePopupParent);
      };
      GridApi2.prototype.tabToNextCell = function(event) {
        return this.navigationService.tabToNextCell(false, event);
      };
      GridApi2.prototype.tabToPreviousCell = function(event) {
        return this.navigationService.tabToNextCell(true, event);
      };
      GridApi2.prototype.getCellRendererInstances = function(params) {
        if (params === void 0) {
          params = {};
        }
        var res = this.rowRenderer.getCellRendererInstances(params);
        var unwrapped = res.map(unwrapUserComp);
        return unwrapped;
      };
      GridApi2.prototype.getCellEditorInstances = function(params) {
        if (params === void 0) {
          params = {};
        }
        var res = this.rowRenderer.getCellEditorInstances(params);
        var unwrapped = res.map(unwrapUserComp);
        return unwrapped;
      };
      GridApi2.prototype.getEditingCells = function() {
        return this.rowRenderer.getEditingCells();
      };
      GridApi2.prototype.stopEditing = function(cancel) {
        if (cancel === void 0) {
          cancel = false;
        }
        this.rowRenderer.stopEditing(cancel);
      };
      GridApi2.prototype.startEditingCell = function(params) {
        var column = this.columnModel.getGridColumn(params.colKey);
        if (!column) {
          console.warn("AG Grid: no column found for " + params.colKey);
          return;
        }
        var cellPosition = {
          rowIndex: params.rowIndex,
          rowPinned: params.rowPinned || null,
          column
        };
        var notPinned = params.rowPinned == null;
        if (notPinned) {
          this.gridBodyCtrl.getScrollFeature().ensureIndexVisible(params.rowIndex);
        }
        var cell = this.navigationService.getCellByPosition(cellPosition);
        if (!cell) {
          return;
        }
        cell.startRowOrCellEdit(params.key, params.charPress);
      };
      GridApi2.prototype.addAggFunc = function(key, aggFunc) {
        if (this.aggFuncService) {
          this.aggFuncService.addAggFunc(key, aggFunc);
        }
      };
      GridApi2.prototype.addAggFuncs = function(aggFuncs) {
        if (this.aggFuncService) {
          this.aggFuncService.addAggFuncs(aggFuncs);
        }
      };
      GridApi2.prototype.clearAggFuncs = function() {
        if (this.aggFuncService) {
          this.aggFuncService.clear();
        }
      };
      GridApi2.prototype.applyServerSideTransaction = function(transaction) {
        if (!this.serverSideTransactionManager) {
          console.warn("AG Grid: Cannot apply Server Side Transaction if not using the Server Side Row Model.");
          return;
        }
        return this.serverSideTransactionManager.applyTransaction(transaction);
      };
      GridApi2.prototype.applyServerSideTransactionAsync = function(transaction, callback) {
        if (!this.serverSideTransactionManager) {
          console.warn("AG Grid: Cannot apply Server Side Transaction if not using the Server Side Row Model.");
          return;
        }
        return this.serverSideTransactionManager.applyTransactionAsync(transaction, callback);
      };
      GridApi2.prototype.retryServerSideLoads = function() {
        if (!this.serverSideRowModel) {
          console.warn("AG Grid: API retryServerSideLoads() can only be used when using Server-Side Row Model.");
          return;
        }
        this.serverSideRowModel.retryLoads();
      };
      GridApi2.prototype.flushServerSideAsyncTransactions = function() {
        if (!this.serverSideTransactionManager) {
          console.warn("AG Grid: Cannot flush Server Side Transaction if not using the Server Side Row Model.");
          return;
        }
        return this.serverSideTransactionManager.flushAsyncTransactions();
      };
      GridApi2.prototype.applyTransaction = function(rowDataTransaction) {
        if (!this.clientSideRowModel) {
          console.error("AG Grid: updateRowData() only works with ClientSideRowModel. Working with InfiniteRowModel was deprecated in v23.1 and removed in v24.1");
          return;
        }
        var res = this.clientSideRowModel.updateRowData(rowDataTransaction);
        this.rowRenderer.refreshFullWidthRows(res.update);
        if (!this.gridOptionsWrapper.isSuppressChangeDetection()) {
          this.rowRenderer.refreshCells();
        }
        return res;
      };
      GridApi2.prototype.setDeltaSort = function(enable) {
        this.gridOptionsWrapper.setProperty("deltaSort", enable);
      };
      GridApi2.prototype.updateRowData = function(rowDataTransaction) {
        var message2 = "AG Grid: as of v23.1, grid API updateRowData(transaction) is now called applyTransaction(transaction). updateRowData is deprecated and will be removed in a future major release.";
        doOnce(function() {
          return console.warn(message2);
        }, "updateRowData deprecated");
        return this.applyTransaction(rowDataTransaction);
      };
      GridApi2.prototype.applyTransactionAsync = function(rowDataTransaction, callback) {
        if (!this.clientSideRowModel) {
          console.error("AG Grid: api.applyTransactionAsync() only works with ClientSideRowModel.");
          return;
        }
        this.clientSideRowModel.batchUpdateRowData(rowDataTransaction, callback);
      };
      GridApi2.prototype.flushAsyncTransactions = function() {
        if (!this.clientSideRowModel) {
          console.error("AG Grid: api.applyTransactionAsync() only works with ClientSideRowModel.");
          return;
        }
        this.clientSideRowModel.flushAsyncTransactions();
      };
      GridApi2.prototype.batchUpdateRowData = function(rowDataTransaction, callback) {
        var message2 = "AG Grid: as of v23.1, grid API batchUpdateRowData(transaction, callback) is now called applyTransactionAsync(transaction, callback). batchUpdateRowData is deprecated and will be removed in a future major release.";
        doOnce(function() {
          return console.warn(message2);
        }, "batchUpdateRowData deprecated");
        this.applyTransactionAsync(rowDataTransaction, callback);
      };
      GridApi2.prototype.insertItemsAtIndex = function(index, items, skipRefresh) {
        console.warn("AG Grid: insertItemsAtIndex() is deprecated, use updateRowData(transaction) instead.");
        this.updateRowData({ add: items, addIndex: index, update: null, remove: null });
      };
      GridApi2.prototype.removeItems = function(rowNodes, skipRefresh) {
        console.warn("AG Grid: removeItems() is deprecated, use updateRowData(transaction) instead.");
        var dataToRemove = rowNodes.map(function(rowNode) {
          return rowNode.data;
        });
        this.updateRowData({ add: null, addIndex: null, update: null, remove: dataToRemove });
      };
      GridApi2.prototype.addItems = function(items, skipRefresh) {
        console.warn("AG Grid: addItems() is deprecated, use updateRowData(transaction) instead.");
        this.updateRowData({ add: items, addIndex: null, update: null, remove: null });
      };
      GridApi2.prototype.refreshVirtualPageCache = function() {
        console.warn("AG Grid: refreshVirtualPageCache() is now called refreshInfiniteCache(), please call refreshInfiniteCache() instead");
        this.refreshInfiniteCache();
      };
      GridApi2.prototype.refreshInfinitePageCache = function() {
        console.warn("AG Grid: refreshInfinitePageCache() is now called refreshInfiniteCache(), please call refreshInfiniteCache() instead");
        this.refreshInfiniteCache();
      };
      GridApi2.prototype.refreshInfiniteCache = function() {
        if (this.infiniteRowModel) {
          this.infiniteRowModel.refreshCache();
        } else {
          console.warn("AG Grid: api.refreshInfiniteCache is only available when rowModelType='infinite'.");
        }
      };
      GridApi2.prototype.purgeVirtualPageCache = function() {
        console.warn("AG Grid: purgeVirtualPageCache() is now called purgeInfiniteCache(), please call purgeInfiniteCache() instead");
        this.purgeInfinitePageCache();
      };
      GridApi2.prototype.purgeInfinitePageCache = function() {
        console.warn("AG Grid: purgeInfinitePageCache() is now called purgeInfiniteCache(), please call purgeInfiniteCache() instead");
        this.purgeInfiniteCache();
      };
      GridApi2.prototype.purgeInfiniteCache = function() {
        if (this.infiniteRowModel) {
          this.infiniteRowModel.purgeCache();
        } else {
          console.warn("AG Grid: api.purgeInfiniteCache is only available when rowModelType='infinite'.");
        }
      };
      GridApi2.prototype.purgeEnterpriseCache = function(route) {
        console.warn("AG Grid: since version 18.x, api.purgeEnterpriseCache() should be replaced with api.refreshServerSide({purge: true})");
        this.purgeServerSideCache(route);
      };
      GridApi2.prototype.purgeServerSideCache = function(route) {
        if (route === void 0) {
          route = [];
        }
        if (this.serverSideRowModel) {
          console.warn("AG Grid: since v25.0, api.purgeServerSideCache is deprecated. Please use api.refreshServerSide({purge: true}) instead.");
          this.refreshServerSide({
            route,
            purge: true
          });
        } else {
          console.warn("AG Grid: api.purgeServerSideCache is only available when rowModelType='serverSide'.");
        }
      };
      GridApi2.prototype.refreshServerSide = function(params) {
        if (!this.serverSideRowModel) {
          console.warn("AG Grid: api.refreshServerSide is only available when rowModelType='serverSide'.");
          return;
        }
        this.serverSideRowModel.refreshStore(params);
      };
      GridApi2.prototype.refreshServerSideStore = function(params) {
        var message2 = "AG Grid: Grid API refreshServerSideStore() was renamed to refreshServerSide() in v28.0";
        doOnce(function() {
          return console.warn(message2);
        }, "refreshServerSideStore-renamed");
        return this.refreshServerSide(params);
      };
      GridApi2.prototype.getServerSideStoreState = function() {
        var message2 = "AG Grid: Grid API getServerSideStoreState() was renamed to getServerSideGroupLevelState() in v28.0";
        doOnce(function() {
          return console.warn(message2);
        }, "getServerSideStoreState-renamed");
        return this.getServerSideGroupLevelState();
      };
      GridApi2.prototype.getServerSideGroupLevelState = function() {
        if (!this.serverSideRowModel) {
          console.warn("AG Grid: api.getServerSideGroupLevelState is only available when rowModelType='serverSide'.");
          return [];
        }
        return this.serverSideRowModel.getStoreState();
      };
      GridApi2.prototype.getVirtualRowCount = function() {
        console.warn("AG Grid: getVirtualRowCount() is now called getInfiniteRowCount(), please call getInfiniteRowCount() instead");
        return this.getInfiniteRowCount();
      };
      GridApi2.prototype.getInfiniteRowCount = function() {
        if (this.infiniteRowModel) {
          return this.infiniteRowModel.getRowCount();
        } else {
          console.warn("AG Grid: api.getVirtualRowCount is only available when rowModelType='virtual'.");
        }
      };
      GridApi2.prototype.isMaxRowFound = function() {
        console.warn("AG Grid: api.isMaxRowFound is deprecated, please use api.isLastRowIndexKnown()");
        return this.isLastRowIndexKnown();
      };
      GridApi2.prototype.isLastRowIndexKnown = function() {
        if (this.infiniteRowModel) {
          return this.infiniteRowModel.isLastRowIndexKnown();
        } else {
          console.warn("AG Grid: api.isMaxRowFound is only available when rowModelType='virtual'.");
        }
      };
      GridApi2.prototype.setVirtualRowCount = function(rowCount, maxRowFound) {
        console.warn("AG Grid: setVirtualRowCount() is now called setInfiniteRowCount(), please call setInfiniteRowCount() instead");
        this.setRowCount(rowCount, maxRowFound);
      };
      GridApi2.prototype.setInfiniteRowCount = function(rowCount, maxRowFound) {
        console.warn("AG Grid: setInfiniteRowCount() is now called setRowCount(), please call setRowCount() instead");
        this.setRowCount(rowCount, maxRowFound);
      };
      GridApi2.prototype.setRowCount = function(rowCount, maxRowFound) {
        if (this.infiniteRowModel) {
          this.infiniteRowModel.setRowCount(rowCount, maxRowFound);
        } else {
          console.warn("AG Grid: api.setRowCount is only available for Infinite Row Model.");
        }
      };
      GridApi2.prototype.getVirtualPageState = function() {
        console.warn("AG Grid: getVirtualPageState() is now called getCacheBlockState(), please call getCacheBlockState() instead");
        return this.getCacheBlockState();
      };
      GridApi2.prototype.getInfinitePageState = function() {
        console.warn("AG Grid: getInfinitePageState() is now called getCacheBlockState(), please call getCacheBlockState() instead");
        return this.getCacheBlockState();
      };
      GridApi2.prototype.getCacheBlockState = function() {
        return this.rowNodeBlockLoader.getBlockState();
      };
      GridApi2.prototype.checkGridSize = function() {
        console.warn("In AG Grid v25.2.0, checkGridSize() was removed, as it was legacy and didn't do anything useful.");
      };
      GridApi2.prototype.getFirstRenderedRow = function() {
        console.warn("In AG Grid v12, getFirstRenderedRow() was renamed to getFirstDisplayedRow()");
        return this.getFirstDisplayedRow();
      };
      GridApi2.prototype.getFirstDisplayedRow = function() {
        return this.rowRenderer.getFirstVirtualRenderedRow();
      };
      GridApi2.prototype.getLastRenderedRow = function() {
        console.warn("in AG Grid v12, getLastRenderedRow() was renamed to getLastDisplayedRow()");
        return this.getLastDisplayedRow();
      };
      GridApi2.prototype.getLastDisplayedRow = function() {
        return this.rowRenderer.getLastVirtualRenderedRow();
      };
      GridApi2.prototype.getDisplayedRowAtIndex = function(index) {
        return this.rowModel.getRow(index);
      };
      GridApi2.prototype.getDisplayedRowCount = function() {
        return this.rowModel.getRowCount();
      };
      GridApi2.prototype.paginationIsLastPageFound = function() {
        return this.paginationProxy.isLastPageFound();
      };
      GridApi2.prototype.paginationGetPageSize = function() {
        return this.paginationProxy.getPageSize();
      };
      GridApi2.prototype.paginationSetPageSize = function(size) {
        this.gridOptionsWrapper.setProperty("paginationPageSize", size);
      };
      GridApi2.prototype.paginationGetCurrentPage = function() {
        return this.paginationProxy.getCurrentPage();
      };
      GridApi2.prototype.paginationGetTotalPages = function() {
        return this.paginationProxy.getTotalPages();
      };
      GridApi2.prototype.paginationGetRowCount = function() {
        return this.paginationProxy.getMasterRowCount();
      };
      GridApi2.prototype.paginationGoToNextPage = function() {
        this.paginationProxy.goToNextPage();
      };
      GridApi2.prototype.paginationGoToPreviousPage = function() {
        this.paginationProxy.goToPreviousPage();
      };
      GridApi2.prototype.paginationGoToFirstPage = function() {
        this.paginationProxy.goToFirstPage();
      };
      GridApi2.prototype.paginationGoToLastPage = function() {
        this.paginationProxy.goToLastPage();
      };
      GridApi2.prototype.paginationGoToPage = function(page) {
        this.paginationProxy.goToPage(page);
      };
      GridApi2.prototype.setRowClass = function(className) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_ROW_CLASS, className);
      };
      __decorate$1r([
        Optional("immutableService")
      ], GridApi2.prototype, "immutableService", void 0);
      __decorate$1r([
        Optional("csvCreator")
      ], GridApi2.prototype, "csvCreator", void 0);
      __decorate$1r([
        Optional("excelCreator")
      ], GridApi2.prototype, "excelCreator", void 0);
      __decorate$1r([
        Autowired("rowRenderer")
      ], GridApi2.prototype, "rowRenderer", void 0);
      __decorate$1r([
        Autowired("navigationService")
      ], GridApi2.prototype, "navigationService", void 0);
      __decorate$1r([
        Autowired("filterManager")
      ], GridApi2.prototype, "filterManager", void 0);
      __decorate$1r([
        Autowired("columnModel")
      ], GridApi2.prototype, "columnModel", void 0);
      __decorate$1r([
        Autowired("selectionService")
      ], GridApi2.prototype, "selectionService", void 0);
      __decorate$1r([
        Autowired("gridOptionsWrapper")
      ], GridApi2.prototype, "gridOptionsWrapper", void 0);
      __decorate$1r([
        Autowired("valueService")
      ], GridApi2.prototype, "valueService", void 0);
      __decorate$1r([
        Autowired("alignedGridsService")
      ], GridApi2.prototype, "alignedGridsService", void 0);
      __decorate$1r([
        Autowired("eventService")
      ], GridApi2.prototype, "eventService", void 0);
      __decorate$1r([
        Autowired("pinnedRowModel")
      ], GridApi2.prototype, "pinnedRowModel", void 0);
      __decorate$1r([
        Autowired("context")
      ], GridApi2.prototype, "context", void 0);
      __decorate$1r([
        Autowired("rowModel")
      ], GridApi2.prototype, "rowModel", void 0);
      __decorate$1r([
        Autowired("sortController")
      ], GridApi2.prototype, "sortController", void 0);
      __decorate$1r([
        Autowired("paginationProxy")
      ], GridApi2.prototype, "paginationProxy", void 0);
      __decorate$1r([
        Autowired("focusService")
      ], GridApi2.prototype, "focusService", void 0);
      __decorate$1r([
        Autowired("dragAndDropService")
      ], GridApi2.prototype, "dragAndDropService", void 0);
      __decorate$1r([
        Optional("rangeService")
      ], GridApi2.prototype, "rangeService", void 0);
      __decorate$1r([
        Optional("clipboardService")
      ], GridApi2.prototype, "clipboardService", void 0);
      __decorate$1r([
        Optional("aggFuncService")
      ], GridApi2.prototype, "aggFuncService", void 0);
      __decorate$1r([
        Autowired("menuFactory")
      ], GridApi2.prototype, "menuFactory", void 0);
      __decorate$1r([
        Optional("contextMenuFactory")
      ], GridApi2.prototype, "contextMenuFactory", void 0);
      __decorate$1r([
        Autowired("valueCache")
      ], GridApi2.prototype, "valueCache", void 0);
      __decorate$1r([
        Autowired("animationFrameService")
      ], GridApi2.prototype, "animationFrameService", void 0);
      __decorate$1r([
        Optional("statusBarService")
      ], GridApi2.prototype, "statusBarService", void 0);
      __decorate$1r([
        Optional("chartService")
      ], GridApi2.prototype, "chartService", void 0);
      __decorate$1r([
        Optional("undoRedoService")
      ], GridApi2.prototype, "undoRedoService", void 0);
      __decorate$1r([
        Optional("rowNodeBlockLoader")
      ], GridApi2.prototype, "rowNodeBlockLoader", void 0);
      __decorate$1r([
        Optional("ssrmTransactionManager")
      ], GridApi2.prototype, "serverSideTransactionManager", void 0);
      __decorate$1r([
        Autowired("ctrlsService")
      ], GridApi2.prototype, "ctrlsService", void 0);
      __decorate$1r([
        Optional("frameworkComponentWrapper")
      ], GridApi2.prototype, "frameworkComponentWrapper", void 0);
      __decorate$1r([
        PostConstruct
      ], GridApi2.prototype, "init", null);
      __decorate$1r([
        PreDestroy
      ], GridApi2.prototype, "cleanDownReferencesToAvoidMemoryLeakInCaseApplicationIsKeepingReferenceToDestroyedGrid", null);
      GridApi2 = __decorate$1r([
        Bean("gridApi")
      ], GridApi2);
      return GridApi2;
    }();
    __extends$1y = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1q = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    SetLeftFeature = function(_super) {
      __extends$1y(SetLeftFeature2, _super);
      function SetLeftFeature2(columnOrGroup, eCell, beans, colsSpanning) {
        var _this = _super.call(this) || this;
        _this.columnOrGroup = columnOrGroup;
        _this.eCell = eCell;
        _this.ariaEl = _this.eCell.querySelector("[role=columnheader]") || _this.eCell;
        _this.colsSpanning = colsSpanning;
        _this.beans = beans;
        return _this;
      }
      SetLeftFeature2.prototype.setColsSpanning = function(colsSpanning) {
        this.colsSpanning = colsSpanning;
        this.onLeftChanged();
      };
      SetLeftFeature2.prototype.getColumnOrGroup = function() {
        if (this.beans.gridOptionsWrapper.isEnableRtl() && this.colsSpanning) {
          return last(this.colsSpanning);
        }
        return this.columnOrGroup;
      };
      SetLeftFeature2.prototype.postConstruct = function() {
        this.addManagedListener(this.columnOrGroup, Column.EVENT_LEFT_CHANGED, this.onLeftChanged.bind(this));
        this.setLeftFirstTime();
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onLeftChanged.bind(this));
        this.addManagedListener(this.beans.gridOptionsWrapper, GridOptionsWrapper.PROP_DOM_LAYOUT, this.onLeftChanged.bind(this));
      };
      SetLeftFeature2.prototype.setLeftFirstTime = function() {
        var suppressMoveAnimation = this.beans.gridOptionsWrapper.isSuppressColumnMoveAnimation();
        var oldLeftExists = exists(this.columnOrGroup.getOldLeft());
        var animateColumnMove = this.beans.columnAnimationService.isActive() && oldLeftExists && !suppressMoveAnimation;
        if (animateColumnMove) {
          this.animateInLeft();
        } else {
          this.onLeftChanged();
        }
      };
      SetLeftFeature2.prototype.animateInLeft = function() {
        var _this = this;
        var colOrGroup = this.getColumnOrGroup();
        var left = colOrGroup.getLeft();
        var oldLeft = colOrGroup.getOldLeft();
        var oldActualLeft = this.modifyLeftForPrintLayout(colOrGroup, oldLeft);
        var actualLeft = this.modifyLeftForPrintLayout(colOrGroup, left);
        this.setLeft(oldActualLeft);
        this.actualLeft = actualLeft;
        this.beans.columnAnimationService.executeNextVMTurn(function() {
          if (_this.actualLeft === actualLeft) {
            _this.setLeft(actualLeft);
          }
        });
      };
      SetLeftFeature2.prototype.onLeftChanged = function() {
        var colOrGroup = this.getColumnOrGroup();
        var left = colOrGroup.getLeft();
        this.actualLeft = this.modifyLeftForPrintLayout(colOrGroup, left);
        this.setLeft(this.actualLeft);
      };
      SetLeftFeature2.prototype.modifyLeftForPrintLayout = function(colOrGroup, leftPosition) {
        var printLayout = this.beans.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;
        if (!printLayout) {
          return leftPosition;
        }
        if (colOrGroup.getPinned() === Constants.PINNED_LEFT) {
          return leftPosition;
        }
        var leftWidth = this.beans.columnModel.getDisplayedColumnsLeftWidth();
        if (colOrGroup.getPinned() === Constants.PINNED_RIGHT) {
          var bodyWidth = this.beans.columnModel.getBodyContainerWidth();
          return leftWidth + bodyWidth + leftPosition;
        }
        return leftWidth + leftPosition;
      };
      SetLeftFeature2.prototype.setLeft = function(value) {
        if (exists(value)) {
          this.eCell.style.left = value + "px";
        }
        var indexColumn;
        if (this.columnOrGroup instanceof Column) {
          indexColumn = this.columnOrGroup;
        } else {
          var columnGroup = this.columnOrGroup;
          var children = columnGroup.getLeafColumns();
          if (!children.length) {
            return;
          }
          if (children.length > 1) {
            setAriaColSpan(this.ariaEl, children.length);
          }
          indexColumn = children[0];
        }
        var index = this.beans.columnModel.getAriaColumnIndex(indexColumn);
        setAriaColIndex(this.ariaEl, index);
      };
      __decorate$1q([
        PostConstruct
      ], SetLeftFeature2.prototype, "postConstruct", null);
      return SetLeftFeature2;
    }(BeanStub);
    __extends$1x = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1p = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    HoverFeature = function(_super) {
      __extends$1x(HoverFeature2, _super);
      function HoverFeature2(columns, element) {
        var _this = _super.call(this) || this;
        _this.columns = columns;
        _this.element = element;
        return _this;
      }
      HoverFeature2.prototype.postConstruct = function() {
        if (this.gridOptionsWrapper.isColumnHoverHighlight()) {
          this.addMouseHoverListeners();
        }
      };
      HoverFeature2.prototype.addMouseHoverListeners = function() {
        this.addManagedListener(this.element, "mouseout", this.onMouseOut.bind(this));
        this.addManagedListener(this.element, "mouseover", this.onMouseOver.bind(this));
      };
      HoverFeature2.prototype.onMouseOut = function() {
        this.columnHoverService.clearMouseOver();
      };
      HoverFeature2.prototype.onMouseOver = function() {
        this.columnHoverService.setMouseOver(this.columns);
      };
      __decorate$1p([
        Autowired("columnHoverService")
      ], HoverFeature2.prototype, "columnHoverService", void 0);
      __decorate$1p([
        PostConstruct
      ], HoverFeature2.prototype, "postConstruct", null);
      return HoverFeature2;
    }(BeanStub);
    __extends$1w = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1o = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    HeaderFilterCellCtrl = function(_super) {
      __extends$1w(HeaderFilterCellCtrl2, _super);
      function HeaderFilterCellCtrl2(column, parentRowCtrl) {
        var _this = _super.call(this, column, parentRowCtrl) || this;
        _this.column = column;
        return _this;
      }
      HeaderFilterCellCtrl2.prototype.setComp = function(comp, eGui, eButtonShowMainFilter, eFloatingFilterBody) {
        _super.prototype.setGui.call(this, eGui);
        this.comp = comp;
        this.eButtonShowMainFilter = eButtonShowMainFilter;
        this.eFloatingFilterBody = eFloatingFilterBody;
        var colDef = this.column.getColDef();
        var filterExists = !!colDef.filter || !!colDef.filterFramework;
        var floatingFilterExists = !!colDef.floatingFilter;
        this.active = filterExists && floatingFilterExists;
        this.setupWidth();
        this.setupLeft();
        this.setupHover();
        this.setupFocus();
        this.setupUserComp();
        this.setupSyncWithFilter();
        this.setupUi();
        this.addManagedListener(this.eButtonShowMainFilter, "click", this.showParentFilter.bind(this));
      };
      HeaderFilterCellCtrl2.prototype.setupUi = function() {
        this.comp.addOrRemoveButtonWrapperCssClass("ag-hidden", !this.active || this.suppressFilterButton);
        if (!this.active) {
          return;
        }
        this.comp.addOrRemoveBodyCssClass("ag-floating-filter-full-body", this.suppressFilterButton);
        this.comp.addOrRemoveBodyCssClass("ag-floating-filter-body", !this.suppressFilterButton);
        var eMenuIcon = createIconNoSpan("filter", this.gridOptionsWrapper, this.column);
        if (eMenuIcon) {
          this.eButtonShowMainFilter.appendChild(eMenuIcon);
        }
      };
      HeaderFilterCellCtrl2.prototype.setupFocus = function() {
        this.createManagedBean(new ManagedFocusFeature(this.eGui, {
          shouldStopEventPropagation: this.shouldStopEventPropagation.bind(this),
          onTabKeyDown: this.onTabKeyDown.bind(this),
          handleKeyDown: this.handleKeyDown.bind(this),
          onFocusIn: this.onFocusIn.bind(this)
        }));
      };
      HeaderFilterCellCtrl2.prototype.onTabKeyDown = function(e) {
        var eDocument = this.gridOptionsWrapper.getDocument();
        var activeEl = eDocument.activeElement;
        var wrapperHasFocus = activeEl === this.eGui;
        if (wrapperHasFocus) {
          return;
        }
        var nextFocusableEl = this.focusService.findNextFocusableElement(this.eGui, null, e.shiftKey);
        if (nextFocusableEl) {
          this.beans.headerNavigationService.scrollToColumn(this.column);
          e.preventDefault();
          nextFocusableEl.focus();
          return;
        }
        var nextFocusableColumn = this.findNextColumnWithFloatingFilter(e.shiftKey);
        if (!nextFocusableColumn) {
          return;
        }
        if (this.focusService.focusHeaderPosition({
          headerPosition: {
            headerRowIndex: this.getParentRowCtrl().getRowIndex(),
            column: nextFocusableColumn
          },
          event: e
        })) {
          e.preventDefault();
        }
      };
      HeaderFilterCellCtrl2.prototype.findNextColumnWithFloatingFilter = function(backwards) {
        var columModel = this.beans.columnModel;
        var nextCol = this.column;
        do {
          nextCol = backwards ? columModel.getDisplayedColBefore(nextCol) : columModel.getDisplayedColAfter(nextCol);
          if (!nextCol) {
            break;
          }
        } while (!nextCol.getColDef().filter || !nextCol.getColDef().floatingFilter);
        return nextCol;
      };
      HeaderFilterCellCtrl2.prototype.handleKeyDown = function(e) {
        _super.prototype.handleKeyDown.call(this, e);
        var wrapperHasFocus = this.getWrapperHasFocus();
        switch (e.key) {
          case KeyCode.UP:
          case KeyCode.DOWN:
            if (!wrapperHasFocus) {
              e.preventDefault();
            }
          case KeyCode.LEFT:
          case KeyCode.RIGHT:
            if (wrapperHasFocus) {
              return;
            }
            e.stopPropagation();
          case KeyCode.ENTER:
            if (wrapperHasFocus) {
              if (this.focusService.focusInto(this.eGui)) {
                e.preventDefault();
              }
            }
            break;
          case KeyCode.ESCAPE:
            if (!wrapperHasFocus) {
              this.eGui.focus();
            }
        }
      };
      HeaderFilterCellCtrl2.prototype.onFocusIn = function(e) {
        var isRelatedWithin = this.eGui.contains(e.relatedTarget);
        if (isRelatedWithin) {
          return;
        }
        var notFromHeaderWrapper = !!e.relatedTarget && !e.relatedTarget.classList.contains("ag-floating-filter");
        var fromWithinHeader = !!e.relatedTarget && isElementChildOfClass(e.relatedTarget, "ag-floating-filter");
        if (notFromHeaderWrapper && fromWithinHeader && e.target === this.eGui) {
          var lastFocusEvent = this.lastFocusEvent;
          var fromTab = !!(lastFocusEvent && lastFocusEvent.key === KeyCode.TAB);
          if (lastFocusEvent && fromTab) {
            var shouldFocusLast = lastFocusEvent.shiftKey;
            this.focusService.focusInto(this.eGui, shouldFocusLast);
          }
        }
        var rowIndex = this.getRowIndex();
        this.beans.focusService.setFocusedHeader(rowIndex, this.column);
      };
      HeaderFilterCellCtrl2.prototype.setupHover = function() {
        var _this = this;
        this.createManagedBean(new HoverFeature([this.column], this.eGui));
        var listener = function() {
          if (!_this.gridOptionsWrapper.isColumnHoverHighlight()) {
            return;
          }
          var hovered = _this.columnHoverService.isHovered(_this.column);
          _this.comp.addOrRemoveCssClass("ag-column-hover", hovered);
        };
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_HOVER_CHANGED, listener);
        listener();
      };
      HeaderFilterCellCtrl2.prototype.setupLeft = function() {
        var setLeftFeature = new SetLeftFeature(this.column, this.eGui, this.beans);
        this.createManagedBean(setLeftFeature);
      };
      HeaderFilterCellCtrl2.prototype.setupUserComp = function() {
        var _this = this;
        if (!this.active) {
          return;
        }
        var colDef = this.column.getColDef();
        var filterParams = this.filterManager.createFilterParams(this.column, colDef);
        var finalFilterParams = this.userComponentFactory.mergeParamsWithApplicationProvidedParams(colDef, FilterComponent, filterParams);
        var defaultFloatingFilterType = this.userComponentFactory.getDefaultFloatingFilterType(colDef);
        if (defaultFloatingFilterType == null) {
          defaultFloatingFilterType = "agReadOnlyFloatingFilter";
        }
        var params = {
          column: this.column,
          filterParams: finalFilterParams,
          currentParentModel: function() {
            return _this.currentParentModel();
          },
          parentFilterInstance: function(cb) {
            return _this.parentFilterInstance(cb);
          },
          showParentFilter: function() {
            return _this.showParentFilter();
          },
          suppressFilterButton: false
        };
        this.suppressFilterButton = colDef.floatingFilterComponentParams ? !!colDef.floatingFilterComponentParams.suppressFilterButton : false;
        var compDetails = this.userComponentFactory.getFloatingFilterCompDetails(colDef, params, defaultFloatingFilterType);
        if (compDetails) {
          this.comp.setCompDetails(compDetails);
        }
      };
      HeaderFilterCellCtrl2.prototype.currentParentModel = function() {
        var filterComponent = this.getFilterComponent(false);
        return filterComponent ? filterComponent.resolveNow(null, function(filter) {
          return filter && filter.getModel();
        }) : null;
      };
      HeaderFilterCellCtrl2.prototype.getFilterComponent = function(createIfDoesNotExist) {
        if (createIfDoesNotExist === void 0) {
          createIfDoesNotExist = true;
        }
        return this.filterManager.getFilterComponent(this.column, "NO_UI", createIfDoesNotExist);
      };
      HeaderFilterCellCtrl2.prototype.parentFilterInstance = function(callback) {
        var filterComponent = this.getFilterComponent();
        if (filterComponent == null) {
          return;
        }
        filterComponent.then(function(instance) {
          callback(unwrapUserComp(instance));
        });
      };
      HeaderFilterCellCtrl2.prototype.showParentFilter = function() {
        var eventSource = this.suppressFilterButton ? this.eFloatingFilterBody : this.eButtonShowMainFilter;
        this.menuFactory.showMenuAfterButtonClick(this.column, eventSource, "floatingFilter", "filterMenuTab", ["filterMenuTab"]);
      };
      HeaderFilterCellCtrl2.prototype.setupSyncWithFilter = function() {
        var _this = this;
        if (!this.active) {
          return;
        }
        var syncWithFilter = function(filterChangedEvent) {
          var compPromise = _this.comp.getFloatingFilterComp();
          if (!compPromise) {
            return;
          }
          var parentModel = _this.currentParentModel();
          compPromise.then(function(comp) {
            if (comp) {
              comp.onParentModelChanged(parentModel, filterChangedEvent);
            }
          });
        };
        this.addManagedListener(this.column, Column.EVENT_FILTER_CHANGED, syncWithFilter);
        if (this.filterManager.isFilterActive(this.column)) {
          syncWithFilter(null);
        }
      };
      HeaderFilterCellCtrl2.prototype.setupWidth = function() {
        var _this = this;
        var listener = function() {
          var width = _this.column.getActualWidth() + "px";
          _this.comp.setWidth(width);
        };
        this.addManagedListener(this.column, Column.EVENT_WIDTH_CHANGED, listener);
        listener();
      };
      __decorate$1o([
        Autowired("filterManager")
      ], HeaderFilterCellCtrl2.prototype, "filterManager", void 0);
      __decorate$1o([
        Autowired("columnHoverService")
      ], HeaderFilterCellCtrl2.prototype, "columnHoverService", void 0);
      __decorate$1o([
        Autowired("menuFactory")
      ], HeaderFilterCellCtrl2.prototype, "menuFactory", void 0);
      return HeaderFilterCellCtrl2;
    }(AbstractHeaderCellCtrl);
    __extends$1v = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1n = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    ResizeFeature = function(_super) {
      __extends$1v(ResizeFeature2, _super);
      function ResizeFeature2(pinned, column, eResize, comp, ctrl) {
        var _this = _super.call(this) || this;
        _this.pinned = pinned;
        _this.column = column;
        _this.eResize = eResize;
        _this.comp = comp;
        _this.ctrl = ctrl;
        return _this;
      }
      ResizeFeature2.prototype.postConstruct = function() {
        var _this = this;
        var colDef = this.column.getColDef();
        var destroyResizeFuncs = [];
        var canResize;
        var canAutosize;
        var addResize = function() {
          setDisplayed(_this.eResize, canResize);
          if (!canResize) {
            return;
          }
          var finishedWithResizeFunc = _this.horizontalResizeService.addResizeBar({
            eResizeBar: _this.eResize,
            onResizeStart: _this.onResizeStart.bind(_this),
            onResizing: _this.onResizing.bind(_this, false),
            onResizeEnd: _this.onResizing.bind(_this, true)
          });
          destroyResizeFuncs.push(finishedWithResizeFunc);
          if (canAutosize) {
            var skipHeaderOnAutoSize_1 = _this.gridOptionsWrapper.isSkipHeaderOnAutoSize();
            var autoSizeColListener_1 = function() {
              _this.columnModel.autoSizeColumn(_this.column, skipHeaderOnAutoSize_1, "uiColumnResized");
            };
            _this.eResize.addEventListener("dblclick", autoSizeColListener_1);
            var touchListener_1 = new TouchListener(_this.eResize);
            touchListener_1.addEventListener(TouchListener.EVENT_DOUBLE_TAP, autoSizeColListener_1);
            _this.addDestroyFunc(function() {
              _this.eResize.removeEventListener("dblclick", autoSizeColListener_1);
              touchListener_1.removeEventListener(TouchListener.EVENT_DOUBLE_TAP, autoSizeColListener_1);
              touchListener_1.destroy();
            });
          }
        };
        var removeResize = function() {
          destroyResizeFuncs.forEach(function(f) {
            return f();
          });
          destroyResizeFuncs.length = 0;
        };
        var refresh = function() {
          var resize = _this.column.isResizable();
          var autoSize = !_this.gridOptionsWrapper.isSuppressAutoSize() && !colDef.suppressAutoSize;
          var propertyChange = resize !== canResize || autoSize !== canAutosize;
          if (propertyChange) {
            canResize = resize;
            canAutosize = autoSize;
            removeResize();
            addResize();
          }
        };
        refresh();
        this.addDestroyFunc(removeResize);
        this.ctrl.addRefreshFunction(refresh);
      };
      ResizeFeature2.prototype.onResizing = function(finished, resizeAmount) {
        var resizeAmountNormalised = this.normaliseResizeAmount(resizeAmount);
        var columnWidths = [{ key: this.column, newWidth: this.resizeStartWidth + resizeAmountNormalised }];
        this.columnModel.setColumnWidths(columnWidths, this.resizeWithShiftKey, finished, "uiColumnDragged");
        if (finished) {
          this.comp.addOrRemoveCssClass("ag-column-resizing", false);
        }
      };
      ResizeFeature2.prototype.onResizeStart = function(shiftKey) {
        this.resizeStartWidth = this.column.getActualWidth();
        this.resizeWithShiftKey = shiftKey;
        this.comp.addOrRemoveCssClass("ag-column-resizing", true);
      };
      ResizeFeature2.prototype.normaliseResizeAmount = function(dragChange) {
        var result = dragChange;
        var notPinningLeft = this.pinned !== Constants.PINNED_LEFT;
        var pinningRight = this.pinned === Constants.PINNED_RIGHT;
        if (this.gridOptionsWrapper.isEnableRtl()) {
          if (notPinningLeft) {
            result *= -1;
          }
        } else {
          if (pinningRight) {
            result *= -1;
          }
        }
        return result;
      };
      __decorate$1n([
        Autowired("horizontalResizeService")
      ], ResizeFeature2.prototype, "horizontalResizeService", void 0);
      __decorate$1n([
        Autowired("columnModel")
      ], ResizeFeature2.prototype, "columnModel", void 0);
      __decorate$1n([
        PostConstruct
      ], ResizeFeature2.prototype, "postConstruct", null);
      return ResizeFeature2;
    }(BeanStub);
    __extends$1u = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    AgCheckbox = function(_super) {
      __extends$1u(AgCheckbox2, _super);
      function AgCheckbox2(config, className, inputType) {
        if (className === void 0) {
          className = "ag-checkbox";
        }
        if (inputType === void 0) {
          inputType = "checkbox";
        }
        var _this = _super.call(this, config, className, inputType) || this;
        _this.labelAlignment = "right";
        _this.selected = false;
        _this.readOnly = false;
        _this.passive = false;
        return _this;
      }
      AgCheckbox2.prototype.addInputListeners = function() {
        this.addManagedListener(this.eInput, "click", this.onCheckboxClick.bind(this));
        this.addManagedListener(this.eLabel, "click", this.toggle.bind(this));
      };
      AgCheckbox2.prototype.getNextValue = function() {
        return this.selected === void 0 ? true : !this.selected;
      };
      AgCheckbox2.prototype.setPassive = function(passive) {
        this.passive = passive;
      };
      AgCheckbox2.prototype.isReadOnly = function() {
        return this.readOnly;
      };
      AgCheckbox2.prototype.setReadOnly = function(readOnly) {
        this.eWrapper.classList.toggle("ag-disabled", readOnly);
        this.eInput.disabled = readOnly;
        this.readOnly = readOnly;
      };
      AgCheckbox2.prototype.setDisabled = function(disabled) {
        this.eWrapper.classList.toggle("ag-disabled", disabled);
        return _super.prototype.setDisabled.call(this, disabled);
      };
      AgCheckbox2.prototype.toggle = function() {
        if (this.eInput.disabled) {
          return;
        }
        var previousValue = this.isSelected();
        var nextValue = this.getNextValue();
        if (this.passive) {
          this.dispatchChange(nextValue, previousValue);
        } else {
          this.setValue(nextValue);
        }
      };
      AgCheckbox2.prototype.getValue = function() {
        return this.isSelected();
      };
      AgCheckbox2.prototype.setValue = function(value, silent) {
        this.refreshSelectedClass(value);
        this.setSelected(value, silent);
        return this;
      };
      AgCheckbox2.prototype.setName = function(name) {
        var input = this.getInputElement();
        input.name = name;
        return this;
      };
      AgCheckbox2.prototype.isSelected = function() {
        return this.selected;
      };
      AgCheckbox2.prototype.setSelected = function(selected, silent) {
        if (this.isSelected() === selected) {
          return;
        }
        this.previousValue = this.isSelected();
        selected = this.selected = typeof selected === "boolean" ? selected : void 0;
        this.eInput.checked = selected;
        this.eInput.indeterminate = selected === void 0;
        if (!silent) {
          this.dispatchChange(this.selected, this.previousValue);
        }
      };
      AgCheckbox2.prototype.dispatchChange = function(selected, previousValue, event) {
        this.dispatchEvent({ type: AgCheckbox2.EVENT_CHANGED, selected, previousValue, event });
        var input = this.getInputElement();
        var checkboxChangedEvent = {
          type: Events.EVENT_CHECKBOX_CHANGED,
          id: input.id,
          name: input.name,
          selected,
          previousValue
        };
        this.eventService.dispatchEvent(checkboxChangedEvent);
      };
      AgCheckbox2.prototype.onCheckboxClick = function(e) {
        if (this.passive || this.eInput.disabled) {
          return;
        }
        var previousValue = this.isSelected();
        var selected = this.selected = e.target.checked;
        this.refreshSelectedClass(selected);
        this.dispatchChange(selected, previousValue, e);
      };
      AgCheckbox2.prototype.refreshSelectedClass = function(value) {
        this.eWrapper.classList.toggle("ag-checked", value === true);
        this.eWrapper.classList.toggle("ag-indeterminate", value == null);
      };
      return AgCheckbox2;
    }(AgAbstractInputField);
    __extends$1t = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1m = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    SelectAllFeature = function(_super) {
      __extends$1t(SelectAllFeature2, _super);
      function SelectAllFeature2(column) {
        var _this = _super.call(this) || this;
        _this.cbSelectAllVisible = false;
        _this.processingEventFromCheckbox = false;
        _this.column = column;
        var colDef = column.getColDef();
        _this.filteredOnly = colDef ? !!colDef.headerCheckboxSelectionFilteredOnly : false;
        return _this;
      }
      SelectAllFeature2.prototype.onSpaceKeyPressed = function(e) {
        var checkbox = this.cbSelectAll;
        var eDocument = this.gridOptionsWrapper.getDocument();
        if (checkbox.isDisplayed() && !checkbox.getGui().contains(eDocument.activeElement)) {
          e.preventDefault();
          checkbox.setValue(!checkbox.getValue());
        }
      };
      SelectAllFeature2.prototype.getCheckboxGui = function() {
        return this.cbSelectAll.getGui();
      };
      SelectAllFeature2.prototype.setComp = function(ctrl) {
        this.headerCellCtrl = ctrl;
        this.cbSelectAll = this.createManagedBean(new AgCheckbox());
        this.cbSelectAll.addCssClass("ag-header-select-all");
        setAriaRole(this.cbSelectAll.getGui(), "presentation");
        this.showOrHideSelectAll();
        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.showOrHideSelectAll.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.showOrHideSelectAll.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_SELECTION_CHANGED, this.onSelectionChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, this.onModelChanged.bind(this));
        this.addManagedListener(this.cbSelectAll, AgCheckbox.EVENT_CHANGED, this.onCbSelectAll.bind(this));
        setAriaHidden(this.cbSelectAll.getGui(), true);
        this.cbSelectAll.getInputElement().setAttribute("tabindex", "-1");
        this.refreshSelectAllLabel();
      };
      SelectAllFeature2.prototype.showOrHideSelectAll = function() {
        this.cbSelectAllVisible = this.isCheckboxSelection();
        this.cbSelectAll.setDisplayed(this.cbSelectAllVisible);
        if (this.cbSelectAllVisible) {
          this.checkRightRowModelType();
          this.updateStateOfCheckbox();
        }
        this.refreshSelectAllLabel();
      };
      SelectAllFeature2.prototype.onModelChanged = function() {
        if (!this.cbSelectAllVisible) {
          return;
        }
        this.updateStateOfCheckbox();
      };
      SelectAllFeature2.prototype.onSelectionChanged = function() {
        if (!this.cbSelectAllVisible) {
          return;
        }
        this.updateStateOfCheckbox();
      };
      SelectAllFeature2.prototype.getNextCheckboxState = function(selectionCount) {
        if (selectionCount.selected === 0 && selectionCount.notSelected === 0) {
          return false;
        }
        if (selectionCount.selected > 0 && selectionCount.notSelected > 0) {
          return null;
        }
        if (selectionCount.selected > 0) {
          return true;
        }
        return false;
      };
      SelectAllFeature2.prototype.updateStateOfCheckbox = function() {
        if (this.processingEventFromCheckbox) {
          return;
        }
        this.processingEventFromCheckbox = true;
        var selectionCount = this.getSelectionCount();
        var allSelected = this.getNextCheckboxState(selectionCount);
        this.cbSelectAll.setValue(allSelected);
        this.refreshSelectAllLabel();
        this.processingEventFromCheckbox = false;
      };
      SelectAllFeature2.prototype.refreshSelectAllLabel = function() {
        if (!this.cbSelectAllVisible) {
          this.headerCellCtrl.setAriaDescriptionProperty("selectAll", null);
          this.cbSelectAll.setInputAriaLabel(null);
        } else {
          var translate = this.gridOptionsWrapper.getLocaleTextFunc();
          var checked = this.cbSelectAll.getValue();
          var ariaStatus = checked ? translate("ariaChecked", "checked") : translate("ariaUnchecked", "unchecked");
          var ariaLabel = translate("ariaRowSelectAll", "Press Space to toggle all rows selection");
          this.headerCellCtrl.setAriaDescriptionProperty("selectAll", ariaLabel + " (" + ariaStatus + ")");
          this.cbSelectAll.setInputAriaLabel(ariaLabel + " (" + ariaStatus + ")");
        }
        this.headerCellCtrl.refreshAriaDescription();
      };
      SelectAllFeature2.prototype.getSelectionCount = function() {
        var _this = this;
        var selectedCount = 0;
        var notSelectedCount = 0;
        var callback = function(node) {
          if (_this.gridOptionsWrapper.isGroupSelectsChildren() && node.group) {
            return;
          }
          if (node.isSelected()) {
            selectedCount++;
          } else if (!node.selectable)
            ;
          else {
            notSelectedCount++;
          }
        };
        if (this.filteredOnly) {
          this.gridApi.forEachNodeAfterFilter(callback);
        } else {
          this.gridApi.forEachNode(callback);
        }
        return {
          notSelected: notSelectedCount,
          selected: selectedCount
        };
      };
      SelectAllFeature2.prototype.checkRightRowModelType = function() {
        var rowModelType = this.rowModel.getType();
        var rowModelMatches = rowModelType === Constants.ROW_MODEL_TYPE_CLIENT_SIDE;
        if (!rowModelMatches) {
          console.warn("AG Grid: selectAllCheckbox is only available if using normal row model, you are using " + rowModelType);
        }
      };
      SelectAllFeature2.prototype.onCbSelectAll = function() {
        if (this.processingEventFromCheckbox) {
          return;
        }
        if (!this.cbSelectAllVisible) {
          return;
        }
        var value = this.cbSelectAll.getValue();
        if (value) {
          this.selectionService.selectAllRowNodes(this.filteredOnly);
        } else {
          this.selectionService.deselectAllRowNodes(this.filteredOnly);
        }
      };
      SelectAllFeature2.prototype.isCheckboxSelection = function() {
        var result = this.column.getColDef().headerCheckboxSelection;
        if (typeof result === "function") {
          var func = result;
          var params = {
            column: this.column,
            colDef: this.column.getColDef(),
            columnApi: this.columnApi,
            api: this.gridApi,
            context: this.gridOptionsWrapper.getContext()
          };
          result = func(params);
        }
        if (result) {
          if (this.gridOptionsWrapper.isRowModelServerSide()) {
            console.warn("AG Grid: headerCheckboxSelection is not supported for Server Side Row Model");
            return false;
          }
          if (this.gridOptionsWrapper.isRowModelInfinite()) {
            console.warn("AG Grid: headerCheckboxSelection is not supported for Infinite Row Model");
            return false;
          }
          if (this.gridOptionsWrapper.isRowModelViewport()) {
            console.warn("AG Grid: headerCheckboxSelection is not supported for Viewport Row Model");
            return false;
          }
          return true;
        }
        return false;
      };
      __decorate$1m([
        Autowired("gridApi")
      ], SelectAllFeature2.prototype, "gridApi", void 0);
      __decorate$1m([
        Autowired("columnApi")
      ], SelectAllFeature2.prototype, "columnApi", void 0);
      __decorate$1m([
        Autowired("rowModel")
      ], SelectAllFeature2.prototype, "rowModel", void 0);
      __decorate$1m([
        Autowired("selectionService")
      ], SelectAllFeature2.prototype, "selectionService", void 0);
      return SelectAllFeature2;
    }(BeanStub);
    __extends$1s = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1l = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    HeaderCellCtrl = function(_super) {
      __extends$1s(HeaderCellCtrl2, _super);
      function HeaderCellCtrl2(column, parentRowCtrl) {
        var _this = _super.call(this, column, parentRowCtrl) || this;
        _this.refreshFunctions = [];
        _this.userHeaderClasses = /* @__PURE__ */ new Set();
        _this.ariaDescriptionProperties = /* @__PURE__ */ new Map();
        _this.column = column;
        return _this;
      }
      HeaderCellCtrl2.prototype.setComp = function(comp, eGui, eResize, eHeaderCompWrapper) {
        var _this = this;
        _super.prototype.setGui.call(this, eGui);
        this.comp = comp;
        this.updateState();
        this.setupWidth();
        this.setupMovingCss();
        this.setupMenuClass();
        this.setupSortableClass();
        this.setupWrapTextClass();
        this.setupAutoHeight(eHeaderCompWrapper);
        this.addColumnHoverListener();
        this.setupFilterCss();
        this.setupColId();
        this.setupClassesFromColDef();
        this.setupTooltip();
        this.addActiveHeaderMouseListeners();
        this.setupSelectAll();
        this.setupUserComp();
        this.refreshAria();
        this.createManagedBean(new ResizeFeature(this.getPinned(), this.column, eResize, comp, this));
        this.createManagedBean(new HoverFeature([this.column], eGui));
        this.createManagedBean(new SetLeftFeature(this.column, eGui, this.beans));
        this.createManagedBean(new ManagedFocusFeature(eGui, {
          shouldStopEventPropagation: function(e) {
            return _this.shouldStopEventPropagation(e);
          },
          onTabKeyDown: function() {
            return null;
          },
          handleKeyDown: this.handleKeyDown.bind(this),
          onFocusIn: this.onFocusIn.bind(this),
          onFocusOut: this.onFocusOut.bind(this)
        }));
        this.addManagedListener(this.column, Column.EVENT_COL_DEF_CHANGED, this.onColDefChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VALUE_CHANGED, this.onColumnValueChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.onColumnRowGroupChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_CHANGED, this.onColumnPivotChanged.bind(this));
      };
      HeaderCellCtrl2.prototype.setupUserComp = function() {
        var compDetails = this.lookupUserCompDetails();
        this.setCompDetails(compDetails);
      };
      HeaderCellCtrl2.prototype.setCompDetails = function(compDetails) {
        this.userCompDetails = compDetails;
        this.comp.setUserCompDetails(compDetails);
      };
      HeaderCellCtrl2.prototype.lookupUserCompDetails = function() {
        var params = this.createParams();
        var colDef = this.column.getColDef();
        return this.userComponentFactory.getHeaderCompDetails(colDef, params);
      };
      HeaderCellCtrl2.prototype.createParams = function() {
        var _this = this;
        var colDef = this.column.getColDef();
        var params = {
          column: this.column,
          displayName: this.displayName,
          enableSorting: colDef.sortable,
          enableMenu: this.menuEnabled,
          showColumnMenu: function(source) {
            _this.gridApi.showColumnMenuAfterButtonClick(_this.column, source);
          },
          progressSort: function(multiSort) {
            _this.sortController.progressSort(_this.column, !!multiSort, "uiColumnSorted");
          },
          setSort: function(sort, multiSort) {
            _this.sortController.setSortForColumn(_this.column, sort, !!multiSort, "uiColumnSorted");
          },
          api: this.gridApi,
          columnApi: this.columnApi,
          context: this.gridOptionsWrapper.getContext(),
          eGridHeader: this.getGui()
        };
        return params;
      };
      HeaderCellCtrl2.prototype.setupSelectAll = function() {
        this.selectAllFeature = this.createManagedBean(new SelectAllFeature(this.column));
        this.selectAllFeature.setComp(this);
      };
      HeaderCellCtrl2.prototype.getSelectAllGui = function() {
        return this.selectAllFeature.getCheckboxGui();
      };
      HeaderCellCtrl2.prototype.handleKeyDown = function(e) {
        _super.prototype.handleKeyDown.call(this, e);
        if (e.key === KeyCode.SPACE) {
          this.selectAllFeature.onSpaceKeyPressed(e);
        }
        if (e.key === KeyCode.ENTER) {
          this.onEnterKeyPressed(e);
        }
      };
      HeaderCellCtrl2.prototype.onEnterKeyPressed = function(e) {
        var headerComp = this.comp.getUserCompInstance();
        if (!headerComp) {
          return;
        }
        if (e.ctrlKey || e.metaKey) {
          if (this.menuEnabled && headerComp.showMenu) {
            e.preventDefault();
            headerComp.showMenu();
          }
        } else if (this.sortable) {
          var multiSort = e.shiftKey;
          this.sortController.progressSort(this.column, multiSort, "uiColumnSorted");
        }
      };
      HeaderCellCtrl2.prototype.isMenuEnabled = function() {
        return this.menuEnabled;
      };
      HeaderCellCtrl2.prototype.onFocusIn = function(e) {
        if (!this.getGui().contains(e.relatedTarget)) {
          var rowIndex = this.getRowIndex();
          this.focusService.setFocusedHeader(rowIndex, this.column);
        }
        this.setActiveHeader(true);
      };
      HeaderCellCtrl2.prototype.onFocusOut = function(e) {
        if (this.getGui().contains(e.relatedTarget)) {
          return;
        }
        this.setActiveHeader(false);
      };
      HeaderCellCtrl2.prototype.setupTooltip = function() {
        var _this = this;
        var tooltipCtrl = {
          getColumn: function() {
            return _this.column;
          },
          getColDef: function() {
            return _this.column.getColDef();
          },
          getGui: function() {
            return _this.eGui;
          },
          getLocation: function() {
            return "header";
          },
          getTooltipValue: function() {
            var res = _this.column.getColDef().headerTooltip;
            return res;
          }
        };
        var tooltipFeature = this.createManagedBean(new TooltipFeature(tooltipCtrl, this.beans));
        tooltipFeature.setComp(this.comp);
        this.refreshFunctions.push(function() {
          return tooltipFeature.refreshToolTip();
        });
      };
      HeaderCellCtrl2.prototype.setupClassesFromColDef = function() {
        var _this = this;
        var refreshHeaderClasses = function() {
          var colDef = _this.column.getColDef();
          var goa = _this.gridOptionsWrapper;
          var classes = CssClassApplier.getHeaderClassesFromColDef(colDef, goa, _this.column, null);
          var oldClasses = _this.userHeaderClasses;
          _this.userHeaderClasses = new Set(classes);
          classes.forEach(function(c) {
            if (oldClasses.has(c)) {
              oldClasses.delete(c);
            } else {
              _this.comp.addOrRemoveCssClass(c, true);
            }
          });
          oldClasses.forEach(function(c) {
            return _this.comp.addOrRemoveCssClass(c, false);
          });
        };
        this.refreshFunctions.push(refreshHeaderClasses);
        refreshHeaderClasses();
      };
      HeaderCellCtrl2.prototype.setDragSource = function(eSource) {
        var _this = this;
        this.dragSourceElement = eSource;
        this.removeDragSource();
        if (!eSource) {
          return;
        }
        if (!this.draggable) {
          return;
        }
        var hideColumnOnExit = !this.gridOptionsWrapper.isSuppressDragLeaveHidesColumns();
        this.moveDragSource = {
          type: DragSourceType.HeaderCell,
          eElement: eSource,
          defaultIconName: hideColumnOnExit ? DragAndDropService.ICON_HIDE : DragAndDropService.ICON_NOT_ALLOWED,
          getDragItem: function() {
            return _this.createDragItem();
          },
          dragItemName: this.displayName,
          onDragStarted: function() {
            return _this.column.setMoving(true, "uiColumnMoved");
          },
          onDragStopped: function() {
            return _this.column.setMoving(false, "uiColumnMoved");
          },
          onGridEnter: function(dragItem) {
            var _a, _b;
            if (hideColumnOnExit) {
              var unlockedColumns = ((_b = (_a = dragItem) === null || _a === void 0 ? void 0 : _a.columns) === null || _b === void 0 ? void 0 : _b.filter(function(col) {
                return !col.getColDef().lockVisible;
              })) || [];
              _this.columnModel.setColumnsVisible(unlockedColumns, true, "uiColumnMoved");
            }
          },
          onGridExit: function(dragItem) {
            var _a, _b;
            if (hideColumnOnExit) {
              var unlockedColumns = ((_b = (_a = dragItem) === null || _a === void 0 ? void 0 : _a.columns) === null || _b === void 0 ? void 0 : _b.filter(function(col) {
                return !col.getColDef().lockVisible;
              })) || [];
              _this.columnModel.setColumnsVisible(unlockedColumns, false, "uiColumnMoved");
            }
          }
        };
        this.dragAndDropService.addDragSource(this.moveDragSource, true);
      };
      HeaderCellCtrl2.prototype.createDragItem = function() {
        var visibleState = {};
        visibleState[this.column.getId()] = this.column.isVisible();
        return {
          columns: [this.column],
          visibleState
        };
      };
      HeaderCellCtrl2.prototype.removeDragSource = function() {
        if (this.moveDragSource) {
          this.dragAndDropService.removeDragSource(this.moveDragSource);
          this.moveDragSource = void 0;
        }
      };
      HeaderCellCtrl2.prototype.onColDefChanged = function() {
        this.refresh();
      };
      HeaderCellCtrl2.prototype.updateState = function() {
        var colDef = this.column.getColDef();
        this.menuEnabled = this.menuFactory.isMenuEnabled(this.column) && !colDef.suppressMenu;
        this.sortable = colDef.sortable;
        this.displayName = this.calculateDisplayName();
        this.draggable = this.workOutDraggable();
      };
      HeaderCellCtrl2.prototype.addRefreshFunction = function(func) {
        this.refreshFunctions.push(func);
      };
      HeaderCellCtrl2.prototype.refresh = function() {
        this.updateState();
        this.refreshHeaderComp();
        this.refreshAria();
        this.refreshFunctions.forEach(function(f) {
          return f();
        });
      };
      HeaderCellCtrl2.prototype.refreshHeaderComp = function() {
        var newCompDetails = this.lookupUserCompDetails();
        var compInstance = this.comp.getUserCompInstance();
        var attemptRefresh = compInstance != null && this.userCompDetails.componentClass == newCompDetails.componentClass;
        var headerCompRefreshed = attemptRefresh ? this.attemptHeaderCompRefresh(newCompDetails.params) : false;
        if (headerCompRefreshed) {
          this.setDragSource(this.dragSourceElement);
        } else {
          this.setCompDetails(newCompDetails);
        }
      };
      HeaderCellCtrl2.prototype.attemptHeaderCompRefresh = function(params) {
        var headerComp = this.comp.getUserCompInstance();
        if (!headerComp) {
          return false;
        }
        if (!headerComp.refresh) {
          return false;
        }
        var res = headerComp.refresh(params);
        return res;
      };
      HeaderCellCtrl2.prototype.calculateDisplayName = function() {
        return this.columnModel.getDisplayNameForColumn(this.column, "header", true);
      };
      HeaderCellCtrl2.prototype.checkDisplayName = function() {
        if (this.displayName !== this.calculateDisplayName()) {
          this.refresh();
        }
      };
      HeaderCellCtrl2.prototype.workOutDraggable = function() {
        var colDef = this.column.getColDef();
        var isSuppressMovableColumns = this.gridOptionsWrapper.isSuppressMovableColumns();
        var colCanMove = !isSuppressMovableColumns && !colDef.suppressMovable && !colDef.lockPosition;
        return !!colCanMove || !!colDef.enableRowGroup || !!colDef.enablePivot;
      };
      HeaderCellCtrl2.prototype.onColumnRowGroupChanged = function() {
        this.checkDisplayName();
      };
      HeaderCellCtrl2.prototype.onColumnPivotChanged = function() {
        this.checkDisplayName();
      };
      HeaderCellCtrl2.prototype.onColumnValueChanged = function() {
        this.checkDisplayName();
      };
      HeaderCellCtrl2.prototype.setupWidth = function() {
        var _this = this;
        var listener = function() {
          _this.comp.setWidth(_this.column.getActualWidth() + "px");
        };
        this.addManagedListener(this.column, Column.EVENT_WIDTH_CHANGED, listener);
        listener();
      };
      HeaderCellCtrl2.prototype.setupMovingCss = function() {
        var _this = this;
        var listener = function() {
          _this.comp.addOrRemoveCssClass("ag-header-cell-moving", _this.column.isMoving());
        };
        this.addManagedListener(this.column, Column.EVENT_MOVING_CHANGED, listener);
        listener();
      };
      HeaderCellCtrl2.prototype.setupMenuClass = function() {
        var _this = this;
        var listener = function() {
          _this.comp.addOrRemoveCssClass("ag-column-menu-visible", _this.column.isMenuVisible());
        };
        this.addManagedListener(this.column, Column.EVENT_MENU_VISIBLE_CHANGED, listener);
        listener();
      };
      HeaderCellCtrl2.prototype.setupSortableClass = function() {
        var _this = this;
        var updateSortableCssClass = function() {
          _this.comp.addOrRemoveCssClass("ag-header-cell-sortable", !!_this.sortable);
        };
        updateSortableCssClass();
        this.addRefreshFunction(updateSortableCssClass);
        this.addManagedListener(this.column, Column.EVENT_SORT_CHANGED, this.refreshAriaSort.bind(this));
      };
      HeaderCellCtrl2.prototype.setupWrapTextClass = function() {
        var _this = this;
        var listener = function() {
          var wrapText = !!_this.column.getColDef().wrapHeaderText;
          _this.comp.addOrRemoveCssClass("ag-header-cell-wrap-text", wrapText);
        };
        listener();
        this.addRefreshFunction(listener);
      };
      HeaderCellCtrl2.prototype.setupAutoHeight = function(wrapperElement) {
        var _this = this;
        var measureHeight = function(timesCalled) {
          if (!_this.isAlive()) {
            return;
          }
          var _a = getElementSize(_this.getGui()), paddingTop = _a.paddingTop, paddingBottom = _a.paddingBottom;
          var wrapperHeight = wrapperElement.offsetHeight;
          var autoHeight = wrapperHeight + paddingTop + paddingBottom;
          if (timesCalled < 5) {
            var doc = _this.beans.gridOptionsWrapper.getDocument();
            var notYetInDom = !doc || !doc.contains(wrapperElement);
            var possiblyNoContentYet = autoHeight == 0;
            if (notYetInDom || possiblyNoContentYet) {
              _this.beans.frameworkOverrides.setTimeout(function() {
                return measureHeight(timesCalled + 1);
              }, 0);
              return;
            }
          }
          _this.columnModel.setColumnHeaderHeight(_this.column, autoHeight);
        };
        var isMeasuring = false;
        var stopResizeObserver;
        var checkMeasuring = function() {
          var newValue = _this.column.isAutoHeaderHeight();
          if (newValue && !isMeasuring) {
            startMeasuring();
          }
          if (!newValue && isMeasuring) {
            stopMeasuring();
          }
        };
        var startMeasuring = function() {
          isMeasuring = true;
          measureHeight(0);
          _this.comp.addOrRemoveCssClass("ag-header-cell-auto-height", true);
          stopResizeObserver = _this.resizeObserverService.observeResize(wrapperElement, function() {
            return measureHeight(0);
          });
        };
        var stopMeasuring = function() {
          isMeasuring = false;
          if (stopResizeObserver) {
            stopResizeObserver();
          }
          _this.comp.addOrRemoveCssClass("ag-header-cell-auto-height", false);
          stopResizeObserver = void 0;
        };
        checkMeasuring();
        this.addDestroyFunc(function() {
          return stopMeasuring();
        });
        this.addManagedListener(this.column, Column.EVENT_WIDTH_CHANGED, function() {
          return isMeasuring && measureHeight(0);
        });
        this.addManagedListener(this.column, Column.EVENT_SORT_CHANGED, function() {
          if (isMeasuring) {
            _this.beans.frameworkOverrides.setTimeout(function() {
              return measureHeight(0);
            });
          }
        });
        this.addRefreshFunction(checkMeasuring);
      };
      HeaderCellCtrl2.prototype.refreshAriaSort = function() {
        if (this.sortable) {
          var translate = this.gridOptionsWrapper.getLocaleTextFunc();
          this.comp.setAriaSort(getAriaSortState(this.column));
          this.setAriaDescriptionProperty("sort", translate("ariaSortableColumn", "Press ENTER to sort."));
        } else {
          this.comp.setAriaSort();
          this.setAriaDescriptionProperty("sort", null);
        }
      };
      HeaderCellCtrl2.prototype.refreshAriaMenu = function() {
        if (this.menuEnabled) {
          var translate = this.gridOptionsWrapper.getLocaleTextFunc();
          this.setAriaDescriptionProperty("menu", translate("ariaMenuColumn", "Press CTRL ENTER to open column menu."));
        } else {
          this.setAriaDescriptionProperty("menu", null);
        }
      };
      HeaderCellCtrl2.prototype.setAriaDescriptionProperty = function(property, value) {
        if (value != null) {
          this.ariaDescriptionProperties.set(property, value);
        } else {
          this.ariaDescriptionProperties.delete(property);
        }
      };
      HeaderCellCtrl2.prototype.refreshAriaDescription = function() {
        var descriptionArray = Array.from(this.ariaDescriptionProperties.values());
        this.comp.setAriaDescription(descriptionArray.length ? descriptionArray.join(" ") : void 0);
      };
      HeaderCellCtrl2.prototype.refreshAria = function() {
        this.refreshAriaSort();
        this.refreshAriaMenu();
        this.refreshAriaDescription();
      };
      HeaderCellCtrl2.prototype.addColumnHoverListener = function() {
        var _this = this;
        var listener = function() {
          if (!_this.gridOptionsWrapper.isColumnHoverHighlight()) {
            return;
          }
          var isHovered = _this.columnHoverService.isHovered(_this.column);
          _this.comp.addOrRemoveCssClass("ag-column-hover", isHovered);
        };
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_HOVER_CHANGED, listener);
        listener();
      };
      HeaderCellCtrl2.prototype.setupFilterCss = function() {
        var _this = this;
        var listener = function() {
          _this.comp.addOrRemoveCssClass("ag-header-cell-filtered", _this.column.isFilterActive());
        };
        this.addManagedListener(this.column, Column.EVENT_FILTER_ACTIVE_CHANGED, listener);
        listener();
      };
      HeaderCellCtrl2.prototype.setupColId = function() {
        this.comp.setColId(this.column.getColId());
      };
      HeaderCellCtrl2.prototype.addActiveHeaderMouseListeners = function() {
        var _this = this;
        var listener = function(e) {
          return _this.setActiveHeader(e.type === "mouseenter");
        };
        this.addManagedListener(this.getGui(), "mouseenter", listener);
        this.addManagedListener(this.getGui(), "mouseleave", listener);
      };
      HeaderCellCtrl2.prototype.setActiveHeader = function(active) {
        this.comp.addOrRemoveCssClass("ag-header-active", active);
      };
      __decorate$1l([
        Autowired("columnModel")
      ], HeaderCellCtrl2.prototype, "columnModel", void 0);
      __decorate$1l([
        Autowired("columnHoverService")
      ], HeaderCellCtrl2.prototype, "columnHoverService", void 0);
      __decorate$1l([
        Autowired("sortController")
      ], HeaderCellCtrl2.prototype, "sortController", void 0);
      __decorate$1l([
        Autowired("menuFactory")
      ], HeaderCellCtrl2.prototype, "menuFactory", void 0);
      __decorate$1l([
        Autowired("dragAndDropService")
      ], HeaderCellCtrl2.prototype, "dragAndDropService", void 0);
      __decorate$1l([
        Autowired("resizeObserverService")
      ], HeaderCellCtrl2.prototype, "resizeObserverService", void 0);
      __decorate$1l([
        Autowired("gridApi")
      ], HeaderCellCtrl2.prototype, "gridApi", void 0);
      __decorate$1l([
        Autowired("columnApi")
      ], HeaderCellCtrl2.prototype, "columnApi", void 0);
      __decorate$1l([
        PreDestroy
      ], HeaderCellCtrl2.prototype, "removeDragSource", null);
      return HeaderCellCtrl2;
    }(AbstractHeaderCellCtrl);
    __extends$1r = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1k = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    GroupResizeFeature = function(_super) {
      __extends$1r(GroupResizeFeature2, _super);
      function GroupResizeFeature2(comp, eResize, pinned, columnGroup) {
        var _this = _super.call(this) || this;
        _this.eResize = eResize;
        _this.comp = comp;
        _this.pinned = pinned;
        _this.columnGroup = columnGroup;
        return _this;
      }
      GroupResizeFeature2.prototype.postConstruct = function() {
        var _this = this;
        if (!this.columnGroup.isResizable()) {
          this.comp.addOrRemoveResizableCssClass("ag-hidden", true);
          return;
        }
        var finishedWithResizeFunc = this.horizontalResizeService.addResizeBar({
          eResizeBar: this.eResize,
          onResizeStart: this.onResizeStart.bind(this),
          onResizing: this.onResizing.bind(this, false),
          onResizeEnd: this.onResizing.bind(this, true)
        });
        this.addDestroyFunc(finishedWithResizeFunc);
        if (!this.gridOptionsWrapper.isSuppressAutoSize()) {
          var skipHeaderOnAutoSize_1 = this.gridOptionsWrapper.isSkipHeaderOnAutoSize();
          this.eResize.addEventListener("dblclick", function() {
            var keys2 = [];
            var leafCols = _this.columnGroup.getDisplayedLeafColumns();
            leafCols.forEach(function(column) {
              if (!column.getColDef().suppressAutoSize) {
                keys2.push(column.getColId());
              }
            });
            if (keys2.length > 0) {
              _this.columnModel.autoSizeColumns({
                columns: keys2,
                skipHeader: skipHeaderOnAutoSize_1,
                stopAtGroup: _this.columnGroup,
                source: "uiColumnResized"
              });
            }
            _this.resizeLeafColumnsToFit();
          });
        }
      };
      GroupResizeFeature2.prototype.onResizeStart = function(shiftKey) {
        var _this = this;
        this.calculateInitialValues();
        var takeFromGroup = null;
        if (shiftKey) {
          takeFromGroup = this.columnModel.getDisplayedGroupAfter(this.columnGroup);
        }
        if (takeFromGroup) {
          var takeFromLeafCols = takeFromGroup.getDisplayedLeafColumns();
          this.resizeTakeFromCols = takeFromLeafCols.filter(function(col) {
            return col.isResizable();
          });
          this.resizeTakeFromStartWidth = 0;
          this.resizeTakeFromCols.forEach(function(col) {
            return _this.resizeTakeFromStartWidth += col.getActualWidth();
          });
          this.resizeTakeFromRatios = [];
          this.resizeTakeFromCols.forEach(function(col) {
            return _this.resizeTakeFromRatios.push(col.getActualWidth() / _this.resizeTakeFromStartWidth);
          });
        } else {
          this.resizeTakeFromCols = null;
          this.resizeTakeFromStartWidth = null;
          this.resizeTakeFromRatios = null;
        }
        this.comp.addOrRemoveCssClass("ag-column-resizing", true);
      };
      GroupResizeFeature2.prototype.onResizing = function(finished, resizeAmount) {
        var resizeAmountNormalised = this.normaliseDragChange(resizeAmount);
        var width = this.resizeStartWidth + resizeAmountNormalised;
        this.resizeColumns(width, finished);
      };
      GroupResizeFeature2.prototype.resizeLeafColumnsToFit = function() {
        var preferredSize = this.autoWidthCalculator.getPreferredWidthForColumnGroup(this.columnGroup);
        this.calculateInitialValues();
        if (preferredSize > this.resizeStartWidth) {
          this.resizeColumns(preferredSize, true);
        }
      };
      GroupResizeFeature2.prototype.resizeColumns = function(totalWidth, finished) {
        if (finished === void 0) {
          finished = true;
        }
        var resizeSets = [];
        resizeSets.push({
          columns: this.resizeCols,
          ratios: this.resizeRatios,
          width: totalWidth
        });
        if (this.resizeTakeFromCols) {
          var diff = totalWidth - this.resizeStartWidth;
          resizeSets.push({
            columns: this.resizeTakeFromCols,
            ratios: this.resizeTakeFromRatios,
            width: this.resizeTakeFromStartWidth - diff
          });
        }
        this.columnModel.resizeColumnSets({
          resizeSets,
          finished,
          source: "uiColumnDragged"
        });
        if (finished) {
          this.comp.addOrRemoveCssClass("ag-column-resizing", false);
        }
      };
      GroupResizeFeature2.prototype.calculateInitialValues = function() {
        var _this = this;
        var leafCols = this.columnGroup.getDisplayedLeafColumns();
        this.resizeCols = leafCols.filter(function(col) {
          return col.isResizable();
        });
        this.resizeStartWidth = 0;
        this.resizeCols.forEach(function(col) {
          return _this.resizeStartWidth += col.getActualWidth();
        });
        this.resizeRatios = [];
        this.resizeCols.forEach(function(col) {
          return _this.resizeRatios.push(col.getActualWidth() / _this.resizeStartWidth);
        });
      };
      GroupResizeFeature2.prototype.normaliseDragChange = function(dragChange) {
        var result = dragChange;
        if (this.gridOptionsWrapper.isEnableRtl()) {
          if (this.pinned !== Constants.PINNED_LEFT) {
            result *= -1;
          }
        } else if (this.pinned === Constants.PINNED_RIGHT) {
          result *= -1;
        }
        return result;
      };
      __decorate$1k([
        Autowired("horizontalResizeService")
      ], GroupResizeFeature2.prototype, "horizontalResizeService", void 0);
      __decorate$1k([
        Autowired("autoWidthCalculator")
      ], GroupResizeFeature2.prototype, "autoWidthCalculator", void 0);
      __decorate$1k([
        Autowired("columnModel")
      ], GroupResizeFeature2.prototype, "columnModel", void 0);
      __decorate$1k([
        PostConstruct
      ], GroupResizeFeature2.prototype, "postConstruct", null);
      return GroupResizeFeature2;
    }(BeanStub);
    __extends$1q = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1j = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    GroupWidthFeature = function(_super) {
      __extends$1q(GroupWidthFeature2, _super);
      function GroupWidthFeature2(comp, columnGroup) {
        var _this = _super.call(this) || this;
        _this.removeChildListenersFuncs = [];
        _this.columnGroup = columnGroup;
        _this.comp = comp;
        return _this;
      }
      GroupWidthFeature2.prototype.postConstruct = function() {
        this.addListenersToChildrenColumns();
        this.addManagedListener(this.columnGroup, ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED, this.onDisplayedChildrenChanged.bind(this));
        this.onWidthChanged();
        this.addDestroyFunc(this.removeListenersOnChildrenColumns.bind(this));
      };
      GroupWidthFeature2.prototype.addListenersToChildrenColumns = function() {
        var _this = this;
        this.removeListenersOnChildrenColumns();
        var widthChangedListener = this.onWidthChanged.bind(this);
        this.columnGroup.getLeafColumns().forEach(function(column) {
          column.addEventListener(Column.EVENT_WIDTH_CHANGED, widthChangedListener);
          column.addEventListener(Column.EVENT_VISIBLE_CHANGED, widthChangedListener);
          _this.removeChildListenersFuncs.push(function() {
            column.removeEventListener(Column.EVENT_WIDTH_CHANGED, widthChangedListener);
            column.removeEventListener(Column.EVENT_VISIBLE_CHANGED, widthChangedListener);
          });
        });
      };
      GroupWidthFeature2.prototype.removeListenersOnChildrenColumns = function() {
        this.removeChildListenersFuncs.forEach(function(func) {
          return func();
        });
        this.removeChildListenersFuncs = [];
      };
      GroupWidthFeature2.prototype.onDisplayedChildrenChanged = function() {
        this.addListenersToChildrenColumns();
        this.onWidthChanged();
      };
      GroupWidthFeature2.prototype.onWidthChanged = function() {
        this.comp.setWidth(this.columnGroup.getActualWidth() + "px");
      };
      __decorate$1j([
        PostConstruct
      ], GroupWidthFeature2.prototype, "postConstruct", null);
      return GroupWidthFeature2;
    }(BeanStub);
    __extends$1p = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1i = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    HeaderGroupCellCtrl = function(_super) {
      __extends$1p(HeaderGroupCellCtrl2, _super);
      function HeaderGroupCellCtrl2(columnGroup, parentRowCtrl) {
        var _this = _super.call(this, columnGroup, parentRowCtrl) || this;
        _this.columnGroup = columnGroup;
        return _this;
      }
      HeaderGroupCellCtrl2.prototype.setComp = function(comp, eGui, eResize) {
        _super.prototype.setGui.call(this, eGui);
        this.comp = comp;
        this.displayName = this.columnModel.getDisplayNameForColumnGroup(this.columnGroup, "header");
        this.addClasses();
        this.addAttributes();
        this.setupMovingCss();
        this.setupExpandable();
        this.setupTooltip();
        this.setupUserComp();
        var pinned = this.getParentRowCtrl().getPinned();
        var leafCols = this.columnGroup.getProvidedColumnGroup().getLeafColumns();
        this.createManagedBean(new HoverFeature(leafCols, eGui));
        this.createManagedBean(new SetLeftFeature(this.columnGroup, eGui, this.beans));
        this.createManagedBean(new GroupWidthFeature(comp, this.columnGroup));
        this.groupResizeFeature = this.createManagedBean(new GroupResizeFeature(comp, eResize, pinned, this.columnGroup));
        this.createManagedBean(new ManagedFocusFeature(eGui, {
          shouldStopEventPropagation: this.shouldStopEventPropagation.bind(this),
          onTabKeyDown: function() {
            return void 0;
          },
          handleKeyDown: this.handleKeyDown.bind(this),
          onFocusIn: this.onFocusIn.bind(this)
        }));
      };
      HeaderGroupCellCtrl2.prototype.resizeLeafColumnsToFit = function() {
        this.groupResizeFeature.onResizeStart(false);
        this.groupResizeFeature.resizeLeafColumnsToFit();
      };
      HeaderGroupCellCtrl2.prototype.setupUserComp = function() {
        var _this = this;
        var displayName = this.displayName;
        var params = {
          displayName: this.displayName,
          columnGroup: this.columnGroup,
          setExpanded: function(expanded) {
            _this.columnModel.setColumnGroupOpened(_this.columnGroup.getProvidedColumnGroup(), expanded, "gridInitializing");
          },
          api: this.gridApi,
          columnApi: this.columnApi,
          context: this.gridOptionsWrapper.getContext()
        };
        if (!displayName) {
          var columnGroup = this.columnGroup;
          var leafCols = columnGroup.getLeafColumns();
          while (columnGroup.getParent() && columnGroup.getParent().getLeafColumns().length === leafCols.length) {
            columnGroup = columnGroup.getParent();
          }
          var colGroupDef = columnGroup.getColGroupDef();
          if (colGroupDef) {
            displayName = colGroupDef.headerName;
          }
          if (!displayName) {
            displayName = leafCols ? this.columnModel.getDisplayNameForColumn(leafCols[0], "header", true) : "";
          }
        }
        var compDetails = this.userComponentFactory.getHeaderGroupCompDetails(params);
        this.comp.setUserCompDetails(compDetails);
      };
      HeaderGroupCellCtrl2.prototype.setupTooltip = function() {
        var _this = this;
        var colGroupDef = this.columnGroup.getColGroupDef();
        var tooltipCtrl = {
          getColumn: function() {
            return _this.columnGroup;
          },
          getGui: function() {
            return _this.eGui;
          },
          getLocation: function() {
            return "headerGroup";
          },
          getTooltipValue: function() {
            return colGroupDef && colGroupDef.headerTooltip;
          }
        };
        if (colGroupDef) {
          tooltipCtrl.getColDef = function() {
            return colGroupDef;
          };
        }
        var tooltipFeature = this.createManagedBean(new TooltipFeature(tooltipCtrl, this.beans));
        tooltipFeature.setComp(this.comp);
      };
      HeaderGroupCellCtrl2.prototype.setupExpandable = function() {
        var providedColGroup = this.columnGroup.getProvidedColumnGroup();
        this.refreshExpanded();
        this.addManagedListener(providedColGroup, ProvidedColumnGroup.EVENT_EXPANDABLE_CHANGED, this.refreshExpanded.bind(this));
        this.addManagedListener(providedColGroup, ProvidedColumnGroup.EVENT_EXPANDED_CHANGED, this.refreshExpanded.bind(this));
      };
      HeaderGroupCellCtrl2.prototype.refreshExpanded = function() {
        var column = this.columnGroup;
        this.expandable = column.isExpandable();
        var expanded = column.isExpanded();
        if (this.expandable) {
          this.comp.setAriaExpanded(expanded ? "true" : "false");
        } else {
          this.comp.setAriaExpanded(void 0);
        }
      };
      HeaderGroupCellCtrl2.prototype.addAttributes = function() {
        this.comp.setColId(this.columnGroup.getUniqueId());
      };
      HeaderGroupCellCtrl2.prototype.addClasses = function() {
        var _this = this;
        var colGroupDef = this.columnGroup.getColGroupDef();
        var classes = CssClassApplier.getHeaderClassesFromColDef(colGroupDef, this.gridOptionsWrapper, null, this.columnGroup);
        classes.push(this.columnGroup.isPadding() ? "ag-header-group-cell-no-group" : "ag-header-group-cell-with-group");
        classes.forEach(function(c) {
          return _this.comp.addOrRemoveCssClass(c, true);
        });
      };
      HeaderGroupCellCtrl2.prototype.setupMovingCss = function() {
        var _this = this;
        var providedColumnGroup = this.columnGroup.getProvidedColumnGroup();
        var leafColumns = providedColumnGroup.getLeafColumns();
        var listener = function() {
          return _this.comp.addOrRemoveCssClass("ag-header-cell-moving", _this.columnGroup.isMoving());
        };
        leafColumns.forEach(function(col) {
          _this.addManagedListener(col, Column.EVENT_MOVING_CHANGED, listener);
        });
        listener();
      };
      HeaderGroupCellCtrl2.prototype.onFocusIn = function(e) {
        if (!this.eGui.contains(e.relatedTarget)) {
          var rowIndex = this.getRowIndex();
          this.beans.focusService.setFocusedHeader(rowIndex, this.columnGroup);
        }
      };
      HeaderGroupCellCtrl2.prototype.handleKeyDown = function(e) {
        _super.prototype.handleKeyDown.call(this, e);
        var wrapperHasFocus = this.getWrapperHasFocus();
        if (!this.expandable || !wrapperHasFocus) {
          return;
        }
        if (e.key === KeyCode.ENTER) {
          var column = this.columnGroup;
          var newExpandedValue = !column.isExpanded();
          this.columnModel.setColumnGroupOpened(column.getProvidedColumnGroup(), newExpandedValue, "uiColumnExpanded");
        }
      };
      HeaderGroupCellCtrl2.prototype.setDragSource = function(eHeaderGroup) {
        var _this = this;
        if (this.isSuppressMoving()) {
          return;
        }
        var allLeafColumns = this.columnGroup.getProvidedColumnGroup().getLeafColumns();
        var hideColumnOnExit = !this.gridOptionsWrapper.isSuppressDragLeaveHidesColumns();
        var dragSource = {
          type: DragSourceType.HeaderCell,
          eElement: eHeaderGroup,
          defaultIconName: hideColumnOnExit ? DragAndDropService.ICON_HIDE : DragAndDropService.ICON_NOT_ALLOWED,
          dragItemName: this.displayName,
          getDragItem: this.getDragItemForGroup.bind(this),
          onDragStarted: function() {
            return allLeafColumns.forEach(function(col) {
              return col.setMoving(true, "uiColumnDragged");
            });
          },
          onDragStopped: function() {
            return allLeafColumns.forEach(function(col) {
              return col.setMoving(false, "uiColumnDragged");
            });
          },
          onGridEnter: function(dragItem) {
            var _a, _b;
            if (hideColumnOnExit) {
              var unlockedColumns = ((_b = (_a = dragItem) === null || _a === void 0 ? void 0 : _a.columns) === null || _b === void 0 ? void 0 : _b.filter(function(col) {
                return !col.getColDef().lockVisible;
              })) || [];
              _this.columnModel.setColumnsVisible(unlockedColumns, true, "uiColumnMoved");
            }
          },
          onGridExit: function(dragItem) {
            var _a, _b;
            if (hideColumnOnExit) {
              var unlockedColumns = ((_b = (_a = dragItem) === null || _a === void 0 ? void 0 : _a.columns) === null || _b === void 0 ? void 0 : _b.filter(function(col) {
                return !col.getColDef().lockVisible;
              })) || [];
              _this.columnModel.setColumnsVisible(unlockedColumns, false, "uiColumnMoved");
            }
          }
        };
        this.dragAndDropService.addDragSource(dragSource, true);
        this.addDestroyFunc(function() {
          return _this.dragAndDropService.removeDragSource(dragSource);
        });
      };
      HeaderGroupCellCtrl2.prototype.getDragItemForGroup = function() {
        var allColumnsOriginalOrder = this.columnGroup.getProvidedColumnGroup().getLeafColumns();
        var visibleState = {};
        allColumnsOriginalOrder.forEach(function(column) {
          return visibleState[column.getId()] = column.isVisible();
        });
        var allColumnsCurrentOrder = [];
        this.columnModel.getAllDisplayedColumns().forEach(function(column) {
          if (allColumnsOriginalOrder.indexOf(column) >= 0) {
            allColumnsCurrentOrder.push(column);
            removeFromArray(allColumnsOriginalOrder, column);
          }
        });
        allColumnsOriginalOrder.forEach(function(column) {
          return allColumnsCurrentOrder.push(column);
        });
        return {
          columns: allColumnsCurrentOrder,
          visibleState
        };
      };
      HeaderGroupCellCtrl2.prototype.isSuppressMoving = function() {
        var childSuppressesMoving = false;
        this.columnGroup.getLeafColumns().forEach(function(column) {
          if (column.getColDef().suppressMovable || column.getColDef().lockPosition) {
            childSuppressesMoving = true;
          }
        });
        var result = childSuppressesMoving || this.gridOptionsWrapper.isSuppressMovableColumns();
        return result;
      };
      __decorate$1i([
        Autowired("columnModel")
      ], HeaderGroupCellCtrl2.prototype, "columnModel", void 0);
      __decorate$1i([
        Autowired("dragAndDropService")
      ], HeaderGroupCellCtrl2.prototype, "dragAndDropService", void 0);
      __decorate$1i([
        Autowired("gridApi")
      ], HeaderGroupCellCtrl2.prototype, "gridApi", void 0);
      __decorate$1i([
        Autowired("columnApi")
      ], HeaderGroupCellCtrl2.prototype, "columnApi", void 0);
      return HeaderGroupCellCtrl2;
    }(AbstractHeaderCellCtrl);
    __extends$1o = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1h = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    instanceIdSequence = 0;
    HeaderRowCtrl = function(_super) {
      __extends$1o(HeaderRowCtrl2, _super);
      function HeaderRowCtrl2(rowIndex, pinned, type) {
        var _this = _super.call(this) || this;
        _this.instanceId = instanceIdSequence++;
        _this.headerCellCtrls = {};
        _this.rowIndex = rowIndex;
        _this.pinned = pinned;
        _this.type = type;
        return _this;
      }
      HeaderRowCtrl2.prototype.getInstanceId = function() {
        return this.instanceId;
      };
      HeaderRowCtrl2.prototype.setComp = function(comp) {
        this.comp = comp;
        this.onRowHeightChanged();
        this.onVirtualColumnsChanged();
        this.setWidth();
        this.addEventListeners();
        if (isBrowserSafari()) {
          this.comp.setTransform("translateZ(0)");
        }
        comp.setAriaRowIndex(this.rowIndex + 1);
      };
      HeaderRowCtrl2.prototype.addEventListeners = function() {
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_RESIZED, this.onColumnResized.bind(this));
        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_DOM_LAYOUT, this.onDisplayedColumnsChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_VIRTUAL_COLUMNS_CHANGED, this.onVirtualColumnsChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_HEADER_HEIGHT_CHANGED, this.onRowHeightChanged.bind(this));
        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));
        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_PIVOT_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));
        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_GROUP_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));
        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_PIVOT_GROUP_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));
        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_FLOATING_FILTERS_HEIGHT, this.onRowHeightChanged.bind(this));
      };
      HeaderRowCtrl2.prototype.getHeaderCellCtrl = function(column) {
        return values(this.headerCellCtrls).find(function(cellCtrl) {
          return cellCtrl.getColumnGroupChild() === column;
        });
      };
      HeaderRowCtrl2.prototype.onDisplayedColumnsChanged = function() {
        this.onVirtualColumnsChanged();
        this.setWidth();
        this.onRowHeightChanged();
      };
      HeaderRowCtrl2.prototype.getType = function() {
        return this.type;
      };
      HeaderRowCtrl2.prototype.onColumnResized = function() {
        this.setWidth();
      };
      HeaderRowCtrl2.prototype.setWidth = function() {
        var width = this.getWidthForRow();
        this.comp.setWidth(width + "px");
      };
      HeaderRowCtrl2.prototype.getWidthForRow = function() {
        var printLayout = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;
        if (printLayout) {
          var pinned = this.pinned != null;
          if (pinned) {
            return 0;
          }
          return this.columnModel.getContainerWidth(Constants.PINNED_RIGHT) + this.columnModel.getContainerWidth(Constants.PINNED_LEFT) + this.columnModel.getContainerWidth(null);
        }
        return this.columnModel.getContainerWidth(this.pinned);
      };
      HeaderRowCtrl2.prototype.onRowHeightChanged = function() {
        var headerRowCount = this.columnModel.getHeaderRowCount();
        var sizes = [];
        var numberOfFloating = 0;
        if (this.columnModel.hasFloatingFilters()) {
          headerRowCount++;
          numberOfFloating = 1;
        }
        var groupHeight = this.columnModel.getColumnGroupHeaderRowHeight();
        var headerHeight = this.columnModel.getColumnHeaderRowHeight();
        var numberOfNonGroups = 1 + numberOfFloating;
        var numberOfGroups = headerRowCount - numberOfNonGroups;
        for (var i = 0; i < numberOfGroups; i++) {
          sizes.push(groupHeight);
        }
        sizes.push(headerHeight);
        for (var i = 0; i < numberOfFloating; i++) {
          sizes.push(this.gridOptionsWrapper.getFloatingFiltersHeight());
        }
        var topOffset = 0;
        for (var i = 0; i < this.rowIndex; i++) {
          topOffset += sizes[i];
        }
        var thisRowHeight = sizes[this.rowIndex] + "px";
        this.comp.setTop(topOffset + "px");
        this.comp.setHeight(thisRowHeight);
      };
      HeaderRowCtrl2.prototype.getPinned = function() {
        return this.pinned;
      };
      HeaderRowCtrl2.prototype.getRowIndex = function() {
        return this.rowIndex;
      };
      HeaderRowCtrl2.prototype.onVirtualColumnsChanged = function() {
        var _this = this;
        var oldCtrls = this.headerCellCtrls;
        this.headerCellCtrls = {};
        var columns = this.getColumnsInViewport();
        columns.forEach(function(child) {
          if (child.isEmptyGroup()) {
            return;
          }
          var idOfChild = child.getUniqueId();
          var headerCtrl = oldCtrls[idOfChild];
          delete oldCtrls[idOfChild];
          var forOldColumn = headerCtrl && headerCtrl.getColumnGroupChild() != child;
          if (forOldColumn) {
            _this.destroyBean(headerCtrl);
            headerCtrl = void 0;
          }
          if (headerCtrl == null) {
            switch (_this.type) {
              case HeaderRowType.FLOATING_FILTER:
                headerCtrl = _this.createBean(new HeaderFilterCellCtrl(child, _this));
                break;
              case HeaderRowType.COLUMN_GROUP:
                headerCtrl = _this.createBean(new HeaderGroupCellCtrl(child, _this));
                break;
              default:
                headerCtrl = _this.createBean(new HeaderCellCtrl(child, _this));
                break;
            }
          }
          _this.headerCellCtrls[idOfChild] = headerCtrl;
        });
        var isFocusedAndDisplayed = function(ctrl) {
          var isFocused = _this.focusService.isHeaderWrapperFocused(ctrl);
          if (!isFocused) {
            return false;
          }
          var isDisplayed = _this.columnModel.isDisplayed(ctrl.getColumnGroupChild());
          return isDisplayed;
        };
        iterateObject(oldCtrls, function(id, oldCtrl) {
          var keepCtrl = isFocusedAndDisplayed(oldCtrl);
          if (keepCtrl) {
            _this.headerCellCtrls[id] = oldCtrl;
          } else {
            _this.destroyBean(oldCtrl);
          }
        });
        var ctrlsToDisplay = getAllValuesInObject(this.headerCellCtrls);
        this.comp.setHeaderCtrls(ctrlsToDisplay);
      };
      HeaderRowCtrl2.prototype.destroyCtrls = function() {
        var _this = this;
        iterateObject(this.headerCellCtrls, function(key, ctrl) {
          _this.destroyBean(ctrl);
        });
        this.headerCellCtrls = {};
      };
      HeaderRowCtrl2.prototype.getColumnsInViewport = function() {
        var printLayout = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;
        return printLayout ? this.getColumnsInViewportPrintLayout() : this.getColumnsInViewportNormalLayout();
      };
      HeaderRowCtrl2.prototype.getColumnsInViewportPrintLayout = function() {
        var _this = this;
        if (this.pinned != null) {
          return [];
        }
        var viewportColumns = [];
        var actualDepth = this.getActualDepth();
        [Constants.PINNED_LEFT, null, Constants.PINNED_RIGHT].forEach(function(pinned) {
          var items = _this.columnModel.getVirtualHeaderGroupRow(pinned, actualDepth);
          viewportColumns = viewportColumns.concat(items);
        });
        return viewportColumns;
      };
      HeaderRowCtrl2.prototype.getActualDepth = function() {
        return this.type == HeaderRowType.FLOATING_FILTER ? this.rowIndex - 1 : this.rowIndex;
      };
      HeaderRowCtrl2.prototype.getColumnsInViewportNormalLayout = function() {
        return this.columnModel.getVirtualHeaderGroupRow(this.pinned, this.getActualDepth());
      };
      HeaderRowCtrl2.prototype.focusHeader = function(column, event) {
        var allCtrls = getAllValuesInObject(this.headerCellCtrls);
        var ctrl = allCtrls.find(function(ctrl2) {
          return ctrl2.getColumnGroupChild() == column;
        });
        if (!ctrl) {
          return false;
        }
        ctrl.focus(event);
        return true;
      };
      __decorate$1h([
        Autowired("columnModel")
      ], HeaderRowCtrl2.prototype, "columnModel", void 0);
      __decorate$1h([
        Autowired("focusService")
      ], HeaderRowCtrl2.prototype, "focusService", void 0);
      __decorate$1h([
        PreDestroy
      ], HeaderRowCtrl2.prototype, "destroyCtrls", null);
      return HeaderRowCtrl2;
    }(BeanStub);
    __extends$1n = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1g = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __read$c = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread$a = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read$c(arguments[i]));
      return ar;
    };
    HeaderRowContainerCtrl = function(_super) {
      __extends$1n(HeaderRowContainerCtrl2, _super);
      function HeaderRowContainerCtrl2(pinned) {
        var _this = _super.call(this) || this;
        _this.groupsRowCtrls = [];
        _this.pinned = pinned;
        return _this;
      }
      HeaderRowContainerCtrl2.prototype.setComp = function(comp, eGui) {
        this.comp = comp;
        this.eViewport = eGui;
        this.setupCenterWidth();
        this.setupPinnedWidth();
        this.setupDragAndDrop(this.eViewport);
        this.addManagedListener(this.eventService, Events.EVENT_GRID_COLUMNS_CHANGED, this.onGridColumnsChanged.bind(this));
        this.addManagedListener(this.eViewport, "scroll", this.resetScrollLeft.bind(this));
        this.ctrlsService.registerHeaderContainer(this, this.pinned);
        if (this.columnModel.isReady()) {
          this.refresh();
        }
      };
      HeaderRowContainerCtrl2.prototype.setupDragAndDrop = function(dropContainer) {
        var bodyDropTarget = new BodyDropTarget(this.pinned, dropContainer);
        this.createManagedBean(bodyDropTarget);
      };
      HeaderRowContainerCtrl2.prototype.refresh = function(keepColumns) {
        var _this = this;
        if (keepColumns === void 0) {
          keepColumns = false;
        }
        var sequence = new NumberSequence();
        var focusedHeaderPosition = this.focusService.getFocusHeaderToUseAfterRefresh();
        var refreshColumnGroups = function() {
          var groupRowCount = _this.columnModel.getHeaderRowCount() - 1;
          _this.groupsRowCtrls = _this.destroyBeans(_this.groupsRowCtrls);
          for (var i = 0; i < groupRowCount; i++) {
            var ctrl = _this.createBean(new HeaderRowCtrl(sequence.next(), _this.pinned, HeaderRowType.COLUMN_GROUP));
            _this.groupsRowCtrls.push(ctrl);
          }
        };
        var refreshColumns = function() {
          var rowIndex = sequence.next();
          var needNewInstance = _this.columnsRowCtrl == null || !keepColumns || _this.columnsRowCtrl.getRowIndex() !== rowIndex;
          if (needNewInstance) {
            _this.destroyBean(_this.columnsRowCtrl);
            _this.columnsRowCtrl = _this.createBean(new HeaderRowCtrl(rowIndex, _this.pinned, HeaderRowType.COLUMN));
          }
        };
        var refreshFilters = function() {
          var includeFloatingFilter = _this.columnModel.hasFloatingFilters();
          var destroyPreviousComp = function() {
            _this.filtersRowCtrl = _this.destroyBean(_this.filtersRowCtrl);
          };
          if (!includeFloatingFilter) {
            destroyPreviousComp();
            return;
          }
          var rowIndex = sequence.next();
          if (_this.filtersRowCtrl) {
            var rowIndexMismatch = _this.filtersRowCtrl.getRowIndex() !== rowIndex;
            if (!keepColumns || rowIndexMismatch) {
              destroyPreviousComp();
            }
          }
          if (!_this.filtersRowCtrl) {
            _this.filtersRowCtrl = _this.createBean(new HeaderRowCtrl(rowIndex, _this.pinned, HeaderRowType.FLOATING_FILTER));
          }
        };
        refreshColumnGroups();
        refreshColumns();
        refreshFilters();
        var allCtrls = this.getAllCtrls();
        this.comp.setCtrls(allCtrls);
        this.restoreFocusOnHeader(focusedHeaderPosition);
      };
      HeaderRowContainerCtrl2.prototype.restoreFocusOnHeader = function(position) {
        if (position == null || position.column.getPinned() != this.pinned) {
          return;
        }
        this.focusService.focusHeaderPosition({ headerPosition: position });
      };
      HeaderRowContainerCtrl2.prototype.getAllCtrls = function() {
        var res = __spread$a(this.groupsRowCtrls, [this.columnsRowCtrl]);
        if (this.filtersRowCtrl) {
          res.push(this.filtersRowCtrl);
        }
        return res;
      };
      HeaderRowContainerCtrl2.prototype.onGridColumnsChanged = function() {
        this.refresh(true);
      };
      HeaderRowContainerCtrl2.prototype.setupCenterWidth = function() {
        var _this = this;
        if (this.pinned != null) {
          return;
        }
        this.createManagedBean(new CenterWidthFeature(function(width) {
          return _this.comp.setCenterWidth(width + "px");
        }));
      };
      HeaderRowContainerCtrl2.prototype.setHorizontalScroll = function(offset) {
        this.comp.setContainerTransform("translateX(" + offset + "px)");
      };
      HeaderRowContainerCtrl2.prototype.resetScrollLeft = function() {
        this.eViewport.scrollLeft = 0;
      };
      HeaderRowContainerCtrl2.prototype.setupPinnedWidth = function() {
        var _this = this;
        if (this.pinned == null) {
          return;
        }
        var pinningLeft = this.pinned === Constants.PINNED_LEFT;
        var pinningRight = this.pinned === Constants.PINNED_RIGHT;
        var listener = function() {
          var width = pinningLeft ? _this.pinnedWidthService.getPinnedLeftWidth() : _this.pinnedWidthService.getPinnedRightWidth();
          if (width == null) {
            return;
          }
          var hidden = width == 0;
          var isRtl = _this.gridOptionsWrapper.isEnableRtl();
          var scrollbarWidth = _this.gridOptionsWrapper.getScrollbarWidth();
          var addPaddingForScrollbar = _this.scrollVisibleService.isVerticalScrollShowing() && (isRtl && pinningLeft || !isRtl && pinningRight);
          var widthWithPadding = addPaddingForScrollbar ? width + scrollbarWidth : width;
          _this.comp.setPinnedContainerWidth(widthWithPadding + "px");
          _this.comp.addOrRemoveCssClass("ag-hidden", hidden);
        };
        this.addManagedListener(this.eventService, Events.EVENT_LEFT_PINNED_WIDTH_CHANGED, listener);
        this.addManagedListener(this.eventService, Events.EVENT_RIGHT_PINNED_WIDTH_CHANGED, listener);
        this.addManagedListener(this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, listener);
        this.addManagedListener(this.eventService, Events.EVENT_SCROLLBAR_WIDTH_CHANGED, listener);
      };
      HeaderRowContainerCtrl2.prototype.getHeaderCtrlForColumn = function(column) {
        if (column instanceof Column) {
          if (!this.columnsRowCtrl) {
            return;
          }
          return this.columnsRowCtrl.getHeaderCellCtrl(column);
        }
        if (this.groupsRowCtrls.length === 0) {
          return;
        }
        for (var i = 0; i < this.groupsRowCtrls.length; i++) {
          var ctrl = this.groupsRowCtrls[i].getHeaderCellCtrl(column);
          if (ctrl) {
            return ctrl;
          }
        }
      };
      HeaderRowContainerCtrl2.prototype.getHtmlElementForColumnHeader = function(column) {
        var cellCtrl = this.getHeaderCtrlForColumn(column);
        if (!cellCtrl) {
          return null;
        }
        return cellCtrl.getGui();
      };
      HeaderRowContainerCtrl2.prototype.getRowType = function(rowIndex) {
        var allCtrls = this.getAllCtrls();
        var ctrl = allCtrls[rowIndex];
        return ctrl ? ctrl.getType() : void 0;
      };
      HeaderRowContainerCtrl2.prototype.focusHeader = function(rowIndex, column, event) {
        var allCtrls = this.getAllCtrls();
        var ctrl = allCtrls[rowIndex];
        if (!ctrl) {
          return false;
        }
        return ctrl.focusHeader(column, event);
      };
      HeaderRowContainerCtrl2.prototype.getRowCount = function() {
        return this.getAllCtrls().length;
      };
      __decorate$1g([
        Autowired("ctrlsService")
      ], HeaderRowContainerCtrl2.prototype, "ctrlsService", void 0);
      __decorate$1g([
        Autowired("scrollVisibleService")
      ], HeaderRowContainerCtrl2.prototype, "scrollVisibleService", void 0);
      __decorate$1g([
        Autowired("pinnedWidthService")
      ], HeaderRowContainerCtrl2.prototype, "pinnedWidthService", void 0);
      __decorate$1g([
        Autowired("columnModel")
      ], HeaderRowContainerCtrl2.prototype, "columnModel", void 0);
      __decorate$1g([
        Autowired("focusService")
      ], HeaderRowContainerCtrl2.prototype, "focusService", void 0);
      return HeaderRowContainerCtrl2;
    }(BeanStub);
    __extends$1m = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1f = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    HeaderRowContainerComp = function(_super) {
      __extends$1m(HeaderRowContainerComp2, _super);
      function HeaderRowContainerComp2(pinned) {
        var _this = _super.call(this) || this;
        _this.headerRowComps = {};
        _this.rowCompsList = [];
        _this.pinned = pinned;
        return _this;
      }
      HeaderRowContainerComp2.prototype.init = function() {
        var _this = this;
        this.selectAndSetTemplate();
        var compProxy = {
          addOrRemoveCssClass: function(cssClassName, on) {
            return _this.addOrRemoveCssClass(cssClassName, on);
          },
          setCtrls: function(ctrls) {
            return _this.setCtrls(ctrls);
          },
          setCenterWidth: function(width) {
            return _this.eCenterContainer.style.width = width;
          },
          setContainerTransform: function(transform) {
            return _this.eCenterContainer.style.transform = transform;
          },
          setPinnedContainerWidth: function(width) {
            var eGui = _this.getGui();
            eGui.style.width = width;
            eGui.style.maxWidth = width;
            eGui.style.minWidth = width;
          }
        };
        var ctrl = this.createManagedBean(new HeaderRowContainerCtrl(this.pinned));
        ctrl.setComp(compProxy, this.getGui());
      };
      HeaderRowContainerComp2.prototype.selectAndSetTemplate = function() {
        var pinnedLeft = this.pinned == Constants.PINNED_LEFT;
        var pinnedRight = this.pinned == Constants.PINNED_RIGHT;
        var template = pinnedLeft ? HeaderRowContainerComp2.PINNED_LEFT_TEMPLATE : pinnedRight ? HeaderRowContainerComp2.PINNED_RIGHT_TEMPLATE : HeaderRowContainerComp2.CENTER_TEMPLATE;
        this.setTemplate(template);
        this.eRowContainer = this.eCenterContainer ? this.eCenterContainer : this.getGui();
      };
      HeaderRowContainerComp2.prototype.destroyRowComps = function() {
        this.setCtrls([]);
      };
      HeaderRowContainerComp2.prototype.destroyRowComp = function(rowComp) {
        this.destroyBean(rowComp);
        this.eRowContainer.removeChild(rowComp.getGui());
      };
      HeaderRowContainerComp2.prototype.setCtrls = function(ctrls) {
        var _this = this;
        var oldRowComps = this.headerRowComps;
        this.headerRowComps = {};
        this.rowCompsList = [];
        var prevGui;
        var appendEnsuringDomOrder = function(rowComp) {
          var eGui = rowComp.getGui();
          var notAlreadyIn = eGui.parentElement != _this.eRowContainer;
          if (notAlreadyIn) {
            _this.eRowContainer.appendChild(eGui);
          }
          if (prevGui) {
            ensureDomOrder(_this.eRowContainer, eGui, prevGui);
          }
          prevGui = eGui;
        };
        ctrls.forEach(function(ctrl) {
          var ctrlId = ctrl.getInstanceId();
          var existingComp = oldRowComps[ctrlId];
          delete oldRowComps[ctrlId];
          var rowComp = existingComp ? existingComp : _this.createBean(new HeaderRowComp(ctrl));
          _this.headerRowComps[ctrlId] = rowComp;
          _this.rowCompsList.push(rowComp);
          appendEnsuringDomOrder(rowComp);
        });
        getAllValuesInObject(oldRowComps).forEach(function(c) {
          return _this.destroyRowComp(c);
        });
      };
      HeaderRowContainerComp2.PINNED_LEFT_TEMPLATE = '<div class="ag-pinned-left-header" role="presentation"/>';
      HeaderRowContainerComp2.PINNED_RIGHT_TEMPLATE = '<div class="ag-pinned-right-header" role="presentation"/>';
      HeaderRowContainerComp2.CENTER_TEMPLATE = '<div class="ag-header-viewport" role="presentation">\n            <div class="ag-header-container" ref="eCenterContainer" role="rowgroup"></div>\n        </div>';
      __decorate$1f([
        RefSelector("eCenterContainer")
      ], HeaderRowContainerComp2.prototype, "eCenterContainer", void 0);
      __decorate$1f([
        PostConstruct
      ], HeaderRowContainerComp2.prototype, "init", null);
      __decorate$1f([
        PreDestroy
      ], HeaderRowContainerComp2.prototype, "destroyRowComps", null);
      return HeaderRowContainerComp2;
    }(Component);
    __extends$1l = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1e = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    (function(HeaderNavigationDirection2) {
      HeaderNavigationDirection2[HeaderNavigationDirection2["UP"] = 0] = "UP";
      HeaderNavigationDirection2[HeaderNavigationDirection2["DOWN"] = 1] = "DOWN";
      HeaderNavigationDirection2[HeaderNavigationDirection2["LEFT"] = 2] = "LEFT";
      HeaderNavigationDirection2[HeaderNavigationDirection2["RIGHT"] = 3] = "RIGHT";
    })(HeaderNavigationDirection || (HeaderNavigationDirection = {}));
    HeaderNavigationService = function(_super) {
      __extends$1l(HeaderNavigationService2, _super);
      function HeaderNavigationService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      HeaderNavigationService2.prototype.postConstruct = function() {
        var _this = this;
        this.ctrlsService.whenReady(function(p) {
          _this.gridBodyCon = p.gridBodyCtrl;
        });
      };
      HeaderNavigationService2.prototype.getHeaderRowCount = function() {
        var centerHeaderContainer = this.ctrlsService.getHeaderRowContainerCtrl();
        return centerHeaderContainer ? centerHeaderContainer.getRowCount() : 0;
      };
      HeaderNavigationService2.prototype.getHeaderRowType = function(rowIndex) {
        var centerHeaderContainer = this.ctrlsService.getHeaderRowContainerCtrl();
        if (centerHeaderContainer) {
          return centerHeaderContainer.getRowType(rowIndex);
        }
      };
      HeaderNavigationService2.prototype.navigateVertically = function(direction, fromHeader, event) {
        if (!fromHeader) {
          fromHeader = this.focusService.getFocusedHeader();
        }
        if (!fromHeader) {
          return false;
        }
        var headerRowIndex = fromHeader.headerRowIndex, column = fromHeader.column;
        var rowLen = this.getHeaderRowCount();
        var isUp = direction === HeaderNavigationDirection.UP;
        var nextRow = isUp ? headerRowIndex - 1 : headerRowIndex + 1;
        var nextFocusColumn = null;
        var skipColumn = false;
        if (nextRow < 0) {
          nextRow = 0;
          nextFocusColumn = column;
          skipColumn = true;
        }
        if (nextRow >= rowLen) {
          nextRow = -1;
        }
        var currentRowType = this.getHeaderRowType(headerRowIndex);
        if (!skipColumn) {
          if (currentRowType === HeaderRowType.COLUMN_GROUP) {
            var currentColumn = column;
            nextFocusColumn = isUp ? column.getParent() : currentColumn.getDisplayedChildren()[0];
          } else if (currentRowType === HeaderRowType.FLOATING_FILTER) {
            nextFocusColumn = column;
          } else {
            var currentColumn = column;
            nextFocusColumn = isUp ? currentColumn.getParent() : currentColumn;
          }
          if (!nextFocusColumn) {
            return false;
          }
        }
        return this.focusService.focusHeaderPosition({
          headerPosition: { headerRowIndex: nextRow, column: nextFocusColumn },
          allowUserOverride: true,
          event
        });
      };
      HeaderNavigationService2.prototype.navigateHorizontally = function(direction, fromTab, event) {
        if (fromTab === void 0) {
          fromTab = false;
        }
        var focusedHeader = this.focusService.getFocusedHeader();
        var isLeft = direction === HeaderNavigationDirection.LEFT;
        var isRtl = this.gridOptionsWrapper.isEnableRtl();
        var nextHeader;
        var normalisedDirection;
        if (isLeft !== isRtl) {
          normalisedDirection = "Before";
          nextHeader = this.headerPositionUtils.findHeader(focusedHeader, normalisedDirection);
        } else {
          normalisedDirection = "After";
          nextHeader = this.headerPositionUtils.findHeader(focusedHeader, normalisedDirection);
        }
        if (nextHeader || !fromTab) {
          return this.focusService.focusHeaderPosition({
            headerPosition: nextHeader,
            direction: normalisedDirection,
            fromTab,
            allowUserOverride: true,
            event
          });
        }
        return this.focusNextHeaderRow(focusedHeader, normalisedDirection, event);
      };
      HeaderNavigationService2.prototype.focusNextHeaderRow = function(focusedHeader, direction, event) {
        var currentIndex = focusedHeader.headerRowIndex;
        var nextPosition = null;
        var nextRowIndex;
        if (direction === "Before") {
          if (currentIndex > 0) {
            nextRowIndex = currentIndex - 1;
            nextPosition = this.headerPositionUtils.findColAtEdgeForHeaderRow(nextRowIndex, "end");
          }
        } else {
          nextRowIndex = currentIndex + 1;
          nextPosition = this.headerPositionUtils.findColAtEdgeForHeaderRow(nextRowIndex, "start");
        }
        return this.focusService.focusHeaderPosition({
          headerPosition: nextPosition,
          direction,
          fromTab: true,
          allowUserOverride: true,
          event
        });
      };
      HeaderNavigationService2.prototype.scrollToColumn = function(column, direction) {
        if (direction === void 0) {
          direction = "After";
        }
        if (column.getPinned()) {
          return;
        }
        var columnToScrollTo;
        if (column instanceof ColumnGroup) {
          var columns = column.getDisplayedLeafColumns();
          columnToScrollTo = direction === "Before" ? last(columns) : columns[0];
        } else {
          columnToScrollTo = column;
        }
        this.gridBodyCon.getScrollFeature().ensureColumnVisible(columnToScrollTo);
      };
      __decorate$1e([
        Autowired("focusService")
      ], HeaderNavigationService2.prototype, "focusService", void 0);
      __decorate$1e([
        Autowired("headerPositionUtils")
      ], HeaderNavigationService2.prototype, "headerPositionUtils", void 0);
      __decorate$1e([
        Autowired("animationFrameService")
      ], HeaderNavigationService2.prototype, "animationFrameService", void 0);
      __decorate$1e([
        Autowired("ctrlsService")
      ], HeaderNavigationService2.prototype, "ctrlsService", void 0);
      __decorate$1e([
        PostConstruct
      ], HeaderNavigationService2.prototype, "postConstruct", null);
      HeaderNavigationService2 = __decorate$1e([
        Bean("headerNavigationService")
      ], HeaderNavigationService2);
      return HeaderNavigationService2;
    }(BeanStub);
    __extends$1k = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1d = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    GridHeaderCtrl = function(_super) {
      __extends$1k(GridHeaderCtrl2, _super);
      function GridHeaderCtrl2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      GridHeaderCtrl2.prototype.setComp = function(comp, eGui, eFocusableElement) {
        this.comp = comp;
        this.eGui = eGui;
        this.createManagedBean(new ManagedFocusFeature(eFocusableElement, {
          onTabKeyDown: this.onTabKeyDown.bind(this),
          handleKeyDown: this.handleKeyDown.bind(this),
          onFocusOut: this.onFocusOut.bind(this)
        }));
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.onPivotModeChanged.bind(this));
        this.onPivotModeChanged();
        this.setupHeaderHeight();
        this.ctrlsService.registerGridHeaderCtrl(this);
      };
      GridHeaderCtrl2.prototype.setupHeaderHeight = function() {
        var listener = this.setHeaderHeight.bind(this);
        listener();
        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_HEADER_HEIGHT, listener);
        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_PIVOT_HEADER_HEIGHT, listener);
        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_GROUP_HEADER_HEIGHT, listener);
        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_PIVOT_GROUP_HEADER_HEIGHT, listener);
        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_FLOATING_FILTERS_HEIGHT, listener);
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, listener);
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_HEADER_HEIGHT_CHANGED, listener);
      };
      GridHeaderCtrl2.prototype.getHeaderHeight = function() {
        return this.headerHeight;
      };
      GridHeaderCtrl2.prototype.setHeaderHeight = function() {
        var _a = this, columnModel = _a.columnModel, gridOptionsWrapper = _a.gridOptionsWrapper;
        var numberOfFloating = 0;
        var headerRowCount = columnModel.getHeaderRowCount();
        var totalHeaderHeight;
        var hasFloatingFilters = columnModel.hasFloatingFilters();
        if (hasFloatingFilters) {
          headerRowCount++;
          numberOfFloating = 1;
        }
        var groupHeight = this.columnModel.getColumnGroupHeaderRowHeight();
        var headerHeight = this.columnModel.getColumnHeaderRowHeight();
        var numberOfNonGroups = 1 + numberOfFloating;
        var numberOfGroups = headerRowCount - numberOfNonGroups;
        totalHeaderHeight = numberOfFloating * gridOptionsWrapper.getFloatingFiltersHeight();
        totalHeaderHeight += numberOfGroups * groupHeight;
        totalHeaderHeight += headerHeight;
        if (this.headerHeight === totalHeaderHeight) {
          return;
        }
        this.headerHeight = totalHeaderHeight;
        var px = totalHeaderHeight + 1 + "px";
        this.comp.setHeightAndMinHeight(px);
        this.eventService.dispatchEvent({
          type: Events.EVENT_HEADER_HEIGHT_CHANGED
        });
      };
      GridHeaderCtrl2.prototype.onPivotModeChanged = function() {
        var pivotMode = this.columnModel.isPivotMode();
        this.comp.addOrRemoveCssClass("ag-pivot-on", pivotMode);
        this.comp.addOrRemoveCssClass("ag-pivot-off", !pivotMode);
      };
      GridHeaderCtrl2.prototype.onTabKeyDown = function(e) {
        var isRtl = this.gridOptionsWrapper.isEnableRtl();
        var direction = e.shiftKey !== isRtl ? HeaderNavigationDirection.LEFT : HeaderNavigationDirection.RIGHT;
        if (this.headerNavigationService.navigateHorizontally(direction, true, e) || this.focusService.focusNextGridCoreContainer(e.shiftKey)) {
          e.preventDefault();
        }
      };
      GridHeaderCtrl2.prototype.handleKeyDown = function(e) {
        var direction = null;
        switch (e.key) {
          case KeyCode.LEFT:
            direction = HeaderNavigationDirection.LEFT;
          case KeyCode.RIGHT:
            if (!exists(direction)) {
              direction = HeaderNavigationDirection.RIGHT;
            }
            this.headerNavigationService.navigateHorizontally(direction, false, e);
            break;
          case KeyCode.UP:
            direction = HeaderNavigationDirection.UP;
          case KeyCode.DOWN:
            if (!exists(direction)) {
              direction = HeaderNavigationDirection.DOWN;
            }
            if (this.headerNavigationService.navigateVertically(direction, null, e)) {
              e.preventDefault();
            }
            break;
          default:
            return;
        }
      };
      GridHeaderCtrl2.prototype.onFocusOut = function(e) {
        var eDocument = this.gridOptionsWrapper.getDocument();
        var relatedTarget = e.relatedTarget;
        if (!relatedTarget && this.eGui.contains(eDocument.activeElement)) {
          return;
        }
        if (!this.eGui.contains(relatedTarget)) {
          this.focusService.clearFocusedHeader();
        }
      };
      __decorate$1d([
        Autowired("headerNavigationService")
      ], GridHeaderCtrl2.prototype, "headerNavigationService", void 0);
      __decorate$1d([
        Autowired("focusService")
      ], GridHeaderCtrl2.prototype, "focusService", void 0);
      __decorate$1d([
        Autowired("columnModel")
      ], GridHeaderCtrl2.prototype, "columnModel", void 0);
      __decorate$1d([
        Autowired("ctrlsService")
      ], GridHeaderCtrl2.prototype, "ctrlsService", void 0);
      return GridHeaderCtrl2;
    }(BeanStub);
    __extends$1j = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1c = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    GridHeaderComp = function(_super) {
      __extends$1j(GridHeaderComp2, _super);
      function GridHeaderComp2() {
        return _super.call(this, GridHeaderComp2.TEMPLATE) || this;
      }
      GridHeaderComp2.prototype.postConstruct = function() {
        var _this = this;
        var compProxy = {
          addOrRemoveCssClass: function(cssClassName, on) {
            return _this.addOrRemoveCssClass(cssClassName, on);
          },
          setHeightAndMinHeight: function(height) {
            _this.getGui().style.height = height;
            _this.getGui().style.minHeight = height;
          }
        };
        var ctrl = this.createManagedBean(new GridHeaderCtrl());
        ctrl.setComp(compProxy, this.getGui(), this.getFocusableElement());
        var addContainer = function(container) {
          _this.createManagedBean(container);
          _this.appendChild(container);
        };
        addContainer(new HeaderRowContainerComp(Constants.PINNED_LEFT));
        addContainer(new HeaderRowContainerComp(null));
        addContainer(new HeaderRowContainerComp(Constants.PINNED_RIGHT));
      };
      GridHeaderComp2.TEMPLATE = '<div class="ag-header" role="presentation"/>';
      __decorate$1c([
        PostConstruct
      ], GridHeaderComp2.prototype, "postConstruct", null);
      return GridHeaderComp2;
    }(Component);
    __extends$1i = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1b = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    HorizontalResizeService = function(_super) {
      __extends$1i(HorizontalResizeService2, _super);
      function HorizontalResizeService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      HorizontalResizeService2.prototype.addResizeBar = function(params) {
        var _this = this;
        var dragSource = {
          dragStartPixels: params.dragStartPixels || 0,
          eElement: params.eResizeBar,
          onDragStart: this.onDragStart.bind(this, params),
          onDragStop: this.onDragStop.bind(this, params),
          onDragging: this.onDragging.bind(this, params)
        };
        this.dragService.addDragSource(dragSource, true);
        var finishedWithResizeFunc = function() {
          return _this.dragService.removeDragSource(dragSource);
        };
        return finishedWithResizeFunc;
      };
      HorizontalResizeService2.prototype.onDragStart = function(params, mouseEvent) {
        this.dragStartX = mouseEvent.clientX;
        this.setResizeIcons();
        var shiftKey = mouseEvent instanceof MouseEvent && mouseEvent.shiftKey === true;
        params.onResizeStart(shiftKey);
      };
      HorizontalResizeService2.prototype.setResizeIcons = function() {
        var ctrl = this.ctrlsService.getGridCtrl();
        ctrl.setResizeCursor(true);
        ctrl.disableUserSelect(true);
      };
      HorizontalResizeService2.prototype.onDragStop = function(params, mouseEvent) {
        params.onResizeEnd(this.resizeAmount);
        this.resetIcons();
      };
      HorizontalResizeService2.prototype.resetIcons = function() {
        var ctrl = this.ctrlsService.getGridCtrl();
        ctrl.setResizeCursor(false);
        ctrl.disableUserSelect(false);
      };
      HorizontalResizeService2.prototype.onDragging = function(params, mouseEvent) {
        this.resizeAmount = mouseEvent.clientX - this.dragStartX;
        params.onResizing(this.resizeAmount);
      };
      __decorate$1b([
        Autowired("dragService")
      ], HorizontalResizeService2.prototype, "dragService", void 0);
      __decorate$1b([
        Autowired("ctrlsService")
      ], HorizontalResizeService2.prototype, "ctrlsService", void 0);
      HorizontalResizeService2 = __decorate$1b([
        Bean("horizontalResizeService")
      ], HorizontalResizeService2);
      return HorizontalResizeService2;
    }(BeanStub);
    __extends$1h = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1a = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    StandardMenuFactory = function(_super) {
      __extends$1h(StandardMenuFactory2, _super);
      function StandardMenuFactory2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      StandardMenuFactory2.prototype.hideActiveMenu = function() {
        if (this.hidePopup) {
          this.hidePopup();
        }
      };
      StandardMenuFactory2.prototype.showMenuAfterMouseEvent = function(column, mouseEvent) {
        var _this = this;
        this.showPopup(column, function(eMenu) {
          _this.popupService.positionPopupUnderMouseEvent({
            column,
            type: "columnMenu",
            mouseEvent,
            ePopup: eMenu
          });
        }, mouseEvent.target);
      };
      StandardMenuFactory2.prototype.showMenuAfterButtonClick = function(column, eventSource, containerType) {
        var _this = this;
        this.showPopup(column, function(eMenu) {
          _this.popupService.positionPopupUnderComponent({
            type: containerType,
            eventSource,
            ePopup: eMenu,
            keepWithinBounds: true,
            column
          });
        }, eventSource);
      };
      StandardMenuFactory2.prototype.showPopup = function(column, positionCallback, eventSource) {
        var _this = this;
        var filterWrapper = this.filterManager.getOrCreateFilterWrapper(column, "COLUMN_MENU");
        if (!filterWrapper) {
          throw new Error("AG Grid - unable to show popup filter, filter instantiation failed");
        }
        var eMenu = document.createElement("div");
        setAriaRole(eMenu, "presentation");
        eMenu.classList.add("ag-menu");
        this.tabListener = this.addManagedListener(eMenu, "keydown", function(e) {
          return _this.trapFocusWithin(e, eMenu);
        });
        filterWrapper.guiPromise.then(function(gui) {
          return eMenu.appendChild(gui);
        });
        var hidePopup;
        var anchorToElement = eventSource || this.ctrlsService.getGridBodyCtrl().getGui();
        var closedCallback = function(e) {
          column.setMenuVisible(false, "contextMenu");
          var isKeyboardEvent = e instanceof KeyboardEvent;
          if (_this.tabListener) {
            _this.tabListener = _this.tabListener();
          }
          if (isKeyboardEvent && eventSource && isVisible(eventSource)) {
            var focusableEl = _this.focusService.findTabbableParent(eventSource);
            if (focusableEl) {
              focusableEl.focus();
            }
          }
        };
        var translate = this.gridOptionsWrapper.getLocaleTextFunc();
        var addPopupRes = this.popupService.addPopup({
          modal: true,
          eChild: eMenu,
          closeOnEsc: true,
          closedCallback,
          positionCallback: function() {
            return positionCallback(eMenu);
          },
          anchorToElement,
          ariaLabel: translate("ariaLabelColumnMenu", "Column Menu")
        });
        if (addPopupRes) {
          this.hidePopup = hidePopup = addPopupRes.hideFunc;
        }
        filterWrapper.filterPromise.then(function(filter) {
          positionCallback(eMenu);
          if (filter.afterGuiAttached) {
            filter.afterGuiAttached({ container: "columnMenu", hidePopup });
          }
        });
        column.setMenuVisible(true, "contextMenu");
      };
      StandardMenuFactory2.prototype.trapFocusWithin = function(e, menu) {
        if (e.key !== KeyCode.TAB || e.defaultPrevented || this.focusService.findNextFocusableElement(menu, false, e.shiftKey)) {
          return;
        }
        e.preventDefault();
        this.focusService.focusInto(menu, e.shiftKey);
      };
      StandardMenuFactory2.prototype.isMenuEnabled = function(column) {
        return column.isFilterAllowed();
      };
      __decorate$1a([
        Autowired("filterManager")
      ], StandardMenuFactory2.prototype, "filterManager", void 0);
      __decorate$1a([
        Autowired("popupService")
      ], StandardMenuFactory2.prototype, "popupService", void 0);
      __decorate$1a([
        Autowired("focusService")
      ], StandardMenuFactory2.prototype, "focusService", void 0);
      __decorate$1a([
        Autowired("ctrlsService")
      ], StandardMenuFactory2.prototype, "ctrlsService", void 0);
      StandardMenuFactory2 = __decorate$1a([
        Bean("menuFactory")
      ], StandardMenuFactory2);
      return StandardMenuFactory2;
    }(BeanStub);
    __extends$1g = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$19 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    TabbedLayout = function(_super) {
      __extends$1g(TabbedLayout2, _super);
      function TabbedLayout2(params) {
        var _this = _super.call(this, TabbedLayout2.getTemplate(params.cssClass)) || this;
        _this.items = [];
        _this.tabbedItemScrollMap = /* @__PURE__ */ new Map();
        _this.params = params;
        if (params.items) {
          params.items.forEach(function(item) {
            return _this.addItem(item);
          });
        }
        return _this;
      }
      TabbedLayout2.prototype.postConstruct = function() {
        this.createManagedBean(new ManagedFocusFeature(this.getFocusableElement(), {
          onTabKeyDown: this.onTabKeyDown.bind(this),
          handleKeyDown: this.handleKeyDown.bind(this)
        }));
      };
      TabbedLayout2.getTemplate = function(cssClass) {
        return '<div class="ag-tabs ' + cssClass + '">\n            <div ref="eHeader" role="tablist" class="ag-tabs-header ' + (cssClass ? cssClass + "-header" : "") + '"></div>\n            <div ref="eBody" role="presentation" class="ag-tabs-body ' + (cssClass ? cssClass + "-body" : "") + '"></div>\n        </div>';
      };
      TabbedLayout2.prototype.handleKeyDown = function(e) {
        var eDocument = this.gridOptionsWrapper.getDocument();
        switch (e.key) {
          case KeyCode.RIGHT:
          case KeyCode.LEFT:
            if (!this.eHeader.contains(eDocument.activeElement)) {
              return;
            }
            var isRightKey = e.key === KeyCode.RIGHT;
            var isRtl = this.gridOptionsWrapper.isEnableRtl();
            var currentPosition = this.items.indexOf(this.activeItem);
            var nextPosition = isRightKey !== isRtl ? Math.min(currentPosition + 1, this.items.length - 1) : Math.max(currentPosition - 1, 0);
            if (currentPosition === nextPosition) {
              return;
            }
            e.preventDefault();
            var nextItem = this.items[nextPosition];
            this.showItemWrapper(nextItem);
            nextItem.eHeaderButton.focus();
            break;
          case KeyCode.UP:
          case KeyCode.DOWN:
            e.stopPropagation();
            break;
        }
      };
      TabbedLayout2.prototype.onTabKeyDown = function(e) {
        if (e.defaultPrevented) {
          return;
        }
        var _a = this, focusService = _a.focusService, eHeader = _a.eHeader, eBody = _a.eBody, activeItem = _a.activeItem;
        var eDocument = this.gridOptionsWrapper.getDocument();
        var activeElement = eDocument.activeElement;
        e.preventDefault();
        if (eHeader.contains(activeElement)) {
          focusService.focusInto(eBody, e.shiftKey);
        } else {
          if (focusService.isFocusUnderManagedComponent(eBody)) {
            activeItem.eHeaderButton.focus();
          } else {
            var nextEl = focusService.findNextFocusableElement(eBody, false, e.shiftKey);
            if (nextEl) {
              nextEl.focus();
            } else {
              activeItem.eHeaderButton.focus();
            }
          }
        }
      };
      TabbedLayout2.prototype.setAfterAttachedParams = function(params) {
        this.afterAttachedParams = params;
      };
      TabbedLayout2.prototype.showFirstItem = function() {
        if (this.items.length > 0) {
          this.showItemWrapper(this.items[0]);
        }
      };
      TabbedLayout2.prototype.addItem = function(item) {
        var eHeaderButton = document.createElement("span");
        setAriaRole(eHeaderButton, "tab");
        eHeaderButton.setAttribute("tabIndex", "-1");
        eHeaderButton.appendChild(item.title);
        eHeaderButton.classList.add("ag-tab");
        this.eHeader.appendChild(eHeaderButton);
        setAriaLabel(eHeaderButton, item.titleLabel);
        var wrapper = {
          tabbedItem: item,
          eHeaderButton
        };
        this.items.push(wrapper);
        eHeaderButton.addEventListener("click", this.showItemWrapper.bind(this, wrapper));
      };
      TabbedLayout2.prototype.showItem = function(tabbedItem) {
        var itemWrapper = this.items.find(function(wrapper) {
          return wrapper.tabbedItem === tabbedItem;
        });
        if (itemWrapper) {
          this.showItemWrapper(itemWrapper);
        }
      };
      TabbedLayout2.prototype.showItemWrapper = function(wrapper) {
        var _this = this;
        var tabbedItem = wrapper.tabbedItem, eHeaderButton = wrapper.eHeaderButton;
        if (this.params.onItemClicked) {
          this.params.onItemClicked({ item: tabbedItem });
        }
        if (this.activeItem === wrapper) {
          callIfPresent(this.params.onActiveItemClicked);
          return;
        }
        if (this.lastScrollListener) {
          this.lastScrollListener = this.lastScrollListener();
        }
        clearElement(this.eBody);
        tabbedItem.bodyPromise.then(function(body) {
          _this.eBody.appendChild(body);
          var onlyUnmanaged = !_this.focusService.isKeyboardMode();
          _this.focusService.focusInto(_this.eBody, false, onlyUnmanaged);
          if (tabbedItem.afterAttachedCallback) {
            tabbedItem.afterAttachedCallback(_this.afterAttachedParams);
          }
          if (_this.params.keepScrollPosition) {
            var scrollableContainer_1 = tabbedItem.getScrollableContainer && tabbedItem.getScrollableContainer() || body;
            _this.lastScrollListener = _this.addManagedListener(scrollableContainer_1, "scroll", function() {
              _this.tabbedItemScrollMap.set(tabbedItem.name, scrollableContainer_1.scrollTop);
            });
            var scrollPosition_1 = _this.tabbedItemScrollMap.get(tabbedItem.name);
            if (scrollPosition_1 !== void 0) {
              setTimeout(function() {
                scrollableContainer_1.scrollTop = scrollPosition_1;
              }, 0);
            }
          }
        });
        if (this.activeItem) {
          this.activeItem.eHeaderButton.classList.remove("ag-tab-selected");
        }
        eHeaderButton.classList.add("ag-tab-selected");
        this.activeItem = wrapper;
      };
      __decorate$19([
        Autowired("focusService")
      ], TabbedLayout2.prototype, "focusService", void 0);
      __decorate$19([
        RefSelector("eHeader")
      ], TabbedLayout2.prototype, "eHeader", void 0);
      __decorate$19([
        RefSelector("eBody")
      ], TabbedLayout2.prototype, "eBody", void 0);
      __decorate$19([
        PostConstruct
      ], TabbedLayout2.prototype, "postConstruct", null);
      return TabbedLayout2;
    }(Component);
    __extends$1f = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$18 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    DEBOUNCE_DELAY = 50;
    ResizeObserverService = function(_super) {
      __extends$1f(ResizeObserverService2, _super);
      function ResizeObserverService2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.polyfillFunctions = [];
        return _this;
      }
      ResizeObserverService2.prototype.observeResize = function(element, callback) {
        var _this = this;
        var eDocument = this.gridOptionsWrapper.getDocument();
        var win = eDocument.defaultView || window;
        var debouncedCallback = debounce(callback, DEBOUNCE_DELAY);
        var useBrowserResizeObserver = function() {
          var resizeObserver = new win.ResizeObserver(debouncedCallback);
          resizeObserver.observe(element);
          return function() {
            return resizeObserver.disconnect();
          };
        };
        var usePolyfill = function() {
          var widthLastTime = offsetWidth(element);
          var heightLastTime = offsetHeight(element);
          var running = true;
          var periodicallyCheckWidthAndHeight = function() {
            if (running) {
              var newWidth = offsetWidth(element);
              var newHeight = offsetHeight(element);
              var changed = newWidth !== widthLastTime || newHeight !== heightLastTime;
              if (changed) {
                widthLastTime = newWidth;
                heightLastTime = newHeight;
                callback();
              }
              _this.doNextPolyfillTurn(periodicallyCheckWidthAndHeight);
            }
          };
          periodicallyCheckWidthAndHeight();
          return function() {
            return running = false;
          };
        };
        var suppressResize = this.gridOptionsWrapper.isSuppressBrowserResizeObserver();
        var resizeObserverExists = !!win.ResizeObserver;
        if (resizeObserverExists && !suppressResize) {
          return useBrowserResizeObserver();
        }
        return usePolyfill();
      };
      ResizeObserverService2.prototype.doNextPolyfillTurn = function(func) {
        this.polyfillFunctions.push(func);
        this.schedulePolyfill();
      };
      ResizeObserverService2.prototype.schedulePolyfill = function() {
        var _this = this;
        if (this.polyfillScheduled) {
          return;
        }
        var executeAllFuncs = function() {
          var funcs = _this.polyfillFunctions;
          _this.polyfillScheduled = false;
          _this.polyfillFunctions = [];
          funcs.forEach(function(f) {
            return f();
          });
        };
        this.polyfillScheduled = true;
        this.getFrameworkOverrides().setTimeout(executeAllFuncs, DEBOUNCE_DELAY);
      };
      ResizeObserverService2 = __decorate$18([
        Bean("resizeObserverService")
      ], ResizeObserverService2);
      return ResizeObserverService2;
    }(BeanStub);
    __extends$1e = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$17 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    AnimationFrameService = function(_super) {
      __extends$1e(AnimationFrameService2, _super);
      function AnimationFrameService2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.createTasksP1 = { list: [], sorted: false };
        _this.createTasksP2 = { list: [], sorted: false };
        _this.destroyTasks = [];
        _this.ticking = false;
        _this.scrollGoingDown = true;
        _this.lastScrollTop = 0;
        _this.taskCount = 0;
        _this.cancelledTasks = /* @__PURE__ */ new Set();
        return _this;
      }
      AnimationFrameService2.prototype.setScrollTop = function(scrollTop) {
        this.scrollGoingDown = scrollTop > this.lastScrollTop;
        this.lastScrollTop = scrollTop;
      };
      AnimationFrameService2.prototype.init = function() {
        this.useAnimationFrame = !this.gridOptionsWrapper.isSuppressAnimationFrame();
      };
      AnimationFrameService2.prototype.isOn = function() {
        return this.useAnimationFrame;
      };
      AnimationFrameService2.prototype.verifyAnimationFrameOn = function(methodName) {
        if (this.useAnimationFrame === false) {
          console.warn("AG Grid: AnimationFrameService." + methodName + " called but animation frames are off");
        }
      };
      AnimationFrameService2.prototype.createTask = function(task, index, list) {
        this.verifyAnimationFrameOn(list);
        var taskItem = { task, index, createOrder: ++this.taskCount };
        this.addTaskToList(this[list], taskItem);
        this.schedule();
      };
      AnimationFrameService2.prototype.cancelTask = function(task) {
        this.cancelledTasks.add(task);
      };
      AnimationFrameService2.prototype.addTaskToList = function(taskList, task) {
        taskList.list.push(task);
        taskList.sorted = false;
      };
      AnimationFrameService2.prototype.sortTaskList = function(taskList) {
        if (taskList.sorted) {
          return;
        }
        var sortDirection = this.scrollGoingDown ? 1 : -1;
        taskList.list.sort(function(a, b) {
          return a.index !== b.index ? sortDirection * (b.index - a.index) : b.createOrder - a.createOrder;
        });
        taskList.sorted = true;
      };
      AnimationFrameService2.prototype.addDestroyTask = function(task) {
        this.verifyAnimationFrameOn("createTasksP3");
        this.destroyTasks.push(task);
        this.schedule();
      };
      AnimationFrameService2.prototype.executeFrame = function(millis) {
        this.verifyAnimationFrameOn("executeFrame");
        var p1TaskList = this.createTasksP1;
        var p1Tasks = p1TaskList.list;
        var p2TaskList = this.createTasksP2;
        var p2Tasks = p2TaskList.list;
        var destroyTasks = this.destroyTasks;
        var frameStart = new Date().getTime();
        var duration = new Date().getTime() - frameStart;
        var noMaxMillis = millis <= 0;
        var gridBodyCon = this.ctrlsService.getGridBodyCtrl();
        while (noMaxMillis || duration < millis) {
          var gridBodyDidSomething = gridBodyCon.getScrollFeature().executeAnimationFrameScroll();
          if (!gridBodyDidSomething) {
            var task = void 0;
            if (p1Tasks.length) {
              this.sortTaskList(p1TaskList);
              task = p1Tasks.pop().task;
            } else if (p2Tasks.length) {
              this.sortTaskList(p2TaskList);
              task = p2Tasks.pop().task;
            } else if (destroyTasks.length) {
              task = destroyTasks.pop();
            } else {
              this.cancelledTasks.clear();
              break;
            }
            if (!this.cancelledTasks.has(task)) {
              task();
            }
          }
          duration = new Date().getTime() - frameStart;
        }
        if (p1Tasks.length || p2Tasks.length || destroyTasks.length) {
          this.requestFrame();
        } else {
          this.stopTicking();
        }
      };
      AnimationFrameService2.prototype.stopTicking = function() {
        this.ticking = false;
      };
      AnimationFrameService2.prototype.flushAllFrames = function() {
        if (!this.useAnimationFrame) {
          return;
        }
        this.executeFrame(-1);
      };
      AnimationFrameService2.prototype.schedule = function() {
        if (!this.useAnimationFrame) {
          return;
        }
        if (!this.ticking) {
          this.ticking = true;
          this.requestFrame();
        }
      };
      AnimationFrameService2.prototype.requestFrame = function() {
        var callback = this.executeFrame.bind(this, 60);
        var eDocument = this.gridOptionsWrapper.getDocument();
        var win = eDocument.defaultView || window;
        if (win.requestAnimationFrame) {
          win.requestAnimationFrame(callback);
        } else if (win.webkitRequestAnimationFrame) {
          win.webkitRequestAnimationFrame(callback);
        } else {
          win.setTimeout(callback, 0);
        }
      };
      AnimationFrameService2.prototype.isQueueEmpty = function() {
        return !this.ticking;
      };
      AnimationFrameService2.prototype.debounce = function(func) {
        var _this = this;
        var pending = false;
        return function() {
          if (!_this.isOn()) {
            _this.getFrameworkOverrides().setTimeout(func, 0);
            return;
          }
          if (pending) {
            return;
          }
          pending = true;
          _this.addDestroyTask(function() {
            pending = false;
            func();
          });
        };
      };
      __decorate$17([
        Autowired("ctrlsService")
      ], AnimationFrameService2.prototype, "ctrlsService", void 0);
      __decorate$17([
        PostConstruct
      ], AnimationFrameService2.prototype, "init", null);
      AnimationFrameService2 = __decorate$17([
        Bean("animationFrameService")
      ], AnimationFrameService2);
      return AnimationFrameService2;
    }(BeanStub);
    __extends$1d = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$16 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    RESIZE_CONTAINER_STYLE = "ag-resizer-wrapper";
    RESIZE_TEMPLATE = '<div class="' + RESIZE_CONTAINER_STYLE + '">\n        <div ref="eTopLeftResizer" class="ag-resizer ag-resizer-topLeft"></div>\n        <div ref="eTopResizer" class="ag-resizer ag-resizer-top"></div>\n        <div ref="eTopRightResizer" class="ag-resizer ag-resizer-topRight"></div>\n        <div ref="eRightResizer" class="ag-resizer ag-resizer-right"></div>\n        <div ref="eBottomRightResizer" class="ag-resizer ag-resizer-bottomRight"></div>\n        <div ref="eBottomResizer" class="ag-resizer ag-resizer-bottom"></div>\n        <div ref="eBottomLeftResizer" class="ag-resizer ag-resizer-bottomLeft"></div>\n        <div ref="eLeftResizer" class="ag-resizer ag-resizer-left"></div>\n    </div>';
    PositionableFeature = function(_super) {
      __extends$1d(PositionableFeature2, _super);
      function PositionableFeature2(element, config) {
        var _this = _super.call(this) || this;
        _this.element = element;
        _this.dragStartPosition = {
          x: 0,
          y: 0
        };
        _this.position = {
          x: 0,
          y: 0
        };
        _this.lastSize = {
          width: -1,
          height: -1
        };
        _this.positioned = false;
        _this.resizersAdded = false;
        _this.resizeListeners = [];
        _this.boundaryEl = null;
        _this.isResizing = false;
        _this.isMoving = false;
        _this.resizable = {};
        _this.movable = false;
        _this.currentResizer = null;
        _this.config = Object.assign({}, { popup: false }, config);
        return _this;
      }
      PositionableFeature2.prototype.center = function() {
        var _a = this.offsetParent, clientHeight = _a.clientHeight, clientWidth = _a.clientWidth;
        var x = clientWidth / 2 - this.getWidth() / 2;
        var y = clientHeight / 2 - this.getHeight() / 2;
        this.offsetElement(x, y);
      };
      PositionableFeature2.prototype.initialisePosition = function() {
        var _a = this.config, centered = _a.centered, forcePopupParentAsOffsetParent = _a.forcePopupParentAsOffsetParent, minWidth = _a.minWidth, width = _a.width, minHeight = _a.minHeight, height = _a.height, x = _a.x, y = _a.y;
        if (!this.offsetParent) {
          this.setOffsetParent();
        }
        var computedMinHeight = 0;
        var computedMinWidth = 0;
        var isVisible2 = !!this.element.offsetParent;
        if (isVisible2) {
          var boundaryEl = this.findBoundaryElement();
          var offsetParentComputedStyles = window.getComputedStyle(boundaryEl);
          if (offsetParentComputedStyles.minWidth != null) {
            var paddingWidth = boundaryEl.offsetWidth - this.element.offsetWidth;
            computedMinWidth = parseInt(offsetParentComputedStyles.minWidth, 10) - paddingWidth;
          }
          if (offsetParentComputedStyles.minHeight != null) {
            var paddingHeight = boundaryEl.offsetHeight - this.element.offsetHeight;
            computedMinHeight = parseInt(offsetParentComputedStyles.minHeight, 10) - paddingHeight;
          }
        }
        this.minHeight = minHeight || computedMinHeight;
        this.minWidth = minWidth || computedMinWidth;
        if (width) {
          this.setWidth(width);
        }
        if (height) {
          this.setHeight(height);
        }
        if (!width || !height) {
          this.refreshSize();
        }
        if (centered) {
          this.center();
        } else if (x || y) {
          this.offsetElement(x, y);
        } else if (isVisible2 && forcePopupParentAsOffsetParent && this.boundaryEl) {
          var top_1 = parseFloat(this.boundaryEl.style.top);
          var left = parseFloat(this.boundaryEl.style.left);
          this.offsetElement(isNaN(left) ? 0 : left, isNaN(top_1) ? 0 : top_1);
        }
        this.positioned = !!this.offsetParent;
      };
      PositionableFeature2.prototype.isPositioned = function() {
        return this.positioned;
      };
      PositionableFeature2.prototype.getPosition = function() {
        return this.position;
      };
      PositionableFeature2.prototype.setMovable = function(movable, moveElement) {
        if (!this.config.popup || movable === this.movable) {
          return;
        }
        this.movable = movable;
        var params = this.moveElementDragListener || {
          eElement: moveElement,
          onDragStart: this.onMoveStart.bind(this),
          onDragging: this.onMove.bind(this),
          onDragStop: this.onMoveEnd.bind(this)
        };
        if (movable) {
          this.dragService.addDragSource(params);
          this.moveElementDragListener = params;
        } else {
          this.dragService.removeDragSource(params);
          this.moveElementDragListener = void 0;
        }
      };
      PositionableFeature2.prototype.setResizable = function(resizable) {
        var _this = this;
        this.clearResizeListeners();
        if (resizable) {
          this.addResizers();
        } else {
          this.removeResizers();
        }
        if (typeof resizable === "boolean") {
          if (resizable === false) {
            return;
          }
          resizable = {
            topLeft: resizable,
            top: resizable,
            topRight: resizable,
            right: resizable,
            bottomRight: resizable,
            bottom: resizable,
            bottomLeft: resizable,
            left: resizable
          };
        }
        Object.keys(resizable).forEach(function(side) {
          var resizableStructure = resizable;
          var val = !!resizableStructure[side];
          var resizerEl = _this.getResizerElement(side);
          var params = {
            dragStartPixels: 0,
            eElement: resizerEl,
            onDragStart: function(e) {
              return _this.onResizeStart(e, side);
            },
            onDragging: _this.onResize.bind(_this),
            onDragStop: function(e) {
              return _this.onResizeEnd(e, side);
            }
          };
          if (!!_this.resizable[side] !== val || !_this.isAlive() && !val) {
            if (val) {
              _this.dragService.addDragSource(params);
              _this.resizeListeners.push(params);
              resizerEl.style.pointerEvents = "all";
            } else {
              resizerEl.style.pointerEvents = "none";
            }
            _this.resizable[side] = val;
          }
        });
      };
      PositionableFeature2.prototype.removeSizeFromEl = function() {
        this.element.style.removeProperty("height");
        this.element.style.removeProperty("width");
        this.element.style.removeProperty("flex");
      };
      PositionableFeature2.prototype.restoreLastSize = function() {
        this.element.style.flex = "0 0 auto";
        var _a = this.lastSize, height = _a.height, width = _a.width;
        if (width !== -1) {
          this.element.style.width = width + "px";
        }
        if (height !== -1) {
          this.element.style.height = height + "px";
        }
      };
      PositionableFeature2.prototype.getHeight = function() {
        return this.element.offsetHeight;
      };
      PositionableFeature2.prototype.setHeight = function(height) {
        var popup = this.config.popup;
        var eGui = this.element;
        var isPercent = false;
        if (typeof height === "string" && height.indexOf("%") !== -1) {
          setFixedHeight(eGui, height);
          height = getAbsoluteHeight(eGui);
          isPercent = true;
        } else if (this.positioned) {
          var elRect = this.element.getBoundingClientRect();
          var parentRect = this.offsetParent.getBoundingClientRect();
          height = Math.max(this.minHeight, height);
          var clientHeight = this.offsetParent.clientHeight;
          var yPosition = popup ? this.position.y : elRect.top;
          var parentTop = popup ? 0 : parentRect.top;
          if (clientHeight && height + yPosition > clientHeight + parentTop) {
            height = clientHeight - yPosition;
          }
        }
        if (this.getHeight() === height) {
          return;
        }
        if (!isPercent) {
          if (popup) {
            setFixedHeight(eGui, height);
          } else {
            eGui.style.height = height + "px";
            eGui.style.flex = "0 0 auto";
            this.lastSize.height = typeof height === "number" ? height : parseFloat(height);
          }
        } else {
          eGui.style.maxHeight = "unset";
          eGui.style.minHeight = "unset";
        }
      };
      PositionableFeature2.prototype.getWidth = function() {
        return this.element.offsetWidth;
      };
      PositionableFeature2.prototype.setWidth = function(width) {
        var eGui = this.element;
        var popup = this.config.popup;
        var isPercent = false;
        if (typeof width === "string" && width.indexOf("%") !== -1) {
          setFixedWidth(eGui, width);
          width = getAbsoluteWidth(eGui);
          isPercent = true;
        } else if (this.positioned) {
          width = Math.max(this.minWidth, width);
          var clientWidth = this.offsetParent.clientWidth;
          var xPosition = popup ? this.position.x : this.element.getBoundingClientRect().left;
          if (clientWidth && width + xPosition > clientWidth) {
            width = clientWidth - xPosition;
          }
        }
        if (this.getWidth() === width) {
          return;
        }
        if (!isPercent) {
          if (this.config.popup) {
            setFixedWidth(eGui, width);
          } else {
            eGui.style.width = width + "px";
            eGui.style.flex = " unset";
            this.lastSize.width = typeof width === "number" ? width : parseFloat(width);
          }
        } else {
          eGui.style.maxWidth = "unset";
          eGui.style.minWidth = "unset";
        }
      };
      PositionableFeature2.prototype.offsetElement = function(x, y) {
        if (x === void 0) {
          x = 0;
        }
        if (y === void 0) {
          y = 0;
        }
        var ePopup = this.config.forcePopupParentAsOffsetParent ? this.boundaryEl : this.element;
        this.popupService.positionPopup({
          ePopup,
          x,
          y,
          keepWithinBounds: true,
          skipObserver: this.movable || this.isResizable()
        });
        this.setPosition(parseFloat(ePopup.style.left), parseFloat(ePopup.style.top));
      };
      PositionableFeature2.prototype.setPosition = function(x, y) {
        this.position.x = x;
        this.position.y = y;
      };
      PositionableFeature2.prototype.updateDragStartPosition = function(x, y) {
        this.dragStartPosition = { x, y };
      };
      PositionableFeature2.prototype.calculateMouseMovement = function(params) {
        var e = params.e, isLeft = params.isLeft, isTop = params.isTop, anywhereWithin = params.anywhereWithin, topBuffer = params.topBuffer;
        var xDiff = e.clientX - this.dragStartPosition.x;
        var yDiff = e.clientY - this.dragStartPosition.y;
        var movementX = this.shouldSkipX(e, !!isLeft, !!anywhereWithin, xDiff) ? 0 : xDiff;
        var movementY = this.shouldSkipY(e, !!isTop, topBuffer, yDiff) ? 0 : yDiff;
        return { movementX, movementY };
      };
      PositionableFeature2.prototype.shouldSkipX = function(e, isLeft, anywhereWithin, diff) {
        var elRect = this.element.getBoundingClientRect();
        var parentRect = this.offsetParent.getBoundingClientRect();
        var boundaryElRect = this.boundaryEl.getBoundingClientRect();
        var xPosition = this.config.popup ? this.position.x : elRect.left;
        var skipX = xPosition <= 0 && parentRect.left >= e.clientX || parentRect.right <= e.clientX && parentRect.right <= boundaryElRect.right;
        if (skipX) {
          return true;
        }
        if (isLeft) {
          skipX = diff < 0 && e.clientX > xPosition + parentRect.left || diff > 0 && e.clientX < xPosition + parentRect.left;
        } else {
          if (anywhereWithin) {
            skipX = diff < 0 && e.clientX > boundaryElRect.right || diff > 0 && e.clientX < xPosition + parentRect.left;
          } else {
            skipX = diff < 0 && e.clientX > boundaryElRect.right || diff > 0 && e.clientX < boundaryElRect.right;
          }
        }
        return skipX;
      };
      PositionableFeature2.prototype.shouldSkipY = function(e, isTop, topBuffer, diff) {
        if (topBuffer === void 0) {
          topBuffer = 0;
        }
        var elRect = this.element.getBoundingClientRect();
        var parentRect = this.offsetParent.getBoundingClientRect();
        var boundaryElRect = this.boundaryEl.getBoundingClientRect();
        var yPosition = this.config.popup ? this.position.y : elRect.top;
        var skipY = yPosition <= 0 && parentRect.top >= e.clientY || parentRect.bottom <= e.clientY && parentRect.bottom <= boundaryElRect.bottom;
        if (skipY) {
          return true;
        }
        if (isTop) {
          skipY = diff < 0 && e.clientY > yPosition + parentRect.top + topBuffer || diff > 0 && e.clientY < yPosition + parentRect.top;
        } else {
          skipY = diff < 0 && e.clientY > boundaryElRect.bottom || diff > 0 && e.clientY < boundaryElRect.bottom;
        }
        return skipY;
      };
      PositionableFeature2.prototype.createResizeMap = function() {
        var eGui = this.element;
        this.resizerMap = {
          topLeft: { element: eGui.querySelector("[ref=eTopLeftResizer]") },
          top: { element: eGui.querySelector("[ref=eTopResizer]") },
          topRight: { element: eGui.querySelector("[ref=eTopRightResizer]") },
          right: { element: eGui.querySelector("[ref=eRightResizer]") },
          bottomRight: { element: eGui.querySelector("[ref=eBottomRightResizer]") },
          bottom: { element: eGui.querySelector("[ref=eBottomResizer]") },
          bottomLeft: { element: eGui.querySelector("[ref=eBottomLeftResizer]") },
          left: { element: eGui.querySelector("[ref=eLeftResizer]") }
        };
      };
      PositionableFeature2.prototype.addResizers = function() {
        if (this.resizersAdded) {
          return;
        }
        var eGui = this.element;
        if (!eGui) {
          return;
        }
        var parser = new DOMParser();
        var resizers = parser.parseFromString(RESIZE_TEMPLATE, "text/html").body;
        eGui.appendChild(resizers.firstChild);
        this.createResizeMap();
        this.resizersAdded = true;
      };
      PositionableFeature2.prototype.removeResizers = function() {
        this.resizerMap = void 0;
        var resizerEl = this.element.querySelector("." + RESIZE_CONTAINER_STYLE);
        if (resizerEl) {
          this.element.removeChild(resizerEl);
        }
        this.resizersAdded = false;
      };
      PositionableFeature2.prototype.getResizerElement = function(side) {
        return this.resizerMap[side].element;
      };
      PositionableFeature2.prototype.onResizeStart = function(e, side) {
        this.boundaryEl = this.findBoundaryElement();
        if (!this.positioned) {
          this.initialisePosition();
        }
        this.currentResizer = {
          isTop: !!side.match(/top/i),
          isRight: !!side.match(/right/i),
          isBottom: !!side.match(/bottom/i),
          isLeft: !!side.match(/left/i)
        };
        this.element.classList.add("ag-resizing");
        this.resizerMap[side].element.classList.add("ag-active");
        var _a = this.config, popup = _a.popup, forcePopupParentAsOffsetParent = _a.forcePopupParentAsOffsetParent;
        if (!popup && !forcePopupParentAsOffsetParent) {
          this.applySizeToSiblings(this.currentResizer.isBottom || this.currentResizer.isTop);
        }
        this.isResizing = true;
        this.updateDragStartPosition(e.clientX, e.clientY);
      };
      PositionableFeature2.prototype.getSiblings = function() {
        var element = this.element;
        var parent = element.parentElement;
        if (!parent) {
          return null;
        }
        return Array.prototype.slice.call(parent.children).filter(function(el) {
          return !el.classList.contains("ag-hidden");
        });
      };
      PositionableFeature2.prototype.getMinSizeOfSiblings = function() {
        var siblings = this.getSiblings() || [];
        var height = 0;
        var width = 0;
        for (var i = 0; i < siblings.length; i++) {
          var currentEl = siblings[i];
          var isFlex = !!currentEl.style.flex && currentEl.style.flex !== "0 0 auto";
          if (currentEl === this.element) {
            continue;
          }
          var nextHeight = this.minHeight || 0;
          var nextWidth = this.minWidth || 0;
          if (isFlex) {
            var computedStyle = window.getComputedStyle(currentEl);
            if (computedStyle.minHeight) {
              nextHeight = parseInt(computedStyle.minHeight, 10);
            }
            if (computedStyle.minWidth) {
              nextWidth = parseInt(computedStyle.minWidth, 10);
            }
          } else {
            nextHeight = currentEl.offsetHeight;
            nextWidth = currentEl.offsetWidth;
          }
          height += nextHeight;
          width += nextWidth;
        }
        return { height, width };
      };
      PositionableFeature2.prototype.applySizeToSiblings = function(vertical) {
        var containerToFlex = null;
        var siblings = this.getSiblings();
        if (!siblings) {
          return;
        }
        for (var i = 0; i < siblings.length; i++) {
          var el = siblings[i];
          if (el === containerToFlex) {
            continue;
          }
          if (vertical) {
            el.style.height = el.offsetHeight + "px";
          } else {
            el.style.width = el.offsetWidth + "px";
          }
          el.style.flex = "0 0 auto";
          if (el === this.element) {
            containerToFlex = siblings[i + 1];
          }
        }
        if (containerToFlex) {
          containerToFlex.style.removeProperty("height");
          containerToFlex.style.removeProperty("min-height");
          containerToFlex.style.removeProperty("max-height");
          containerToFlex.style.flex = "1 1 auto";
        }
      };
      PositionableFeature2.prototype.isResizable = function() {
        return Object.values(this.resizable).some(function(value) {
          return value;
        });
      };
      PositionableFeature2.prototype.onResize = function(e) {
        if (!this.isResizing || !this.currentResizer) {
          return;
        }
        var _a = this.config, popup = _a.popup, forcePopupParentAsOffsetParent = _a.forcePopupParentAsOffsetParent;
        var _b = this.currentResizer, isTop = _b.isTop, isRight = _b.isRight, isBottom = _b.isBottom, isLeft = _b.isLeft;
        var isHorizontal = isRight || isLeft;
        var isVertical = isBottom || isTop;
        var _c = this.calculateMouseMovement({ e, isLeft, isTop }), movementX = _c.movementX, movementY = _c.movementY;
        var xPosition = this.position.x;
        var yPosition = this.position.y;
        var offsetLeft = 0;
        var offsetTop = 0;
        if (isHorizontal && movementX) {
          var direction = isLeft ? -1 : 1;
          var oldWidth = this.getWidth();
          var newWidth = oldWidth + movementX * direction;
          var skipWidth = false;
          if (isLeft) {
            offsetLeft = oldWidth - newWidth;
            if (xPosition + offsetLeft <= 0 || newWidth <= this.minWidth) {
              skipWidth = true;
              offsetLeft = 0;
            }
          }
          if (!skipWidth) {
            this.setWidth(newWidth);
          }
        }
        if (isVertical && movementY) {
          var direction = isTop ? -1 : 1;
          var oldHeight = this.getHeight();
          var newHeight = oldHeight + movementY * direction;
          var skipHeight = false;
          if (isTop) {
            offsetTop = oldHeight - newHeight;
            if (yPosition + offsetTop <= 0 || newHeight <= this.minHeight) {
              skipHeight = true;
              offsetTop = 0;
            }
          } else {
            if (!this.config.popup && !this.config.forcePopupParentAsOffsetParent && oldHeight < newHeight && this.getMinSizeOfSiblings().height + newHeight > this.element.parentElement.offsetHeight) {
              skipHeight = true;
            }
          }
          if (!skipHeight) {
            this.setHeight(newHeight);
          }
        }
        this.updateDragStartPosition(e.clientX, e.clientY);
        if ((popup || forcePopupParentAsOffsetParent) && offsetLeft || offsetTop) {
          this.offsetElement(xPosition + offsetLeft, yPosition + offsetTop);
        }
      };
      PositionableFeature2.prototype.onResizeEnd = function(e, side) {
        this.isResizing = false;
        this.currentResizer = null;
        this.boundaryEl = null;
        var params = {
          type: "resize",
          api: this.gridOptionsWrapper.getApi(),
          columnApi: this.gridOptionsWrapper.getColumnApi()
        };
        this.element.classList.remove("ag-resizing");
        this.resizerMap[side].element.classList.remove("ag-active");
        this.dispatchEvent(params);
      };
      PositionableFeature2.prototype.refreshSize = function() {
        var eGui = this.element;
        if (this.config.popup) {
          if (!this.config.width) {
            this.setWidth(eGui.offsetWidth);
          }
          if (!this.config.height) {
            this.setHeight(eGui.offsetHeight);
          }
        }
      };
      PositionableFeature2.prototype.onMoveStart = function(e) {
        this.boundaryEl = this.findBoundaryElement();
        if (!this.positioned) {
          this.initialisePosition();
        }
        this.isMoving = true;
        this.element.classList.add("ag-moving");
        this.updateDragStartPosition(e.clientX, e.clientY);
      };
      PositionableFeature2.prototype.onMove = function(e) {
        if (!this.isMoving) {
          return;
        }
        var _a = this.position, x = _a.x, y = _a.y;
        var topBuffer;
        if (this.config.calculateTopBuffer) {
          topBuffer = this.config.calculateTopBuffer();
        }
        var _b = this.calculateMouseMovement({
          e,
          isTop: true,
          anywhereWithin: true,
          topBuffer
        }), movementX = _b.movementX, movementY = _b.movementY;
        this.offsetElement(x + movementX, y + movementY);
        this.updateDragStartPosition(e.clientX, e.clientY);
      };
      PositionableFeature2.prototype.onMoveEnd = function() {
        this.isMoving = false;
        this.boundaryEl = null;
        this.element.classList.remove("ag-moving");
      };
      PositionableFeature2.prototype.setOffsetParent = function() {
        if (this.config.forcePopupParentAsOffsetParent) {
          this.offsetParent = this.popupService.getPopupParent();
        } else {
          this.offsetParent = this.element.offsetParent;
        }
      };
      PositionableFeature2.prototype.findBoundaryElement = function() {
        var el = this.element;
        while (el) {
          if (window.getComputedStyle(el).position !== "static") {
            return el;
          }
          el = el.parentElement;
        }
        return this.element;
      };
      PositionableFeature2.prototype.clearResizeListeners = function() {
        while (this.resizeListeners.length) {
          var params = this.resizeListeners.pop();
          this.dragService.removeDragSource(params);
        }
      };
      PositionableFeature2.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
        if (this.moveElementDragListener) {
          this.dragService.removeDragSource(this.moveElementDragListener);
        }
        this.clearResizeListeners();
        this.removeResizers();
      };
      __decorate$16([
        Autowired("popupService")
      ], PositionableFeature2.prototype, "popupService", void 0);
      __decorate$16([
        Autowired("dragService")
      ], PositionableFeature2.prototype, "dragService", void 0);
      return PositionableFeature2;
    }(BeanStub);
    __extends$1c = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$15 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    AutoWidthCalculator = function(_super) {
      __extends$1c(AutoWidthCalculator2, _super);
      function AutoWidthCalculator2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      AutoWidthCalculator2.prototype.postConstruct = function() {
        var _this = this;
        this.ctrlsService.whenReady(function(p) {
          _this.centerRowContainerCtrl = p.centerRowContainerCtrl;
        });
      };
      AutoWidthCalculator2.prototype.getPreferredWidthForColumn = function(column, skipHeader) {
        var eHeaderCell = this.getHeaderCellForColumn(column);
        if (!eHeaderCell) {
          return -1;
        }
        var elements = this.rowRenderer.getAllCellsForColumn(column);
        if (!skipHeader) {
          elements.push(eHeaderCell);
        }
        return this.addElementsToContainerAndGetWidth(elements);
      };
      AutoWidthCalculator2.prototype.getPreferredWidthForColumnGroup = function(columnGroup) {
        var eHeaderCell = this.getHeaderCellForColumn(columnGroup);
        if (!eHeaderCell) {
          return -1;
        }
        return this.addElementsToContainerAndGetWidth([eHeaderCell]);
      };
      AutoWidthCalculator2.prototype.addElementsToContainerAndGetWidth = function(elements) {
        var _this = this;
        var eDummyContainer = document.createElement("form");
        eDummyContainer.style.position = "fixed";
        var eBodyContainer = this.centerRowContainerCtrl.getContainerElement();
        eBodyContainer.appendChild(eDummyContainer);
        elements.forEach(function(el) {
          return _this.cloneItemIntoDummy(el, eDummyContainer);
        });
        var dummyContainerWidth = eDummyContainer.offsetWidth;
        eBodyContainer.removeChild(eDummyContainer);
        var autoSizePadding = this.gridOptionsWrapper.getAutoSizePadding();
        return dummyContainerWidth + autoSizePadding;
      };
      AutoWidthCalculator2.prototype.getHeaderCellForColumn = function(column) {
        var element = null;
        this.ctrlsService.getHeaderRowContainerCtrls().forEach(function(container) {
          var res = container.getHtmlElementForColumnHeader(column);
          if (res != null) {
            element = res;
          }
        });
        return element;
      };
      AutoWidthCalculator2.prototype.cloneItemIntoDummy = function(eCell, eDummyContainer) {
        var eCellClone = eCell.cloneNode(true);
        eCellClone.style.width = "";
        eCellClone.style.position = "static";
        eCellClone.style.left = "";
        var eCloneParent = document.createElement("div");
        var eCloneParentClassList = eCloneParent.classList;
        var isHeader = ["ag-header-cell", "ag-header-group-cell"].some(function(cls) {
          return eCellClone.classList.contains(cls);
        });
        if (isHeader) {
          eCloneParentClassList.add("ag-header", "ag-header-row");
          eCloneParent.style.position = "static";
        } else {
          eCloneParentClassList.add("ag-row");
        }
        var pointer = eCell.parentElement;
        while (pointer) {
          var isRow = ["ag-header-row", "ag-row"].some(function(cls) {
            return pointer.classList.contains(cls);
          });
          if (isRow) {
            for (var i = 0; i < pointer.classList.length; i++) {
              var item = pointer.classList[i];
              if (item != "ag-row-position-absolute") {
                eCloneParentClassList.add(item);
              }
            }
            break;
          }
          pointer = pointer.parentElement;
        }
        eCloneParent.appendChild(eCellClone);
        eDummyContainer.appendChild(eCloneParent);
      };
      __decorate$15([
        Autowired("rowRenderer")
      ], AutoWidthCalculator2.prototype, "rowRenderer", void 0);
      __decorate$15([
        Autowired("ctrlsService")
      ], AutoWidthCalculator2.prototype, "ctrlsService", void 0);
      __decorate$15([
        Autowired("rowCssClassCalculator")
      ], AutoWidthCalculator2.prototype, "rowCssClassCalculator", void 0);
      __decorate$15([
        PostConstruct
      ], AutoWidthCalculator2.prototype, "postConstruct", null);
      AutoWidthCalculator2 = __decorate$15([
        Bean("autoWidthCalculator")
      ], AutoWidthCalculator2);
      return AutoWidthCalculator2;
    }(BeanStub);
    __extends$1b = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$14 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __values$1 = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read$b = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread$9 = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read$b(arguments[i]));
      return ar;
    };
    StickyRowFeature = function(_super) {
      __extends$1b(StickyRowFeature2, _super);
      function StickyRowFeature2(createRowCon, destroyRowCtrls) {
        var _this = _super.call(this) || this;
        _this.createRowCon = createRowCon;
        _this.destroyRowCtrls = destroyRowCtrls;
        _this.stickyRowCtrls = [];
        _this.containerHeight = 0;
        return _this;
      }
      StickyRowFeature2.prototype.postConstruct = function() {
        var _this = this;
        this.ctrlsService.whenReady(function(params) {
          _this.gridBodyCtrl = params.gridBodyCtrl;
        });
      };
      StickyRowFeature2.prototype.getStickyRowCtrls = function() {
        return this.stickyRowCtrls;
      };
      StickyRowFeature2.prototype.checkStickyRows = function() {
        var height = 0;
        if (!this.gridOptionsWrapper.isGroupRowsSticky()) {
          this.refreshNodesAndContainerHeight([], height);
          return;
        }
        var stickyRows = [];
        var firstPixel = this.rowRenderer.getFirstVisibleVerticalPixel();
        var addStickyRow = function(stickyRow) {
          stickyRows.push(stickyRow);
          var lastAncester = stickyRow;
          while (lastAncester.expanded) {
            lastAncester = last(lastAncester.childrenAfterSort);
          }
          var lastChildBottom = lastAncester.rowTop + lastAncester.rowHeight;
          var stickRowBottom = firstPixel + height + stickyRow.rowHeight;
          if (lastChildBottom < stickRowBottom) {
            stickyRow.stickyRowTop = height + (lastChildBottom - stickRowBottom);
          } else {
            stickyRow.stickyRowTop = height;
          }
          height = 0;
          stickyRows.forEach(function(rowNode) {
            var thisRowLastPx = rowNode.stickyRowTop + rowNode.rowHeight;
            if (height < thisRowLastPx) {
              height = thisRowLastPx;
            }
          });
        };
        while (true) {
          var firstPixelAfterStickyRows = firstPixel + height;
          var firstIndex = this.rowModel.getRowIndexAtPixel(firstPixelAfterStickyRows);
          var firstRow = this.rowModel.getRow(firstIndex);
          if (firstRow == null) {
            break;
          }
          if (firstRow.level < 0) {
            break;
          }
          var parents = [];
          var p = firstRow.parent;
          while (p.level >= 0) {
            parents.push(p);
            p = p.parent;
          }
          var firstMissingParent = parents.reverse().find(function(parent) {
            return stickyRows.indexOf(parent) < 0 && parent.displayed;
          });
          if (firstMissingParent) {
            addStickyRow(firstMissingParent);
            continue;
          }
          if (firstRow.group && firstRow.expanded && !firstRow.footer && firstRow.rowTop < firstPixelAfterStickyRows) {
            addStickyRow(firstRow);
            continue;
          }
          break;
        }
        this.refreshNodesAndContainerHeight(stickyRows, height);
      };
      StickyRowFeature2.prototype.refreshNodesAndContainerHeight = function(allStickyNodes, height) {
        var e_1, _a, _b;
        var _this = this;
        var removedCtrls = this.stickyRowCtrls.filter(function(ctrl2) {
          return allStickyNodes.indexOf(ctrl2.getRowNode()) === -1;
        });
        var addedNodes = allStickyNodes.filter(function(rowNode) {
          return _this.stickyRowCtrls.findIndex(function(ctrl2) {
            return ctrl2.getRowNode() === rowNode;
          }) === -1;
        });
        var ctrlsToDestroy = {};
        removedCtrls.forEach(function(removedCtrl) {
          ctrlsToDestroy[removedCtrl.getRowNode().id] = removedCtrl;
          _this.stickyRowCtrls = _this.stickyRowCtrls.filter(function(ctrl2) {
            return ctrl2 !== removedCtrl;
          });
        });
        try {
          for (var _c = __values$1(Object.values(ctrlsToDestroy)), _d = _c.next(); !_d.done; _d = _c.next()) {
            var ctrl = _d.value;
            ctrl.getRowNode().sticky = false;
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_d && !_d.done && (_a = _c.return))
              _a.call(_c);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        this.destroyRowCtrls(ctrlsToDestroy, false);
        var newCtrls = addedNodes.map(function(rowNode) {
          rowNode.sticky = true;
          return _this.createRowCon(rowNode, false, false);
        });
        (_b = this.stickyRowCtrls).push.apply(_b, __spread$9(newCtrls));
        this.stickyRowCtrls.forEach(function(ctrl2) {
          return ctrl2.setRowTop(ctrl2.getRowNode().stickyRowTop);
        });
        this.stickyRowCtrls.sort(function(a, b) {
          return b.getRowNode().rowIndex - a.getRowNode().rowIndex;
        });
        if (this.containerHeight !== height) {
          this.containerHeight = height;
          this.gridBodyCtrl.setStickyTopHeight(height);
        }
      };
      __decorate$14([
        Autowired("rowModel")
      ], StickyRowFeature2.prototype, "rowModel", void 0);
      __decorate$14([
        Autowired("rowRenderer")
      ], StickyRowFeature2.prototype, "rowRenderer", void 0);
      __decorate$14([
        Autowired("ctrlsService")
      ], StickyRowFeature2.prototype, "ctrlsService", void 0);
      __decorate$14([
        PostConstruct
      ], StickyRowFeature2.prototype, "postConstruct", null);
      return StickyRowFeature2;
    }(BeanStub);
    __extends$1a = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$13 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __read$a = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread$8 = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read$a(arguments[i]));
      return ar;
    };
    RowRenderer = function(_super) {
      __extends$1a(RowRenderer2, _super);
      function RowRenderer2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.destroyFuncsForColumnListeners = [];
        _this.rowCtrlsByRowIndex = {};
        _this.zombieRowCtrls = {};
        _this.allRowCtrls = [];
        _this.topRowCtrls = [];
        _this.bottomRowCtrls = [];
        _this.refreshInProgress = false;
        _this.dataFirstRenderedFired = false;
        return _this;
      }
      RowRenderer2.prototype.postConstruct = function() {
        var _this = this;
        this.ctrlsService.whenReady(function() {
          _this.gridBodyCtrl = _this.ctrlsService.getGridBodyCtrl();
          _this.initialise();
        });
      };
      RowRenderer2.prototype.initialise = function() {
        this.addManagedListener(this.eventService, Events.EVENT_PAGINATION_CHANGED, this.onPageLoaded.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_PINNED_ROW_DATA_CHANGED, this.onPinnedRowDataChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_BODY_SCROLL, this.redrawAfterScroll.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_BODY_HEIGHT_CHANGED, this.redrawAfterScroll.bind(this));
        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_DOM_LAYOUT, this.onDomLayoutChanged.bind(this));
        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_ROW_CLASS, this.redrawRows.bind(this));
        if (this.gridOptionsWrapper.isGroupRowsSticky()) {
          if (this.rowModel.getType() != Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {
            doOnce(function() {
              return console.warn("AG Grid: The feature Sticky Row Groups only works with the Client Side Row Model");
            }, "rowRenderer.stickyWorksWithCsrmOnly");
          } else if (this.gridOptionsWrapper.isTreeData()) {
            doOnce(function() {
              return console.warn("AG Grid: The feature Sticky Row Groups does not work with Tree Data.");
            }, "rowRenderer.stickyDoesNotWorkWithTreeData");
          } else {
            this.stickyRowFeature = this.createManagedBean(new StickyRowFeature(this.createRowCon.bind(this), this.destroyRowCtrls.bind(this)));
          }
        }
        this.registerCellEventListeners();
        this.initialiseCache();
        this.printLayout = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;
        this.embedFullWidthRows = this.printLayout || this.gridOptionsWrapper.isEmbedFullWidthRows();
        this.redrawAfterModelUpdate();
      };
      RowRenderer2.prototype.initialiseCache = function() {
        if (this.gridOptionsWrapper.isKeepDetailRows()) {
          var countProp = this.gridOptionsWrapper.getKeepDetailRowsCount();
          var count = countProp != null ? countProp : 3;
          this.cachedRowCtrls = new RowCtrlCache(count);
        }
      };
      RowRenderer2.prototype.getRowCtrls = function() {
        return this.allRowCtrls;
      };
      RowRenderer2.prototype.getStickyTopRowCtrls = function() {
        if (!this.stickyRowFeature) {
          return [];
        }
        return this.stickyRowFeature.getStickyRowCtrls();
      };
      RowRenderer2.prototype.updateAllRowCtrls = function() {
        var liveList = getAllValuesInObject(this.rowCtrlsByRowIndex);
        if (this.gridOptionsWrapper.isEnsureDomOrder()) {
          liveList.sort(function(a, b) {
            return a.getRowNode().rowIndex - b.getRowNode.rowIndex;
          });
        }
        var zombieList = getAllValuesInObject(this.zombieRowCtrls);
        var cachedList = this.cachedRowCtrls ? this.cachedRowCtrls.getEntries() : [];
        this.allRowCtrls = __spread$8(liveList, zombieList, cachedList);
      };
      RowRenderer2.prototype.registerCellEventListeners = function() {
        var _this = this;
        this.addManagedListener(this.eventService, Events.EVENT_CELL_FOCUSED, function(event) {
          _this.getAllCellCtrls().forEach(function(cellCtrl) {
            return cellCtrl.onCellFocused(event);
          });
          _this.getFullWidthRowCtrls().forEach(function(rowCtrl) {
            rowCtrl.onFullWidthRowFocused(event);
          });
        });
        this.addManagedListener(this.eventService, Events.EVENT_FLASH_CELLS, function(event) {
          _this.getAllCellCtrls().forEach(function(cellCtrl) {
            return cellCtrl.onFlashCells(event);
          });
        });
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_HOVER_CHANGED, function() {
          _this.getAllCellCtrls().forEach(function(cellCtrl) {
            return cellCtrl.onColumnHover();
          });
        });
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, function() {
          _this.getAllCellCtrls().forEach(function(cellCtrl) {
            return cellCtrl.onDisplayedColumnsChanged();
          });
        });
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, function() {
          if (_this.printLayout) {
            _this.getAllCellCtrls().forEach(function(cellCtrl) {
              return cellCtrl.onLeftChanged();
            });
          }
        });
        var rangeSelectionEnabled = this.gridOptionsWrapper.isEnableRangeSelection();
        if (rangeSelectionEnabled) {
          this.addManagedListener(this.eventService, Events.EVENT_RANGE_SELECTION_CHANGED, function() {
            _this.getAllCellCtrls().forEach(function(cellCtrl) {
              return cellCtrl.onRangeSelectionChanged();
            });
          });
          this.addManagedListener(this.eventService, Events.EVENT_COLUMN_MOVED, function() {
            _this.getAllCellCtrls().forEach(function(cellCtrl) {
              return cellCtrl.updateRangeBordersIfRangeCount();
            });
          });
          this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PINNED, function() {
            _this.getAllCellCtrls().forEach(function(cellCtrl) {
              return cellCtrl.updateRangeBordersIfRangeCount();
            });
          });
          this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VISIBLE, function() {
            _this.getAllCellCtrls().forEach(function(cellCtrl) {
              return cellCtrl.updateRangeBordersIfRangeCount();
            });
          });
        }
        this.refreshListenersToColumnsForCellComps();
        this.addManagedListener(this.eventService, Events.EVENT_GRID_COLUMNS_CHANGED, this.refreshListenersToColumnsForCellComps.bind(this));
        this.addDestroyFunc(this.removeGridColumnListeners.bind(this));
      };
      RowRenderer2.prototype.removeGridColumnListeners = function() {
        this.destroyFuncsForColumnListeners.forEach(function(func) {
          return func();
        });
        this.destroyFuncsForColumnListeners.length = 0;
      };
      RowRenderer2.prototype.refreshListenersToColumnsForCellComps = function() {
        var _this = this;
        this.removeGridColumnListeners();
        var cols = this.columnModel.getAllGridColumns();
        if (!cols) {
          return;
        }
        cols.forEach(function(col) {
          var forEachCellWithThisCol = function(callback) {
            _this.getAllCellCtrls().forEach(function(cellCtrl) {
              if (cellCtrl.getColumn() === col) {
                callback(cellCtrl);
              }
            });
          };
          var leftChangedListener = function() {
            forEachCellWithThisCol(function(cellCtrl) {
              return cellCtrl.onLeftChanged();
            });
          };
          var widthChangedListener = function() {
            forEachCellWithThisCol(function(cellCtrl) {
              return cellCtrl.onWidthChanged();
            });
          };
          var firstRightPinnedChangedListener = function() {
            forEachCellWithThisCol(function(cellCtrl) {
              return cellCtrl.onFirstRightPinnedChanged();
            });
          };
          var lastLeftPinnedChangedListener = function() {
            forEachCellWithThisCol(function(cellCtrl) {
              return cellCtrl.onLastLeftPinnedChanged();
            });
          };
          var colDefChangedListener = function() {
            forEachCellWithThisCol(function(cellCtrl) {
              return cellCtrl.onColDefChanged();
            });
          };
          col.addEventListener(Column.EVENT_LEFT_CHANGED, leftChangedListener);
          col.addEventListener(Column.EVENT_WIDTH_CHANGED, widthChangedListener);
          col.addEventListener(Column.EVENT_FIRST_RIGHT_PINNED_CHANGED, firstRightPinnedChangedListener);
          col.addEventListener(Column.EVENT_LAST_LEFT_PINNED_CHANGED, lastLeftPinnedChangedListener);
          col.addEventListener(Column.EVENT_COL_DEF_CHANGED, colDefChangedListener);
          _this.destroyFuncsForColumnListeners.push(function() {
            col.removeEventListener(Column.EVENT_LEFT_CHANGED, leftChangedListener);
            col.removeEventListener(Column.EVENT_WIDTH_CHANGED, widthChangedListener);
            col.removeEventListener(Column.EVENT_FIRST_RIGHT_PINNED_CHANGED, firstRightPinnedChangedListener);
            col.removeEventListener(Column.EVENT_LAST_LEFT_PINNED_CHANGED, lastLeftPinnedChangedListener);
            col.removeEventListener(Column.EVENT_COL_DEF_CHANGED, colDefChangedListener);
          });
        });
      };
      RowRenderer2.prototype.onDomLayoutChanged = function() {
        var printLayout = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;
        var embedFullWidthRows = printLayout || this.gridOptionsWrapper.isEmbedFullWidthRows();
        var destroyRows = embedFullWidthRows !== this.embedFullWidthRows || this.printLayout !== printLayout;
        this.printLayout = printLayout;
        this.embedFullWidthRows = embedFullWidthRows;
        if (destroyRows) {
          this.redrawAfterModelUpdate();
        }
      };
      RowRenderer2.prototype.datasourceChanged = function() {
        this.firstRenderedRow = 0;
        this.lastRenderedRow = -1;
        var rowIndexesToRemove = Object.keys(this.rowCtrlsByRowIndex);
        this.removeRowCtrls(rowIndexesToRemove);
      };
      RowRenderer2.prototype.onPageLoaded = function(event) {
        var params = {
          recycleRows: event.keepRenderedRows,
          animate: event.animate,
          newData: event.newData,
          newPage: event.newPage,
          onlyBody: true
        };
        this.redrawAfterModelUpdate(params);
      };
      RowRenderer2.prototype.getAllCellsForColumn = function(column) {
        var res = [];
        this.getAllRowCtrls().forEach(function(rowCtrl) {
          var eCell = rowCtrl.getCellElement(column);
          if (eCell) {
            res.push(eCell);
          }
        });
        return res;
      };
      RowRenderer2.prototype.refreshFloatingRowComps = function() {
        this.refreshFloatingRows(this.topRowCtrls, this.pinnedRowModel.getPinnedTopRowData());
        this.refreshFloatingRows(this.bottomRowCtrls, this.pinnedRowModel.getPinnedBottomRowData());
      };
      RowRenderer2.prototype.getTopRowCtrls = function() {
        return this.topRowCtrls;
      };
      RowRenderer2.prototype.getBottomRowCtrls = function() {
        return this.bottomRowCtrls;
      };
      RowRenderer2.prototype.refreshFloatingRows = function(rowComps, rowNodes) {
        var _this = this;
        rowComps.forEach(function(row) {
          row.destroyFirstPass();
          row.destroySecondPass();
        });
        rowComps.length = 0;
        if (!rowNodes) {
          return;
        }
        rowNodes.forEach(function(rowNode) {
          var rowCtrl = new RowCtrl(rowNode, _this.beans, false, false, _this.printLayout);
          rowComps.push(rowCtrl);
        });
      };
      RowRenderer2.prototype.onPinnedRowDataChanged = function() {
        var params = {
          recycleRows: true
        };
        this.redrawAfterModelUpdate(params);
      };
      RowRenderer2.prototype.getRenderedIndexesForRowNodes = function(rowNodes) {
        var result = [];
        if (missing(rowNodes)) {
          return result;
        }
        iterateObject(this.rowCtrlsByRowIndex, function(index, renderedRow) {
          var rowNode = renderedRow.getRowNode();
          if (rowNodes.indexOf(rowNode) >= 0) {
            result.push(index);
          }
        });
        return result;
      };
      RowRenderer2.prototype.redrawRows = function(rowNodes) {
        var partialRefresh = rowNodes != null && rowNodes.length > 0;
        if (partialRefresh) {
          var indexesToRemove = this.getRenderedIndexesForRowNodes(rowNodes);
          this.removeRowCtrls(indexesToRemove);
        }
        this.redrawAfterModelUpdate({
          recycleRows: partialRefresh
        });
      };
      RowRenderer2.prototype.getCellToRestoreFocusToAfterRefresh = function(params) {
        var _a;
        var focusedCell = ((_a = params) === null || _a === void 0 ? void 0 : _a.suppressKeepFocus) ? null : this.focusService.getFocusCellToUseAfterRefresh();
        if (focusedCell == null) {
          return null;
        }
        var eDocument = this.gridOptionsWrapper.getDocument();
        var activeElement = eDocument.activeElement;
        var cellDomData = this.gridOptionsWrapper.getDomData(activeElement, CellCtrl.DOM_DATA_KEY_CELL_CTRL);
        var rowDomData = this.gridOptionsWrapper.getDomData(activeElement, RowCtrl.DOM_DATA_KEY_ROW_CTRL);
        var gridElementFocused = cellDomData || rowDomData;
        return gridElementFocused ? focusedCell : null;
      };
      RowRenderer2.prototype.redrawAfterModelUpdate = function(params) {
        if (params === void 0) {
          params = {};
        }
        this.getLockOnRefresh();
        var focusedCell = this.getCellToRestoreFocusToAfterRefresh(params);
        this.updateContainerHeights();
        this.scrollToTopIfNewData(params);
        var recycleRows = !this.printLayout && !!params.recycleRows;
        var animate = params.animate && this.gridOptionsWrapper.isAnimateRows();
        var rowsToRecycle = recycleRows ? this.recycleRows() : null;
        if (!recycleRows) {
          this.removeAllRowComps();
        }
        var isFocusedCellGettingRecycled = function() {
          if (focusedCell == null || rowsToRecycle == null) {
            return false;
          }
          var res = false;
          iterateObject(rowsToRecycle, function(key, rowComp) {
            var rowNode = rowComp.getRowNode();
            var rowIndexEqual = rowNode.rowIndex == focusedCell.rowIndex;
            var pinnedEqual = rowNode.rowPinned == focusedCell.rowPinned;
            if (rowIndexEqual && pinnedEqual) {
              res = true;
            }
          });
          return res;
        };
        var focusedCellRecycled = isFocusedCellGettingRecycled();
        this.redraw(rowsToRecycle, animate);
        this.gridBodyCtrl.updateRowCount();
        if (!params.onlyBody) {
          this.refreshFloatingRowComps();
        }
        this.dispatchDisplayedRowsChanged();
        if (!focusedCellRecycled) {
          this.restoreFocusedCell(focusedCell);
        }
        this.releaseLockOnRefresh();
      };
      RowRenderer2.prototype.scrollToTopIfNewData = function(params) {
        var scrollToTop = params.newData || params.newPage;
        var suppressScrollToTop = this.gridOptionsWrapper.isSuppressScrollOnNewData();
        if (scrollToTop && !suppressScrollToTop) {
          this.gridBodyCtrl.getScrollFeature().scrollToTop();
        }
      };
      RowRenderer2.prototype.updateContainerHeights = function() {
        if (this.printLayout) {
          this.rowContainerHeightService.setModelHeight(null);
          return;
        }
        var containerHeight = this.paginationProxy.getCurrentPageHeight();
        if (containerHeight === 0) {
          containerHeight = 1;
        }
        this.rowContainerHeightService.setModelHeight(containerHeight);
      };
      RowRenderer2.prototype.getLockOnRefresh = function() {
        if (this.refreshInProgress) {
          throw new Error("AG Grid: cannot get grid to draw rows when it is in the middle of drawing rows. Your code probably called a grid API method while the grid was in the render stage. To overcome this, put the API call into a timeout, e.g. instead of api.redrawRows(), call setTimeout(function() { api.redrawRows(); }, 0). To see what part of your code that caused the refresh check this stacktrace.");
        }
        this.refreshInProgress = true;
      };
      RowRenderer2.prototype.releaseLockOnRefresh = function() {
        this.refreshInProgress = false;
      };
      RowRenderer2.prototype.isRefreshInProgress = function() {
        return this.refreshInProgress;
      };
      RowRenderer2.prototype.restoreFocusedCell = function(cellPosition) {
        if (cellPosition) {
          this.focusService.setFocusedCell({
            rowIndex: cellPosition.rowIndex,
            column: cellPosition.column,
            rowPinned: cellPosition.rowPinned,
            forceBrowserFocus: true,
            preventScrollOnBrowserFocus: true
          });
        }
      };
      RowRenderer2.prototype.stopEditing = function(cancel) {
        if (cancel === void 0) {
          cancel = false;
        }
        this.getAllRowCtrls().forEach(function(rowCtrl) {
          rowCtrl.stopEditing(cancel);
        });
      };
      RowRenderer2.prototype.getAllCellCtrls = function() {
        var res = [];
        this.getAllRowCtrls().forEach(function(rowCtrl) {
          return res = res.concat(rowCtrl.getAllCellCtrls());
        });
        return res;
      };
      RowRenderer2.prototype.getAllRowCtrls = function() {
        var _this = this;
        var stickyRowCtrls = this.stickyRowFeature && this.stickyRowFeature.getStickyRowCtrls() || [];
        var res = __spread$8(this.topRowCtrls, this.bottomRowCtrls, stickyRowCtrls);
        Object.keys(this.rowCtrlsByRowIndex).forEach(function(key) {
          return res.push(_this.rowCtrlsByRowIndex[key]);
        });
        return res;
      };
      RowRenderer2.prototype.addRenderedRowListener = function(eventName, rowIndex, callback) {
        var rowComp = this.rowCtrlsByRowIndex[rowIndex];
        if (rowComp) {
          rowComp.addEventListener(eventName, callback);
        }
      };
      RowRenderer2.prototype.flashCells = function(params) {
        if (params === void 0) {
          params = {};
        }
        var flashDelay = params.flashDelay, fadeDelay = params.fadeDelay;
        this.getCellCtrls(params.rowNodes, params.columns).forEach(function(cellCtrl) {
          return cellCtrl.flashCell({ flashDelay, fadeDelay });
        });
      };
      RowRenderer2.prototype.refreshCells = function(params) {
        if (params === void 0) {
          params = {};
        }
        var refreshCellParams = {
          forceRefresh: params.force,
          newData: false,
          suppressFlash: params.suppressFlash
        };
        this.getCellCtrls(params.rowNodes, params.columns).forEach(function(cellCtrl) {
          if (cellCtrl.refreshShouldDestroy()) {
            var rowCtrl = cellCtrl.getRowCtrl();
            if (rowCtrl) {
              rowCtrl.refreshCell(cellCtrl);
            }
          } else {
            cellCtrl.refreshCell(refreshCellParams);
          }
        });
        this.getFullWidthRowCtrls(params.rowNodes).forEach(function(fullWidthRowCtrl) {
          fullWidthRowCtrl.refreshFullWidth();
        });
      };
      RowRenderer2.prototype.getCellRendererInstances = function(params) {
        var res = this.getCellCtrls(params.rowNodes, params.columns).map(function(cellCtrl) {
          return cellCtrl.getCellRenderer();
        }).filter(function(renderer) {
          return renderer != null;
        });
        return res;
      };
      RowRenderer2.prototype.getCellEditorInstances = function(params) {
        var res = [];
        this.getCellCtrls(params.rowNodes, params.columns).forEach(function(cellCtrl) {
          var cellEditor = cellCtrl.getCellEditor();
          if (cellEditor) {
            res.push(cellEditor);
          }
        });
        return res;
      };
      RowRenderer2.prototype.getEditingCells = function() {
        var res = [];
        this.getAllCellCtrls().forEach(function(cellCtrl) {
          if (cellCtrl.isEditing()) {
            var cellPosition = cellCtrl.getCellPosition();
            res.push(cellPosition);
          }
        });
        return res;
      };
      RowRenderer2.prototype.mapRowNodes = function(rowNodes) {
        if (!rowNodes) {
          return;
        }
        var res = {
          top: {},
          bottom: {},
          normal: {}
        };
        rowNodes.forEach(function(rowNode) {
          var id = rowNode.id;
          if (rowNode.rowPinned === Constants.PINNED_TOP) {
            res.top[id] = rowNode;
          } else if (rowNode.rowPinned === Constants.PINNED_BOTTOM) {
            res.bottom[id] = rowNode;
          } else {
            res.normal[id] = rowNode;
          }
        });
        return res;
      };
      RowRenderer2.prototype.isRowInMap = function(rowNode, rowIdsMap) {
        var id = rowNode.id;
        var floating = rowNode.rowPinned;
        if (floating === Constants.PINNED_BOTTOM) {
          return rowIdsMap.bottom[id] != null;
        }
        if (floating === Constants.PINNED_TOP) {
          return rowIdsMap.top[id] != null;
        }
        return rowIdsMap.normal[id] != null;
      };
      RowRenderer2.prototype.getCellCtrls = function(rowNodes, columns) {
        var _this = this;
        var rowIdsMap = this.mapRowNodes(rowNodes);
        var res = [];
        var colIdsMap;
        if (exists(columns)) {
          colIdsMap = {};
          columns.forEach(function(colKey) {
            var column = _this.columnModel.getGridColumn(colKey);
            if (exists(column)) {
              colIdsMap[column.getId()] = true;
            }
          });
        }
        var processRow = function(rowComp) {
          var rowNode = rowComp.getRowNode();
          if (rowIdsMap != null && !_this.isRowInMap(rowNode, rowIdsMap)) {
            return;
          }
          rowComp.getAllCellCtrls().forEach(function(cellCtrl) {
            var colId = cellCtrl.getColumn().getId();
            var excludeColFromRefresh = colIdsMap && !colIdsMap[colId];
            if (excludeColFromRefresh) {
              return;
            }
            res.push(cellCtrl);
          });
        };
        iterateObject(this.rowCtrlsByRowIndex, function(index, rowComp) {
          processRow(rowComp);
        });
        if (this.topRowCtrls) {
          this.topRowCtrls.forEach(processRow);
        }
        if (this.bottomRowCtrls) {
          this.bottomRowCtrls.forEach(processRow);
        }
        return res;
      };
      RowRenderer2.prototype.destroy = function() {
        this.removeAllRowComps();
        _super.prototype.destroy.call(this);
      };
      RowRenderer2.prototype.removeAllRowComps = function() {
        var rowIndexesToRemove = Object.keys(this.rowCtrlsByRowIndex);
        this.removeRowCtrls(rowIndexesToRemove);
      };
      RowRenderer2.prototype.recycleRows = function() {
        var stubNodeIndexes = [];
        iterateObject(this.rowCtrlsByRowIndex, function(index, rowComp) {
          var stubNode = rowComp.getRowNode().id == null;
          if (stubNode) {
            stubNodeIndexes.push(index);
          }
        });
        this.removeRowCtrls(stubNodeIndexes);
        var ctrlsByIdMap = {};
        iterateObject(this.rowCtrlsByRowIndex, function(index, rowComp) {
          var rowNode = rowComp.getRowNode();
          ctrlsByIdMap[rowNode.id] = rowComp;
        });
        this.rowCtrlsByRowIndex = {};
        return ctrlsByIdMap;
      };
      RowRenderer2.prototype.removeRowCtrls = function(rowsToRemove) {
        var _this = this;
        rowsToRemove.forEach(function(indexToRemove) {
          var rowCtrl = _this.rowCtrlsByRowIndex[indexToRemove];
          if (rowCtrl) {
            rowCtrl.destroyFirstPass();
            rowCtrl.destroySecondPass();
          }
          delete _this.rowCtrlsByRowIndex[indexToRemove];
        });
      };
      RowRenderer2.prototype.redrawAfterScroll = function() {
        var cellFocused;
        if (this.stickyRowFeature && browserSupportsPreventScroll()) {
          cellFocused = this.getCellToRestoreFocusToAfterRefresh() || void 0;
        }
        this.getLockOnRefresh();
        this.redraw(null, false, true);
        this.releaseLockOnRefresh();
        this.dispatchDisplayedRowsChanged();
        if (cellFocused != null) {
          var newFocusedCell = this.getCellToRestoreFocusToAfterRefresh();
          if (cellFocused != null && newFocusedCell == null) {
            this.animationFrameService.flushAllFrames();
            this.restoreFocusedCell(cellFocused);
          }
        }
      };
      RowRenderer2.prototype.removeRowCompsNotToDraw = function(indexesToDraw) {
        var indexesToDrawMap = {};
        indexesToDraw.forEach(function(index) {
          return indexesToDrawMap[index] = true;
        });
        var existingIndexes = Object.keys(this.rowCtrlsByRowIndex);
        var indexesNotToDraw = existingIndexes.filter(function(index) {
          return !indexesToDrawMap[index];
        });
        this.removeRowCtrls(indexesNotToDraw);
      };
      RowRenderer2.prototype.calculateIndexesToDraw = function(rowsToRecycle) {
        var _this = this;
        var indexesToDraw = createArrayOfNumbers(this.firstRenderedRow, this.lastRenderedRow);
        var checkRowToDraw = function(indexStr, rowComp) {
          var index = rowComp.getRowNode().rowIndex;
          if (index == null) {
            return;
          }
          if (index < _this.firstRenderedRow || index > _this.lastRenderedRow) {
            if (_this.doNotUnVirtualiseRow(rowComp)) {
              indexesToDraw.push(index);
            }
          }
        };
        iterateObject(this.rowCtrlsByRowIndex, checkRowToDraw);
        iterateObject(rowsToRecycle, checkRowToDraw);
        indexesToDraw.sort(function(a, b) {
          return a - b;
        });
        indexesToDraw = indexesToDraw.filter(function(index) {
          var rowNode = _this.paginationProxy.getRow(index);
          return rowNode && !rowNode.sticky;
        });
        return indexesToDraw;
      };
      RowRenderer2.prototype.redraw = function(rowsToRecycle, animate, afterScroll) {
        var _this = this;
        if (animate === void 0) {
          animate = false;
        }
        if (afterScroll === void 0) {
          afterScroll = false;
        }
        this.rowContainerHeightService.updateOffset();
        this.workOutFirstAndLastRowsToRender();
        if (this.stickyRowFeature) {
          this.stickyRowFeature.checkStickyRows();
        }
        var indexesToDraw = this.calculateIndexesToDraw(rowsToRecycle);
        this.removeRowCompsNotToDraw(indexesToDraw);
        if (this.printLayout) {
          animate = false;
        }
        indexesToDraw.forEach(function(rowIndex) {
          var rowCtrl = _this.createOrUpdateRowCtrl(rowIndex, rowsToRecycle, animate, afterScroll);
          if (exists(rowCtrl))
            ;
        });
        if (rowsToRecycle) {
          var useAnimationFrame = afterScroll && !this.gridOptionsWrapper.isSuppressAnimationFrame() && !this.printLayout;
          if (useAnimationFrame) {
            this.beans.animationFrameService.addDestroyTask(function() {
              _this.destroyRowCtrls(rowsToRecycle, animate);
              _this.updateAllRowCtrls();
              _this.dispatchDisplayedRowsChanged();
            });
          } else {
            this.destroyRowCtrls(rowsToRecycle, animate);
          }
        }
        this.updateAllRowCtrls();
      };
      RowRenderer2.prototype.dispatchDisplayedRowsChanged = function() {
        var event = { type: Events.EVENT_DISPLAYED_ROWS_CHANGED };
        this.eventService.dispatchEvent(event);
      };
      RowRenderer2.prototype.onDisplayedColumnsChanged = function() {
        var pinningLeft = this.columnModel.isPinningLeft();
        var pinningRight = this.columnModel.isPinningRight();
        var atLeastOneChanged = this.pinningLeft !== pinningLeft || pinningRight !== this.pinningRight;
        if (atLeastOneChanged) {
          this.pinningLeft = pinningLeft;
          this.pinningRight = pinningRight;
          if (this.embedFullWidthRows) {
            this.redrawFullWidthEmbeddedRows();
          }
        }
      };
      RowRenderer2.prototype.redrawFullWidthEmbeddedRows = function() {
        var rowsToRemove = [];
        this.getFullWidthRowCtrls().forEach(function(fullWidthCtrl) {
          var rowIndex = fullWidthCtrl.getRowNode().rowIndex;
          rowsToRemove.push(rowIndex.toString());
        });
        this.refreshFloatingRowComps();
        this.removeRowCtrls(rowsToRemove);
        this.redrawAfterScroll();
      };
      RowRenderer2.prototype.getFullWidthRowCtrls = function(rowNodes) {
        var _this = this;
        var rowNodesMap = this.mapRowNodes(rowNodes);
        return getAllValuesInObject(this.rowCtrlsByRowIndex).filter(function(rowCtrl) {
          if (!rowCtrl.isFullWidth()) {
            return false;
          }
          var rowNode = rowCtrl.getRowNode();
          if (rowNodesMap != null && !_this.isRowInMap(rowNode, rowNodesMap)) {
            return false;
          }
          return true;
        });
      };
      RowRenderer2.prototype.refreshFullWidthRows = function(rowNodesToRefresh) {
        var rowsToRemove = [];
        var selectivelyRefreshing = !!rowNodesToRefresh;
        var idsToRefresh = selectivelyRefreshing ? {} : void 0;
        if (selectivelyRefreshing && idsToRefresh) {
          rowNodesToRefresh.forEach(function(r) {
            return idsToRefresh[r.id] = true;
          });
        }
        this.getFullWidthRowCtrls().forEach(function(fullWidthRowCtrl) {
          var rowNode = fullWidthRowCtrl.getRowNode();
          if (selectivelyRefreshing && idsToRefresh) {
            var parentId = rowNode.level > 0 && rowNode.parent ? rowNode.parent.id : void 0;
            var skipThisNode = !idsToRefresh[rowNode.id] && !idsToRefresh[parentId];
            if (skipThisNode) {
              return;
            }
          }
          var fullWidthRowsRefreshed = fullWidthRowCtrl.refreshFullWidth();
          if (!fullWidthRowsRefreshed) {
            var rowIndex = fullWidthRowCtrl.getRowNode().rowIndex;
            rowsToRemove.push(rowIndex.toString());
          }
        });
        this.removeRowCtrls(rowsToRemove);
        this.redrawAfterScroll();
      };
      RowRenderer2.prototype.createOrUpdateRowCtrl = function(rowIndex, rowsToRecycle, animate, afterScroll) {
        var rowNode;
        var rowCtrl = this.rowCtrlsByRowIndex[rowIndex];
        if (!rowCtrl) {
          rowNode = this.paginationProxy.getRow(rowIndex);
          if (exists(rowNode) && exists(rowsToRecycle) && rowsToRecycle[rowNode.id] && rowNode.alreadyRendered) {
            rowCtrl = rowsToRecycle[rowNode.id];
            rowsToRecycle[rowNode.id] = null;
          }
        }
        var creatingNewRowCtrl = !rowCtrl;
        if (creatingNewRowCtrl) {
          if (!rowNode) {
            rowNode = this.paginationProxy.getRow(rowIndex);
          }
          if (exists(rowNode)) {
            rowCtrl = this.createRowCon(rowNode, animate, afterScroll);
          } else {
            return;
          }
        }
        if (rowNode) {
          rowNode.alreadyRendered = true;
        }
        this.rowCtrlsByRowIndex[rowIndex] = rowCtrl;
        return rowCtrl;
      };
      RowRenderer2.prototype.destroyRowCtrls = function(rowCtrlsMap, animate) {
        var _this = this;
        var executeInAWhileFuncs = [];
        iterateObject(rowCtrlsMap, function(nodeId, rowCtrl) {
          if (!rowCtrl) {
            return;
          }
          if (_this.cachedRowCtrls && rowCtrl.isCacheable()) {
            _this.cachedRowCtrls.addRow(rowCtrl);
            return;
          }
          rowCtrl.destroyFirstPass();
          if (animate) {
            _this.zombieRowCtrls[rowCtrl.getInstanceId()] = rowCtrl;
            executeInAWhileFuncs.push(function() {
              rowCtrl.destroySecondPass();
              delete _this.zombieRowCtrls[rowCtrl.getInstanceId()];
            });
          } else {
            rowCtrl.destroySecondPass();
          }
        });
        if (animate) {
          executeInAWhileFuncs.push(function() {
            _this.updateAllRowCtrls();
            _this.dispatchDisplayedRowsChanged();
          });
          executeInAWhile(executeInAWhileFuncs);
        }
      };
      RowRenderer2.prototype.workOutFirstAndLastRowsToRender = function() {
        var newFirst;
        var newLast;
        if (!this.paginationProxy.isRowsToRender()) {
          newFirst = 0;
          newLast = -1;
        } else if (this.printLayout) {
          newFirst = this.paginationProxy.getPageFirstRow();
          newLast = this.paginationProxy.getPageLastRow();
        } else {
          var bufferPixels = this.gridOptionsWrapper.getRowBufferInPixels();
          var gridBodyCtrl = this.ctrlsService.getGridBodyCtrl();
          var suppressRowVirtualisation = this.gridOptionsWrapper.isSuppressRowVirtualisation();
          var rowHeightsChanged = false;
          var firstPixel = void 0;
          var lastPixel = void 0;
          do {
            var paginationOffset = this.paginationProxy.getPixelOffset();
            var _a = this.paginationProxy.getCurrentPagePixelRange(), pageFirstPixel = _a.pageFirstPixel, pageLastPixel = _a.pageLastPixel;
            var divStretchOffset = this.rowContainerHeightService.getDivStretchOffset();
            var bodyVRange = gridBodyCtrl.getScrollFeature().getVScrollPosition();
            var bodyTopPixel = bodyVRange.top;
            var bodyBottomPixel = bodyVRange.bottom;
            if (suppressRowVirtualisation) {
              firstPixel = pageFirstPixel + divStretchOffset;
              lastPixel = pageLastPixel + divStretchOffset;
            } else {
              firstPixel = Math.max(bodyTopPixel + paginationOffset - bufferPixels, pageFirstPixel) + divStretchOffset;
              lastPixel = Math.min(bodyBottomPixel + paginationOffset + bufferPixels, pageLastPixel) + divStretchOffset;
            }
            this.firstVisibleVPixel = Math.max(bodyTopPixel + paginationOffset, pageFirstPixel) + divStretchOffset;
            rowHeightsChanged = this.ensureAllRowsInRangeHaveHeightsCalculated(firstPixel, lastPixel);
          } while (rowHeightsChanged);
          var firstRowIndex = this.paginationProxy.getRowIndexAtPixel(firstPixel);
          var lastRowIndex = this.paginationProxy.getRowIndexAtPixel(lastPixel);
          var pageFirstRow = this.paginationProxy.getPageFirstRow();
          var pageLastRow = this.paginationProxy.getPageLastRow();
          if (firstRowIndex < pageFirstRow) {
            firstRowIndex = pageFirstRow;
          }
          if (lastRowIndex > pageLastRow) {
            lastRowIndex = pageLastRow;
          }
          newFirst = firstRowIndex;
          newLast = lastRowIndex;
        }
        var rowLayoutNormal = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_NORMAL;
        var suppressRowCountRestriction = this.gridOptionsWrapper.isSuppressMaxRenderedRowRestriction();
        var rowBufferMaxSize = Math.max(this.gridOptionsWrapper.getRowBuffer(), 500);
        if (rowLayoutNormal && !suppressRowCountRestriction) {
          if (newLast - newFirst > rowBufferMaxSize) {
            newLast = newFirst + rowBufferMaxSize;
          }
        }
        var firstDiffers = newFirst !== this.firstRenderedRow;
        var lastDiffers = newLast !== this.lastRenderedRow;
        if (firstDiffers || lastDiffers) {
          this.firstRenderedRow = newFirst;
          this.lastRenderedRow = newLast;
          var event_1 = {
            type: Events.EVENT_VIEWPORT_CHANGED,
            firstRow: newFirst,
            lastRow: newLast
          };
          this.eventService.dispatchEvent(event_1);
        }
      };
      RowRenderer2.prototype.dispatchFirstDataRenderedEvent = function() {
        var _this = this;
        if (this.dataFirstRenderedFired) {
          return;
        }
        this.dataFirstRenderedFired = true;
        var event = {
          type: Events.EVENT_FIRST_DATA_RENDERED,
          firstRow: this.firstRenderedRow,
          lastRow: this.lastRenderedRow
        };
        window.requestAnimationFrame(function() {
          _this.beans.eventService.dispatchEvent(event);
        });
      };
      RowRenderer2.prototype.ensureAllRowsInRangeHaveHeightsCalculated = function(topPixel, bottomPixel) {
        var res = this.paginationProxy.ensureRowHeightsValid(topPixel, bottomPixel, -1, -1);
        if (res) {
          this.updateContainerHeights();
        }
        return res;
      };
      RowRenderer2.prototype.getFirstVisibleVerticalPixel = function() {
        return this.firstVisibleVPixel;
      };
      RowRenderer2.prototype.getFirstVirtualRenderedRow = function() {
        return this.firstRenderedRow;
      };
      RowRenderer2.prototype.getLastVirtualRenderedRow = function() {
        return this.lastRenderedRow;
      };
      RowRenderer2.prototype.doNotUnVirtualiseRow = function(rowComp) {
        var REMOVE_ROW = false;
        var KEEP_ROW = true;
        var rowNode = rowComp.getRowNode();
        var rowHasFocus = this.focusService.isRowNodeFocused(rowNode);
        var rowIsEditing = rowComp.isEditing();
        var rowIsDetail = rowNode.detail;
        var mightWantToKeepRow = rowHasFocus || rowIsEditing || rowIsDetail;
        if (!mightWantToKeepRow) {
          return REMOVE_ROW;
        }
        var rowNodePresent = this.paginationProxy.isRowPresent(rowNode);
        return rowNodePresent ? KEEP_ROW : REMOVE_ROW;
      };
      RowRenderer2.prototype.createRowCon = function(rowNode, animate, afterScroll) {
        var rowCtrlFromCache = this.cachedRowCtrls ? this.cachedRowCtrls.getRow(rowNode) : null;
        if (rowCtrlFromCache) {
          return rowCtrlFromCache;
        }
        var suppressAnimationFrame = this.gridOptionsWrapper.isSuppressAnimationFrame();
        var useAnimationFrameForCreate = afterScroll && !suppressAnimationFrame && !this.printLayout;
        var res = new RowCtrl(rowNode, this.beans, animate, useAnimationFrameForCreate, this.printLayout);
        return res;
      };
      RowRenderer2.prototype.getRenderedNodes = function() {
        var renderedRows = this.rowCtrlsByRowIndex;
        return Object.keys(renderedRows).map(function(key) {
          return renderedRows[key].getRowNode();
        });
      };
      RowRenderer2.prototype.getRowByPosition = function(rowPosition) {
        var rowCtrl;
        var rowIndex = rowPosition.rowIndex;
        switch (rowPosition.rowPinned) {
          case Constants.PINNED_TOP:
            rowCtrl = this.topRowCtrls[rowIndex];
            break;
          case Constants.PINNED_BOTTOM:
            rowCtrl = this.bottomRowCtrls[rowIndex];
            break;
          default:
            rowCtrl = this.rowCtrlsByRowIndex[rowIndex];
            if (!rowCtrl) {
              rowCtrl = this.getStickyTopRowCtrls().find(function(ctrl) {
                return ctrl.getRowNode().rowIndex === rowIndex;
              }) || null;
            }
            break;
        }
        return rowCtrl;
      };
      RowRenderer2.prototype.getRowNode = function(gridRow) {
        switch (gridRow.rowPinned) {
          case Constants.PINNED_TOP:
            return this.pinnedRowModel.getPinnedTopRowData()[gridRow.rowIndex];
          case Constants.PINNED_BOTTOM:
            return this.pinnedRowModel.getPinnedBottomRowData()[gridRow.rowIndex];
          default:
            return this.rowModel.getRow(gridRow.rowIndex);
        }
      };
      RowRenderer2.prototype.isRangeInRenderedViewport = function(startIndex, endIndex) {
        var parentClosed = startIndex == null || endIndex == null;
        if (parentClosed) {
          return false;
        }
        var blockAfterViewport = startIndex > this.lastRenderedRow;
        var blockBeforeViewport = endIndex < this.firstRenderedRow;
        var blockInsideViewport = !blockBeforeViewport && !blockAfterViewport;
        return blockInsideViewport;
      };
      __decorate$13([
        Autowired("animationFrameService")
      ], RowRenderer2.prototype, "animationFrameService", void 0);
      __decorate$13([
        Autowired("paginationProxy")
      ], RowRenderer2.prototype, "paginationProxy", void 0);
      __decorate$13([
        Autowired("columnModel")
      ], RowRenderer2.prototype, "columnModel", void 0);
      __decorate$13([
        Autowired("pinnedRowModel")
      ], RowRenderer2.prototype, "pinnedRowModel", void 0);
      __decorate$13([
        Autowired("rowModel")
      ], RowRenderer2.prototype, "rowModel", void 0);
      __decorate$13([
        Autowired("focusService")
      ], RowRenderer2.prototype, "focusService", void 0);
      __decorate$13([
        Autowired("beans")
      ], RowRenderer2.prototype, "beans", void 0);
      __decorate$13([
        Autowired("rowContainerHeightService")
      ], RowRenderer2.prototype, "rowContainerHeightService", void 0);
      __decorate$13([
        Autowired("ctrlsService")
      ], RowRenderer2.prototype, "ctrlsService", void 0);
      __decorate$13([
        PostConstruct
      ], RowRenderer2.prototype, "postConstruct", null);
      RowRenderer2 = __decorate$13([
        Bean("rowRenderer")
      ], RowRenderer2);
      return RowRenderer2;
    }(BeanStub);
    RowCtrlCache = function() {
      function RowCtrlCache2(maxCount) {
        this.entriesMap = {};
        this.entriesList = [];
        this.maxCount = maxCount;
      }
      RowCtrlCache2.prototype.addRow = function(rowCtrl) {
        this.entriesMap[rowCtrl.getRowNode().id] = rowCtrl;
        this.entriesList.push(rowCtrl);
        rowCtrl.setCached(true);
        if (this.entriesList.length > this.maxCount) {
          var rowCtrlToDestroy = this.entriesList[0];
          rowCtrlToDestroy.destroyFirstPass();
          rowCtrlToDestroy.destroySecondPass();
          this.removeFromCache(rowCtrlToDestroy);
        }
      };
      RowCtrlCache2.prototype.getRow = function(rowNode) {
        if (rowNode == null || rowNode.id == null) {
          return null;
        }
        var res = this.entriesMap[rowNode.id];
        if (!res) {
          return null;
        }
        this.removeFromCache(res);
        res.setCached(false);
        var rowNodeMismatch = res.getRowNode() != rowNode;
        return rowNodeMismatch ? null : res;
      };
      RowCtrlCache2.prototype.removeFromCache = function(rowCtrl) {
        var rowNodeId = rowCtrl.getRowNode().id;
        delete this.entriesMap[rowNodeId];
        removeFromArray(this.entriesList, rowCtrl);
      };
      RowCtrlCache2.prototype.getEntries = function() {
        return this.entriesList;
      };
      return RowCtrlCache2;
    }();
    __extends$19 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$12 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    ValueFormatterService = function(_super) {
      __extends$19(ValueFormatterService2, _super);
      function ValueFormatterService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      ValueFormatterService2.prototype.formatValue = function(column, node, value, suppliedFormatter, useFormatterFromColumn) {
        if (useFormatterFromColumn === void 0) {
          useFormatterFromColumn = true;
        }
        var result = null;
        var formatter;
        var colDef = column.getColDef();
        if (suppliedFormatter) {
          formatter = suppliedFormatter;
        } else if (useFormatterFromColumn) {
          formatter = node && node.rowPinned && colDef.pinnedRowValueFormatter ? colDef.pinnedRowValueFormatter : colDef.valueFormatter;
        }
        if (formatter) {
          var params = {
            value,
            node,
            data: node ? node.data : null,
            colDef,
            column,
            api: this.gridOptionsWrapper.getApi(),
            columnApi: this.gridOptionsWrapper.getColumnApi(),
            context: this.gridOptionsWrapper.getContext()
          };
          result = this.expressionService.evaluate(formatter, params);
        } else if (colDef.refData) {
          return colDef.refData[value] || "";
        }
        if (result == null && Array.isArray(value)) {
          result = value.join(", ");
        }
        return result;
      };
      __decorate$12([
        Autowired("expressionService")
      ], ValueFormatterService2.prototype, "expressionService", void 0);
      ValueFormatterService2 = __decorate$12([
        Bean("valueFormatterService")
      ], ValueFormatterService2);
      return ValueFormatterService2;
    }(BeanStub);
    __extends$18 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$11 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    PinnedRowModel = function(_super) {
      __extends$18(PinnedRowModel2, _super);
      function PinnedRowModel2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      PinnedRowModel2.prototype.init = function() {
        this.setPinnedTopRowData(this.gridOptionsWrapper.getPinnedTopRowData());
        this.setPinnedBottomRowData(this.gridOptionsWrapper.getPinnedBottomRowData());
      };
      PinnedRowModel2.prototype.isEmpty = function(floating) {
        var rows = floating === Constants.PINNED_TOP ? this.pinnedTopRows : this.pinnedBottomRows;
        return missingOrEmpty(rows);
      };
      PinnedRowModel2.prototype.isRowsToRender = function(floating) {
        return !this.isEmpty(floating);
      };
      PinnedRowModel2.prototype.getRowAtPixel = function(pixel, floating) {
        var rows = floating === Constants.PINNED_TOP ? this.pinnedTopRows : this.pinnedBottomRows;
        if (missingOrEmpty(rows)) {
          return 0;
        }
        for (var i = 0; i < rows.length; i++) {
          var rowNode = rows[i];
          var rowTopPixel = rowNode.rowTop + rowNode.rowHeight - 1;
          if (rowTopPixel >= pixel) {
            return i;
          }
        }
        return rows.length - 1;
      };
      PinnedRowModel2.prototype.setPinnedTopRowData = function(rowData) {
        this.pinnedTopRows = this.createNodesFromData(rowData, true);
        var event = {
          type: Events.EVENT_PINNED_ROW_DATA_CHANGED
        };
        this.eventService.dispatchEvent(event);
      };
      PinnedRowModel2.prototype.setPinnedBottomRowData = function(rowData) {
        this.pinnedBottomRows = this.createNodesFromData(rowData, false);
        var event = {
          type: Events.EVENT_PINNED_ROW_DATA_CHANGED
        };
        this.eventService.dispatchEvent(event);
      };
      PinnedRowModel2.prototype.createNodesFromData = function(allData, isTop) {
        var _this = this;
        var rowNodes = [];
        if (allData) {
          var nextRowTop_1 = 0;
          allData.forEach(function(dataItem, index) {
            var rowNode = new RowNode(_this.beans);
            rowNode.data = dataItem;
            var idPrefix = isTop ? RowNode.ID_PREFIX_TOP_PINNED : RowNode.ID_PREFIX_BOTTOM_PINNED;
            rowNode.id = idPrefix + index;
            rowNode.rowPinned = isTop ? Constants.PINNED_TOP : Constants.PINNED_BOTTOM;
            rowNode.setRowTop(nextRowTop_1);
            rowNode.setRowHeight(_this.gridOptionsWrapper.getRowHeightForNode(rowNode).height);
            rowNode.setRowIndex(index);
            nextRowTop_1 += rowNode.rowHeight;
            rowNodes.push(rowNode);
          });
        }
        return rowNodes;
      };
      PinnedRowModel2.prototype.getPinnedTopRowData = function() {
        return this.pinnedTopRows;
      };
      PinnedRowModel2.prototype.getPinnedBottomRowData = function() {
        return this.pinnedBottomRows;
      };
      PinnedRowModel2.prototype.getPinnedTopTotalHeight = function() {
        return this.getTotalHeight(this.pinnedTopRows);
      };
      PinnedRowModel2.prototype.getPinnedTopRowCount = function() {
        return this.pinnedTopRows ? this.pinnedTopRows.length : 0;
      };
      PinnedRowModel2.prototype.getPinnedBottomRowCount = function() {
        return this.pinnedBottomRows ? this.pinnedBottomRows.length : 0;
      };
      PinnedRowModel2.prototype.getPinnedTopRow = function(index) {
        return this.pinnedTopRows[index];
      };
      PinnedRowModel2.prototype.getPinnedBottomRow = function(index) {
        return this.pinnedBottomRows[index];
      };
      PinnedRowModel2.prototype.forEachPinnedTopRow = function(callback) {
        if (missingOrEmpty(this.pinnedTopRows)) {
          return;
        }
        this.pinnedTopRows.forEach(callback);
      };
      PinnedRowModel2.prototype.forEachPinnedBottomRow = function(callback) {
        if (missingOrEmpty(this.pinnedBottomRows)) {
          return;
        }
        this.pinnedBottomRows.forEach(callback);
      };
      PinnedRowModel2.prototype.getPinnedBottomTotalHeight = function() {
        return this.getTotalHeight(this.pinnedBottomRows);
      };
      PinnedRowModel2.prototype.getTotalHeight = function(rowNodes) {
        if (!rowNodes || rowNodes.length === 0) {
          return 0;
        }
        var lastNode = last(rowNodes);
        return lastNode.rowTop + lastNode.rowHeight;
      };
      __decorate$11([
        Autowired("beans")
      ], PinnedRowModel2.prototype, "beans", void 0);
      __decorate$11([
        PostConstruct
      ], PinnedRowModel2.prototype, "init", null);
      PinnedRowModel2 = __decorate$11([
        Bean("pinnedRowModel")
      ], PinnedRowModel2);
      return PinnedRowModel2;
    }(BeanStub);
    (function(ServerSideTransactionResultStatus2) {
      ServerSideTransactionResultStatus2["Applied"] = "Applied";
      ServerSideTransactionResultStatus2["StoreNotFound"] = "StoreNotFound";
      ServerSideTransactionResultStatus2["StoreLoading"] = "StoreLoading";
      ServerSideTransactionResultStatus2["StoreWaitingToLoad"] = "StoreWaitingToLoad";
      ServerSideTransactionResultStatus2["StoreLoadingFailed"] = "StoreLoadingFailed";
      ServerSideTransactionResultStatus2["StoreWrongType"] = "StoreWrongType";
      ServerSideTransactionResultStatus2["Cancelled"] = "Cancelled";
    })(ServerSideTransactionResultStatus || (ServerSideTransactionResultStatus = {}));
    ChangedPath = function() {
      function ChangedPath2(keepingColumns, rootNode) {
        this.active = true;
        this.nodeIdsToColumns = {};
        this.mapToItems = {};
        this.keepingColumns = keepingColumns;
        this.pathRoot = {
          rowNode: rootNode,
          children: null
        };
        this.mapToItems[rootNode.id] = this.pathRoot;
      }
      ChangedPath2.prototype.setInactive = function() {
        this.active = false;
      };
      ChangedPath2.prototype.isActive = function() {
        return this.active;
      };
      ChangedPath2.prototype.depthFirstSearchChangedPath = function(pathItem, callback) {
        if (pathItem.children) {
          for (var i = 0; i < pathItem.children.length; i++) {
            this.depthFirstSearchChangedPath(pathItem.children[i], callback);
          }
        }
        callback(pathItem.rowNode);
      };
      ChangedPath2.prototype.depthFirstSearchEverything = function(rowNode, callback, traverseEverything) {
        if (rowNode.childrenAfterGroup) {
          for (var i = 0; i < rowNode.childrenAfterGroup.length; i++) {
            var childNode = rowNode.childrenAfterGroup[i];
            if (childNode.childrenAfterGroup) {
              this.depthFirstSearchEverything(rowNode.childrenAfterGroup[i], callback, traverseEverything);
            } else if (traverseEverything) {
              callback(childNode);
            }
          }
        }
        callback(rowNode);
      };
      ChangedPath2.prototype.forEachChangedNodeDepthFirst = function(callback, traverseLeafNodes, includeUnchangedNodes) {
        if (traverseLeafNodes === void 0) {
          traverseLeafNodes = false;
        }
        if (includeUnchangedNodes === void 0) {
          includeUnchangedNodes = false;
        }
        if (this.active && !includeUnchangedNodes) {
          this.depthFirstSearchChangedPath(this.pathRoot, callback);
        } else {
          this.depthFirstSearchEverything(this.pathRoot.rowNode, callback, traverseLeafNodes);
        }
      };
      ChangedPath2.prototype.executeFromRootNode = function(callback) {
        callback(this.pathRoot.rowNode);
      };
      ChangedPath2.prototype.createPathItems = function(rowNode) {
        var pointer = rowNode;
        var newEntryCount = 0;
        while (!this.mapToItems[pointer.id]) {
          var newEntry = {
            rowNode: pointer,
            children: null
          };
          this.mapToItems[pointer.id] = newEntry;
          newEntryCount++;
          pointer = pointer.parent;
        }
        return newEntryCount;
      };
      ChangedPath2.prototype.populateColumnsMap = function(rowNode, columns) {
        var _this = this;
        if (!this.keepingColumns || !columns) {
          return;
        }
        var pointer = rowNode;
        while (pointer) {
          if (!this.nodeIdsToColumns[pointer.id]) {
            this.nodeIdsToColumns[pointer.id] = {};
          }
          columns.forEach(function(col) {
            return _this.nodeIdsToColumns[pointer.id][col.getId()] = true;
          });
          pointer = pointer.parent;
        }
      };
      ChangedPath2.prototype.linkPathItems = function(rowNode, newEntryCount) {
        var pointer = rowNode;
        for (var i = 0; i < newEntryCount; i++) {
          var thisItem = this.mapToItems[pointer.id];
          var parentItem = this.mapToItems[pointer.parent.id];
          if (!parentItem.children) {
            parentItem.children = [];
          }
          parentItem.children.push(thisItem);
          pointer = pointer.parent;
        }
      };
      ChangedPath2.prototype.addParentNode = function(rowNode, columns) {
        if (!rowNode || rowNode.isRowPinned()) {
          return;
        }
        var newEntryCount = this.createPathItems(rowNode);
        this.linkPathItems(rowNode, newEntryCount);
        this.populateColumnsMap(rowNode, columns);
      };
      ChangedPath2.prototype.canSkip = function(rowNode) {
        return this.active && !this.mapToItems[rowNode.id];
      };
      ChangedPath2.prototype.getValueColumnsForNode = function(rowNode, valueColumns) {
        if (!this.keepingColumns) {
          return valueColumns;
        }
        var colsForThisNode = this.nodeIdsToColumns[rowNode.id];
        var result = valueColumns.filter(function(col) {
          return colsForThisNode[col.getId()];
        });
        return result;
      };
      ChangedPath2.prototype.getNotValueColumnsForNode = function(rowNode, valueColumns) {
        if (!this.keepingColumns) {
          return null;
        }
        var colsForThisNode = this.nodeIdsToColumns[rowNode.id];
        var result = valueColumns.filter(function(col) {
          return !colsForThisNode[col.getId()];
        });
        return result;
      };
      return ChangedPath2;
    }();
    __extends$17 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    RowNodeBlock = function(_super) {
      __extends$17(RowNodeBlock2, _super);
      function RowNodeBlock2(id) {
        var _this = _super.call(this) || this;
        _this.state = RowNodeBlock2.STATE_WAITING_TO_LOAD;
        _this.version = 0;
        _this.id = id;
        return _this;
      }
      RowNodeBlock2.prototype.getId = function() {
        return this.id;
      };
      RowNodeBlock2.prototype.load = function() {
        this.state = RowNodeBlock2.STATE_LOADING;
        this.loadFromDatasource();
      };
      RowNodeBlock2.prototype.getVersion = function() {
        return this.version;
      };
      RowNodeBlock2.prototype.setStateWaitingToLoad = function() {
        this.version++;
        this.state = RowNodeBlock2.STATE_WAITING_TO_LOAD;
      };
      RowNodeBlock2.prototype.getState = function() {
        return this.state;
      };
      RowNodeBlock2.prototype.pageLoadFailed = function(version) {
        var requestMostRecentAndLive = this.isRequestMostRecentAndLive(version);
        if (requestMostRecentAndLive) {
          this.state = RowNodeBlock2.STATE_FAILED;
          this.processServerFail();
        }
        this.dispatchLoadCompleted(false);
      };
      RowNodeBlock2.prototype.success = function(version, params) {
        this.successCommon(version, params);
      };
      RowNodeBlock2.prototype.pageLoaded = function(version, rows, lastRow) {
        this.successCommon(version, { rowData: rows, rowCount: lastRow });
      };
      RowNodeBlock2.prototype.isRequestMostRecentAndLive = function(version) {
        var thisIsMostRecentRequest = version === this.version;
        var weAreNotDestroyed = this.isAlive();
        return thisIsMostRecentRequest && weAreNotDestroyed;
      };
      RowNodeBlock2.prototype.successCommon = function(version, params) {
        this.dispatchLoadCompleted();
        var requestMostRecentAndLive = this.isRequestMostRecentAndLive(version);
        if (requestMostRecentAndLive) {
          this.state = RowNodeBlock2.STATE_LOADED;
          this.processServerResult(params);
        }
      };
      RowNodeBlock2.prototype.dispatchLoadCompleted = function(success) {
        if (success === void 0) {
          success = true;
        }
        var event = {
          type: RowNodeBlock2.EVENT_LOAD_COMPLETE,
          success,
          block: this
        };
        this.dispatchEvent(event);
      };
      RowNodeBlock2.EVENT_LOAD_COMPLETE = "loadComplete";
      RowNodeBlock2.STATE_WAITING_TO_LOAD = "needsLoading";
      RowNodeBlock2.STATE_LOADING = "loading";
      RowNodeBlock2.STATE_LOADED = "loaded";
      RowNodeBlock2.STATE_FAILED = "failed";
      return RowNodeBlock2;
    }(BeanStub);
    __extends$16 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$10 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param$6 = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    RowNodeBlockLoader = function(_super) {
      __extends$16(RowNodeBlockLoader2, _super);
      function RowNodeBlockLoader2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.activeBlockLoadsCount = 0;
        _this.blocks = [];
        _this.active = true;
        return _this;
      }
      RowNodeBlockLoader_1 = RowNodeBlockLoader2;
      RowNodeBlockLoader2.prototype.postConstruct = function() {
        this.maxConcurrentRequests = this.gridOptionsWrapper.getMaxConcurrentDatasourceRequests();
        var blockLoadDebounceMillis = this.gridOptionsWrapper.getBlockLoadDebounceMillis();
        if (blockLoadDebounceMillis && blockLoadDebounceMillis > 0) {
          this.checkBlockToLoadDebounce = _.debounce(this.performCheckBlocksToLoad.bind(this), blockLoadDebounceMillis);
        }
      };
      RowNodeBlockLoader2.prototype.setBeans = function(loggerFactory) {
        this.logger = loggerFactory.create("RowNodeBlockLoader");
      };
      RowNodeBlockLoader2.prototype.addBlock = function(block) {
        this.blocks.push(block);
        block.addEventListener(RowNodeBlock.EVENT_LOAD_COMPLETE, this.loadComplete.bind(this));
        this.checkBlockToLoad();
      };
      RowNodeBlockLoader2.prototype.removeBlock = function(block) {
        _.removeFromArray(this.blocks, block);
      };
      RowNodeBlockLoader2.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
        this.active = false;
      };
      RowNodeBlockLoader2.prototype.loadComplete = function() {
        this.activeBlockLoadsCount--;
        this.checkBlockToLoad();
        if (this.activeBlockLoadsCount == 0) {
          this.dispatchEvent({ type: RowNodeBlockLoader_1.BLOCK_LOADER_FINISHED_EVENT });
        }
      };
      RowNodeBlockLoader2.prototype.checkBlockToLoad = function() {
        if (this.checkBlockToLoadDebounce) {
          this.checkBlockToLoadDebounce();
        } else {
          this.performCheckBlocksToLoad();
        }
      };
      RowNodeBlockLoader2.prototype.performCheckBlocksToLoad = function() {
        if (!this.active) {
          return;
        }
        this.printCacheStatus();
        if (this.maxConcurrentRequests != null && this.activeBlockLoadsCount >= this.maxConcurrentRequests) {
          this.logger.log("checkBlockToLoad: max loads exceeded");
          return;
        }
        var loadAvailability = this.maxConcurrentRequests !== void 0 ? this.maxConcurrentRequests - this.activeBlockLoadsCount : void 0;
        var blocksToLoad = this.blocks.filter(function(block) {
          return block.getState() === RowNodeBlock.STATE_WAITING_TO_LOAD;
        }).slice(0, loadAvailability);
        this.activeBlockLoadsCount += blocksToLoad.length;
        blocksToLoad.forEach(function(block) {
          return block.load();
        });
        this.printCacheStatus();
      };
      RowNodeBlockLoader2.prototype.getBlockState = function() {
        var result = {};
        this.blocks.forEach(function(block) {
          var _a = block.getBlockStateJson(), id = _a.id, state = _a.state;
          result[id] = state;
        });
        return result;
      };
      RowNodeBlockLoader2.prototype.printCacheStatus = function() {
        if (this.logger.isLogging()) {
          this.logger.log("printCacheStatus: activePageLoadsCount = " + this.activeBlockLoadsCount + "," + (" blocks = " + JSON.stringify(this.getBlockState())));
        }
      };
      RowNodeBlockLoader2.prototype.isLoading = function() {
        return this.activeBlockLoadsCount > 0;
      };
      var RowNodeBlockLoader_1;
      RowNodeBlockLoader2.BLOCK_LOADER_FINISHED_EVENT = "blockLoaderFinished";
      __decorate$10([
        PostConstruct
      ], RowNodeBlockLoader2.prototype, "postConstruct", null);
      __decorate$10([
        __param$6(0, Qualifier("loggerFactory"))
      ], RowNodeBlockLoader2.prototype, "setBeans", null);
      RowNodeBlockLoader2 = RowNodeBlockLoader_1 = __decorate$10([
        Bean("rowNodeBlockLoader")
      ], RowNodeBlockLoader2);
      return RowNodeBlockLoader2;
    }(BeanStub);
    __extends$15 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$$ = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    PaginationProxy = function(_super) {
      __extends$15(PaginationProxy2, _super);
      function PaginationProxy2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.currentPage = 0;
        _this.topDisplayedRowIndex = 0;
        _this.bottomDisplayedRowIndex = 0;
        _this.pixelOffset = 0;
        _this.masterRowCount = 0;
        return _this;
      }
      PaginationProxy2.prototype.postConstruct = function() {
        this.active = this.gridOptionsWrapper.isPagination();
        this.paginateChildRows = this.gridOptionsWrapper.isPaginateChildRows();
        this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, this.onModelUpdated.bind(this));
        this.addManagedListener(this.gridOptionsWrapper, "paginationPageSize", this.onPaginationPageSizeChanged.bind(this));
        this.onModelUpdated();
      };
      PaginationProxy2.prototype.ensureRowHeightsValid = function(startPixel, endPixel, startLimitIndex, endLimitIndex) {
        var res = this.rowModel.ensureRowHeightsValid(startPixel, endPixel, this.getPageFirstRow(), this.getPageLastRow());
        if (res) {
          this.calculatePages();
        }
        return res;
      };
      PaginationProxy2.prototype.onModelUpdated = function(modelUpdatedEvent) {
        this.calculatePages();
        var paginationChangedEvent = {
          type: Events.EVENT_PAGINATION_CHANGED,
          animate: modelUpdatedEvent ? modelUpdatedEvent.animate : false,
          newData: modelUpdatedEvent ? modelUpdatedEvent.newData : false,
          newPage: modelUpdatedEvent ? modelUpdatedEvent.newPage : false,
          keepRenderedRows: modelUpdatedEvent ? modelUpdatedEvent.keepRenderedRows : false
        };
        this.eventService.dispatchEvent(paginationChangedEvent);
      };
      PaginationProxy2.prototype.onPaginationPageSizeChanged = function() {
        this.calculatePages();
        var paginationChangedEvent = {
          type: Events.EVENT_PAGINATION_CHANGED,
          animate: false,
          newData: false,
          newPage: false,
          keepRenderedRows: true
        };
        this.eventService.dispatchEvent(paginationChangedEvent);
      };
      PaginationProxy2.prototype.goToPage = function(page) {
        if (!this.active || this.currentPage === page) {
          return;
        }
        this.currentPage = page;
        var event = {
          type: Events.EVENT_MODEL_UPDATED,
          animate: false,
          keepRenderedRows: false,
          newData: false,
          newPage: true
        };
        this.onModelUpdated(event);
      };
      PaginationProxy2.prototype.getPixelOffset = function() {
        return this.pixelOffset;
      };
      PaginationProxy2.prototype.getRow = function(index) {
        return this.rowModel.getRow(index);
      };
      PaginationProxy2.prototype.getRowNode = function(id) {
        return this.rowModel.getRowNode(id);
      };
      PaginationProxy2.prototype.getRowIndexAtPixel = function(pixel) {
        return this.rowModel.getRowIndexAtPixel(pixel);
      };
      PaginationProxy2.prototype.getCurrentPageHeight = function() {
        if (missing(this.topRowBounds) || missing(this.bottomRowBounds)) {
          return 0;
        }
        return Math.max(this.bottomRowBounds.rowTop + this.bottomRowBounds.rowHeight - this.topRowBounds.rowTop, 0);
      };
      PaginationProxy2.prototype.getCurrentPagePixelRange = function() {
        var pageFirstPixel = this.topRowBounds ? this.topRowBounds.rowTop : 0;
        var pageLastPixel = this.bottomRowBounds ? this.bottomRowBounds.rowTop + this.bottomRowBounds.rowHeight : 0;
        return { pageFirstPixel, pageLastPixel };
      };
      PaginationProxy2.prototype.isRowPresent = function(rowNode) {
        if (!this.rowModel.isRowPresent(rowNode)) {
          return false;
        }
        var nodeIsInPage = rowNode.rowIndex >= this.topDisplayedRowIndex && rowNode.rowIndex <= this.bottomDisplayedRowIndex;
        return nodeIsInPage;
      };
      PaginationProxy2.prototype.isEmpty = function() {
        return this.rowModel.isEmpty();
      };
      PaginationProxy2.prototype.isRowsToRender = function() {
        return this.rowModel.isRowsToRender();
      };
      PaginationProxy2.prototype.getNodesInRangeForSelection = function(firstInRange, lastInRange) {
        return this.rowModel.getNodesInRangeForSelection(firstInRange, lastInRange);
      };
      PaginationProxy2.prototype.forEachNode = function(callback) {
        return this.rowModel.forEachNode(callback);
      };
      PaginationProxy2.prototype.getType = function() {
        return this.rowModel.getType();
      };
      PaginationProxy2.prototype.getRowBounds = function(index) {
        var res = this.rowModel.getRowBounds(index);
        res.rowIndex = index;
        return res;
      };
      PaginationProxy2.prototype.getPageFirstRow = function() {
        return this.topRowBounds ? this.topRowBounds.rowIndex : -1;
      };
      PaginationProxy2.prototype.getPageLastRow = function() {
        return this.bottomRowBounds ? this.bottomRowBounds.rowIndex : -1;
      };
      PaginationProxy2.prototype.getRowCount = function() {
        return this.rowModel.getRowCount();
      };
      PaginationProxy2.prototype.getPageForIndex = function(index) {
        return Math.floor(index / this.pageSize);
      };
      PaginationProxy2.prototype.goToPageWithIndex = function(index) {
        if (!this.active) {
          return;
        }
        var pageNumber = this.getPageForIndex(index);
        this.goToPage(pageNumber);
      };
      PaginationProxy2.prototype.isRowInPage = function(row) {
        if (!this.active) {
          return true;
        }
        var rowPage = this.getPageForIndex(row.rowIndex);
        return rowPage === this.currentPage;
      };
      PaginationProxy2.prototype.isLastPageFound = function() {
        return this.rowModel.isLastRowIndexKnown();
      };
      PaginationProxy2.prototype.getCurrentPage = function() {
        return this.currentPage;
      };
      PaginationProxy2.prototype.goToNextPage = function() {
        this.goToPage(this.currentPage + 1);
      };
      PaginationProxy2.prototype.goToPreviousPage = function() {
        this.goToPage(this.currentPage - 1);
      };
      PaginationProxy2.prototype.goToFirstPage = function() {
        this.goToPage(0);
      };
      PaginationProxy2.prototype.goToLastPage = function() {
        var rowCount = this.rowModel.getRowCount();
        var lastPage = Math.floor(rowCount / this.pageSize);
        this.goToPage(lastPage);
      };
      PaginationProxy2.prototype.getPageSize = function() {
        return this.pageSize;
      };
      PaginationProxy2.prototype.getTotalPages = function() {
        return this.totalPages;
      };
      PaginationProxy2.prototype.setPageSize = function() {
        this.pageSize = this.gridOptionsWrapper.getPaginationPageSize();
        if (this.pageSize == null || this.pageSize < 1) {
          this.pageSize = 100;
        }
      };
      PaginationProxy2.prototype.calculatePages = function() {
        if (this.active) {
          this.setPageSize();
          if (this.paginateChildRows) {
            this.calculatePagesAllRows();
          } else {
            this.calculatePagesMasterRowsOnly();
          }
        } else {
          this.calculatedPagesNotActive();
        }
        this.topRowBounds = this.rowModel.getRowBounds(this.topDisplayedRowIndex);
        if (this.topRowBounds) {
          this.topRowBounds.rowIndex = this.topDisplayedRowIndex;
        }
        this.bottomRowBounds = this.rowModel.getRowBounds(this.bottomDisplayedRowIndex);
        if (this.bottomRowBounds) {
          this.bottomRowBounds.rowIndex = this.bottomDisplayedRowIndex;
        }
        this.setPixelOffset(exists(this.topRowBounds) ? this.topRowBounds.rowTop : 0);
      };
      PaginationProxy2.prototype.setPixelOffset = function(value) {
        if (this.pixelOffset === value) {
          return;
        }
        this.pixelOffset = value;
        this.eventService.dispatchEvent({ type: Events.EVENT_PAGINATION_PIXEL_OFFSET_CHANGED });
      };
      PaginationProxy2.prototype.setZeroRows = function() {
        this.masterRowCount = 0;
        this.topDisplayedRowIndex = 0;
        this.bottomDisplayedRowIndex = -1;
        this.currentPage = 0;
        this.totalPages = 0;
      };
      PaginationProxy2.prototype.calculatePagesMasterRowsOnly = function() {
        this.masterRowCount = this.rowModel.getTopLevelRowCount();
        if (this.masterRowCount <= 0) {
          this.setZeroRows();
          return;
        }
        var masterLastRowIndex = this.masterRowCount - 1;
        this.totalPages = Math.floor(masterLastRowIndex / this.pageSize) + 1;
        if (this.currentPage >= this.totalPages) {
          this.currentPage = this.totalPages - 1;
        }
        if (!isNumeric(this.currentPage) || this.currentPage < 0) {
          this.currentPage = 0;
        }
        var masterPageStartIndex = this.pageSize * this.currentPage;
        var masterPageEndIndex = this.pageSize * (this.currentPage + 1) - 1;
        if (masterPageEndIndex > masterLastRowIndex) {
          masterPageEndIndex = masterLastRowIndex;
        }
        this.topDisplayedRowIndex = this.rowModel.getTopLevelRowDisplayedIndex(masterPageStartIndex);
        if (masterPageEndIndex === masterLastRowIndex) {
          this.bottomDisplayedRowIndex = this.rowModel.getRowCount() - 1;
        } else {
          var firstIndexNotToShow = this.rowModel.getTopLevelRowDisplayedIndex(masterPageEndIndex + 1);
          this.bottomDisplayedRowIndex = firstIndexNotToShow - 1;
        }
      };
      PaginationProxy2.prototype.getMasterRowCount = function() {
        return this.masterRowCount;
      };
      PaginationProxy2.prototype.calculatePagesAllRows = function() {
        this.masterRowCount = this.rowModel.getRowCount();
        if (this.masterRowCount === 0) {
          this.setZeroRows();
          return;
        }
        var maxRowIndex = this.masterRowCount - 1;
        this.totalPages = Math.floor(maxRowIndex / this.pageSize) + 1;
        if (this.currentPage >= this.totalPages) {
          this.currentPage = this.totalPages - 1;
        }
        if (!isNumeric(this.currentPage) || this.currentPage < 0) {
          this.currentPage = 0;
        }
        this.topDisplayedRowIndex = this.pageSize * this.currentPage;
        this.bottomDisplayedRowIndex = this.pageSize * (this.currentPage + 1) - 1;
        if (this.bottomDisplayedRowIndex > maxRowIndex) {
          this.bottomDisplayedRowIndex = maxRowIndex;
        }
      };
      PaginationProxy2.prototype.calculatedPagesNotActive = function() {
        this.pageSize = this.rowModel.getRowCount();
        this.totalPages = 1;
        this.currentPage = 0;
        this.topDisplayedRowIndex = 0;
        this.bottomDisplayedRowIndex = this.rowModel.getRowCount() - 1;
      };
      __decorate$$([
        Autowired("rowModel")
      ], PaginationProxy2.prototype, "rowModel", void 0);
      __decorate$$([
        PostConstruct
      ], PaginationProxy2.prototype, "postConstruct", null);
      PaginationProxy2 = __decorate$$([
        Bean("paginationProxy")
      ], PaginationProxy2);
      return PaginationProxy2;
    }(BeanStub);
    __extends$14 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$_ = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    StylingService = function(_super) {
      __extends$14(StylingService2, _super);
      function StylingService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      StylingService2.prototype.processAllCellClasses = function(colDef, params, onApplicableClass, onNotApplicableClass) {
        this.processClassRules(colDef.cellClassRules, params, onApplicableClass, onNotApplicableClass);
        this.processStaticCellClasses(colDef, params, onApplicableClass);
      };
      StylingService2.prototype.processClassRules = function(classRules, params, onApplicableClass, onNotApplicableClass) {
        if (classRules == null) {
          return;
        }
        var classNames = Object.keys(classRules);
        var classesToApply = {};
        var classesToRemove = {};
        var _loop_1 = function(i2) {
          var className = classNames[i2];
          var rule = classRules[className];
          var resultOfRule;
          if (typeof rule === "string") {
            resultOfRule = this_1.expressionService.evaluate(rule, params);
          } else if (typeof rule === "function") {
            resultOfRule = rule(params);
          }
          className.split(" ").forEach(function(singleClass) {
            if (singleClass == null || singleClass.trim() == "") {
              return;
            }
            resultOfRule ? classesToApply[singleClass] = true : classesToRemove[singleClass] = true;
          });
        };
        var this_1 = this;
        for (var i = 0; i < classNames.length; i++) {
          _loop_1(i);
        }
        if (onNotApplicableClass) {
          Object.keys(classesToRemove).forEach(onNotApplicableClass);
        }
        Object.keys(classesToApply).forEach(onApplicableClass);
      };
      StylingService2.prototype.getStaticCellClasses = function(colDef, params) {
        var cellClass = colDef.cellClass;
        if (!cellClass) {
          return [];
        }
        var classOrClasses;
        if (typeof cellClass === "function") {
          var cellClassFunc = cellClass;
          classOrClasses = cellClassFunc(params);
        } else {
          classOrClasses = cellClass;
        }
        if (typeof classOrClasses === "string") {
          classOrClasses = [classOrClasses];
        }
        return classOrClasses || [];
      };
      StylingService2.prototype.processStaticCellClasses = function(colDef, params, onApplicableClass) {
        var classOrClasses = this.getStaticCellClasses(colDef, params);
        classOrClasses.forEach(function(cssClassItem) {
          onApplicableClass(cssClassItem);
        });
      };
      __decorate$_([
        Autowired("expressionService")
      ], StylingService2.prototype, "expressionService", void 0);
      StylingService2 = __decorate$_([
        Bean("stylingService")
      ], StylingService2);
      return StylingService2;
    }(BeanStub);
    __extends$13 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    AgRadioButton = function(_super) {
      __extends$13(AgRadioButton2, _super);
      function AgRadioButton2(config) {
        return _super.call(this, config, "ag-radio-button", "radio") || this;
      }
      AgRadioButton2.prototype.isSelected = function() {
        return this.eInput.checked;
      };
      AgRadioButton2.prototype.toggle = function() {
        if (this.eInput.disabled) {
          return;
        }
        if (!this.isSelected()) {
          this.setValue(true);
        }
      };
      AgRadioButton2.prototype.addInputListeners = function() {
        _super.prototype.addInputListeners.call(this);
        this.addManagedListener(this.eventService, Events.EVENT_CHECKBOX_CHANGED, this.onChange.bind(this));
      };
      AgRadioButton2.prototype.onChange = function(event) {
        if (event.selected && event.name && this.eInput.name && this.eInput.name === event.name && event.id && this.eInput.id !== event.id) {
          this.setValue(false, true);
        }
      };
      return AgRadioButton2;
    }(AgCheckbox);
    __extends$12 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    AgToggleButton = function(_super) {
      __extends$12(AgToggleButton2, _super);
      function AgToggleButton2(config) {
        return _super.call(this, config, "ag-toggle-button") || this;
      }
      AgToggleButton2.prototype.setValue = function(value, silent) {
        _super.prototype.setValue.call(this, value, silent);
        this.addOrRemoveCssClass("ag-selected", this.getValue());
        return this;
      };
      return AgToggleButton2;
    }(AgCheckbox);
    __extends$11 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    AgInputTextField = function(_super) {
      __extends$11(AgInputTextField2, _super);
      function AgInputTextField2(config, className, inputType) {
        if (className === void 0) {
          className = "ag-text-field";
        }
        if (inputType === void 0) {
          inputType = "text";
        }
        return _super.call(this, config, className, inputType) || this;
      }
      AgInputTextField2.prototype.postConstruct = function() {
        _super.prototype.postConstruct.call(this);
        if (this.config.allowedCharPattern) {
          this.preventDisallowedCharacters();
        }
      };
      AgInputTextField2.prototype.setValue = function(value, silent) {
        var ret = _super.prototype.setValue.call(this, value, silent);
        if (this.eInput.value !== value) {
          this.eInput.value = exists(value) ? value : "";
        }
        return ret;
      };
      AgInputTextField2.prototype.preventDisallowedCharacters = function() {
        var pattern = new RegExp("[" + this.config.allowedCharPattern + "]");
        var preventDisallowedCharacters = function(event) {
          if (event.key && !pattern.test(event.key)) {
            event.preventDefault();
          }
        };
        this.addManagedListener(this.eInput, "keypress", preventDisallowedCharacters);
        this.addManagedListener(this.eInput, "paste", function(e) {
          var _a;
          var text = (_a = e.clipboardData) === null || _a === void 0 ? void 0 : _a.getData("text");
          if (text && text.split("").some(function(c) {
            return !pattern.test(c);
          })) {
            e.preventDefault();
          }
        });
      };
      return AgInputTextField2;
    }(AgAbstractInputField);
    __extends$10 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    AgInputTextArea = function(_super) {
      __extends$10(AgInputTextArea2, _super);
      function AgInputTextArea2(config) {
        return _super.call(this, config, "ag-text-area", null, "textarea") || this;
      }
      AgInputTextArea2.prototype.setValue = function(value, silent) {
        var ret = _super.prototype.setValue.call(this, value, silent);
        this.eInput.value = value;
        return ret;
      };
      AgInputTextArea2.prototype.setCols = function(cols) {
        this.eInput.cols = cols;
        return this;
      };
      AgInputTextArea2.prototype.setRows = function(rows) {
        this.eInput.rows = rows;
        return this;
      };
      return AgInputTextArea2;
    }(AgAbstractInputField);
    __extends$$ = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    AgInputNumberField = function(_super) {
      __extends$$(AgInputNumberField2, _super);
      function AgInputNumberField2(config) {
        return _super.call(this, config, "ag-number-field", "number") || this;
      }
      AgInputNumberField2.prototype.postConstruct = function() {
        var _this = this;
        _super.prototype.postConstruct.call(this);
        this.addManagedListener(this.eInput, "blur", function() {
          var floatedValue = parseFloat(_this.eInput.value);
          var value = isNaN(floatedValue) ? "" : _this.normalizeValue(floatedValue.toString());
          if (_this.value !== value) {
            _this.setValue(value);
          }
        });
        this.addManagedListener(this.eInput, "wheel", this.onWheel.bind(this));
        this.eInput.step = "any";
      };
      AgInputNumberField2.prototype.onWheel = function(e) {
        if (document.activeElement === this.eInput) {
          e.preventDefault();
        }
      };
      AgInputNumberField2.prototype.normalizeValue = function(value) {
        if (value === "") {
          return "";
        }
        if (this.precision) {
          value = this.adjustPrecision(value);
        }
        var val = parseFloat(value);
        if (this.min != null && val < this.min) {
          value = this.min.toString();
        } else if (this.max != null && val > this.max) {
          value = this.max.toString();
        }
        return value;
      };
      AgInputNumberField2.prototype.adjustPrecision = function(value) {
        if (this.precision) {
          var floatString = parseFloat(value).toFixed(this.precision);
          value = parseFloat(floatString).toString();
        }
        return value;
      };
      AgInputNumberField2.prototype.setMin = function(min) {
        if (this.min === min) {
          return this;
        }
        this.min = min;
        addOrRemoveAttribute(this.eInput, "min", min);
        return this;
      };
      AgInputNumberField2.prototype.setMax = function(max) {
        if (this.max === max) {
          return this;
        }
        this.max = max;
        addOrRemoveAttribute(this.eInput, "max", max);
        return this;
      };
      AgInputNumberField2.prototype.setPrecision = function(precision) {
        this.precision = precision;
        return this;
      };
      AgInputNumberField2.prototype.setStep = function(step) {
        if (this.step === step) {
          return this;
        }
        this.step = step;
        addOrRemoveAttribute(this.eInput, "step", step);
        return this;
      };
      AgInputNumberField2.prototype.setValue = function(value, silent) {
        value = this.adjustPrecision(value);
        var normalizedValue = this.normalizeValue(value);
        if (value != normalizedValue) {
          return this;
        }
        return _super.prototype.setValue.call(this, value, silent);
      };
      return AgInputNumberField2;
    }(AgInputTextField);
    __extends$_ = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    AgInputRange = function(_super) {
      __extends$_(AgInputRange2, _super);
      function AgInputRange2(config) {
        return _super.call(this, config, "ag-range-field", "range") || this;
      }
      AgInputRange2.prototype.postConstruct = function() {
        _super.prototype.postConstruct.call(this);
        var _a = this.config, min = _a.min, max = _a.max, step = _a.step;
        if (min != null) {
          this.setMinValue(min);
        }
        if (max != null) {
          this.setMaxValue(max);
        }
        this.setStep(step || 1);
      };
      AgInputRange2.prototype.addInputListeners = function() {
        var _this = this;
        this.addManagedListener(this.eInput, "input", function(e) {
          var value = e.target.value;
          _this.setValue(value);
        });
      };
      AgInputRange2.prototype.setMinValue = function(value) {
        this.min = value;
        this.eInput.setAttribute("min", value.toString());
        return this;
      };
      AgInputRange2.prototype.setMaxValue = function(value) {
        this.max = value;
        this.eInput.setAttribute("max", value.toString());
        return this;
      };
      AgInputRange2.prototype.setStep = function(value) {
        this.eInput.setAttribute("step", value.toString());
        return this;
      };
      AgInputRange2.prototype.setValue = function(value, silent) {
        if (this.min != null) {
          value = Math.max(parseFloat(value), this.min).toString();
        }
        if (this.max != null) {
          value = Math.min(parseFloat(value), this.max).toString();
        }
        var ret = _super.prototype.setValue.call(this, value, silent);
        this.eInput.value = value;
        return ret;
      };
      return AgInputRange2;
    }(AgAbstractInputField);
    __extends$Z = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$Z = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    AgSlider = function(_super) {
      __extends$Z(AgSlider2, _super);
      function AgSlider2(config) {
        var _this = _super.call(this, config, AgSlider2.TEMPLATE) || this;
        _this.labelAlignment = "top";
        return _this;
      }
      AgSlider2.prototype.init = function() {
        this.eSlider.addCssClass("ag-slider-field");
      };
      AgSlider2.prototype.onValueChange = function(callbackFn) {
        var _this = this;
        var eventChanged = AgAbstractField.EVENT_CHANGED;
        this.addManagedListener(this.eText, eventChanged, function() {
          var textValue = parseFloat(_this.eText.getValue());
          _this.eSlider.setValue(textValue.toString(), true);
          callbackFn(textValue || 0);
        });
        this.addManagedListener(this.eSlider, eventChanged, function() {
          var sliderValue = _this.eSlider.getValue();
          _this.eText.setValue(sliderValue, true);
          callbackFn(parseFloat(sliderValue));
        });
        return this;
      };
      AgSlider2.prototype.setSliderWidth = function(width) {
        this.eSlider.setWidth(width);
        return this;
      };
      AgSlider2.prototype.setTextFieldWidth = function(width) {
        this.eText.setWidth(width);
        return this;
      };
      AgSlider2.prototype.setMinValue = function(minValue) {
        this.eSlider.setMinValue(minValue);
        this.eText.setMin(minValue);
        return this;
      };
      AgSlider2.prototype.setMaxValue = function(maxValue) {
        this.eSlider.setMaxValue(maxValue);
        this.eText.setMax(maxValue);
        return this;
      };
      AgSlider2.prototype.getValue = function() {
        return this.eText.getValue();
      };
      AgSlider2.prototype.setValue = function(value) {
        if (this.getValue() === value) {
          return this;
        }
        this.eText.setValue(value, true);
        this.eSlider.setValue(value, true);
        this.dispatchEvent({ type: AgAbstractField.EVENT_CHANGED });
        return this;
      };
      AgSlider2.prototype.setStep = function(step) {
        this.eSlider.setStep(step);
        this.eText.setStep(step);
        return this;
      };
      AgSlider2.TEMPLATE = '<div class="ag-slider">\n            <label ref="eLabel"></label>\n            <div class="ag-wrapper ag-slider-wrapper">\n                <ag-input-range ref="eSlider"></ag-input-range>\n                <ag-input-number-field ref="eText"></ag-input-number-field>\n            </div>\n        </div>';
      __decorate$Z([
        RefSelector("eLabel")
      ], AgSlider2.prototype, "eLabel", void 0);
      __decorate$Z([
        RefSelector("eSlider")
      ], AgSlider2.prototype, "eSlider", void 0);
      __decorate$Z([
        RefSelector("eText")
      ], AgSlider2.prototype, "eText", void 0);
      __decorate$Z([
        PostConstruct
      ], AgSlider2.prototype, "init", null);
      return AgSlider2;
    }(AgAbstractLabel);
    __extends$Y = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$Y = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    AgAngleSelect = function(_super) {
      __extends$Y(AgAngleSelect2, _super);
      function AgAngleSelect2(config) {
        var _this = _super.call(this, config, AgAngleSelect2.TEMPLATE) || this;
        _this.radius = 0;
        _this.offsetX = 0;
        _this.offsetY = 0;
        return _this;
      }
      AgAngleSelect2.prototype.postConstruct = function() {
        var _this = this;
        _super.prototype.postConstruct.call(this);
        this.dragListener = {
          eElement: this.eParentCircle,
          dragStartPixels: 0,
          onDragStart: function(e) {
            _this.parentCircleRect = _this.eParentCircle.getBoundingClientRect();
          },
          onDragging: function(e) {
            return _this.calculateAngleDrag(e);
          },
          onDragStop: function() {
          }
        };
        this.dragService.addDragSource(this.dragListener);
        this.eAngleValue.setLabel("").setLabelWidth(5).setInputWidth(45).setMin(0).setMax(360).setValue("" + this.degrees).onValueChange(function(value) {
          if (value == null || value === "") {
            value = "0";
          }
          value = _this.eAngleValue.normalizeValue(value);
          var floatValue = parseFloat(value);
          if (floatValue > 180) {
            floatValue = floatValue - 360;
          }
          _this.setValue(floatValue);
        });
        this.updateNumberInput();
        if (exists(this.getValue())) {
          this.eAngleValue.setValue(this.normalizeNegativeValue(this.getValue()).toString());
        }
        this.addManagedListener(this, AgAbstractField.EVENT_CHANGED, function() {
          var eDocument = _this.gridOptionsWrapper.getDocument();
          if (_this.eAngleValue.getInputElement().contains(eDocument.activeElement)) {
            return;
          }
          _this.updateNumberInput();
        });
      };
      AgAngleSelect2.prototype.updateNumberInput = function() {
        var normalizedValue = this.normalizeNegativeValue(this.getValue());
        this.eAngleValue.setValue(normalizedValue.toString());
      };
      AgAngleSelect2.prototype.positionChildCircle = function(radians) {
        var rect = this.parentCircleRect || { width: 24, height: 24 };
        var eChildCircle = this.eChildCircle;
        var centerX = rect.width / 2;
        var centerY = rect.height / 2;
        eChildCircle.style.left = centerX + Math.cos(radians) * 8 + "px";
        eChildCircle.style.top = centerY + Math.sin(radians) * 8 + "px";
      };
      AgAngleSelect2.prototype.calculatePolar = function() {
        var x = this.offsetX;
        var y = this.offsetY;
        var radians = Math.atan2(y, x);
        this.degrees = this.toDegrees(radians);
        this.radius = Math.sqrt(x * x + y * y);
        this.positionChildCircle(radians);
      };
      AgAngleSelect2.prototype.calculateCartesian = function() {
        var radians = this.toRadians(this.getValue());
        var radius = this.getRadius();
        this.setOffsetX(Math.cos(radians) * radius).setOffsetY(Math.sin(radians) * radius);
      };
      AgAngleSelect2.prototype.setOffsetX = function(offset) {
        if (this.offsetX !== offset) {
          this.offsetX = offset;
          this.calculatePolar();
        }
        return this;
      };
      AgAngleSelect2.prototype.setOffsetY = function(offset) {
        if (this.offsetY !== offset) {
          this.offsetY = offset;
          this.calculatePolar();
        }
        return this;
      };
      AgAngleSelect2.prototype.calculateAngleDrag = function(e) {
        var rect = this.parentCircleRect;
        var centerX = rect.width / 2;
        var centerY = rect.height / 2;
        var x = e.clientX - rect.left;
        var y = e.clientY - rect.top;
        var dx = x - centerX;
        var dy = y - centerY;
        var radians = Math.atan2(dy, dx);
        this.setValue(radians, true);
      };
      AgAngleSelect2.prototype.toDegrees = function(radians) {
        return radians / Math.PI * 180;
      };
      AgAngleSelect2.prototype.toRadians = function(degrees) {
        return degrees / 180 * Math.PI;
      };
      AgAngleSelect2.prototype.normalizeNegativeValue = function(degrees) {
        return degrees < 0 ? 360 + degrees : degrees;
      };
      AgAngleSelect2.prototype.normalizeAngle180 = function(radians) {
        radians %= Math.PI * 2;
        if (radians < -Math.PI) {
          radians += Math.PI * 2;
        } else if (radians >= Math.PI) {
          radians -= Math.PI * 2;
        }
        return radians;
      };
      AgAngleSelect2.prototype.getRadius = function() {
        return this.radius;
      };
      AgAngleSelect2.prototype.setRadius = function(r) {
        if (this.radius === r) {
          return this;
        }
        this.radius = r;
        this.calculateCartesian();
        return this;
      };
      AgAngleSelect2.prototype.onValueChange = function(callbackFn) {
        var _this = this;
        this.addManagedListener(this, AgAbstractField.EVENT_CHANGED, function() {
          callbackFn(_this.degrees);
        });
        return this;
      };
      AgAngleSelect2.prototype.getValue = function(radians) {
        return radians ? this.toRadians(this.degrees) : this.degrees;
      };
      AgAngleSelect2.prototype.setValue = function(degrees, radians) {
        var radiansValue;
        if (!radians) {
          radiansValue = this.normalizeAngle180(this.toRadians(degrees));
        } else {
          radiansValue = degrees;
        }
        degrees = this.toDegrees(radiansValue);
        if (this.degrees !== degrees) {
          this.degrees = Math.floor(degrees);
          this.calculateCartesian();
          this.positionChildCircle(radiansValue);
          this.dispatchEvent({ type: AgAbstractField.EVENT_CHANGED });
        }
        return this;
      };
      AgAngleSelect2.prototype.setWidth = function(width) {
        setFixedWidth(this.getGui(), width);
        return this;
      };
      AgAngleSelect2.prototype.setDisabled = function(disabled) {
        _super.prototype.setDisabled.call(this, disabled);
        this.eAngleValue.setDisabled(disabled);
        return this;
      };
      AgAngleSelect2.prototype.destroy = function() {
        this.dragService.removeDragSource(this.dragListener);
        _super.prototype.destroy.call(this);
      };
      AgAngleSelect2.TEMPLATE = '<div class="ag-angle-select">\n            <div ref="eLabel"></div>\n            <div class="ag-wrapper ag-angle-select-wrapper">\n                <div ref="eAngleSelectField" class="ag-angle-select-field">\n                    <div ref="eParentCircle" class="ag-angle-select-parent-circle">\n                        <div ref="eChildCircle" class="ag-angle-select-child-circle"></div>\n                    </div>\n                </div>\n                <ag-input-number-field ref="eAngleValue"></ag-input-number-field>\n            </div>\n        </div>';
      __decorate$Y([
        RefSelector("eLabel")
      ], AgAngleSelect2.prototype, "eLabel", void 0);
      __decorate$Y([
        RefSelector("eParentCircle")
      ], AgAngleSelect2.prototype, "eParentCircle", void 0);
      __decorate$Y([
        RefSelector("eChildCircle")
      ], AgAngleSelect2.prototype, "eChildCircle", void 0);
      __decorate$Y([
        RefSelector("eAngleValue")
      ], AgAngleSelect2.prototype, "eAngleValue", void 0);
      __decorate$Y([
        Autowired("dragService")
      ], AgAngleSelect2.prototype, "dragService", void 0);
      return AgAngleSelect2;
    }(AgAbstractLabel);
    __extends$X = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$X = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __read$9 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    AgColorPanel = function(_super) {
      __extends$X(AgColorPanel2, _super);
      function AgColorPanel2(config) {
        var _this = _super.call(this, AgColorPanel2.TEMPLATE) || this;
        _this.H = 1;
        _this.S = 1;
        _this.B = 1;
        _this.A = 1;
        _this.isSpectrumDragging = false;
        _this.isSpectrumHueDragging = false;
        _this.isSpectrumAlphaDragging = false;
        _this.colorChanged = false;
        _this.picker = config.picker;
        return _this;
      }
      AgColorPanel2.prototype.postConstruct = function() {
        var eGui = this.getGui();
        this.initRecentColors();
        this.addManagedListener(this.spectrumVal, "mousedown", this.onSpectrumDraggerDown.bind(this));
        this.addManagedListener(eGui, "mousemove", this.onSpectrumDraggerMove.bind(this));
        this.addManagedListener(this.spectrumHue, "mousedown", this.onSpectrumHueDown.bind(this));
        this.addManagedListener(eGui, "mousemove", this.onSpectrumHueMove.bind(this));
        this.addManagedListener(this.spectrumAlpha, "mousedown", this.onSpectrumAlphaDown.bind(this));
        this.addManagedListener(eGui, "mousemove", this.onSpectrumAlphaMove.bind(this));
        this.addManagedListener(document, "mouseup", this.onMouseUp.bind(this));
        this.addManagedListener(this.recentColors, "click", this.onRecentColorClick.bind(this));
      };
      AgColorPanel2.prototype.refreshSpectrumRect = function() {
        return this.spectrumValRect = this.spectrumVal.getBoundingClientRect();
      };
      AgColorPanel2.prototype.refreshHueRect = function() {
        return this.spectrumHueRect = this.spectrumHue.getBoundingClientRect();
      };
      AgColorPanel2.prototype.refreshAlphaRect = function() {
        return this.spectrumAlphaRect = this.spectrumAlpha.getBoundingClientRect();
      };
      AgColorPanel2.prototype.onSpectrumDraggerDown = function(e) {
        this.refreshSpectrumRect();
        this.isSpectrumDragging = true;
        this.moveDragger(e);
      };
      AgColorPanel2.prototype.onSpectrumDraggerMove = function(e) {
        if (this.isSpectrumDragging) {
          this.moveDragger(e);
        }
      };
      AgColorPanel2.prototype.onSpectrumHueDown = function(e) {
        this.refreshHueRect();
        this.isSpectrumHueDragging = true;
        this.moveHueSlider(e);
      };
      AgColorPanel2.prototype.onSpectrumHueMove = function(e) {
        if (this.isSpectrumHueDragging) {
          this.moveHueSlider(e);
        }
      };
      AgColorPanel2.prototype.onSpectrumAlphaDown = function(e) {
        this.refreshAlphaRect();
        this.isSpectrumAlphaDragging = true;
        this.moveAlphaSlider(e);
      };
      AgColorPanel2.prototype.onSpectrumAlphaMove = function(e) {
        if (this.isSpectrumAlphaDragging) {
          this.moveAlphaSlider(e);
        }
      };
      AgColorPanel2.prototype.onMouseUp = function() {
        this.isSpectrumDragging = false;
        this.isSpectrumHueDragging = false;
        this.isSpectrumAlphaDragging = false;
      };
      AgColorPanel2.prototype.moveDragger = function(e) {
        var valRect = this.spectrumValRect;
        if (valRect) {
          var x = e.clientX - valRect.left;
          var y = e.clientY - valRect.top;
          x = Math.max(x, 0);
          x = Math.min(x, valRect.width);
          y = Math.max(y, 0);
          y = Math.min(y, valRect.height);
          this.setSpectrumValue(x / valRect.width, 1 - y / valRect.height);
        }
      };
      AgColorPanel2.prototype.moveHueSlider = function(e) {
        var hueRect = this.spectrumHueRect;
        if (hueRect) {
          var slider = this.spectrumHueSlider;
          var sliderRect = slider.getBoundingClientRect();
          var x = e.clientX - hueRect.left;
          x = Math.max(x, 0);
          x = Math.min(x, hueRect.width);
          this.H = 1 - x / hueRect.width;
          slider.style.left = x + sliderRect.width / 2 + "px";
          this.update();
        }
      };
      AgColorPanel2.prototype.moveAlphaSlider = function(e) {
        var alphaRect = this.spectrumAlphaRect;
        if (alphaRect) {
          var slider = this.spectrumAlphaSlider;
          var sliderRect = slider.getBoundingClientRect();
          var x = e.clientX - alphaRect.left;
          x = Math.max(x, 0);
          x = Math.min(x, alphaRect.width);
          this.A = x / alphaRect.width;
          slider.style.left = x + sliderRect.width / 2 + "px";
          this.update();
        }
      };
      AgColorPanel2.prototype.update = function() {
        var color = Color.fromHSB(this.H * 360, this.S, this.B, this.A);
        var spectrumColor = Color.fromHSB(this.H * 360, 1, 1);
        var rgbaColor = color.toRgbaString();
        var colorPicker = this.picker;
        var existingColor = Color.fromString(colorPicker.getValue());
        if (existingColor.toRgbaString() !== rgbaColor) {
          this.colorChanged = true;
        }
        colorPicker.setValue(rgbaColor);
        this.spectrumColor.style.backgroundColor = spectrumColor.toRgbaString();
        this.spectrumDragger.style.backgroundColor = rgbaColor;
      };
      AgColorPanel2.prototype.setSpectrumValue = function(saturation, brightness) {
        var valRect = this.spectrumValRect || this.refreshSpectrumRect();
        if (valRect) {
          var dragger = this.spectrumDragger;
          var draggerRect = dragger.getBoundingClientRect();
          saturation = Math.max(0, saturation);
          saturation = Math.min(1, saturation);
          brightness = Math.max(0, brightness);
          brightness = Math.min(1, brightness);
          this.S = saturation;
          this.B = brightness;
          dragger.style.left = saturation * valRect.width - draggerRect.width / 2 + "px";
          dragger.style.top = (1 - brightness) * valRect.height - draggerRect.height / 2 + "px";
          this.update();
        }
      };
      AgColorPanel2.prototype.initRecentColors = function() {
        var recentColors = AgColorPanel2.recentColors;
        var innerHtml = recentColors.map(function(color, index) {
          return '<div class="ag-recent-color" id=' + index + ' style="background-color: ' + color + '; width: 15px; height: 15px;" recent-color="' + color + '"></div>';
        });
        this.recentColors.innerHTML = innerHtml.join("");
      };
      AgColorPanel2.prototype.setValue = function(val) {
        var color = Color.fromString(val);
        var _a = __read$9(color.toHSB(), 3), h = _a[0], s = _a[1], b = _a[2];
        this.H = (isNaN(h) ? 0 : h) / 360;
        this.A = color.a;
        var spectrumHueRect = this.spectrumHueRect || this.refreshHueRect();
        var spectrumAlphaRect = this.spectrumAlphaRect || this.refreshAlphaRect();
        this.spectrumHueSlider.style.left = (this.H - 1) * -spectrumHueRect.width + "px";
        this.spectrumAlphaSlider.style.left = this.A * spectrumAlphaRect.width + "px";
        this.setSpectrumValue(s, b);
      };
      AgColorPanel2.prototype.onRecentColorClick = function(e) {
        var target = e.target;
        if (!exists(target.id)) {
          return;
        }
        var id = parseInt(target.id, 10);
        this.setValue(AgColorPanel2.recentColors[id]);
        this.destroy();
      };
      AgColorPanel2.prototype.addRecentColor = function() {
        var color = Color.fromHSB(this.H * 360, this.S, this.B, this.A);
        var rgbaColor = color.toRgbaString();
        var recentColors = AgColorPanel2.recentColors;
        if (!this.colorChanged || recentColors[0] === rgbaColor) {
          return;
        }
        recentColors = recentColors.filter(function(currentColor) {
          return currentColor != rgbaColor;
        });
        recentColors = [rgbaColor].concat(recentColors);
        if (recentColors.length > AgColorPanel2.maxRecentColors) {
          recentColors = recentColors.slice(0, AgColorPanel2.maxRecentColors);
        }
        AgColorPanel2.recentColors = recentColors;
      };
      AgColorPanel2.prototype.destroy = function() {
        this.addRecentColor();
        _super.prototype.destroy.call(this);
      };
      AgColorPanel2.maxRecentColors = 8;
      AgColorPanel2.recentColors = [];
      AgColorPanel2.TEMPLATE = '<div class="ag-color-panel">\n            <div ref="spectrumColor" class="ag-spectrum-color">\n                <div class="ag-spectrum-sat ag-spectrum-fill">\n                    <div ref="spectrumVal" class="ag-spectrum-val ag-spectrum-fill">\n                        <div ref="spectrumDragger" class="ag-spectrum-dragger"></div>\n                    </div>\n                </div>\n            </div>\n            <div class="ag-spectrum-tools">\n                <div ref="spectrumHue" class="ag-spectrum-hue ag-spectrum-tool">\n                    <div class="ag-spectrum-hue-background"></div>\n                    <div ref="spectrumHueSlider" class="ag-spectrum-slider"></div>\n                </div>\n                <div ref="spectrumAlpha" class="ag-spectrum-alpha ag-spectrum-tool">\n                    <div class="ag-spectrum-alpha-background"></div>\n                    <div ref="spectrumAlphaSlider" class="ag-spectrum-slider"></div>\n                </div>\n                <div ref="recentColors" class="ag-recent-colors"></div>\n            </div>\n        </div>';
      __decorate$X([
        RefSelector("spectrumColor")
      ], AgColorPanel2.prototype, "spectrumColor", void 0);
      __decorate$X([
        RefSelector("spectrumVal")
      ], AgColorPanel2.prototype, "spectrumVal", void 0);
      __decorate$X([
        RefSelector("spectrumDragger")
      ], AgColorPanel2.prototype, "spectrumDragger", void 0);
      __decorate$X([
        RefSelector("spectrumHue")
      ], AgColorPanel2.prototype, "spectrumHue", void 0);
      __decorate$X([
        RefSelector("spectrumHueSlider")
      ], AgColorPanel2.prototype, "spectrumHueSlider", void 0);
      __decorate$X([
        RefSelector("spectrumAlpha")
      ], AgColorPanel2.prototype, "spectrumAlpha", void 0);
      __decorate$X([
        RefSelector("spectrumAlphaSlider")
      ], AgColorPanel2.prototype, "spectrumAlphaSlider", void 0);
      __decorate$X([
        RefSelector("recentColors")
      ], AgColorPanel2.prototype, "recentColors", void 0);
      __decorate$X([
        PostConstruct
      ], AgColorPanel2.prototype, "postConstruct", null);
      return AgColorPanel2;
    }(Component);
    __extends$W = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$W = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    AgPanel = function(_super) {
      __extends$W(AgPanel2, _super);
      function AgPanel2(config) {
        var _this = _super.call(this, AgPanel2.getTemplate(config)) || this;
        _this.closable = true;
        _this.config = config;
        return _this;
      }
      AgPanel2.getTemplate = function(config) {
        var cssIdentifier = config && config.cssIdentifier || "default";
        return '<div class="ag-panel ag-' + cssIdentifier + '-panel" tabindex="-1">\n            <div ref="eTitleBar" class="ag-panel-title-bar ag-' + cssIdentifier + '-panel-title-bar ag-unselectable">\n                <span ref="eTitle" class="ag-panel-title-bar-title ag-' + cssIdentifier + '-panel-title-bar-title"></span>\n                <div ref="eTitleBarButtons" class="ag-panel-title-bar-buttons ag-' + cssIdentifier + '-panel-title-bar-buttons"></div>\n            </div>\n            <div ref="eContentWrapper" class="ag-panel-content-wrapper ag-' + cssIdentifier + '-panel-content-wrapper"></div>\n        </div>';
      };
      AgPanel2.prototype.postConstruct = function() {
        var _this = this;
        var _a = this.config, component = _a.component, closable = _a.closable, hideTitleBar = _a.hideTitleBar, title = _a.title, _b = _a.minWidth, minWidth = _b === void 0 ? 250 : _b, width = _a.width, _c = _a.minHeight, minHeight = _c === void 0 ? 250 : _c, height = _a.height, centered = _a.centered, popup = _a.popup, x = _a.x, y = _a.y;
        this.positionableFeature = new PositionableFeature(this.getGui(), {
          minWidth,
          width,
          minHeight,
          height,
          centered,
          x,
          y,
          popup,
          calculateTopBuffer: function() {
            return _this.positionableFeature.getHeight() - _this.getBodyHeight();
          }
        });
        this.createManagedBean(this.positionableFeature);
        var eGui = this.getGui();
        if (component) {
          this.setBodyComponent(component);
        }
        if (!hideTitleBar) {
          if (title) {
            this.setTitle(title);
          }
          this.setClosable(closable != null ? closable : this.closable);
        } else {
          this.eTitleBar.classList.add("ag-hidden");
        }
        this.addManagedListener(this.eTitleBar, "mousedown", function(e) {
          var eDocument = _this.gridOptionsWrapper.getDocument();
          if (eGui.contains(e.relatedTarget) || eGui.contains(eDocument.activeElement) || _this.eTitleBarButtons.contains(e.target)) {
            e.preventDefault();
            return;
          }
          var focusEl = _this.eContentWrapper.querySelector("button, [href], input, select, textarea, [tabindex]");
          if (focusEl) {
            focusEl.focus();
          }
        });
        if (popup && this.positionableFeature.isPositioned()) {
          return;
        }
        if (this.renderComponent) {
          this.renderComponent();
        }
        this.positionableFeature.initialisePosition();
        this.eContentWrapper.style.height = "0";
      };
      AgPanel2.prototype.renderComponent = function() {
        var _this = this;
        var eGui = this.getGui();
        eGui.focus();
        this.close = function() {
          eGui.parentElement.removeChild(eGui);
          _this.destroy();
        };
      };
      AgPanel2.prototype.getHeight = function() {
        return this.positionableFeature.getHeight();
      };
      AgPanel2.prototype.setHeight = function(height) {
        this.positionableFeature.setHeight(height);
      };
      AgPanel2.prototype.getWidth = function() {
        return this.positionableFeature.getWidth();
      };
      AgPanel2.prototype.setWidth = function(width) {
        this.positionableFeature.setWidth(width);
      };
      AgPanel2.prototype.setClosable = function(closable) {
        if (closable !== this.closable) {
          this.closable = closable;
        }
        if (closable) {
          var closeButtonComp = this.closeButtonComp = new Component(AgPanel2.CLOSE_BTN_TEMPLATE);
          this.getContext().createBean(closeButtonComp);
          var eGui = closeButtonComp.getGui();
          var child = createIconNoSpan("close", this.gridOptionsWrapper);
          child.classList.add("ag-panel-title-bar-button-icon");
          eGui.appendChild(child);
          this.addTitleBarButton(closeButtonComp);
          closeButtonComp.addManagedListener(eGui, "click", this.onBtClose.bind(this));
        } else if (this.closeButtonComp) {
          var eGui = this.closeButtonComp.getGui();
          eGui.parentElement.removeChild(eGui);
          this.closeButtonComp = this.destroyBean(this.closeButtonComp);
        }
      };
      AgPanel2.prototype.setBodyComponent = function(bodyComponent) {
        bodyComponent.setParentComponent(this);
        this.eContentWrapper.appendChild(bodyComponent.getGui());
      };
      AgPanel2.prototype.addTitleBarButton = function(button, position) {
        var eTitleBarButtons = this.eTitleBarButtons;
        var buttons = eTitleBarButtons.children;
        var len = buttons.length;
        if (position == null) {
          position = len;
        }
        position = Math.max(0, Math.min(position, len));
        button.addCssClass("ag-panel-title-bar-button");
        var eGui = button.getGui();
        if (position === 0) {
          eTitleBarButtons.insertAdjacentElement("afterbegin", eGui);
        } else if (position === len) {
          eTitleBarButtons.insertAdjacentElement("beforeend", eGui);
        } else {
          buttons[position - 1].insertAdjacentElement("afterend", eGui);
        }
        button.setParentComponent(this);
      };
      AgPanel2.prototype.getBodyHeight = function() {
        return getInnerHeight(this.eContentWrapper);
      };
      AgPanel2.prototype.getBodyWidth = function() {
        return getInnerWidth(this.eContentWrapper);
      };
      AgPanel2.prototype.setTitle = function(title) {
        this.eTitle.innerText = title;
      };
      AgPanel2.prototype.onBtClose = function() {
        this.close();
      };
      AgPanel2.prototype.destroy = function() {
        if (this.closeButtonComp) {
          this.closeButtonComp = this.destroyBean(this.closeButtonComp);
        }
        var eGui = this.getGui();
        if (eGui && eGui.offsetParent) {
          this.close();
        }
        _super.prototype.destroy.call(this);
      };
      AgPanel2.CLOSE_BTN_TEMPLATE = '<div class="ag-button"></div>';
      __decorate$W([
        RefSelector("eContentWrapper")
      ], AgPanel2.prototype, "eContentWrapper", void 0);
      __decorate$W([
        RefSelector("eTitleBar")
      ], AgPanel2.prototype, "eTitleBar", void 0);
      __decorate$W([
        RefSelector("eTitleBarButtons")
      ], AgPanel2.prototype, "eTitleBarButtons", void 0);
      __decorate$W([
        RefSelector("eTitle")
      ], AgPanel2.prototype, "eTitle", void 0);
      __decorate$W([
        PostConstruct
      ], AgPanel2.prototype, "postConstruct", null);
      return AgPanel2;
    }(Component);
    __extends$V = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign$2 = function() {
      __assign$2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$2.apply(this, arguments);
    };
    __decorate$V = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    AgDialog = function(_super) {
      __extends$V(AgDialog2, _super);
      function AgDialog2(config) {
        var _this = _super.call(this, __assign$2(__assign$2({}, config), { popup: true })) || this;
        _this.isMaximizable = false;
        _this.isMaximized = false;
        _this.maximizeListeners = [];
        _this.resizeListenerDestroy = null;
        _this.lastPosition = {
          x: 0,
          y: 0,
          width: 0,
          height: 0
        };
        return _this;
      }
      AgDialog2.prototype.postConstruct = function() {
        var _this = this;
        var eGui = this.getGui();
        var _a = this.config, movable = _a.movable, resizable = _a.resizable, maximizable = _a.maximizable;
        this.addCssClass("ag-dialog");
        _super.prototype.postConstruct.call(this);
        this.addManagedListener(eGui, "focusin", function(e) {
          if (eGui.contains(e.relatedTarget)) {
            return;
          }
          _this.popupService.bringPopupToFront(eGui);
        });
        if (movable) {
          this.setMovable(movable);
        }
        if (maximizable) {
          this.setMaximizable(maximizable);
        }
        if (resizable) {
          this.setResizable(resizable);
        }
      };
      AgDialog2.prototype.renderComponent = function() {
        var eGui = this.getGui();
        var _a = this.config, alwaysOnTop = _a.alwaysOnTop, modal = _a.modal, title = _a.title;
        var translate = this.gridOptionsWrapper.getLocaleTextFunc();
        var addPopupRes = this.popupService.addPopup({
          modal,
          eChild: eGui,
          closeOnEsc: true,
          closedCallback: this.destroy.bind(this),
          alwaysOnTop,
          ariaLabel: title || translate("ariaLabelDialog", "Dialog")
        });
        if (addPopupRes) {
          this.close = addPopupRes.hideFunc;
        }
      };
      AgDialog2.prototype.toggleMaximize = function() {
        var position = this.positionableFeature.getPosition();
        if (this.isMaximized) {
          var _a = this.lastPosition, x = _a.x, y = _a.y, width = _a.width, height = _a.height;
          this.setWidth(width);
          this.setHeight(height);
          this.positionableFeature.offsetElement(x, y);
        } else {
          this.lastPosition.width = this.getWidth();
          this.lastPosition.height = this.getHeight();
          this.lastPosition.x = position.x;
          this.lastPosition.y = position.y;
          this.positionableFeature.offsetElement(0, 0);
          this.setHeight("100%");
          this.setWidth("100%");
        }
        this.isMaximized = !this.isMaximized;
        this.refreshMaximizeIcon();
      };
      AgDialog2.prototype.refreshMaximizeIcon = function() {
        setDisplayed(this.maximizeIcon, !this.isMaximized);
        setDisplayed(this.minimizeIcon, this.isMaximized);
      };
      AgDialog2.prototype.clearMaximizebleListeners = function() {
        if (this.maximizeListeners.length) {
          this.maximizeListeners.forEach(function(destroyListener) {
            return destroyListener();
          });
          this.maximizeListeners.length = 0;
        }
        if (this.resizeListenerDestroy) {
          this.resizeListenerDestroy();
          this.resizeListenerDestroy = null;
        }
      };
      AgDialog2.prototype.destroy = function() {
        this.maximizeButtonComp = this.destroyBean(this.maximizeButtonComp);
        this.clearMaximizebleListeners();
        _super.prototype.destroy.call(this);
      };
      AgDialog2.prototype.setResizable = function(resizable) {
        this.positionableFeature.setResizable(resizable);
      };
      AgDialog2.prototype.setMovable = function(movable) {
        this.positionableFeature.setMovable(movable, this.eTitleBar);
      };
      AgDialog2.prototype.setMaximizable = function(maximizable) {
        var _this = this;
        if (!maximizable) {
          this.clearMaximizebleListeners();
          if (this.maximizeButtonComp) {
            this.destroyBean(this.maximizeButtonComp);
            this.maximizeButtonComp = this.maximizeIcon = this.minimizeIcon = void 0;
          }
          return;
        }
        var eTitleBar = this.eTitleBar;
        if (!eTitleBar || maximizable === this.isMaximizable) {
          return;
        }
        var maximizeButtonComp = this.maximizeButtonComp = this.createBean(new Component('<div class="ag-dialog-button"></span>'));
        var eGui = maximizeButtonComp.getGui();
        eGui.appendChild(this.maximizeIcon = createIconNoSpan("maximize", this.gridOptionsWrapper));
        this.maximizeIcon.classList.add("ag-panel-title-bar-button-icon");
        eGui.appendChild(this.minimizeIcon = createIconNoSpan("minimize", this.gridOptionsWrapper));
        this.minimizeIcon.classList.add("ag-panel-title-bar-button-icon", "ag-hidden");
        maximizeButtonComp.addManagedListener(eGui, "click", this.toggleMaximize.bind(this));
        this.addTitleBarButton(maximizeButtonComp, 0);
        this.maximizeListeners.push(this.addManagedListener(eTitleBar, "dblclick", this.toggleMaximize.bind(this)));
        this.resizeListenerDestroy = this.addManagedListener(this, "resize", function() {
          _this.isMaximized = false;
          _this.refreshMaximizeIcon();
        });
      };
      __decorate$V([
        Autowired("popupService")
      ], AgDialog2.prototype, "popupService", void 0);
      return AgDialog2;
    }(AgPanel);
    __extends$U = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    AgColorPicker = function(_super) {
      __extends$U(AgColorPicker2, _super);
      function AgColorPicker2(config) {
        var _this = _super.call(this, config, "ag-color-picker", "colorPicker") || this;
        if (config && config.color) {
          _this.value = config.color;
        }
        return _this;
      }
      AgColorPicker2.prototype.postConstruct = function() {
        _super.prototype.postConstruct.call(this);
        if (this.value) {
          this.setValue(this.value);
        }
      };
      AgColorPicker2.prototype.showPicker = function() {
        var _this = this;
        var eGuiRect = this.getGui().getBoundingClientRect();
        var colorDialog = this.createBean(new AgDialog({
          closable: false,
          modal: true,
          hideTitleBar: true,
          minWidth: 190,
          width: 190,
          height: 250,
          x: eGuiRect.right - 190,
          y: eGuiRect.top - 250
        }));
        this.isPickerDisplayed = true;
        colorDialog.addCssClass("ag-color-dialog");
        setAriaExpanded(this.eWrapper, true);
        var colorPanel = this.createBean(new AgColorPanel({ picker: this }));
        colorPanel.addDestroyFunc(function() {
          if (colorDialog.isAlive()) {
            _this.destroyBean(colorDialog);
          }
        });
        colorDialog.setParentComponent(this);
        colorDialog.setBodyComponent(colorPanel);
        colorPanel.setValue(this.getValue());
        colorDialog.addDestroyFunc(function() {
          if (!_this.isDestroyingPicker) {
            _this.isDestroyingPicker = true;
            if (colorPanel.isAlive()) {
              _this.destroyBean(colorPanel);
            }
          } else {
            _this.isDestroyingPicker = false;
          }
          if (_this.isAlive()) {
            setAriaExpanded(_this.eWrapper, false);
            _this.getFocusableElement().focus();
          }
          _this.isPickerDisplayed = false;
        });
        return colorDialog;
      };
      AgColorPicker2.prototype.setValue = function(color) {
        if (this.value === color) {
          return this;
        }
        this.eDisplayField.style.backgroundColor = color;
        return _super.prototype.setValue.call(this, color);
      };
      AgColorPicker2.prototype.getValue = function() {
        return this.value;
      };
      return AgColorPicker2;
    }(AgPickerField);
    __extends$T = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$U = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    AgGroupComponent = function(_super) {
      __extends$T(AgGroupComponent2, _super);
      function AgGroupComponent2(params) {
        if (params === void 0) {
          params = {};
        }
        var _this = _super.call(this, AgGroupComponent2.getTemplate(params)) || this;
        _this.suppressEnabledCheckbox = true;
        _this.suppressOpenCloseIcons = false;
        var title = params.title, enabled = params.enabled, items = params.items, suppressEnabledCheckbox = params.suppressEnabledCheckbox, suppressOpenCloseIcons = params.suppressOpenCloseIcons;
        _this.title = title;
        _this.cssIdentifier = params.cssIdentifier || "default";
        _this.enabled = enabled != null ? enabled : true;
        _this.items = items || [];
        _this.alignItems = params.alignItems || "center";
        if (suppressEnabledCheckbox != null) {
          _this.suppressEnabledCheckbox = suppressEnabledCheckbox;
        }
        if (suppressOpenCloseIcons != null) {
          _this.suppressOpenCloseIcons = suppressOpenCloseIcons;
        }
        return _this;
      }
      AgGroupComponent2.getTemplate = function(params) {
        var cssIdentifier = params.cssIdentifier || "default";
        var direction = params.direction || "vertical";
        return '<div class="ag-group ag-' + cssIdentifier + '-group" role="presentation">\n            <div class="ag-group-title-bar ag-' + cssIdentifier + '-group-title-bar ag-unselectable" ref="eTitleBar" role="button">\n                <span class="ag-group-title-bar-icon ag-' + cssIdentifier + '-group-title-bar-icon" ref="eGroupOpenedIcon" role="presentation"></span>\n                <span class="ag-group-title-bar-icon ag-' + cssIdentifier + '-group-title-bar-icon" ref="eGroupClosedIcon" role="presentation"></span>\n                <span ref="eTitle" class="ag-group-title ag-' + cssIdentifier + '-group-title"></span>\n            </div>\n            <div ref="eToolbar" class="ag-group-toolbar ag-' + cssIdentifier + '-group-toolbar">\n                <ag-checkbox ref="cbGroupEnabled"></ag-checkbox>\n            </div>\n            <div ref="eContainer" class="ag-group-container ag-group-container-' + direction + " ag-" + cssIdentifier + '-group-container"></div>\n        </div>';
      };
      AgGroupComponent2.prototype.postConstruct = function() {
        if (this.items.length) {
          var initialItems = this.items;
          this.items = [];
          this.addItems(initialItems);
        }
        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
        this.cbGroupEnabled.setLabel(localeTextFunc("enabled", "Enabled"));
        if (this.title) {
          this.setTitle(this.title);
        }
        if (this.enabled) {
          this.setEnabled(this.enabled);
        }
        this.setAlignItems(this.alignItems);
        this.hideEnabledCheckbox(this.suppressEnabledCheckbox);
        this.hideOpenCloseIcons(this.suppressOpenCloseIcons);
        this.setupExpandContract();
        this.refreshAriaStatus();
        this.refreshChildDisplay();
      };
      AgGroupComponent2.prototype.setupExpandContract = function() {
        var _this = this;
        this.eGroupClosedIcon.appendChild(createIcon("columnSelectClosed", this.gridOptionsWrapper, null));
        this.eGroupOpenedIcon.appendChild(createIcon("columnSelectOpen", this.gridOptionsWrapper, null));
        this.addManagedListener(this.eTitleBar, "click", function() {
          return _this.toggleGroupExpand();
        });
        this.addManagedListener(this.eTitleBar, "keydown", function(e) {
          switch (e.key) {
            case KeyCode.ENTER:
            case KeyCode.SPACE:
              e.preventDefault();
              _this.toggleGroupExpand();
              break;
            case KeyCode.RIGHT:
            case KeyCode.LEFT:
              e.preventDefault();
              _this.toggleGroupExpand(e.key === KeyCode.RIGHT);
              break;
          }
        });
      };
      AgGroupComponent2.prototype.refreshAriaStatus = function() {
        if (!this.suppressOpenCloseIcons) {
          setAriaExpanded(this.eTitleBar, this.expanded);
        }
      };
      AgGroupComponent2.prototype.refreshChildDisplay = function() {
        var showIcon = !this.suppressOpenCloseIcons;
        setDisplayed(this.eToolbar, this.expanded && !this.suppressEnabledCheckbox);
        setDisplayed(this.eGroupOpenedIcon, showIcon && this.expanded);
        setDisplayed(this.eGroupClosedIcon, showIcon && !this.expanded);
      };
      AgGroupComponent2.prototype.isExpanded = function() {
        return this.expanded;
      };
      AgGroupComponent2.prototype.setAlignItems = function(alignment) {
        if (this.alignItems !== alignment) {
          this.removeCssClass("ag-group-item-alignment-" + this.alignItems);
        }
        this.alignItems = alignment;
        var newCls = "ag-group-item-alignment-" + this.alignItems;
        this.addCssClass(newCls);
        return this;
      };
      AgGroupComponent2.prototype.toggleGroupExpand = function(expanded) {
        if (this.suppressOpenCloseIcons) {
          this.expanded = true;
          this.refreshChildDisplay();
          setDisplayed(this.eContainer, true);
          return this;
        }
        expanded = expanded != null ? expanded : !this.expanded;
        if (this.expanded === expanded) {
          return this;
        }
        this.expanded = expanded;
        this.refreshAriaStatus();
        this.refreshChildDisplay();
        setDisplayed(this.eContainer, expanded);
        this.dispatchEvent({ type: this.expanded ? AgGroupComponent2.EVENT_EXPANDED : AgGroupComponent2.EVENT_COLLAPSED });
        return this;
      };
      AgGroupComponent2.prototype.addItems = function(items) {
        var _this = this;
        items.forEach(function(item) {
          return _this.addItem(item);
        });
      };
      AgGroupComponent2.prototype.addItem = function(item) {
        var container = this.eContainer;
        var el = item instanceof Component ? item.getGui() : item;
        el.classList.add("ag-group-item", "ag-" + this.cssIdentifier + "-group-item");
        container.appendChild(el);
        this.items.push(el);
      };
      AgGroupComponent2.prototype.hideItem = function(hide, index) {
        var itemToHide = this.items[index];
        itemToHide.classList.toggle("ag-hidden", hide);
      };
      AgGroupComponent2.prototype.setTitle = function(title) {
        this.eTitle.innerText = title;
        return this;
      };
      AgGroupComponent2.prototype.addCssClassToTitleBar = function(cssClass) {
        this.eTitleBar.classList.add(cssClass);
      };
      AgGroupComponent2.prototype.setEnabled = function(enabled, skipToggle) {
        this.enabled = enabled;
        this.refreshDisabledStyles();
        this.toggleGroupExpand(enabled);
        if (!skipToggle) {
          this.cbGroupEnabled.setValue(enabled);
        }
        return this;
      };
      AgGroupComponent2.prototype.isEnabled = function() {
        return this.enabled;
      };
      AgGroupComponent2.prototype.onEnableChange = function(callbackFn) {
        var _this = this;
        this.cbGroupEnabled.onValueChange(function(newSelection) {
          _this.setEnabled(newSelection, true);
          callbackFn(newSelection);
        });
        return this;
      };
      AgGroupComponent2.prototype.hideEnabledCheckbox = function(hide) {
        this.suppressEnabledCheckbox = hide;
        this.refreshChildDisplay();
        this.refreshDisabledStyles();
        return this;
      };
      AgGroupComponent2.prototype.hideOpenCloseIcons = function(hide) {
        this.suppressOpenCloseIcons = hide;
        if (hide) {
          this.toggleGroupExpand(true);
        }
        return this;
      };
      AgGroupComponent2.prototype.refreshDisabledStyles = function() {
        this.addOrRemoveCssClass("ag-disabled", !this.enabled);
        if (this.suppressEnabledCheckbox && !this.enabled) {
          this.eTitleBar.classList.add("ag-disabled-group-title-bar");
          this.eTitleBar.removeAttribute("tabindex");
        } else {
          this.eTitleBar.classList.remove("ag-disabled-group-title-bar");
          this.eTitleBar.setAttribute("tabindex", "0");
        }
        this.eContainer.classList.toggle("ag-disabled-group-container", !this.enabled);
      };
      AgGroupComponent2.EVENT_EXPANDED = "expanded";
      AgGroupComponent2.EVENT_COLLAPSED = "collapsed";
      __decorate$U([
        RefSelector("eTitleBar")
      ], AgGroupComponent2.prototype, "eTitleBar", void 0);
      __decorate$U([
        RefSelector("eGroupOpenedIcon")
      ], AgGroupComponent2.prototype, "eGroupOpenedIcon", void 0);
      __decorate$U([
        RefSelector("eGroupClosedIcon")
      ], AgGroupComponent2.prototype, "eGroupClosedIcon", void 0);
      __decorate$U([
        RefSelector("eToolbar")
      ], AgGroupComponent2.prototype, "eToolbar", void 0);
      __decorate$U([
        RefSelector("cbGroupEnabled")
      ], AgGroupComponent2.prototype, "cbGroupEnabled", void 0);
      __decorate$U([
        RefSelector("eTitle")
      ], AgGroupComponent2.prototype, "eTitle", void 0);
      __decorate$U([
        RefSelector("eContainer")
      ], AgGroupComponent2.prototype, "eContainer", void 0);
      __decorate$U([
        PostConstruct
      ], AgGroupComponent2.prototype, "postConstruct", null);
      return AgGroupComponent2;
    }(Component);
    __extends$S = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$T = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    TabGuardCtrl = function(_super) {
      __extends$S(TabGuardCtrl2, _super);
      function TabGuardCtrl2(params) {
        var _this = _super.call(this) || this;
        _this.skipTabGuardFocus = false;
        var comp = params.comp, eTopGuard = params.eTopGuard, eBottomGuard = params.eBottomGuard, focusInnerElement = params.focusInnerElement, onFocusIn = params.onFocusIn, onFocusOut = params.onFocusOut, shouldStopEventPropagation = params.shouldStopEventPropagation, onTabKeyDown = params.onTabKeyDown, handleKeyDown = params.handleKeyDown, eFocusableElement = params.eFocusableElement;
        _this.comp = comp;
        _this.eTopGuard = eTopGuard;
        _this.eBottomGuard = eBottomGuard;
        _this.providedFocusInnerElement = focusInnerElement;
        _this.eFocusableElement = eFocusableElement;
        _this.providedFocusIn = onFocusIn;
        _this.providedFocusOut = onFocusOut;
        _this.providedShouldStopEventPropagation = shouldStopEventPropagation;
        _this.providedOnTabKeyDown = onTabKeyDown;
        _this.providedHandleKeyDown = handleKeyDown;
        return _this;
      }
      TabGuardCtrl2.prototype.postConstruct = function() {
        var _this = this;
        this.createManagedBean(new ManagedFocusFeature(this.eFocusableElement, {
          shouldStopEventPropagation: function() {
            return _this.shouldStopEventPropagation();
          },
          onTabKeyDown: function(e) {
            return _this.onTabKeyDown(e);
          },
          handleKeyDown: function(e) {
            return _this.handleKeyDown(e);
          },
          onFocusIn: function(e) {
            return _this.onFocusIn(e);
          },
          onFocusOut: function(e) {
            return _this.onFocusOut(e);
          }
        }));
        this.activateTabGuards();
        [this.eTopGuard, this.eBottomGuard].forEach(function(guard) {
          return _this.addManagedListener(guard, "focus", _this.onFocus.bind(_this));
        });
      };
      TabGuardCtrl2.prototype.handleKeyDown = function(e) {
        if (this.providedHandleKeyDown) {
          this.providedHandleKeyDown(e);
        }
      };
      TabGuardCtrl2.prototype.tabGuardsAreActive = function() {
        return !!this.eTopGuard && this.eTopGuard.hasAttribute("tabIndex");
      };
      TabGuardCtrl2.prototype.shouldStopEventPropagation = function() {
        if (this.providedShouldStopEventPropagation) {
          return this.providedShouldStopEventPropagation();
        }
        return false;
      };
      TabGuardCtrl2.prototype.activateTabGuards = function() {
        this.comp.setTabIndex(this.getGridTabIndex());
      };
      TabGuardCtrl2.prototype.deactivateTabGuards = function() {
        this.comp.setTabIndex();
      };
      TabGuardCtrl2.prototype.onFocus = function(e) {
        if (this.skipTabGuardFocus) {
          this.skipTabGuardFocus = false;
          return;
        }
        var fromBottom = e.target === this.eBottomGuard;
        if (this.providedFocusInnerElement) {
          this.providedFocusInnerElement(fromBottom);
        } else {
          this.focusInnerElement(fromBottom);
        }
      };
      TabGuardCtrl2.prototype.onFocusIn = function(e) {
        if (this.providedFocusIn && this.providedFocusIn(e)) {
          return;
        }
        this.deactivateTabGuards();
      };
      TabGuardCtrl2.prototype.onFocusOut = function(e) {
        if (this.providedFocusOut && this.providedFocusOut(e)) {
          return;
        }
        if (!this.eFocusableElement.contains(e.relatedTarget)) {
          this.activateTabGuards();
        }
      };
      TabGuardCtrl2.prototype.onTabKeyDown = function(e) {
        var _this = this;
        if (this.providedOnTabKeyDown) {
          this.providedOnTabKeyDown(e);
          return;
        }
        if (e.defaultPrevented) {
          return;
        }
        var tabGuardsAreActive = this.tabGuardsAreActive();
        if (tabGuardsAreActive) {
          this.deactivateTabGuards();
        }
        var nextRoot = this.getNextFocusableElement(e.shiftKey);
        if (tabGuardsAreActive) {
          setTimeout(function() {
            return _this.activateTabGuards();
          }, 0);
        }
        if (!nextRoot) {
          return;
        }
        nextRoot.focus();
        e.preventDefault();
      };
      TabGuardCtrl2.prototype.getGridTabIndex = function() {
        return this.gridOptionsWrapper.getGridTabIndex();
      };
      TabGuardCtrl2.prototype.focusInnerElement = function(fromBottom) {
        if (fromBottom === void 0) {
          fromBottom = false;
        }
        var focusable = this.focusService.findFocusableElements(this.eFocusableElement);
        if (this.tabGuardsAreActive()) {
          focusable.splice(0, 1);
          focusable.splice(focusable.length - 1, 1);
        }
        if (!focusable.length) {
          return;
        }
        focusable[fromBottom ? focusable.length - 1 : 0].focus();
      };
      TabGuardCtrl2.prototype.getNextFocusableElement = function(backwards) {
        return this.focusService.findNextFocusableElement(this.eFocusableElement, false, backwards);
      };
      TabGuardCtrl2.prototype.forceFocusOutOfContainer = function(up) {
        if (up === void 0) {
          up = false;
        }
        var tabGuardToFocus = up ? this.eTopGuard : this.eBottomGuard;
        this.activateTabGuards();
        this.skipTabGuardFocus = true;
        tabGuardToFocus.focus();
      };
      __decorate$T([
        Autowired("focusService")
      ], TabGuardCtrl2.prototype, "focusService", void 0);
      __decorate$T([
        PostConstruct
      ], TabGuardCtrl2.prototype, "postConstruct", null);
      return TabGuardCtrl2;
    }(BeanStub);
    __extends$R = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __read$8 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread$7 = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read$8(arguments[i]));
      return ar;
    };
    TabGuardComp = function(_super) {
      __extends$R(TabGuardComp2, _super);
      function TabGuardComp2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      TabGuardComp2.prototype.initialiseTabGuard = function(params) {
        this.eTopGuard = this.createTabGuard("top");
        this.eBottomGuard = this.createTabGuard("bottom");
        this.eFocusableElement = this.getFocusableElement();
        var tabGuards = [this.eTopGuard, this.eBottomGuard];
        var compProxy = {
          setTabIndex: function(tabIndex) {
            tabGuards.forEach(function(tabGuard) {
              return tabIndex != null ? tabGuard.setAttribute("tabIndex", tabIndex) : tabGuard.removeAttribute("tabIndex");
            });
          }
        };
        this.addTabGuards(this.eTopGuard, this.eBottomGuard);
        this.tabGuardCtrl = this.createManagedBean(new TabGuardCtrl({
          comp: compProxy,
          eTopGuard: this.eTopGuard,
          eBottomGuard: this.eBottomGuard,
          eFocusableElement: this.eFocusableElement,
          onFocusIn: params.onFocusIn,
          onFocusOut: params.onFocusOut,
          focusInnerElement: params.focusInnerElement,
          handleKeyDown: params.handleKeyDown,
          onTabKeyDown: params.onTabKeyDown,
          shouldStopEventPropagation: params.shouldStopEventPropagation
        }));
      };
      TabGuardComp2.prototype.createTabGuard = function(side) {
        var tabGuard = document.createElement("div");
        tabGuard.classList.add("ag-tab-guard", "ag-tab-guard-" + side);
        setAriaRole(tabGuard, "presentation");
        return tabGuard;
      };
      TabGuardComp2.prototype.addTabGuards = function(topTabGuard, bottomTabGuard) {
        this.eFocusableElement.insertAdjacentElement("afterbegin", topTabGuard);
        this.eFocusableElement.insertAdjacentElement("beforeend", bottomTabGuard);
      };
      TabGuardComp2.prototype.removeAllChildrenExceptTabGuards = function() {
        var tabGuards = [this.eTopGuard, this.eBottomGuard];
        clearElement(this.getFocusableElement());
        this.addTabGuards.apply(this, __spread$7(tabGuards));
      };
      TabGuardComp2.prototype.forceFocusOutOfContainer = function(up) {
        if (up === void 0) {
          up = false;
        }
        this.tabGuardCtrl.forceFocusOutOfContainer(up);
      };
      TabGuardComp2.prototype.appendChild = function(newChild, container) {
        if (!isNodeOrElement(newChild)) {
          newChild = newChild.getGui();
        }
        var bottomTabGuard = this.eBottomGuard;
        if (bottomTabGuard) {
          bottomTabGuard.insertAdjacentElement("beforebegin", newChild);
        } else {
          _super.prototype.appendChild.call(this, newChild, container);
        }
      };
      return TabGuardComp2;
    }(Component);
    __extends$Q = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign$1 = function() {
      __assign$1 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$1.apply(this, arguments);
    };
    __decorate$S = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    AgMenuList = function(_super) {
      __extends$Q(AgMenuList2, _super);
      function AgMenuList2(level) {
        if (level === void 0) {
          level = 1;
        }
        var _this = _super.call(this, '<div class="ag-menu-list" role="tree"></div>') || this;
        _this.level = level;
        _this.menuItems = [];
        return _this;
      }
      AgMenuList2.prototype.postConstruct = function() {
        var _this = this;
        this.initialiseTabGuard({
          onTabKeyDown: function(e) {
            return _this.onTabKeyDown(e);
          },
          handleKeyDown: function(e) {
            return _this.handleKeyDown(e);
          }
        });
      };
      AgMenuList2.prototype.onTabKeyDown = function(e) {
        var parent = this.getParentComponent();
        var parentGui = parent && parent.getGui();
        var isManaged = parentGui && parentGui.classList.contains("ag-focus-managed");
        if (!isManaged) {
          e.preventDefault();
        }
        if (e.shiftKey) {
          this.closeIfIsChild(e);
        }
      };
      AgMenuList2.prototype.handleKeyDown = function(e) {
        switch (e.key) {
          case KeyCode.UP:
          case KeyCode.RIGHT:
          case KeyCode.DOWN:
          case KeyCode.LEFT:
            e.preventDefault();
            this.handleNavKey(e.key);
            break;
          case KeyCode.ESCAPE:
            var topMenu = this.findTopMenu();
            if (topMenu) {
              this.focusService.focusInto(topMenu.getGui());
            }
            break;
        }
      };
      AgMenuList2.prototype.clearActiveItem = function() {
        if (this.activeMenuItem) {
          this.activeMenuItem.deactivate();
          this.activeMenuItem = null;
        }
      };
      AgMenuList2.prototype.addMenuItems = function(menuItems) {
        var _this = this;
        if (menuItems == null) {
          return;
        }
        menuItems.forEach(function(menuItemOrString) {
          if (menuItemOrString === "separator") {
            _this.addSeparator();
          } else if (typeof menuItemOrString === "string") {
            console.warn("AG Grid: unrecognised menu item " + menuItemOrString);
          } else {
            _this.addItem(menuItemOrString);
          }
        });
      };
      AgMenuList2.prototype.addItem = function(menuItemDef) {
        var _this = this;
        var menuItem = this.createManagedBean(new AgMenuItemComponent(__assign$1(__assign$1({}, menuItemDef), { isAnotherSubMenuOpen: function() {
          return _this.menuItems.some(function(m) {
            return m.isSubMenuOpen();
          });
        } })));
        menuItem.setParentComponent(this);
        setAriaLevel(menuItem.getGui(), this.level);
        this.menuItems.push(menuItem);
        this.appendChild(menuItem.getGui());
        this.addManagedListener(menuItem, AgMenuItemComponent.EVENT_MENU_ITEM_SELECTED, function(event) {
          _this.dispatchEvent(event);
        });
        this.addManagedListener(menuItem, AgMenuItemComponent.EVENT_MENU_ITEM_ACTIVATED, function(event) {
          if (_this.activeMenuItem && _this.activeMenuItem !== event.menuItem) {
            _this.activeMenuItem.deactivate();
          }
          _this.activeMenuItem = event.menuItem;
        });
      };
      AgMenuList2.prototype.activateFirstItem = function() {
        var item = this.menuItems.filter(function(currentItem) {
          return !currentItem.isDisabled();
        })[0];
        if (!item) {
          return;
        }
        item.activate();
      };
      AgMenuList2.prototype.addSeparator = function() {
        var separatorHtml = '\n            <div class="ag-menu-separator" aria-hidden="true">\n                <div class="ag-menu-separator-part"></div>\n                <div class="ag-menu-separator-part"></div>\n                <div class="ag-menu-separator-part"></div>\n                <div class="ag-menu-separator-part"></div>\n            </div>';
        this.appendChild(loadTemplate(separatorHtml));
      };
      AgMenuList2.prototype.findTopMenu = function() {
        var parent = this.getParentComponent();
        if (!parent && this instanceof AgMenuList2) {
          return this;
        }
        while (true) {
          var nextParent = parent && parent.getParentComponent && parent.getParentComponent();
          if (!nextParent || !(nextParent instanceof AgMenuList2 || nextParent instanceof AgMenuItemComponent)) {
            break;
          }
          parent = nextParent;
        }
        return parent instanceof AgMenuList2 ? parent : void 0;
      };
      AgMenuList2.prototype.handleNavKey = function(key) {
        switch (key) {
          case KeyCode.UP:
          case KeyCode.DOWN:
            var nextItem = this.findNextItem(key === KeyCode.UP);
            if (nextItem && nextItem !== this.activeMenuItem) {
              nextItem.activate();
            }
            return;
        }
        var left = this.gridOptionsWrapper.isEnableRtl() ? KeyCode.RIGHT : KeyCode.LEFT;
        if (key === left) {
          this.closeIfIsChild();
        } else {
          this.openChild();
        }
      };
      AgMenuList2.prototype.closeIfIsChild = function(e) {
        var parentItem = this.getParentComponent();
        if (parentItem && parentItem instanceof AgMenuItemComponent) {
          if (e) {
            e.preventDefault();
          }
          parentItem.closeSubMenu();
          parentItem.getGui().focus();
        }
      };
      AgMenuList2.prototype.openChild = function() {
        if (this.activeMenuItem) {
          this.activeMenuItem.openSubMenu(true);
        }
      };
      AgMenuList2.prototype.findNextItem = function(up) {
        var items = this.menuItems.filter(function(item2) {
          return !item2.isDisabled();
        });
        if (!items.length) {
          return;
        }
        if (!this.activeMenuItem) {
          return up ? last(items) : items[0];
        }
        if (up) {
          items.reverse();
        }
        var nextItem;
        var foundCurrent = false;
        for (var i = 0; i < items.length; i++) {
          var item = items[i];
          if (!foundCurrent) {
            if (item === this.activeMenuItem) {
              foundCurrent = true;
            }
            continue;
          }
          nextItem = item;
          break;
        }
        return nextItem || this.activeMenuItem;
      };
      AgMenuList2.prototype.destroy = function() {
        this.clearActiveItem();
        _super.prototype.destroy.call(this);
      };
      __decorate$S([
        Autowired("focusService")
      ], AgMenuList2.prototype, "focusService", void 0);
      __decorate$S([
        PostConstruct
      ], AgMenuList2.prototype, "postConstruct", null);
      return AgMenuList2;
    }(TabGuardComp);
    __extends$P = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$R = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    AgMenuPanel = function(_super) {
      __extends$P(AgMenuPanel2, _super);
      function AgMenuPanel2(wrappedComponent) {
        var _this = _super.call(this) || this;
        _this.wrappedComponent = wrappedComponent;
        _this.setTemplateFromElement(wrappedComponent.getGui());
        return _this;
      }
      AgMenuPanel2.prototype.postConstruct = function() {
        var _this = this;
        this.initialiseTabGuard({
          onTabKeyDown: function(e) {
            return _this.onTabKeyDown(e);
          },
          handleKeyDown: function(e) {
            return _this.handleKeyDown(e);
          }
        });
      };
      AgMenuPanel2.prototype.handleKeyDown = function(e) {
        if (e.key === KeyCode.ESCAPE) {
          this.closePanel();
        }
      };
      AgMenuPanel2.prototype.onTabKeyDown = function(e) {
        if (e.defaultPrevented) {
          return;
        }
        this.closePanel();
        e.preventDefault();
      };
      AgMenuPanel2.prototype.closePanel = function() {
        var menuItem = this.parentComponent;
        menuItem.closeSubMenu();
        setTimeout(function() {
          return menuItem.getGui().focus();
        }, 0);
      };
      __decorate$R([
        PostConstruct
      ], AgMenuPanel2.prototype, "postConstruct", null);
      return AgMenuPanel2;
    }(TabGuardComp);
    __extends$O = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$Q = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    AgMenuItemComponent = function(_super) {
      __extends$O(AgMenuItemComponent2, _super);
      function AgMenuItemComponent2(params) {
        var _this = _super.call(this) || this;
        _this.params = params;
        _this.isActive = false;
        _this.subMenuIsOpen = false;
        _this.setTemplate('<div class="' + _this.getClassName() + '" tabindex="-1" role="treeitem"></div>');
        return _this;
      }
      AgMenuItemComponent2.prototype.init = function() {
        var _this = this;
        this.addIcon();
        this.addName();
        this.addShortcut();
        this.addSubMenu();
        this.addTooltip();
        var eGui = this.getGui();
        if (this.params.disabled) {
          this.addCssClass(this.getClassName("disabled"));
          setAriaDisabled(eGui, true);
        } else {
          this.addGuiEventListener("click", function(e) {
            return _this.onItemSelected(e);
          });
          this.addGuiEventListener("keydown", function(e) {
            if (e.key === KeyCode.ENTER || e.key === KeyCode.SPACE) {
              e.preventDefault();
              _this.onItemSelected(e);
            }
          });
          this.addGuiEventListener("mousedown", function(e) {
            e.stopPropagation();
            e.preventDefault();
          });
          this.addGuiEventListener("mouseenter", function() {
            return _this.onMouseEnter();
          });
          this.addGuiEventListener("mouseleave", function() {
            return _this.onMouseLeave();
          });
        }
        if (this.params.cssClasses) {
          this.params.cssClasses.forEach(function(it) {
            return _this.addCssClass(it);
          });
        }
      };
      AgMenuItemComponent2.prototype.isDisabled = function() {
        return !!this.params.disabled;
      };
      AgMenuItemComponent2.prototype.openSubMenu = function(activateFirstItem) {
        var _this = this;
        if (activateFirstItem === void 0) {
          activateFirstItem = false;
        }
        this.closeSubMenu();
        if (!this.params.subMenu) {
          return;
        }
        var ePopup = loadTemplate('<div class="ag-menu" role="presentation"></div>');
        var destroySubMenu;
        if (this.params.subMenu instanceof Array) {
          var currentLevel = getAriaLevel(this.getGui());
          var nextLevel = isNaN(currentLevel) ? 1 : currentLevel + 1;
          var childMenu_1 = this.createBean(new AgMenuList(nextLevel));
          childMenu_1.setParentComponent(this);
          childMenu_1.addMenuItems(this.params.subMenu);
          ePopup.appendChild(childMenu_1.getGui());
          this.addManagedListener(childMenu_1, AgMenuItemComponent2.EVENT_MENU_ITEM_SELECTED, function(e) {
            return _this.dispatchEvent(e);
          });
          childMenu_1.addGuiEventListener("mouseenter", function() {
            return _this.cancelDeactivate();
          });
          destroySubMenu = function() {
            return _this.destroyBean(childMenu_1);
          };
          if (activateFirstItem) {
            setTimeout(function() {
              return childMenu_1.activateFirstItem();
            }, 0);
          }
        } else {
          var subMenu_1 = this.params.subMenu;
          var menuPanel = this.createBean(new AgMenuPanel(subMenu_1));
          menuPanel.setParentComponent(this);
          var subMenuGui_1 = menuPanel.getGui();
          var mouseEvent_1 = "mouseenter";
          var mouseEnterListener_1 = function() {
            return _this.cancelDeactivate();
          };
          subMenuGui_1.addEventListener(mouseEvent_1, mouseEnterListener_1);
          destroySubMenu = function() {
            return subMenuGui_1.removeEventListener(mouseEvent_1, mouseEnterListener_1);
          };
          ePopup.appendChild(subMenuGui_1);
          if (subMenu_1.afterGuiAttached) {
            setTimeout(function() {
              return subMenu_1.afterGuiAttached();
            }, 0);
          }
        }
        var eGui = this.getGui();
        var positionCallback = this.popupService.positionPopupForMenu.bind(this.popupService, { eventSource: eGui, ePopup });
        var translate = this.gridOptionsWrapper.getLocaleTextFunc();
        var addPopupRes = this.popupService.addPopup({
          modal: true,
          eChild: ePopup,
          positionCallback,
          anchorToElement: eGui,
          ariaLabel: translate("ariaLabelSubMenu", "SubMenu")
        });
        this.subMenuIsOpen = true;
        setAriaExpanded(eGui, true);
        this.hideSubMenu = function() {
          if (addPopupRes) {
            addPopupRes.hideFunc();
          }
          _this.subMenuIsOpen = false;
          setAriaExpanded(eGui, false);
          destroySubMenu();
        };
      };
      AgMenuItemComponent2.prototype.closeSubMenu = function() {
        if (!this.hideSubMenu) {
          return;
        }
        this.hideSubMenu();
        this.hideSubMenu = null;
        setAriaExpanded(this.getGui(), false);
      };
      AgMenuItemComponent2.prototype.isSubMenuOpen = function() {
        return this.subMenuIsOpen;
      };
      AgMenuItemComponent2.prototype.activate = function(openSubMenu) {
        var _this = this;
        this.cancelActivate();
        if (this.params.disabled) {
          return;
        }
        this.isActive = true;
        this.addCssClass(this.getClassName("active"));
        this.getGui().focus();
        if (openSubMenu && this.params.subMenu) {
          window.setTimeout(function() {
            if (_this.isAlive() && _this.isActive) {
              _this.openSubMenu();
            }
          }, 300);
        }
        this.onItemActivated();
      };
      AgMenuItemComponent2.prototype.deactivate = function() {
        this.cancelDeactivate();
        this.removeCssClass(this.getClassName("active"));
        this.isActive = false;
        if (this.subMenuIsOpen) {
          this.hideSubMenu();
        }
      };
      AgMenuItemComponent2.prototype.addIcon = function() {
        if (!this.params.checked && !this.params.icon && this.params.isCompact) {
          return;
        }
        var icon = loadTemplate('<span ref="eIcon" class="' + this.getClassName("part") + " " + this.getClassName("icon") + '" role="presentation"></span>');
        if (this.params.checked) {
          icon.appendChild(createIconNoSpan("check", this.gridOptionsWrapper));
        } else if (this.params.icon) {
          if (isNodeOrElement(this.params.icon)) {
            icon.appendChild(this.params.icon);
          } else if (typeof this.params.icon === "string") {
            icon.innerHTML = this.params.icon;
          } else {
            console.warn("AG Grid: menu item icon must be DOM node or string");
          }
        }
        this.getGui().appendChild(icon);
      };
      AgMenuItemComponent2.prototype.addName = function() {
        if (!this.params.name && this.params.isCompact) {
          return;
        }
        var name = loadTemplate('<span ref="eName" class="' + this.getClassName("part") + " " + this.getClassName("text") + '">' + (this.params.name || "") + "</span>");
        this.getGui().appendChild(name);
      };
      AgMenuItemComponent2.prototype.addTooltip = function() {
        if (!this.params.tooltip) {
          return;
        }
        this.tooltip = this.params.tooltip;
        if (this.gridOptionsWrapper.isEnableBrowserTooltips()) {
          this.getGui().setAttribute("title", this.tooltip);
        } else {
          this.createManagedBean(new CustomTooltipFeature(this));
        }
      };
      AgMenuItemComponent2.prototype.getTooltipParams = function() {
        return {
          location: "menu",
          value: this.tooltip
        };
      };
      AgMenuItemComponent2.prototype.addShortcut = function() {
        if (!this.params.shortcut && this.params.isCompact) {
          return;
        }
        var shortcut = loadTemplate('<span ref="eShortcut" class="' + this.getClassName("part") + " " + this.getClassName("shortcut") + '">' + (this.params.shortcut || "") + "</span>");
        this.getGui().appendChild(shortcut);
      };
      AgMenuItemComponent2.prototype.addSubMenu = function() {
        if (!this.params.subMenu && this.params.isCompact) {
          return;
        }
        var pointer = loadTemplate('<span ref="ePopupPointer" class="' + this.getClassName("part") + " " + this.getClassName("popup-pointer") + '"></span>');
        var eGui = this.getGui();
        if (this.params.subMenu) {
          var iconName = this.gridOptionsWrapper.isEnableRtl() ? "smallLeft" : "smallRight";
          setAriaExpanded(eGui, false);
          pointer.appendChild(createIconNoSpan(iconName, this.gridOptionsWrapper));
        }
        eGui.appendChild(pointer);
      };
      AgMenuItemComponent2.prototype.onItemSelected = function(event) {
        if (this.params.action) {
          this.params.action();
        } else {
          this.openSubMenu(event && event.type === "keydown");
        }
        if (this.params.subMenu && !this.params.action) {
          return;
        }
        var e = {
          type: AgMenuItemComponent2.EVENT_MENU_ITEM_SELECTED,
          action: this.params.action,
          checked: this.params.checked,
          cssClasses: this.params.cssClasses,
          disabled: this.params.disabled,
          icon: this.params.icon,
          name: this.params.name,
          shortcut: this.params.shortcut,
          subMenu: this.params.subMenu,
          tooltip: this.params.tooltip,
          event
        };
        this.dispatchEvent(e);
      };
      AgMenuItemComponent2.prototype.onItemActivated = function() {
        var event = {
          type: AgMenuItemComponent2.EVENT_MENU_ITEM_ACTIVATED,
          menuItem: this
        };
        this.dispatchEvent(event);
      };
      AgMenuItemComponent2.prototype.cancelActivate = function() {
        if (this.activateTimeoutId) {
          window.clearTimeout(this.activateTimeoutId);
          this.activateTimeoutId = 0;
        }
      };
      AgMenuItemComponent2.prototype.cancelDeactivate = function() {
        if (this.deactivateTimeoutId) {
          window.clearTimeout(this.deactivateTimeoutId);
          this.deactivateTimeoutId = 0;
        }
      };
      AgMenuItemComponent2.prototype.onMouseEnter = function() {
        var _this = this;
        this.cancelDeactivate();
        if (this.params.isAnotherSubMenuOpen()) {
          this.activateTimeoutId = window.setTimeout(function() {
            return _this.activate(true);
          }, AgMenuItemComponent2.ACTIVATION_DELAY);
        } else {
          this.activate(true);
        }
      };
      AgMenuItemComponent2.prototype.onMouseLeave = function() {
        var _this = this;
        this.cancelActivate();
        if (this.isSubMenuOpen()) {
          this.deactivateTimeoutId = window.setTimeout(function() {
            return _this.deactivate();
          }, AgMenuItemComponent2.ACTIVATION_DELAY);
        } else {
          this.deactivate();
        }
      };
      AgMenuItemComponent2.prototype.getClassName = function(suffix) {
        var prefix = this.params.isCompact ? "ag-compact-menu-option" : "ag-menu-option";
        return suffix ? prefix + "-" + suffix : prefix;
      };
      AgMenuItemComponent2.EVENT_MENU_ITEM_SELECTED = "menuItemSelected";
      AgMenuItemComponent2.EVENT_MENU_ITEM_ACTIVATED = "menuItemActivated";
      AgMenuItemComponent2.ACTIVATION_DELAY = 80;
      __decorate$Q([
        Autowired("popupService")
      ], AgMenuItemComponent2.prototype, "popupService", void 0);
      __decorate$Q([
        PostConstruct
      ], AgMenuItemComponent2.prototype, "init", null);
      return AgMenuItemComponent2;
    }(Component);
    __extends$N = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$P = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __read$7 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread$6 = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read$7(arguments[i]));
      return ar;
    };
    FocusService = function(_super) {
      __extends$N(FocusService2, _super);
      function FocusService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      FocusService_1 = FocusService2;
      FocusService2.addKeyboardModeEvents = function(doc, controller) {
        var docControllers = FocusService_1.instancesMonitored.get(doc);
        if (docControllers && docControllers.length > 0) {
          if (docControllers.indexOf(controller) === -1) {
            docControllers.push(controller);
          }
        } else {
          FocusService_1.instancesMonitored.set(doc, [controller]);
          doc.addEventListener("keydown", FocusService_1.toggleKeyboardMode);
          doc.addEventListener("mousedown", FocusService_1.toggleKeyboardMode);
        }
      };
      FocusService2.removeKeyboardModeEvents = function(doc, controller) {
        var docControllers = FocusService_1.instancesMonitored.get(doc);
        var newControllers = [];
        if (docControllers && docControllers.length) {
          newControllers = __spread$6(docControllers).filter(function(currentGridCore) {
            return currentGridCore !== controller;
          });
          FocusService_1.instancesMonitored.set(doc, newControllers);
        }
        if (newControllers.length === 0) {
          doc.removeEventListener("keydown", FocusService_1.toggleKeyboardMode);
          doc.removeEventListener("mousedown", FocusService_1.toggleKeyboardMode);
        }
      };
      FocusService2.toggleKeyboardMode = function(event) {
        var isKeyboardActive = FocusService_1.keyboardModeActive;
        var isKeyboardEvent = event.type === "keydown";
        if (isKeyboardEvent) {
          if (event.ctrlKey || event.metaKey || event.altKey) {
            return;
          }
        }
        if (isKeyboardActive && isKeyboardEvent || !isKeyboardActive && !isKeyboardEvent) {
          return;
        }
        FocusService_1.keyboardModeActive = isKeyboardEvent;
        var doc = event.target.ownerDocument;
        if (!doc) {
          return;
        }
        var controllersForDoc = FocusService_1.instancesMonitored.get(doc);
        if (controllersForDoc) {
          controllersForDoc.forEach(function(controller) {
            controller.dispatchEvent({ type: isKeyboardEvent ? Events.EVENT_KEYBOARD_FOCUS : Events.EVENT_MOUSE_FOCUS });
          });
        }
      };
      FocusService2.prototype.init = function() {
        var _this = this;
        var clearFocusedCellListener = this.clearFocusedCell.bind(this);
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, clearFocusedCellListener);
        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.onColumnEverythingChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_GROUP_OPENED, clearFocusedCellListener);
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, clearFocusedCellListener);
        this.ctrlsService.whenReady(function(p) {
          _this.gridCtrl = p.gridCtrl;
          var doc = _this.gridOptionsWrapper.getDocument();
          FocusService_1.addKeyboardModeEvents(doc, _this.gridCtrl);
          _this.addDestroyFunc(function() {
            return _this.unregisterGridCompController(_this.gridCtrl);
          });
        });
      };
      FocusService2.prototype.unregisterGridCompController = function(gridCompController) {
        var doc = this.gridOptionsWrapper.getDocument();
        FocusService_1.removeKeyboardModeEvents(doc, gridCompController);
      };
      FocusService2.prototype.onColumnEverythingChanged = function() {
        if (!this.focusedCellPosition) {
          return;
        }
        var col = this.focusedCellPosition.column;
        var colFromColumnModel = this.columnModel.getGridColumn(col.getId());
        if (col !== colFromColumnModel) {
          this.clearFocusedCell();
        }
      };
      FocusService2.prototype.isKeyboardMode = function() {
        return FocusService_1.keyboardModeActive;
      };
      FocusService2.prototype.getFocusCellToUseAfterRefresh = function() {
        var eDocument = this.gridOptionsWrapper.getDocument();
        if (this.gridOptionsWrapper.isSuppressFocusAfterRefresh() || !this.focusedCellPosition) {
          return null;
        }
        if (this.isDomDataMissingInHierarchy(eDocument.activeElement, RowCtrl.DOM_DATA_KEY_ROW_CTRL)) {
          return null;
        }
        return this.focusedCellPosition;
      };
      FocusService2.prototype.getFocusHeaderToUseAfterRefresh = function() {
        var eDocument = this.gridOptionsWrapper.getDocument();
        if (this.gridOptionsWrapper.isSuppressFocusAfterRefresh() || !this.focusedHeaderPosition) {
          return null;
        }
        if (this.isDomDataMissingInHierarchy(eDocument.activeElement, AbstractHeaderCellCtrl.DOM_DATA_KEY_HEADER_CTRL)) {
          return null;
        }
        return this.focusedHeaderPosition;
      };
      FocusService2.prototype.isDomDataMissingInHierarchy = function(eBrowserCell, key) {
        var ePointer = eBrowserCell;
        while (ePointer) {
          var data = this.gridOptionsWrapper.getDomData(ePointer, key);
          if (data) {
            return false;
          }
          ePointer = ePointer.parentNode;
        }
        return true;
      };
      FocusService2.prototype.clearFocusedCell = function() {
        this.focusedCellPosition = null;
        this.onCellFocused(false, false);
      };
      FocusService2.prototype.getFocusedCell = function() {
        return this.focusedCellPosition;
      };
      FocusService2.prototype.setFocusedCell = function(params) {
        var column = params.column, rowIndex = params.rowIndex, rowPinned = params.rowPinned, _a = params.forceBrowserFocus, forceBrowserFocus = _a === void 0 ? false : _a, _b = params.preventScrollOnBrowserFocus, preventScrollOnBrowserFocus = _b === void 0 ? false : _b;
        var gridColumn = this.columnModel.getGridColumn(column);
        if (!gridColumn) {
          this.focusedCellPosition = null;
          return;
        }
        this.focusedCellPosition = gridColumn ? {
          rowIndex,
          rowPinned: makeNull(rowPinned),
          column: gridColumn
        } : null;
        this.onCellFocused(forceBrowserFocus, preventScrollOnBrowserFocus);
      };
      FocusService2.prototype.isCellFocused = function(cellPosition) {
        if (this.focusedCellPosition == null) {
          return false;
        }
        return this.focusedCellPosition.column === cellPosition.column && this.isRowFocused(cellPosition.rowIndex, cellPosition.rowPinned);
      };
      FocusService2.prototype.isRowNodeFocused = function(rowNode) {
        return this.isRowFocused(rowNode.rowIndex, rowNode.rowPinned);
      };
      FocusService2.prototype.isHeaderWrapperFocused = function(headerCtrl) {
        if (this.focusedHeaderPosition == null) {
          return false;
        }
        var column = headerCtrl.getColumnGroupChild();
        var headerRowIndex = headerCtrl.getRowIndex();
        var pinned = headerCtrl.getPinned();
        var _a = this.focusedHeaderPosition, focusedColumn = _a.column, focusedHeaderRowIndex = _a.headerRowIndex;
        return column === focusedColumn && headerRowIndex === focusedHeaderRowIndex && pinned == focusedColumn.getPinned();
      };
      FocusService2.prototype.clearFocusedHeader = function() {
        this.focusedHeaderPosition = null;
      };
      FocusService2.prototype.getFocusedHeader = function() {
        return this.focusedHeaderPosition;
      };
      FocusService2.prototype.setFocusedHeader = function(headerRowIndex, column) {
        this.focusedHeaderPosition = { headerRowIndex, column };
      };
      FocusService2.prototype.focusHeaderPosition = function(params) {
        var direction = params.direction, fromTab = params.fromTab, allowUserOverride = params.allowUserOverride, event = params.event;
        var headerPosition = params.headerPosition;
        if (allowUserOverride) {
          var gridOptionsWrapper = this.gridOptionsWrapper;
          var currentPosition = this.getFocusedHeader();
          var headerRowCount = this.headerNavigationService.getHeaderRowCount();
          if (fromTab) {
            var userFunc = gridOptionsWrapper.getTabToNextHeaderFunc();
            if (userFunc) {
              var params_1 = {
                backwards: direction === "Before",
                previousHeaderPosition: currentPosition,
                nextHeaderPosition: headerPosition,
                headerRowCount
              };
              headerPosition = userFunc(params_1);
            }
          } else {
            var userFunc = gridOptionsWrapper.getNavigateToNextHeaderFunc();
            if (userFunc && event) {
              var params_2 = {
                key: event.key,
                previousHeaderPosition: currentPosition,
                nextHeaderPosition: headerPosition,
                headerRowCount,
                event
              };
              headerPosition = userFunc(params_2);
            }
          }
        }
        if (!headerPosition) {
          return false;
        }
        if (headerPosition.headerRowIndex === -1) {
          return this.focusGridView(headerPosition.column);
        }
        this.headerNavigationService.scrollToColumn(headerPosition.column, direction);
        var headerRowContainerCtrl = this.ctrlsService.getHeaderRowContainerCtrl(headerPosition.column.getPinned());
        var focusSuccess = headerRowContainerCtrl.focusHeader(headerPosition.headerRowIndex, headerPosition.column, event);
        return focusSuccess;
      };
      FocusService2.prototype.focusFirstHeader = function() {
        var firstColumn = this.columnModel.getAllDisplayedColumns()[0];
        if (!firstColumn) {
          return false;
        }
        if (firstColumn.getParent()) {
          firstColumn = this.columnModel.getColumnGroupAtLevel(firstColumn, 0);
        }
        return this.focusHeaderPosition({
          headerPosition: { headerRowIndex: 0, column: firstColumn }
        });
      };
      FocusService2.prototype.focusLastHeader = function(event) {
        var headerRowIndex = this.headerNavigationService.getHeaderRowCount() - 1;
        var column = last(this.columnModel.getAllDisplayedColumns());
        return this.focusHeaderPosition({
          headerPosition: { headerRowIndex, column },
          event
        });
      };
      FocusService2.prototype.isAnyCellFocused = function() {
        return !!this.focusedCellPosition;
      };
      FocusService2.prototype.isRowFocused = function(rowIndex, floating) {
        if (this.focusedCellPosition == null) {
          return false;
        }
        return this.focusedCellPosition.rowIndex === rowIndex && this.focusedCellPosition.rowPinned === makeNull(floating);
      };
      FocusService2.prototype.findFocusableElements = function(rootNode, exclude, onlyUnmanaged) {
        if (onlyUnmanaged === void 0) {
          onlyUnmanaged = false;
        }
        var focusableString = Constants.FOCUSABLE_SELECTOR;
        var excludeString = Constants.FOCUSABLE_EXCLUDE;
        if (exclude) {
          excludeString += ", " + exclude;
        }
        if (onlyUnmanaged) {
          excludeString += ', [tabindex="-1"]';
        }
        var nodes = Array.prototype.slice.apply(rootNode.querySelectorAll(focusableString));
        var excludeNodes = Array.prototype.slice.apply(rootNode.querySelectorAll(excludeString));
        if (!excludeNodes.length) {
          return nodes;
        }
        var diff = function(a, b) {
          return a.filter(function(element) {
            return b.indexOf(element) === -1;
          });
        };
        return diff(nodes, excludeNodes);
      };
      FocusService2.prototype.focusInto = function(rootNode, up, onlyUnmanaged) {
        if (up === void 0) {
          up = false;
        }
        if (onlyUnmanaged === void 0) {
          onlyUnmanaged = false;
        }
        var focusableElements = this.findFocusableElements(rootNode, null, onlyUnmanaged);
        var toFocus = up ? last(focusableElements) : focusableElements[0];
        if (toFocus) {
          toFocus.focus();
          return true;
        }
        return false;
      };
      FocusService2.prototype.findNextFocusableElement = function(rootNode, onlyManaged, backwards) {
        if (rootNode === void 0) {
          rootNode = this.eGridDiv;
        }
        var focusable = this.findFocusableElements(rootNode, onlyManaged ? ':not([tabindex="-1"])' : null);
        var eDocument = this.gridOptionsWrapper.getDocument();
        var activeEl = eDocument.activeElement;
        var currentIndex;
        if (onlyManaged) {
          currentIndex = focusable.findIndex(function(el) {
            return el.contains(activeEl);
          });
        } else {
          currentIndex = focusable.indexOf(activeEl);
        }
        var nextIndex = currentIndex + (backwards ? -1 : 1);
        if (nextIndex < 0 || nextIndex >= focusable.length) {
          return null;
        }
        return focusable[nextIndex];
      };
      FocusService2.prototype.isFocusUnderManagedComponent = function(rootNode) {
        var eDocument = this.gridOptionsWrapper.getDocument();
        var managedContainers = rootNode.querySelectorAll("." + ManagedFocusFeature.FOCUS_MANAGED_CLASS);
        if (!managedContainers.length) {
          return false;
        }
        for (var i = 0; i < managedContainers.length; i++) {
          if (managedContainers[i].contains(eDocument.activeElement)) {
            return true;
          }
        }
        return false;
      };
      FocusService2.prototype.findTabbableParent = function(node, limit) {
        if (limit === void 0) {
          limit = 5;
        }
        var counter = 0;
        while (node && getTabIndex(node) === null && ++counter <= limit) {
          node = node.parentElement;
        }
        if (getTabIndex(node) === null) {
          return null;
        }
        return node;
      };
      FocusService2.prototype.onCellFocused = function(forceBrowserFocus, preventScrollOnBrowserFocus) {
        var event = {
          type: Events.EVENT_CELL_FOCUSED,
          forceBrowserFocus,
          preventScrollOnBrowserFocus,
          rowIndex: null,
          column: null,
          floating: null,
          rowPinned: null,
          isFullWidthCell: false
        };
        if (this.focusedCellPosition) {
          var rowIndex = event.rowIndex = this.focusedCellPosition.rowIndex;
          var rowPinned = event.rowPinned = this.focusedCellPosition.rowPinned;
          event.column = this.focusedCellPosition.column;
          var rowCtrl = this.rowRenderer.getRowByPosition({ rowIndex, rowPinned });
          if (rowCtrl) {
            event.isFullWidthCell = rowCtrl.isFullWidth();
          }
        }
        this.eventService.dispatchEvent(event);
      };
      FocusService2.prototype.focusGridView = function(column, backwards) {
        if (this.gridOptionsWrapper.isSuppressCellFocus()) {
          if (backwards) {
            return this.focusLastHeader();
          }
          return this.focusNextGridCoreContainer(false);
        }
        var nextRow = backwards ? this.rowPositionUtils.getLastRow() : this.rowPositionUtils.getFirstRow();
        if (!nextRow) {
          return false;
        }
        var rowIndex = nextRow.rowIndex, rowPinned = nextRow.rowPinned;
        var focusedHeader = this.getFocusedHeader();
        if (!column && focusedHeader) {
          column = focusedHeader.column;
        }
        if (rowIndex == null || !column) {
          return false;
        }
        this.navigationService.ensureCellVisible({ rowIndex, column, rowPinned });
        this.setFocusedCell({
          rowIndex,
          column,
          rowPinned: makeNull(rowPinned),
          forceBrowserFocus: true
        });
        if (this.rangeService) {
          var cellPosition = { rowIndex, rowPinned, column };
          this.rangeService.setRangeToCell(cellPosition);
        }
        return true;
      };
      FocusService2.prototype.focusNextGridCoreContainer = function(backwards) {
        if (this.gridCtrl.focusNextInnerContainer(backwards)) {
          return true;
        }
        if (!backwards && !this.gridCtrl.isDetailGrid()) {
          this.gridCtrl.forceFocusOutOfContainer();
        }
        return false;
      };
      var FocusService_1;
      FocusService2.AG_KEYBOARD_FOCUS = "ag-keyboard-focus";
      FocusService2.keyboardModeActive = false;
      FocusService2.instancesMonitored = /* @__PURE__ */ new Map();
      __decorate$P([
        Autowired("eGridDiv")
      ], FocusService2.prototype, "eGridDiv", void 0);
      __decorate$P([
        Autowired("columnModel")
      ], FocusService2.prototype, "columnModel", void 0);
      __decorate$P([
        Autowired("headerNavigationService")
      ], FocusService2.prototype, "headerNavigationService", void 0);
      __decorate$P([
        Autowired("rowRenderer")
      ], FocusService2.prototype, "rowRenderer", void 0);
      __decorate$P([
        Autowired("rowPositionUtils")
      ], FocusService2.prototype, "rowPositionUtils", void 0);
      __decorate$P([
        Optional("rangeService")
      ], FocusService2.prototype, "rangeService", void 0);
      __decorate$P([
        Autowired("navigationService")
      ], FocusService2.prototype, "navigationService", void 0);
      __decorate$P([
        Autowired("ctrlsService")
      ], FocusService2.prototype, "ctrlsService", void 0);
      __decorate$P([
        PostConstruct
      ], FocusService2.prototype, "init", null);
      FocusService2 = FocusService_1 = __decorate$P([
        Bean("focusService")
      ], FocusService2);
      return FocusService2;
    }(BeanStub);
    __extends$M = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$O = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __read$6 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread$5 = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read$6(arguments[i]));
      return ar;
    };
    (function(DIRECTION2) {
      DIRECTION2[DIRECTION2["vertical"] = 0] = "vertical";
      DIRECTION2[DIRECTION2["horizontal"] = 1] = "horizontal";
    })(DIRECTION || (DIRECTION = {}));
    instanceIdSeq = 0;
    PopupService = function(_super) {
      __extends$M(PopupService2, _super);
      function PopupService2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.popupList = [];
        return _this;
      }
      PopupService_1 = PopupService2;
      PopupService2.prototype.postConstruct = function() {
        var _this = this;
        this.ctrlsService.whenReady(function(p) {
          _this.gridCtrl = p.gridCtrl;
          _this.addManagedListener(_this.gridCtrl, Events.EVENT_KEYBOARD_FOCUS, function() {
            _this.popupList.forEach(function(popup) {
              return popup.element.classList.add(FocusService.AG_KEYBOARD_FOCUS);
            });
          });
          _this.addManagedListener(_this.gridCtrl, Events.EVENT_MOUSE_FOCUS, function() {
            _this.popupList.forEach(function(popup) {
              return popup.element.classList.remove(FocusService.AG_KEYBOARD_FOCUS);
            });
          });
        });
      };
      PopupService2.prototype.getPopupParent = function() {
        var ePopupParent = this.gridOptionsWrapper.getPopupParent();
        if (ePopupParent) {
          return ePopupParent;
        }
        return this.gridCtrl.getGui();
      };
      PopupService2.prototype.positionPopupForMenu = function(params) {
        var sourceRect = params.eventSource.getBoundingClientRect();
        var parentRect = this.getParentRect();
        var y = this.keepXYWithinBounds(params.ePopup, sourceRect.top - parentRect.top, DIRECTION.vertical);
        var minWidth = params.ePopup.clientWidth > 0 ? params.ePopup.clientWidth : 200;
        params.ePopup.style.minWidth = minWidth + "px";
        var widthOfParent = parentRect.right - parentRect.left;
        var maxX = widthOfParent - minWidth;
        var x;
        if (this.gridOptionsWrapper.isEnableRtl()) {
          x = xLeftPosition();
          if (x < 0) {
            x = xRightPosition();
          }
          if (x > maxX) {
            x = 0;
          }
        } else {
          x = xRightPosition();
          if (x > maxX) {
            x = xLeftPosition();
          }
          if (x < 0) {
            x = 0;
          }
        }
        params.ePopup.style.left = x + "px";
        params.ePopup.style.top = y + "px";
        function xRightPosition() {
          return sourceRect.right - parentRect.left - 2;
        }
        function xLeftPosition() {
          return sourceRect.left - parentRect.left - minWidth;
        }
      };
      PopupService2.prototype.positionPopupUnderMouseEvent = function(params) {
        var ePopup = params.ePopup, nudgeX = params.nudgeX, nudgeY = params.nudgeY, skipObserver = params.skipObserver;
        var _a = this.calculatePointerAlign(params.mouseEvent), x = _a.x, y = _a.y;
        this.positionPopup({
          ePopup,
          x,
          y,
          nudgeX,
          nudgeY,
          keepWithinBounds: true,
          skipObserver
        });
        this.callPostProcessPopup(params.type, params.ePopup, null, params.mouseEvent, params.column, params.rowNode);
      };
      PopupService2.prototype.calculatePointerAlign = function(e) {
        var parentRect = this.getParentRect();
        return {
          x: e.clientX - parentRect.left,
          y: e.clientY - parentRect.top
        };
      };
      PopupService2.prototype.positionPopupUnderComponent = function(params) {
        var sourceRect = params.eventSource.getBoundingClientRect();
        var alignSide = params.alignSide || "left";
        var parentRect = this.getParentRect();
        var x = sourceRect.left - parentRect.left;
        if (alignSide === "right") {
          x -= params.ePopup.offsetWidth - sourceRect.width;
        }
        this.positionPopup({
          ePopup: params.ePopup,
          nudgeX: params.nudgeX,
          nudgeY: params.nudgeY,
          x,
          y: sourceRect.top - parentRect.top + sourceRect.height,
          keepWithinBounds: params.keepWithinBounds
        });
        this.callPostProcessPopup(params.type, params.ePopup, params.eventSource, null, params.column, params.rowNode);
      };
      PopupService2.prototype.positionPopupOverComponent = function(params) {
        var sourceRect = params.eventSource.getBoundingClientRect();
        var parentRect = this.getParentRect();
        this.positionPopup({
          ePopup: params.ePopup,
          nudgeX: params.nudgeX,
          nudgeY: params.nudgeY,
          x: sourceRect.left - parentRect.left,
          y: sourceRect.top - parentRect.top,
          keepWithinBounds: params.keepWithinBounds
        });
        this.callPostProcessPopup(params.type, params.ePopup, params.eventSource, null, params.column, params.rowNode);
      };
      PopupService2.prototype.callPostProcessPopup = function(type, ePopup, eventSource, mouseEvent, column, rowNode) {
        var callback = this.gridOptionsWrapper.getPostProcessPopupFunc();
        if (callback) {
          var params = {
            column,
            rowNode,
            ePopup,
            type,
            eventSource,
            mouseEvent
          };
          callback(params);
        }
      };
      PopupService2.prototype.positionPopup = function(params) {
        var _this = this;
        var x = params.x, y = params.y, ePopup = params.ePopup, keepWithinBounds = params.keepWithinBounds, nudgeX = params.nudgeX, nudgeY = params.nudgeY, skipObserver = params.skipObserver;
        var currentX = x;
        var currentY = y;
        if (nudgeX) {
          currentX += nudgeX;
        }
        if (nudgeY) {
          currentY += nudgeY;
        }
        var updatePosition = function() {
          if (keepWithinBounds) {
            currentX = _this.keepXYWithinBounds(ePopup, currentX, DIRECTION.horizontal);
            currentY = _this.keepXYWithinBounds(ePopup, currentY, DIRECTION.vertical);
          }
          ePopup.style.left = currentX + "px";
          ePopup.style.top = currentY + "px";
        };
        updatePosition();
        if (!skipObserver) {
          var resizeObserverDestroyFunc_1 = this.resizeObserverService.observeResize(ePopup, updatePosition);
          setTimeout(function() {
            return resizeObserverDestroyFunc_1();
          }, PopupService_1.WAIT_FOR_POPUP_CONTENT_RESIZE);
        }
      };
      PopupService2.prototype.getActivePopups = function() {
        return this.popupList.map(function(popup) {
          return popup.element;
        });
      };
      PopupService2.prototype.getPopupList = function() {
        return this.popupList;
      };
      PopupService2.prototype.getParentRect = function() {
        var eDocument = this.gridOptionsWrapper.getDocument();
        var popupParent = this.getPopupParent();
        if (popupParent === eDocument.body) {
          popupParent = eDocument.documentElement;
        } else if (getComputedStyle(popupParent).position === "static") {
          popupParent = popupParent.offsetParent;
        }
        var style = getComputedStyle(popupParent);
        var bounds = popupParent.getBoundingClientRect();
        return {
          top: bounds.top + parseFloat(style.borderTopWidth) || 0,
          left: bounds.left + parseFloat(style.borderLeftWidth) || 0,
          right: bounds.right + parseFloat(style.borderRightWidth) || 0,
          bottom: bounds.bottom + parseFloat(style.borderBottomWidth) || 0
        };
      };
      PopupService2.prototype.keepXYWithinBounds = function(ePopup, position, direction) {
        var isVertical = direction === DIRECTION.vertical;
        var sizeProperty = isVertical ? "clientHeight" : "clientWidth";
        var anchorProperty = isVertical ? "top" : "left";
        var offsetProperty = isVertical ? "offsetHeight" : "offsetWidth";
        var scrollPositionProperty = isVertical ? "scrollTop" : "scrollLeft";
        var eDocument = this.gridOptionsWrapper.getDocument();
        var docElement = eDocument.documentElement;
        var popupParent = this.getPopupParent();
        var parentRect = popupParent.getBoundingClientRect();
        var documentRect = eDocument.documentElement.getBoundingClientRect();
        var isBody = popupParent === eDocument.body;
        var offsetSize = ePopup[offsetProperty];
        var getSize = isVertical ? getAbsoluteHeight : getAbsoluteWidth;
        var sizeOfParent = isBody ? getSize(docElement) + docElement[scrollPositionProperty] : popupParent[sizeProperty];
        if (isBody) {
          sizeOfParent -= Math.abs(documentRect[anchorProperty] - parentRect[anchorProperty]);
        }
        var max = sizeOfParent - offsetSize;
        return Math.min(Math.max(position, 0), Math.abs(max));
      };
      PopupService2.prototype.keepPopupPositionedRelativeTo = function(params) {
        var _this = this;
        var eParent = this.getPopupParent();
        var parentRect = eParent.getBoundingClientRect();
        var sourceRect = params.element.getBoundingClientRect();
        var initialDiffTop = parentRect.top - sourceRect.top;
        var initialDiffLeft = parentRect.left - sourceRect.left;
        var lastDiffTop = initialDiffTop;
        var lastDiffLeft = initialDiffLeft;
        var topPx = params.ePopup.style.top;
        var top = parseInt(topPx.substring(0, topPx.length - 1), 10);
        var leftPx = params.ePopup.style.left;
        var left = parseInt(leftPx.substring(0, leftPx.length - 1), 10);
        return new AgPromise(function(resolve) {
          _this.getFrameworkOverrides().setInterval(function() {
            var pRect = eParent.getBoundingClientRect();
            var sRect = params.element.getBoundingClientRect();
            var elementNotInDom = sRect.top == 0 && sRect.left == 0 && sRect.height == 0 && sRect.width == 0;
            if (elementNotInDom) {
              params.hidePopup();
              return;
            }
            var currentDiffTop = pRect.top - sRect.top;
            if (currentDiffTop != lastDiffTop) {
              var newTop = _this.keepXYWithinBounds(params.ePopup, top + initialDiffTop - currentDiffTop, DIRECTION.vertical);
              params.ePopup.style.top = newTop + "px";
            }
            lastDiffTop = currentDiffTop;
            var currentDiffLeft = pRect.left - sRect.left;
            if (currentDiffLeft != lastDiffLeft) {
              var newLeft = _this.keepXYWithinBounds(params.ePopup, left + initialDiffLeft - currentDiffLeft, DIRECTION.horizontal);
              params.ePopup.style.left = newLeft + "px";
            }
            lastDiffLeft = currentDiffLeft;
          }, 200).then(function(intervalId) {
            var result = function() {
              if (intervalId != null) {
                window.clearInterval(intervalId);
              }
            };
            resolve(result);
          });
        });
      };
      PopupService2.prototype.addPopup = function(params) {
        var _a;
        var _this = this;
        var modal = params.modal, eChild = params.eChild, closeOnEsc = params.closeOnEsc, closedCallback = params.closedCallback, click = params.click, alwaysOnTop = params.alwaysOnTop, afterGuiAttached = params.afterGuiAttached, positionCallback = params.positionCallback, anchorToElement = params.anchorToElement, ariaLabel = params.ariaLabel;
        var eDocument = this.gridOptionsWrapper.getDocument();
        var destroyPositionTracker = new AgPromise(function(resolve) {
          return resolve(function() {
          });
        });
        if (!eDocument) {
          console.warn("ag-grid: could not find the document, document is empty");
          return { hideFunc: function() {
          }, stopAnchoringPromise: destroyPositionTracker };
        }
        var pos = this.popupList.findIndex(function(popup2) {
          return popup2.element === eChild;
        });
        if (pos !== -1) {
          var popup = this.popupList[pos];
          return { hideFunc: popup.hideFunc, stopAnchoringPromise: popup.stopAnchoringPromise };
        }
        var ePopupParent = this.getPopupParent();
        if (eChild.style.top == null) {
          eChild.style.top = "0px";
        }
        if (eChild.style.left == null) {
          eChild.style.left = "0px";
        }
        var eWrapper = document.createElement("div");
        var allThemes = this.environment.getTheme().allThemes;
        if (allThemes.length) {
          (_a = eWrapper.classList).add.apply(_a, __spread$5(allThemes));
        }
        eWrapper.classList.add("ag-popup");
        eChild.classList.add(this.gridOptionsWrapper.isEnableRtl() ? "ag-rtl" : "ag-ltr", "ag-popup-child");
        if (!eChild.hasAttribute("role")) {
          setAriaRole(eChild, "dialog");
        }
        setAriaLabel(eChild, ariaLabel);
        if (this.focusService.isKeyboardMode()) {
          eChild.classList.add(FocusService.AG_KEYBOARD_FOCUS);
        }
        eWrapper.appendChild(eChild);
        ePopupParent.appendChild(eWrapper);
        if (alwaysOnTop) {
          this.setAlwaysOnTop(eWrapper, true);
        } else {
          this.bringPopupToFront(eWrapper);
        }
        var popupHidden = false;
        var hidePopupOnKeyboardEvent = function(event) {
          if (!eWrapper.contains(eDocument.activeElement)) {
            return;
          }
          var key = event.key;
          if (key === KeyCode.ESCAPE) {
            hidePopup({ keyboardEvent: event });
          }
        };
        var hidePopupOnMouseEvent = function(event) {
          return hidePopup({ mouseEvent: event });
        };
        var hidePopupOnTouchEvent = function(event) {
          return hidePopup({ touchEvent: event });
        };
        var hidePopup = function(popupParams) {
          if (popupParams === void 0) {
            popupParams = {};
          }
          var mouseEvent = popupParams.mouseEvent, touchEvent = popupParams.touchEvent, keyboardEvent = popupParams.keyboardEvent;
          if (_this.isEventFromCurrentPopup({ mouseEvent, touchEvent }, eChild) || _this.isEventSameChainAsOriginalEvent({ originalMouseEvent: click, mouseEvent, touchEvent }) || popupHidden) {
            return;
          }
          popupHidden = true;
          ePopupParent.removeChild(eWrapper);
          eDocument.removeEventListener("keydown", hidePopupOnKeyboardEvent);
          eDocument.removeEventListener("mousedown", hidePopupOnMouseEvent);
          eDocument.removeEventListener("touchstart", hidePopupOnTouchEvent);
          eDocument.removeEventListener("contextmenu", hidePopupOnMouseEvent);
          _this.eventService.removeEventListener(Events.EVENT_DRAG_STARTED, hidePopupOnMouseEvent);
          if (closedCallback) {
            closedCallback(mouseEvent || touchEvent || keyboardEvent);
          }
          _this.popupList = _this.popupList.filter(function(popup2) {
            return popup2.element !== eChild;
          });
          if (destroyPositionTracker) {
            destroyPositionTracker.then(function(destroyFunc) {
              return destroyFunc && destroyFunc();
            });
          }
        };
        if (afterGuiAttached) {
          afterGuiAttached({ hidePopup });
        }
        window.setTimeout(function() {
          if (closeOnEsc) {
            eDocument.addEventListener("keydown", hidePopupOnKeyboardEvent);
          }
          if (modal) {
            eDocument.addEventListener("mousedown", hidePopupOnMouseEvent);
            _this.eventService.addEventListener(Events.EVENT_DRAG_STARTED, hidePopupOnMouseEvent);
            eDocument.addEventListener("touchstart", hidePopupOnTouchEvent);
            eDocument.addEventListener("contextmenu", hidePopupOnMouseEvent);
          }
        }, 0);
        if (positionCallback) {
          positionCallback();
        }
        if (anchorToElement) {
          destroyPositionTracker = this.keepPopupPositionedRelativeTo({
            element: anchorToElement,
            ePopup: eChild,
            hidePopup
          });
        }
        this.popupList.push({
          element: eChild,
          wrapper: eWrapper,
          hideFunc: hidePopup,
          stopAnchoringPromise: destroyPositionTracker,
          instanceId: instanceIdSeq++,
          isAnchored: !!anchorToElement
        });
        return {
          hideFunc: hidePopup,
          stopAnchoringPromise: destroyPositionTracker
        };
      };
      PopupService2.prototype.hasAnchoredPopup = function() {
        return this.popupList.some(function(popup) {
          return popup.isAnchored;
        });
      };
      PopupService2.prototype.isEventFromCurrentPopup = function(params, target) {
        var mouseEvent = params.mouseEvent, touchEvent = params.touchEvent;
        var event = mouseEvent ? mouseEvent : touchEvent;
        if (!event) {
          return false;
        }
        var indexOfThisChild = this.popupList.findIndex(function(popup2) {
          return popup2.element === target;
        });
        if (indexOfThisChild === -1) {
          return false;
        }
        for (var i = indexOfThisChild; i < this.popupList.length; i++) {
          var popup = this.popupList[i];
          if (isElementInEventPath(popup.element, event)) {
            return true;
          }
        }
        return this.isElementWithinCustomPopup(event.target);
      };
      PopupService2.prototype.isElementWithinCustomPopup = function(el) {
        var eDocument = this.gridOptionsWrapper.getDocument();
        while (el && el !== eDocument.body) {
          if (el.classList.contains("ag-custom-component-popup") || el.parentElement === null) {
            return true;
          }
          el = el.parentElement;
        }
        return false;
      };
      PopupService2.prototype.isEventSameChainAsOriginalEvent = function(params) {
        var originalMouseEvent = params.originalMouseEvent, mouseEvent = params.mouseEvent, touchEvent = params.touchEvent;
        var mouseEventOrTouch = null;
        if (mouseEvent) {
          mouseEventOrTouch = mouseEvent;
        } else if (touchEvent) {
          mouseEventOrTouch = touchEvent.touches[0];
        }
        if (mouseEventOrTouch && originalMouseEvent) {
          var screenX_1 = mouseEvent ? mouseEvent.screenX : 0;
          var screenY_1 = mouseEvent ? mouseEvent.screenY : 0;
          var xMatch = Math.abs(originalMouseEvent.screenX - screenX_1) < 5;
          var yMatch = Math.abs(originalMouseEvent.screenY - screenY_1) < 5;
          if (xMatch && yMatch) {
            return true;
          }
        }
        return false;
      };
      PopupService2.prototype.getWrapper = function(ePopup) {
        while (!ePopup.classList.contains("ag-popup") && ePopup.parentElement) {
          ePopup = ePopup.parentElement;
        }
        return ePopup.classList.contains("ag-popup") ? ePopup : null;
      };
      PopupService2.prototype.setAlwaysOnTop = function(ePopup, alwaysOnTop) {
        var eWrapper = this.getWrapper(ePopup);
        if (!eWrapper) {
          return;
        }
        eWrapper.classList.toggle("ag-always-on-top", !!alwaysOnTop);
        if (alwaysOnTop) {
          this.bringPopupToFront(eWrapper);
        }
      };
      PopupService2.prototype.bringPopupToFront = function(ePopup) {
        var parent = this.getPopupParent();
        var popupList = Array.prototype.slice.call(parent.querySelectorAll(".ag-popup"));
        var popupLen = popupList.length;
        var alwaysOnTopList = Array.prototype.slice.call(parent.querySelectorAll(".ag-popup.ag-always-on-top"));
        var onTopLength = alwaysOnTopList.length;
        var eWrapper = this.getWrapper(ePopup);
        if (!eWrapper || popupLen <= 1 || !parent.contains(ePopup)) {
          return;
        }
        var pos = popupList.indexOf(eWrapper);
        var innerEls = eWrapper.querySelectorAll("div");
        var innerElsScrollMap = [];
        innerEls.forEach(function(el) {
          if (el.scrollTop !== 0) {
            innerElsScrollMap.push([el, el.scrollTop]);
          }
        });
        if (onTopLength) {
          var isPopupAlwaysOnTop = eWrapper.classList.contains("ag-always-on-top");
          if (isPopupAlwaysOnTop) {
            if (pos !== popupLen - 1) {
              last(alwaysOnTopList).insertAdjacentElement("afterend", eWrapper);
            }
          } else if (pos !== popupLen - onTopLength - 1) {
            alwaysOnTopList[0].insertAdjacentElement("beforebegin", eWrapper);
          }
        } else if (pos !== popupLen - 1) {
          last(popupList).insertAdjacentElement("afterend", eWrapper);
        }
        while (innerElsScrollMap.length) {
          var currentEl = innerElsScrollMap.pop();
          currentEl[0].scrollTop = currentEl[1];
        }
        var params = {
          type: "popupToFront",
          api: this.gridOptionsWrapper.getApi(),
          columnApi: this.gridOptionsWrapper.getColumnApi(),
          eWrapper
        };
        this.eventService.dispatchEvent(params);
      };
      var PopupService_1;
      PopupService2.WAIT_FOR_POPUP_CONTENT_RESIZE = 200;
      __decorate$O([
        Autowired("environment")
      ], PopupService2.prototype, "environment", void 0);
      __decorate$O([
        Autowired("focusService")
      ], PopupService2.prototype, "focusService", void 0);
      __decorate$O([
        Autowired("ctrlsService")
      ], PopupService2.prototype, "ctrlsService", void 0);
      __decorate$O([
        Autowired("resizeObserverService")
      ], PopupService2.prototype, "resizeObserverService", void 0);
      __decorate$O([
        Autowired("gridOptionsWrapper")
      ], PopupService2.prototype, "gridOptionsWrapper", void 0);
      __decorate$O([
        PostConstruct
      ], PopupService2.prototype, "postConstruct", null);
      PopupService2 = PopupService_1 = __decorate$O([
        Bean("popupService")
      ], PopupService2);
      return PopupService2;
    }(BeanStub);
    __extends$L = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$N = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    VirtualList = function(_super) {
      __extends$L(VirtualList2, _super);
      function VirtualList2(cssIdentifier, ariaRole, listName) {
        if (cssIdentifier === void 0) {
          cssIdentifier = "default";
        }
        if (ariaRole === void 0) {
          ariaRole = "listbox";
        }
        var _this = _super.call(this, VirtualList2.getTemplate(cssIdentifier)) || this;
        _this.cssIdentifier = cssIdentifier;
        _this.ariaRole = ariaRole;
        _this.listName = listName;
        _this.renderedRows = /* @__PURE__ */ new Map();
        _this.rowHeight = 20;
        return _this;
      }
      VirtualList2.prototype.postConstruct = function() {
        var _this = this;
        this.addScrollListener();
        this.rowHeight = this.getItemHeight();
        this.addResizeObserver();
        this.initialiseTabGuard({
          onFocusIn: function(e) {
            return _this.onFocusIn(e);
          },
          onFocusOut: function(e) {
            return _this.onFocusOut(e);
          },
          focusInnerElement: function(fromBottom) {
            return _this.focusInnerElement(fromBottom);
          },
          onTabKeyDown: function(e) {
            return _this.onTabKeyDown(e);
          },
          handleKeyDown: function(e) {
            return _this.handleKeyDown(e);
          }
        });
        this.setAriaProperties();
      };
      VirtualList2.prototype.setAriaProperties = function() {
        var translate = this.gridOptionsWrapper.getLocaleTextFunc();
        var listName = translate("ariaDefaultListName", this.listName || "List");
        var ariaEl = this.eContainer;
        setAriaRole(ariaEl, this.ariaRole);
        setAriaLabel(ariaEl, listName);
      };
      VirtualList2.prototype.addResizeObserver = function() {
        var listener = this.drawVirtualRows.bind(this);
        var destroyObserver = this.resizeObserverService.observeResize(this.getGui(), listener);
        this.addDestroyFunc(destroyObserver);
      };
      VirtualList2.prototype.focusInnerElement = function(fromBottom) {
        this.focusRow(fromBottom ? this.model.getRowCount() - 1 : 0);
      };
      VirtualList2.prototype.onFocusIn = function(e) {
        var target = e.target;
        if (target.classList.contains("ag-virtual-list-item")) {
          this.lastFocusedRowIndex = getAriaPosInSet(target) - 1;
        }
        return false;
      };
      VirtualList2.prototype.onFocusOut = function(e) {
        if (!this.getFocusableElement().contains(e.relatedTarget)) {
          this.lastFocusedRowIndex = null;
        }
        return false;
      };
      VirtualList2.prototype.handleKeyDown = function(e) {
        switch (e.key) {
          case KeyCode.UP:
          case KeyCode.DOWN:
            if (this.navigate(e.key === KeyCode.UP)) {
              e.preventDefault();
            }
            break;
        }
      };
      VirtualList2.prototype.onTabKeyDown = function(e) {
        if (this.navigate(e.shiftKey)) {
          e.preventDefault();
        } else {
          this.focusService.focusInto(this.getGui(), !e.shiftKey);
        }
      };
      VirtualList2.prototype.navigate = function(up) {
        if (this.lastFocusedRowIndex == null) {
          return false;
        }
        var nextRow = this.lastFocusedRowIndex + (up ? -1 : 1);
        if (nextRow < 0 || nextRow >= this.model.getRowCount()) {
          return false;
        }
        this.focusRow(nextRow);
        return true;
      };
      VirtualList2.prototype.getLastFocusedRow = function() {
        return this.lastFocusedRowIndex;
      };
      VirtualList2.prototype.focusRow = function(rowNumber) {
        var _this = this;
        this.ensureIndexVisible(rowNumber);
        window.setTimeout(function() {
          if (!_this.isAlive()) {
            return;
          }
          var renderedRow = _this.renderedRows.get(rowNumber);
          if (renderedRow) {
            renderedRow.eDiv.focus();
          }
        }, 10);
      };
      VirtualList2.prototype.getComponentAt = function(rowIndex) {
        var comp = this.renderedRows.get(rowIndex);
        return comp && comp.rowComponent;
      };
      VirtualList2.prototype.forEachRenderedRow = function(func) {
        this.renderedRows.forEach(function(value, key) {
          return func(value.rowComponent, key);
        });
      };
      VirtualList2.getTemplate = function(cssIdentifier) {
        return '\n            <div class="ag-virtual-list-viewport ag-' + cssIdentifier + '-virtual-list-viewport" role="presentation">\n                <div class="ag-virtual-list-container ag-' + cssIdentifier + '-virtual-list-container" ref="eContainer"></div>\n            </div>';
      };
      VirtualList2.prototype.getItemHeight = function() {
        return this.gridOptionsWrapper.getListItemHeight();
      };
      VirtualList2.prototype.ensureIndexVisible = function(index) {
        var lastRow = this.model.getRowCount();
        if (typeof index !== "number" || index < 0 || index >= lastRow) {
          console.warn("AG Grid: invalid row index for ensureIndexVisible: " + index);
          return;
        }
        var rowTopPixel = index * this.rowHeight;
        var rowBottomPixel = rowTopPixel + this.rowHeight;
        var eGui = this.getGui();
        var viewportTopPixel = eGui.scrollTop;
        var viewportHeight = eGui.offsetHeight;
        var viewportBottomPixel = viewportTopPixel + viewportHeight;
        var viewportScrolledPastRow = viewportTopPixel > rowTopPixel;
        var viewportScrolledBeforeRow = viewportBottomPixel < rowBottomPixel;
        if (viewportScrolledPastRow) {
          eGui.scrollTop = rowTopPixel;
        } else if (viewportScrolledBeforeRow) {
          var newScrollPosition = rowBottomPixel - viewportHeight;
          eGui.scrollTop = newScrollPosition;
        }
      };
      VirtualList2.prototype.setComponentCreator = function(componentCreator) {
        this.componentCreator = componentCreator;
      };
      VirtualList2.prototype.getRowHeight = function() {
        return this.rowHeight;
      };
      VirtualList2.prototype.getScrollTop = function() {
        return this.getGui().scrollTop;
      };
      VirtualList2.prototype.setRowHeight = function(rowHeight) {
        this.rowHeight = rowHeight;
        this.refresh();
      };
      VirtualList2.prototype.refresh = function() {
        var _this = this;
        if (this.model == null || !this.isAlive()) {
          return;
        }
        var rowCount = this.model.getRowCount();
        this.eContainer.style.height = rowCount * this.rowHeight + "px";
        waitUntil(function() {
          return _this.eContainer.clientHeight >= rowCount * _this.rowHeight;
        }, function() {
          if (!_this.isAlive()) {
            return;
          }
          _this.clearVirtualRows();
          _this.drawVirtualRows();
        });
      };
      VirtualList2.prototype.clearVirtualRows = function() {
        var _this = this;
        this.renderedRows.forEach(function(_2, rowIndex) {
          return _this.removeRow(rowIndex);
        });
      };
      VirtualList2.prototype.drawVirtualRows = function() {
        if (!this.isAlive()) {
          return;
        }
        var gui = this.getGui();
        var topPixel = gui.scrollTop;
        var bottomPixel = topPixel + gui.offsetHeight;
        var firstRow = Math.floor(topPixel / this.rowHeight);
        var lastRow = Math.floor(bottomPixel / this.rowHeight);
        this.ensureRowsRendered(firstRow, lastRow);
      };
      VirtualList2.prototype.ensureRowsRendered = function(start, finish) {
        var _this = this;
        this.renderedRows.forEach(function(_2, rowIndex2) {
          if ((rowIndex2 < start || rowIndex2 > finish) && rowIndex2 !== _this.lastFocusedRowIndex) {
            _this.removeRow(rowIndex2);
          }
        });
        for (var rowIndex = start; rowIndex <= finish; rowIndex++) {
          if (this.renderedRows.has(rowIndex)) {
            continue;
          }
          if (rowIndex < this.model.getRowCount()) {
            this.insertRow(rowIndex);
          }
        }
      };
      VirtualList2.prototype.insertRow = function(rowIndex) {
        var _this = this;
        var value = this.model.getRow(rowIndex);
        var eDiv = document.createElement("div");
        eDiv.classList.add("ag-virtual-list-item", "ag-" + this.cssIdentifier + "-virtual-list-item");
        setAriaRole(eDiv, this.ariaRole === "tree" ? "treeitem" : "option");
        setAriaSetSize(eDiv, this.model.getRowCount());
        setAriaPosInSet(eDiv, rowIndex + 1);
        eDiv.setAttribute("tabindex", "-1");
        if (typeof this.model.isRowSelected === "function") {
          var isSelected = this.model.isRowSelected(rowIndex);
          setAriaSelected(eDiv, !!isSelected);
          setAriaChecked(eDiv, isSelected);
        }
        eDiv.style.height = this.rowHeight + "px";
        eDiv.style.top = this.rowHeight * rowIndex + "px";
        var rowComponent = this.componentCreator(value, eDiv);
        rowComponent.addGuiEventListener("focusin", function() {
          return _this.lastFocusedRowIndex = rowIndex;
        });
        eDiv.appendChild(rowComponent.getGui());
        if (this.renderedRows.has(rowIndex - 1)) {
          this.renderedRows.get(rowIndex - 1).eDiv.insertAdjacentElement("afterend", eDiv);
        } else if (this.renderedRows.has(rowIndex + 1)) {
          this.renderedRows.get(rowIndex + 1).eDiv.insertAdjacentElement("beforebegin", eDiv);
        } else {
          this.eContainer.appendChild(eDiv);
        }
        this.renderedRows.set(rowIndex, { rowComponent, eDiv });
      };
      VirtualList2.prototype.removeRow = function(rowIndex) {
        var component = this.renderedRows.get(rowIndex);
        this.eContainer.removeChild(component.eDiv);
        this.destroyBean(component.rowComponent);
        this.renderedRows.delete(rowIndex);
      };
      VirtualList2.prototype.addScrollListener = function() {
        var _this = this;
        this.addGuiEventListener("scroll", function() {
          return _this.drawVirtualRows();
        });
      };
      VirtualList2.prototype.setModel = function(model) {
        this.model = model;
      };
      VirtualList2.prototype.destroy = function() {
        if (!this.isAlive()) {
          return;
        }
        this.clearVirtualRows();
        _super.prototype.destroy.call(this);
      };
      __decorate$N([
        Autowired("resizeObserverService")
      ], VirtualList2.prototype, "resizeObserverService", void 0);
      __decorate$N([
        Autowired("focusService")
      ], VirtualList2.prototype, "focusService", void 0);
      __decorate$N([
        RefSelector("eContainer")
      ], VirtualList2.prototype, "eContainer", void 0);
      __decorate$N([
        PostConstruct
      ], VirtualList2.prototype, "postConstruct", null);
      return VirtualList2;
    }(TabGuardComp);
    OUTSIDE_ANGULAR_EVENTS = ["mouseover", "mouseout", "mouseenter", "mouseleave"];
    PASSIVE_EVENTS = ["touchstart", "touchend", "touchmove", "touchcancel"];
    VanillaFrameworkOverrides = function() {
      function VanillaFrameworkOverrides2() {
        this.isOutsideAngular = function(eventType) {
          return includes(OUTSIDE_ANGULAR_EVENTS, eventType);
        };
      }
      VanillaFrameworkOverrides2.prototype.setTimeout = function(action, timeout) {
        window.setTimeout(action, timeout);
      };
      VanillaFrameworkOverrides2.prototype.setInterval = function(action, timeout) {
        return new AgPromise(function(resolve) {
          resolve(window.setInterval(action, timeout));
        });
      };
      VanillaFrameworkOverrides2.prototype.addEventListener = function(element, type, listener, useCapture) {
        var isPassive = includes(PASSIVE_EVENTS, type);
        element.addEventListener(type, listener, { capture: !!useCapture, passive: isPassive });
      };
      VanillaFrameworkOverrides2.prototype.dispatchEvent = function(eventType, listener, global2) {
        listener();
      };
      VanillaFrameworkOverrides2.prototype.frameworkComponent = function(name) {
        return null;
      };
      VanillaFrameworkOverrides2.prototype.isFrameworkComponent = function(comp) {
        return false;
      };
      return VanillaFrameworkOverrides2;
    }();
    __extends$K = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$M = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __read$5 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread$4 = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read$5(arguments[i]));
      return ar;
    };
    CellNavigationService = function(_super) {
      __extends$K(CellNavigationService2, _super);
      function CellNavigationService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      CellNavigationService2.prototype.getNextCellToFocus = function(key, focusedCell, ctrlPressed) {
        if (ctrlPressed === void 0) {
          ctrlPressed = false;
        }
        if (ctrlPressed) {
          return this.getNextCellToFocusWithCtrlPressed(key, focusedCell);
        }
        return this.getNextCellToFocusWithoutCtrlPressed(key, focusedCell);
      };
      CellNavigationService2.prototype.getNextCellToFocusWithCtrlPressed = function(key, focusedCell) {
        var upKey = key === KeyCode.UP;
        var downKey = key === KeyCode.DOWN;
        var leftKey = key === KeyCode.LEFT;
        var column;
        var rowIndex;
        if (upKey || downKey) {
          rowIndex = upKey ? this.paginationProxy.getPageFirstRow() : this.paginationProxy.getPageLastRow();
          column = focusedCell.column;
        } else {
          var allColumns = this.columnModel.getAllDisplayedColumns();
          var isRtl = this.gridOptionsWrapper.isEnableRtl();
          rowIndex = focusedCell.rowIndex;
          column = leftKey !== isRtl ? allColumns[0] : last(allColumns);
        }
        return {
          rowIndex,
          rowPinned: null,
          column
        };
      };
      CellNavigationService2.prototype.getNextCellToFocusWithoutCtrlPressed = function(key, focusedCell) {
        var pointer = focusedCell;
        var finished = false;
        while (!finished) {
          switch (key) {
            case KeyCode.UP:
              pointer = this.getCellAbove(pointer);
              break;
            case KeyCode.DOWN:
              pointer = this.getCellBelow(pointer);
              break;
            case KeyCode.RIGHT:
              if (this.gridOptionsWrapper.isEnableRtl()) {
                pointer = this.getCellToLeft(pointer);
              } else {
                pointer = this.getCellToRight(pointer);
              }
              break;
            case KeyCode.LEFT:
              if (this.gridOptionsWrapper.isEnableRtl()) {
                pointer = this.getCellToRight(pointer);
              } else {
                pointer = this.getCellToLeft(pointer);
              }
              break;
            default:
              pointer = null;
              console.warn("AG Grid: unknown key for navigation " + key);
              break;
          }
          if (pointer) {
            finished = this.isCellGoodToFocusOn(pointer);
          } else {
            finished = true;
          }
        }
        return pointer;
      };
      CellNavigationService2.prototype.isCellGoodToFocusOn = function(gridCell) {
        var column = gridCell.column;
        var rowNode;
        switch (gridCell.rowPinned) {
          case Constants.PINNED_TOP:
            rowNode = this.pinnedRowModel.getPinnedTopRow(gridCell.rowIndex);
            break;
          case Constants.PINNED_BOTTOM:
            rowNode = this.pinnedRowModel.getPinnedBottomRow(gridCell.rowIndex);
            break;
          default:
            rowNode = this.rowModel.getRow(gridCell.rowIndex);
            break;
        }
        if (!rowNode) {
          return false;
        }
        var suppressNavigable = column.isSuppressNavigable(rowNode);
        return !suppressNavigable;
      };
      CellNavigationService2.prototype.getCellToLeft = function(lastCell) {
        if (!lastCell) {
          return null;
        }
        var colToLeft = this.columnModel.getDisplayedColBefore(lastCell.column);
        if (!colToLeft) {
          return null;
        }
        return {
          rowIndex: lastCell.rowIndex,
          column: colToLeft,
          rowPinned: lastCell.rowPinned
        };
      };
      CellNavigationService2.prototype.getCellToRight = function(lastCell) {
        if (!lastCell) {
          return null;
        }
        var colToRight = this.columnModel.getDisplayedColAfter(lastCell.column);
        if (!colToRight) {
          return null;
        }
        return {
          rowIndex: lastCell.rowIndex,
          column: colToRight,
          rowPinned: lastCell.rowPinned
        };
      };
      CellNavigationService2.prototype.getRowBelow = function(rowPosition) {
        var index = rowPosition.rowIndex;
        var pinned = rowPosition.rowPinned;
        if (this.isLastRowInContainer(rowPosition)) {
          switch (pinned) {
            case Constants.PINNED_BOTTOM:
              return null;
            case Constants.PINNED_TOP:
              if (this.rowModel.isRowsToRender()) {
                return { rowIndex: this.paginationProxy.getPageFirstRow(), rowPinned: null };
              }
              if (this.pinnedRowModel.isRowsToRender(Constants.PINNED_BOTTOM)) {
                return { rowIndex: 0, rowPinned: Constants.PINNED_BOTTOM };
              }
              return null;
            default:
              if (this.pinnedRowModel.isRowsToRender(Constants.PINNED_BOTTOM)) {
                return { rowIndex: 0, rowPinned: Constants.PINNED_BOTTOM };
              }
              return null;
          }
        }
        var rowNode = this.rowModel.getRow(rowPosition.rowIndex);
        var nextStickyPosition = this.getNextStickyPosition(rowNode);
        if (nextStickyPosition) {
          return nextStickyPosition;
        }
        return { rowIndex: index + 1, rowPinned: pinned };
      };
      CellNavigationService2.prototype.getNextStickyPosition = function(rowNode, up) {
        if (!this.gridOptionsWrapper.isGroupRowsSticky() || !rowNode || !rowNode.sticky) {
          return;
        }
        var stickyRowCtrls = __spread$4(this.rowRenderer.getStickyTopRowCtrls()).sort(function(a, b) {
          return a.getRowNode().rowIndex - b.getRowNode().rowIndex;
        });
        var diff = up ? -1 : 1;
        var idx = stickyRowCtrls.findIndex(function(ctrl) {
          return ctrl.getRowNode().rowIndex === rowNode.rowIndex;
        });
        var nextCtrl = stickyRowCtrls[idx + diff];
        if (nextCtrl) {
          return { rowIndex: nextCtrl.getRowNode().rowIndex, rowPinned: null };
        }
      };
      CellNavigationService2.prototype.getCellBelow = function(lastCell) {
        if (!lastCell) {
          return null;
        }
        var rowBelow = this.getRowBelow(lastCell);
        if (rowBelow) {
          return {
            rowIndex: rowBelow.rowIndex,
            column: lastCell.column,
            rowPinned: rowBelow.rowPinned
          };
        }
        return null;
      };
      CellNavigationService2.prototype.isLastRowInContainer = function(rowPosition) {
        var pinned = rowPosition.rowPinned;
        var index = rowPosition.rowIndex;
        if (pinned === Constants.PINNED_TOP) {
          var lastTopIndex = this.pinnedRowModel.getPinnedTopRowData().length - 1;
          return lastTopIndex <= index;
        }
        if (pinned === Constants.PINNED_BOTTOM) {
          var lastBottomIndex = this.pinnedRowModel.getPinnedBottomRowData().length - 1;
          return lastBottomIndex <= index;
        }
        var lastBodyIndex = this.paginationProxy.getPageLastRow();
        return lastBodyIndex <= index;
      };
      CellNavigationService2.prototype.getRowAbove = function(rowPosition) {
        var index = rowPosition.rowIndex;
        var pinned = rowPosition.rowPinned;
        var isFirstRow = pinned ? index === 0 : index === this.paginationProxy.getPageFirstRow();
        if (isFirstRow) {
          if (pinned === Constants.PINNED_TOP) {
            return null;
          }
          if (!pinned) {
            if (this.pinnedRowModel.isRowsToRender(Constants.PINNED_TOP)) {
              return this.getLastFloatingTopRow();
            }
            return null;
          }
          if (this.rowModel.isRowsToRender()) {
            return this.getLastBodyCell();
          }
          if (this.pinnedRowModel.isRowsToRender(Constants.PINNED_TOP)) {
            return this.getLastFloatingTopRow();
          }
          return null;
        }
        var rowNode = this.rowModel.getRow(rowPosition.rowIndex);
        var nextStickyPosition = this.getNextStickyPosition(rowNode, true);
        if (nextStickyPosition) {
          return nextStickyPosition;
        }
        return { rowIndex: index - 1, rowPinned: pinned };
      };
      CellNavigationService2.prototype.getCellAbove = function(lastCell) {
        if (!lastCell) {
          return null;
        }
        var rowAbove = this.getRowAbove({ rowIndex: lastCell.rowIndex, rowPinned: lastCell.rowPinned });
        if (rowAbove) {
          return {
            rowIndex: rowAbove.rowIndex,
            column: lastCell.column,
            rowPinned: rowAbove.rowPinned
          };
        }
        return null;
      };
      CellNavigationService2.prototype.getLastBodyCell = function() {
        var lastBodyRow = this.paginationProxy.getPageLastRow();
        return { rowIndex: lastBodyRow, rowPinned: null };
      };
      CellNavigationService2.prototype.getLastFloatingTopRow = function() {
        var lastFloatingRow = this.pinnedRowModel.getPinnedTopRowData().length - 1;
        return { rowIndex: lastFloatingRow, rowPinned: Constants.PINNED_TOP };
      };
      CellNavigationService2.prototype.getNextTabbedCell = function(gridCell, backwards) {
        if (backwards) {
          return this.getNextTabbedCellBackwards(gridCell);
        }
        return this.getNextTabbedCellForwards(gridCell);
      };
      CellNavigationService2.prototype.getNextTabbedCellForwards = function(gridCell) {
        var displayedColumns = this.columnModel.getAllDisplayedColumns();
        var newRowIndex = gridCell.rowIndex;
        var newFloating = gridCell.rowPinned;
        var newColumn = this.columnModel.getDisplayedColAfter(gridCell.column);
        if (!newColumn) {
          newColumn = displayedColumns[0];
          var rowBelow = this.getRowBelow(gridCell);
          if (missing(rowBelow)) {
            return null;
          }
          if (!rowBelow.rowPinned && !this.paginationProxy.isRowInPage(rowBelow)) {
            return null;
          }
          newRowIndex = rowBelow ? rowBelow.rowIndex : null;
          newFloating = rowBelow ? rowBelow.rowPinned : null;
        }
        return { rowIndex: newRowIndex, column: newColumn, rowPinned: newFloating };
      };
      CellNavigationService2.prototype.getNextTabbedCellBackwards = function(gridCell) {
        var displayedColumns = this.columnModel.getAllDisplayedColumns();
        var newRowIndex = gridCell.rowIndex;
        var newFloating = gridCell.rowPinned;
        var newColumn = this.columnModel.getDisplayedColBefore(gridCell.column);
        if (!newColumn) {
          newColumn = last(displayedColumns);
          var rowAbove = this.getRowAbove({ rowIndex: gridCell.rowIndex, rowPinned: gridCell.rowPinned });
          if (missing(rowAbove)) {
            return null;
          }
          if (!rowAbove.rowPinned && !this.paginationProxy.isRowInPage(rowAbove)) {
            return null;
          }
          newRowIndex = rowAbove ? rowAbove.rowIndex : null;
          newFloating = rowAbove ? rowAbove.rowPinned : null;
        }
        return { rowIndex: newRowIndex, column: newColumn, rowPinned: newFloating };
      };
      __decorate$M([
        Autowired("columnModel")
      ], CellNavigationService2.prototype, "columnModel", void 0);
      __decorate$M([
        Autowired("rowModel")
      ], CellNavigationService2.prototype, "rowModel", void 0);
      __decorate$M([
        Autowired("rowRenderer")
      ], CellNavigationService2.prototype, "rowRenderer", void 0);
      __decorate$M([
        Autowired("pinnedRowModel")
      ], CellNavigationService2.prototype, "pinnedRowModel", void 0);
      __decorate$M([
        Autowired("paginationProxy")
      ], CellNavigationService2.prototype, "paginationProxy", void 0);
      CellNavigationService2 = __decorate$M([
        Bean("cellNavigationService")
      ], CellNavigationService2);
      return CellNavigationService2;
    }(BeanStub);
    __extends$J = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$L = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param$5 = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    AlignedGridsService = function(_super) {
      __extends$J(AlignedGridsService2, _super);
      function AlignedGridsService2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.consuming = false;
        return _this;
      }
      AlignedGridsService2.prototype.setBeans = function(loggerFactory) {
        this.logger = loggerFactory.create("AlignedGridsService");
      };
      AlignedGridsService2.prototype.init = function() {
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_MOVED, this.fireColumnEvent.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VISIBLE, this.fireColumnEvent.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PINNED, this.fireColumnEvent.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_GROUP_OPENED, this.fireColumnEvent.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_RESIZED, this.fireColumnEvent.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_BODY_SCROLL, this.fireScrollEvent.bind(this));
      };
      AlignedGridsService2.prototype.fireEvent = function(callback) {
        if (this.consuming) {
          return;
        }
        var otherGrids = this.gridOptionsWrapper.getAlignedGrids();
        if (otherGrids) {
          otherGrids.forEach(function(otherGridOptions) {
            if (otherGridOptions.api) {
              var alignedGridService = otherGridOptions.api.__getAlignedGridService();
              callback(alignedGridService);
            }
          });
        }
      };
      AlignedGridsService2.prototype.onEvent = function(callback) {
        this.consuming = true;
        callback();
        this.consuming = false;
      };
      AlignedGridsService2.prototype.fireColumnEvent = function(event) {
        this.fireEvent(function(alignedGridsService) {
          alignedGridsService.onColumnEvent(event);
        });
      };
      AlignedGridsService2.prototype.fireScrollEvent = function(event) {
        if (event.direction !== "horizontal") {
          return;
        }
        this.fireEvent(function(alignedGridsService) {
          alignedGridsService.onScrollEvent(event);
        });
      };
      AlignedGridsService2.prototype.onScrollEvent = function(event) {
        var _this = this;
        this.onEvent(function() {
          var gridBodyCon = _this.ctrlsService.getGridBodyCtrl();
          gridBodyCon.getScrollFeature().setHorizontalScrollPosition(event.left);
        });
      };
      AlignedGridsService2.prototype.getMasterColumns = function(event) {
        var result = [];
        if (event.columns) {
          event.columns.forEach(function(column) {
            result.push(column);
          });
        } else if (event.column) {
          result.push(event.column);
        }
        return result;
      };
      AlignedGridsService2.prototype.getColumnIds = function(event) {
        var result = [];
        if (event.columns) {
          event.columns.forEach(function(column) {
            result.push(column.getColId());
          });
        } else if (event.column) {
          result.push(event.column.getColId());
        }
        return result;
      };
      AlignedGridsService2.prototype.onColumnEvent = function(event) {
        var _this = this;
        this.onEvent(function() {
          switch (event.type) {
            case Events.EVENT_COLUMN_MOVED:
            case Events.EVENT_COLUMN_VISIBLE:
            case Events.EVENT_COLUMN_PINNED:
            case Events.EVENT_COLUMN_RESIZED:
              var colEvent = event;
              _this.processColumnEvent(colEvent);
              break;
            case Events.EVENT_COLUMN_GROUP_OPENED:
              var groupOpenedEvent = event;
              _this.processGroupOpenedEvent(groupOpenedEvent);
              break;
            case Events.EVENT_COLUMN_PIVOT_CHANGED:
              console.warn("AG Grid: pivoting is not supported with aligned grids. You can only use one of these features at a time in a grid.");
              break;
          }
        });
      };
      AlignedGridsService2.prototype.processGroupOpenedEvent = function(groupOpenedEvent) {
        var masterColumnGroup = groupOpenedEvent.columnGroup;
        var otherColumnGroup = null;
        if (masterColumnGroup) {
          var groupId = masterColumnGroup.getGroupId();
          otherColumnGroup = this.columnModel.getProvidedColumnGroup(groupId);
        }
        if (masterColumnGroup && !otherColumnGroup) {
          return;
        }
        this.logger.log("onColumnEvent-> processing " + groupOpenedEvent + " expanded = " + masterColumnGroup.isExpanded());
        this.columnModel.setColumnGroupOpened(otherColumnGroup, masterColumnGroup.isExpanded(), "alignedGridChanged");
      };
      AlignedGridsService2.prototype.processColumnEvent = function(colEvent) {
        var _this = this;
        var _a;
        var masterColumn = colEvent.column;
        var otherColumn = null;
        if (masterColumn) {
          otherColumn = this.columnModel.getPrimaryColumn(masterColumn.getColId());
        }
        if (masterColumn && !otherColumn) {
          return;
        }
        var masterColumns = this.getMasterColumns(colEvent);
        switch (colEvent.type) {
          case Events.EVENT_COLUMN_MOVED:
            {
              var movedEvent = colEvent;
              var srcColState = colEvent.columnApi.getColumnState();
              var destColState = srcColState.map(function(s) {
                return { colId: s.colId };
              });
              this.columnModel.applyColumnState({ state: destColState, applyOrder: true }, "alignedGridChanged");
              this.logger.log("onColumnEvent-> processing " + colEvent.type + " toIndex = " + movedEvent.toIndex);
            }
            break;
          case Events.EVENT_COLUMN_VISIBLE:
            {
              var visibleEvent = colEvent;
              var srcColState = colEvent.columnApi.getColumnState();
              var destColState = srcColState.map(function(s) {
                return { colId: s.colId, hide: s.hide };
              });
              this.columnModel.applyColumnState({ state: destColState }, "alignedGridChanged");
              this.logger.log("onColumnEvent-> processing " + colEvent.type + " visible = " + visibleEvent.visible);
            }
            break;
          case Events.EVENT_COLUMN_PINNED:
            {
              var pinnedEvent = colEvent;
              var srcColState = colEvent.columnApi.getColumnState();
              var destColState = srcColState.map(function(s) {
                return { colId: s.colId, pinned: s.pinned };
              });
              this.columnModel.applyColumnState({ state: destColState }, "alignedGridChanged");
              this.logger.log("onColumnEvent-> processing " + colEvent.type + " pinned = " + pinnedEvent.pinned);
            }
            break;
          case Events.EVENT_COLUMN_RESIZED:
            var resizedEvent = colEvent;
            var columnWidths_1 = {};
            masterColumns.forEach(function(column) {
              _this.logger.log("onColumnEvent-> processing " + colEvent.type + " actualWidth = " + column.getActualWidth());
              columnWidths_1[column.getId()] = { key: column.getColId(), newWidth: column.getActualWidth() };
            });
            (_a = resizedEvent.flexColumns) === null || _a === void 0 ? void 0 : _a.forEach(function(col) {
              if (columnWidths_1[col.getId()]) {
                delete columnWidths_1[col.getId()];
              }
            });
            this.columnModel.setColumnWidths(Object.values(columnWidths_1), false, resizedEvent.finished, "alignedGridChanged");
            break;
        }
        var gridBodyCon = this.ctrlsService.getGridBodyCtrl();
        var isVerticalScrollShowing2 = gridBodyCon.isVerticalScrollShowing();
        var alignedGrids = this.gridOptionsWrapper.getAlignedGrids();
        if (alignedGrids) {
          alignedGrids.forEach(function(grid) {
            if (grid.api) {
              grid.api.setAlwaysShowVerticalScroll(isVerticalScrollShowing2);
            }
          });
        }
      };
      __decorate$L([
        Autowired("columnModel")
      ], AlignedGridsService2.prototype, "columnModel", void 0);
      __decorate$L([
        Autowired("ctrlsService")
      ], AlignedGridsService2.prototype, "ctrlsService", void 0);
      __decorate$L([
        __param$5(0, Qualifier("loggerFactory"))
      ], AlignedGridsService2.prototype, "setBeans", null);
      __decorate$L([
        PostConstruct
      ], AlignedGridsService2.prototype, "init", null);
      AlignedGridsService2 = __decorate$L([
        Bean("alignedGridsService")
      ], AlignedGridsService2);
      return AlignedGridsService2;
    }(BeanStub);
    __extends$I = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$K = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param$4 = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    SelectionService = function(_super) {
      __extends$I(SelectionService2, _super);
      function SelectionService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      SelectionService2.prototype.setBeans = function(loggerFactory) {
        this.logger = loggerFactory.create("selectionService");
        this.reset();
      };
      SelectionService2.prototype.init = function() {
        this.groupSelectsChildren = this.gridOptionsWrapper.isGroupSelectsChildren();
        this.addManagedListener(this.eventService, Events.EVENT_ROW_SELECTED, this.onRowSelected.bind(this));
      };
      SelectionService2.prototype.setLastSelectedNode = function(rowNode) {
        this.lastSelectedNode = rowNode;
      };
      SelectionService2.prototype.getLastSelectedNode = function() {
        return this.lastSelectedNode;
      };
      SelectionService2.prototype.getSelectedNodes = function() {
        var selectedNodes = [];
        iterateObject(this.selectedNodes, function(key, rowNode) {
          if (rowNode) {
            selectedNodes.push(rowNode);
          }
        });
        return selectedNodes;
      };
      SelectionService2.prototype.getSelectedRows = function() {
        var selectedRows = [];
        iterateObject(this.selectedNodes, function(key, rowNode) {
          if (rowNode && rowNode.data) {
            selectedRows.push(rowNode.data);
          }
        });
        return selectedRows;
      };
      SelectionService2.prototype.removeGroupsFromSelection = function() {
        var _this = this;
        iterateObject(this.selectedNodes, function(key, rowNode) {
          if (rowNode && rowNode.group) {
            _this.selectedNodes[rowNode.id] = void 0;
          }
        });
      };
      SelectionService2.prototype.updateGroupsFromChildrenSelections = function(changedPath) {
        if (!this.gridOptionsWrapper.isGroupSelectsChildren()) {
          return;
        }
        if (this.rowModel.getType() !== Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {
          return;
        }
        var clientSideRowModel = this.rowModel;
        var rootNode = clientSideRowModel.getRootNode();
        if (!changedPath) {
          changedPath = new ChangedPath(true, rootNode);
          changedPath.setInactive();
        }
        changedPath.forEachChangedNodeDepthFirst(function(rowNode) {
          if (rowNode !== rootNode) {
            var selected = rowNode.calculateSelectedFromChildren();
            rowNode.selectThisNode(selected === null ? false : selected);
          }
        });
      };
      SelectionService2.prototype.getNodeForIdIfSelected = function(id) {
        return this.selectedNodes[id];
      };
      SelectionService2.prototype.clearOtherNodes = function(rowNodeToKeepSelected) {
        var _this = this;
        var groupsToRefresh = {};
        var updatedCount = 0;
        iterateObject(this.selectedNodes, function(key, otherRowNode) {
          if (otherRowNode && otherRowNode.id !== rowNodeToKeepSelected.id) {
            var rowNode = _this.selectedNodes[otherRowNode.id];
            updatedCount += rowNode.setSelectedParams({
              newValue: false,
              clearSelection: false,
              suppressFinishActions: true
            });
            if (_this.groupSelectsChildren && otherRowNode.parent) {
              groupsToRefresh[otherRowNode.parent.id] = otherRowNode.parent;
            }
          }
        });
        iterateObject(groupsToRefresh, function(key, group) {
          var selected = group.calculateSelectedFromChildren();
          group.selectThisNode(selected === null ? false : selected);
        });
        return updatedCount;
      };
      SelectionService2.prototype.onRowSelected = function(event) {
        var rowNode = event.node;
        if (this.groupSelectsChildren && rowNode.group) {
          return;
        }
        if (rowNode.isSelected()) {
          this.selectedNodes[rowNode.id] = rowNode;
        } else {
          this.selectedNodes[rowNode.id] = void 0;
        }
      };
      SelectionService2.prototype.syncInRowNode = function(rowNode, oldNode) {
        this.syncInOldRowNode(rowNode, oldNode);
        this.syncInNewRowNode(rowNode);
      };
      SelectionService2.prototype.syncInOldRowNode = function(rowNode, oldNode) {
        var oldNodeHasDifferentId = exists(oldNode) && rowNode.id !== oldNode.id;
        if (oldNodeHasDifferentId && oldNode) {
          var id = oldNode.id;
          var oldNodeSelected = this.selectedNodes[id] == rowNode;
          if (oldNodeSelected) {
            this.selectedNodes[oldNode.id] = oldNode;
          }
        }
      };
      SelectionService2.prototype.syncInNewRowNode = function(rowNode) {
        if (exists(this.selectedNodes[rowNode.id])) {
          rowNode.setSelectedInitialValue(true);
          this.selectedNodes[rowNode.id] = rowNode;
        } else {
          rowNode.setSelectedInitialValue(false);
        }
      };
      SelectionService2.prototype.reset = function() {
        this.logger.log("reset");
        this.selectedNodes = {};
        this.lastSelectedNode = null;
      };
      SelectionService2.prototype.getBestCostNodeSelection = function() {
        if (this.rowModel.getType() !== Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {
          console.warn("AG Grid: `getBestCostNodeSelection` is only available when using normal row model");
          return;
        }
        var clientSideRowModel = this.rowModel;
        var topLevelNodes = clientSideRowModel.getTopLevelNodes();
        if (topLevelNodes === null) {
          console.warn("AG Grid: `selectAll` not available doing `rowModel=virtual`");
          return;
        }
        var result = [];
        function traverse(nodes) {
          for (var i = 0, l = nodes.length; i < l; i++) {
            var node = nodes[i];
            if (node.isSelected()) {
              result.push(node);
            } else {
              var maybeGroup = node;
              if (maybeGroup.group && maybeGroup.children) {
                traverse(maybeGroup.children);
              }
            }
          }
        }
        traverse(topLevelNodes);
        return result;
      };
      SelectionService2.prototype.setRowModel = function(rowModel) {
        this.rowModel = rowModel;
      };
      SelectionService2.prototype.isEmpty = function() {
        var count = 0;
        iterateObject(this.selectedNodes, function(nodeId, rowNode) {
          if (rowNode) {
            count++;
          }
        });
        return count === 0;
      };
      SelectionService2.prototype.deselectAllRowNodes = function(justFiltered) {
        if (justFiltered === void 0) {
          justFiltered = false;
        }
        var callback = function(rowNode) {
          return rowNode.selectThisNode(false);
        };
        var rowModelClientSide = this.rowModel.getType() === Constants.ROW_MODEL_TYPE_CLIENT_SIDE;
        if (justFiltered) {
          if (!rowModelClientSide) {
            console.error("AG Grid: selecting just filtered only works with In Memory Row Model");
            return;
          }
          var clientSideRowModel = this.rowModel;
          clientSideRowModel.forEachNodeAfterFilter(callback);
        } else {
          iterateObject(this.selectedNodes, function(id, rowNode) {
            if (rowNode) {
              callback(rowNode);
            }
          });
          this.reset();
        }
        if (rowModelClientSide && this.groupSelectsChildren) {
          this.updateGroupsFromChildrenSelections();
        }
        var event = {
          type: Events.EVENT_SELECTION_CHANGED
        };
        this.eventService.dispatchEvent(event);
      };
      SelectionService2.prototype.selectAllRowNodes = function(justFiltered) {
        if (justFiltered === void 0) {
          justFiltered = false;
        }
        if (this.rowModel.getType() !== Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {
          throw new Error("selectAll only available with normal row model, ie not " + this.rowModel.getType());
        }
        var clientSideRowModel = this.rowModel;
        var callback = function(rowNode) {
          return rowNode.selectThisNode(true);
        };
        if (justFiltered) {
          clientSideRowModel.forEachNodeAfterFilter(callback);
        } else {
          clientSideRowModel.forEachNode(callback);
        }
        if (this.rowModel.getType() === Constants.ROW_MODEL_TYPE_CLIENT_SIDE && this.groupSelectsChildren) {
          this.updateGroupsFromChildrenSelections();
        }
        var event = {
          type: Events.EVENT_SELECTION_CHANGED
        };
        this.eventService.dispatchEvent(event);
      };
      SelectionService2.prototype.selectNode = function(rowNode, tryMulti) {
        if (rowNode) {
          rowNode.setSelectedParams({ newValue: true, clearSelection: !tryMulti });
        }
      };
      SelectionService2.prototype.deselectIndex = function(rowIndex) {
        var node = this.rowModel.getRow(rowIndex);
        this.deselectNode(node);
      };
      SelectionService2.prototype.deselectNode = function(rowNode) {
        if (rowNode) {
          rowNode.setSelectedParams({ newValue: false, clearSelection: false });
        }
      };
      SelectionService2.prototype.selectIndex = function(index, tryMulti) {
        var node = this.rowModel.getRow(index);
        this.selectNode(node, tryMulti);
      };
      __decorate$K([
        Autowired("rowModel")
      ], SelectionService2.prototype, "rowModel", void 0);
      __decorate$K([
        __param$4(0, Qualifier("loggerFactory"))
      ], SelectionService2.prototype, "setBeans", null);
      __decorate$K([
        PostConstruct
      ], SelectionService2.prototype, "init", null);
      SelectionService2 = __decorate$K([
        Bean("selectionService")
      ], SelectionService2);
      return SelectionService2;
    }(BeanStub);
    __decorate$J = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    ColumnApi = function() {
      function ColumnApi2() {
      }
      ColumnApi2.prototype.sizeColumnsToFit = function(gridWidth) {
        if (typeof gridWidth === "undefined") {
          console.error("AG Grid: missing parameter to columnApi.sizeColumnsToFit(gridWidth)");
        }
        this.columnModel.sizeColumnsToFit(gridWidth, "api");
      };
      ColumnApi2.prototype.setColumnGroupOpened = function(group, newValue) {
        this.columnModel.setColumnGroupOpened(group, newValue, "api");
      };
      ColumnApi2.prototype.getColumnGroup = function(name, instanceId) {
        return this.columnModel.getColumnGroup(name, instanceId);
      };
      ColumnApi2.prototype.getProvidedColumnGroup = function(name) {
        return this.columnModel.getProvidedColumnGroup(name);
      };
      ColumnApi2.prototype.getDisplayNameForColumn = function(column, location) {
        return this.columnModel.getDisplayNameForColumn(column, location) || "";
      };
      ColumnApi2.prototype.getDisplayNameForColumnGroup = function(columnGroup, location) {
        return this.columnModel.getDisplayNameForColumnGroup(columnGroup, location) || "";
      };
      ColumnApi2.prototype.getColumn = function(key) {
        return this.columnModel.getPrimaryColumn(key);
      };
      ColumnApi2.prototype.getColumns = function() {
        return this.columnModel.getAllPrimaryColumns();
      };
      ColumnApi2.prototype.applyColumnState = function(params) {
        return this.columnModel.applyColumnState(params, "api");
      };
      ColumnApi2.prototype.getColumnState = function() {
        return this.columnModel.getColumnState();
      };
      ColumnApi2.prototype.resetColumnState = function() {
        this.columnModel.resetColumnState("api");
      };
      ColumnApi2.prototype.getColumnGroupState = function() {
        return this.columnModel.getColumnGroupState();
      };
      ColumnApi2.prototype.setColumnGroupState = function(stateItems) {
        this.columnModel.setColumnGroupState(stateItems, "api");
      };
      ColumnApi2.prototype.resetColumnGroupState = function() {
        this.columnModel.resetColumnGroupState("api");
      };
      ColumnApi2.prototype.isPinning = function() {
        return this.columnModel.isPinningLeft() || this.columnModel.isPinningRight();
      };
      ColumnApi2.prototype.isPinningLeft = function() {
        return this.columnModel.isPinningLeft();
      };
      ColumnApi2.prototype.isPinningRight = function() {
        return this.columnModel.isPinningRight();
      };
      ColumnApi2.prototype.getDisplayedColAfter = function(col) {
        return this.columnModel.getDisplayedColAfter(col);
      };
      ColumnApi2.prototype.getDisplayedColBefore = function(col) {
        return this.columnModel.getDisplayedColBefore(col);
      };
      ColumnApi2.prototype.setColumnVisible = function(key, visible) {
        this.columnModel.setColumnVisible(key, visible, "api");
      };
      ColumnApi2.prototype.setColumnsVisible = function(keys2, visible) {
        this.columnModel.setColumnsVisible(keys2, visible, "api");
      };
      ColumnApi2.prototype.setColumnPinned = function(key, pinned) {
        this.columnModel.setColumnPinned(key, pinned, "api");
      };
      ColumnApi2.prototype.setColumnsPinned = function(keys2, pinned) {
        this.columnModel.setColumnsPinned(keys2, pinned, "api");
      };
      ColumnApi2.prototype.getAllGridColumns = function() {
        return this.columnModel.getAllGridColumns();
      };
      ColumnApi2.prototype.getDisplayedLeftColumns = function() {
        return this.columnModel.getDisplayedLeftColumns();
      };
      ColumnApi2.prototype.getDisplayedCenterColumns = function() {
        return this.columnModel.getDisplayedCenterColumns();
      };
      ColumnApi2.prototype.getDisplayedRightColumns = function() {
        return this.columnModel.getDisplayedRightColumns();
      };
      ColumnApi2.prototype.getAllDisplayedColumns = function() {
        return this.columnModel.getAllDisplayedColumns();
      };
      ColumnApi2.prototype.getAllDisplayedVirtualColumns = function() {
        return this.columnModel.getViewportColumns();
      };
      ColumnApi2.prototype.moveColumn = function(key, toIndex) {
        if (typeof key === "number") {
          console.warn("AG Grid: you are using moveColumn(fromIndex, toIndex) - moveColumn takes a column key and a destination index, not two indexes, to move with indexes use moveColumnByIndex(from,to) instead");
          this.columnModel.moveColumnByIndex(key, toIndex, "api");
        } else {
          this.columnModel.moveColumn(key, toIndex, "api");
        }
      };
      ColumnApi2.prototype.moveColumnByIndex = function(fromIndex, toIndex) {
        this.columnModel.moveColumnByIndex(fromIndex, toIndex, "api");
      };
      ColumnApi2.prototype.moveColumns = function(columnsToMoveKeys, toIndex) {
        this.columnModel.moveColumns(columnsToMoveKeys, toIndex, "api");
      };
      ColumnApi2.prototype.moveRowGroupColumn = function(fromIndex, toIndex) {
        this.columnModel.moveRowGroupColumn(fromIndex, toIndex);
      };
      ColumnApi2.prototype.setColumnAggFunc = function(key, aggFunc) {
        this.columnModel.setColumnAggFunc(key, aggFunc);
      };
      ColumnApi2.prototype.setColumnWidth = function(key, newWidth, finished, source) {
        if (finished === void 0) {
          finished = true;
        }
        this.columnModel.setColumnWidths([{ key, newWidth }], false, finished, source);
      };
      ColumnApi2.prototype.setColumnWidths = function(columnWidths, finished, source) {
        if (finished === void 0) {
          finished = true;
        }
        this.columnModel.setColumnWidths(columnWidths, false, finished, source);
      };
      ColumnApi2.prototype.setPivotMode = function(pivotMode) {
        this.columnModel.setPivotMode(pivotMode);
      };
      ColumnApi2.prototype.isPivotMode = function() {
        return this.columnModel.isPivotMode();
      };
      ColumnApi2.prototype.getSecondaryPivotColumn = function(pivotKeys, valueColKey) {
        console.warn("AG Grid: since version 28.0.x getSecondaryPivotColumn has been renamed, please use getPivotResultColumn instead");
        return this.getPivotResultColumn(pivotKeys, valueColKey);
      };
      ColumnApi2.prototype.getPivotResultColumn = function(pivotKeys, valueColKey) {
        return this.columnModel.getSecondaryPivotColumn(pivotKeys, valueColKey);
      };
      ColumnApi2.prototype.setValueColumns = function(colKeys) {
        this.columnModel.setValueColumns(colKeys, "api");
      };
      ColumnApi2.prototype.getValueColumns = function() {
        return this.columnModel.getValueColumns();
      };
      ColumnApi2.prototype.removeValueColumn = function(colKey) {
        this.columnModel.removeValueColumn(colKey, "api");
      };
      ColumnApi2.prototype.removeValueColumns = function(colKeys) {
        this.columnModel.removeValueColumns(colKeys, "api");
      };
      ColumnApi2.prototype.addValueColumn = function(colKey) {
        this.columnModel.addValueColumn(colKey, "api");
      };
      ColumnApi2.prototype.addValueColumns = function(colKeys) {
        this.columnModel.addValueColumns(colKeys, "api");
      };
      ColumnApi2.prototype.setRowGroupColumns = function(colKeys) {
        this.columnModel.setRowGroupColumns(colKeys, "api");
      };
      ColumnApi2.prototype.removeRowGroupColumn = function(colKey) {
        this.columnModel.removeRowGroupColumn(colKey, "api");
      };
      ColumnApi2.prototype.removeRowGroupColumns = function(colKeys) {
        this.columnModel.removeRowGroupColumns(colKeys, "api");
      };
      ColumnApi2.prototype.addRowGroupColumn = function(colKey) {
        this.columnModel.addRowGroupColumn(colKey, "api");
      };
      ColumnApi2.prototype.addRowGroupColumns = function(colKeys) {
        this.columnModel.addRowGroupColumns(colKeys, "api");
      };
      ColumnApi2.prototype.getRowGroupColumns = function() {
        return this.columnModel.getRowGroupColumns();
      };
      ColumnApi2.prototype.setPivotColumns = function(colKeys) {
        this.columnModel.setPivotColumns(colKeys, "api");
      };
      ColumnApi2.prototype.removePivotColumn = function(colKey) {
        this.columnModel.removePivotColumn(colKey, "api");
      };
      ColumnApi2.prototype.removePivotColumns = function(colKeys) {
        this.columnModel.removePivotColumns(colKeys, "api");
      };
      ColumnApi2.prototype.addPivotColumn = function(colKey) {
        this.columnModel.addPivotColumn(colKey, "api");
      };
      ColumnApi2.prototype.addPivotColumns = function(colKeys) {
        this.columnModel.addPivotColumns(colKeys, "api");
      };
      ColumnApi2.prototype.getPivotColumns = function() {
        return this.columnModel.getPivotColumns();
      };
      ColumnApi2.prototype.getLeftDisplayedColumnGroups = function() {
        return this.columnModel.getDisplayedTreeLeft();
      };
      ColumnApi2.prototype.getCenterDisplayedColumnGroups = function() {
        return this.columnModel.getDisplayedTreeCentre();
      };
      ColumnApi2.prototype.getRightDisplayedColumnGroups = function() {
        return this.columnModel.getDisplayedTreeRight();
      };
      ColumnApi2.prototype.getAllDisplayedColumnGroups = function() {
        return this.columnModel.getAllDisplayedTrees();
      };
      ColumnApi2.prototype.autoSizeColumn = function(key, skipHeader) {
        return this.columnModel.autoSizeColumn(key, skipHeader, "api");
      };
      ColumnApi2.prototype.autoSizeColumns = function(keys2, skipHeader) {
        this.columnModel.autoSizeColumns({ columns: keys2, skipHeader });
      };
      ColumnApi2.prototype.autoSizeAllColumns = function(skipHeader) {
        this.columnModel.autoSizeAllColumns(skipHeader, "api");
      };
      ColumnApi2.prototype.setSecondaryColumns = function(colDefs) {
        console.warn("AG Grid: since version 28.0.x setSecondaryColumns has been renamed, please use setPivotResultColumns instead");
        this.setPivotResultColumns(colDefs);
      };
      ColumnApi2.prototype.setPivotResultColumns = function(colDefs) {
        this.columnModel.setSecondaryColumns(colDefs, "api");
      };
      ColumnApi2.prototype.getSecondaryColumns = function() {
        console.warn("AG Grid: since version 28.0.x getSecondaryColumns has been renamed, please use getPivotResultColumns instead");
        return this.getPivotResultColumns();
      };
      ColumnApi2.prototype.getPivotResultColumns = function() {
        return this.columnModel.getSecondaryColumns();
      };
      ColumnApi2.prototype.getPrimaryColumns = function() {
        console.warn("AG Grid: since version 28.0.x getPrimaryColumns has been renamed, please use getColumns instead");
        return this.getColumns();
      };
      ColumnApi2.prototype.cleanDownReferencesToAvoidMemoryLeakInCaseApplicationIsKeepingReferenceToDestroyedGrid = function() {
        setTimeout(_.removeAllReferences.bind(window, this, "Column API"), 100);
      };
      ColumnApi2.prototype.getAllColumns = function() {
        console.warn("AG Grid: since version 28.0.x getAllColumns has been renamed, please use getColumns instead");
        return this.getColumns();
      };
      ColumnApi2.prototype.columnGroupOpened = function(group, newValue) {
        console.error("AG Grid: columnGroupOpened no longer exists, use setColumnGroupOpened");
        this.setColumnGroupOpened(group, newValue);
      };
      ColumnApi2.prototype.hideColumns = function(colIds, hide) {
        console.error("AG Grid: hideColumns is deprecated, use setColumnsVisible");
        this.columnModel.setColumnsVisible(colIds, !hide, "api");
      };
      ColumnApi2.prototype.hideColumn = function(colId, hide) {
        console.error("AG Grid: hideColumn is deprecated, use setColumnVisible");
        this.columnModel.setColumnVisible(colId, !hide, "api");
      };
      ColumnApi2.prototype.setState = function(columnState) {
        console.error("AG Grid: setState is deprecated, use setColumnState");
        return this.setColumnState(columnState);
      };
      ColumnApi2.prototype.getState = function() {
        console.error("AG Grid: getState is deprecated, use getColumnState");
        return this.getColumnState();
      };
      ColumnApi2.prototype.resetState = function() {
        console.error("AG Grid: resetState is deprecated, use resetColumnState");
        this.resetColumnState();
      };
      ColumnApi2.prototype.getAggregationColumns = function() {
        console.error("AG Grid: getAggregationColumns is deprecated, use getValueColumns");
        return this.columnModel.getValueColumns();
      };
      ColumnApi2.prototype.removeAggregationColumn = function(colKey) {
        console.error("AG Grid: removeAggregationColumn is deprecated, use removeValueColumn");
        this.columnModel.removeValueColumn(colKey, "api");
      };
      ColumnApi2.prototype.removeAggregationColumns = function(colKeys) {
        console.error("AG Grid: removeAggregationColumns is deprecated, use removeValueColumns");
        this.columnModel.removeValueColumns(colKeys, "api");
      };
      ColumnApi2.prototype.addAggregationColumn = function(colKey) {
        console.error("AG Grid: addAggregationColumn is deprecated, use addValueColumn");
        this.columnModel.addValueColumn(colKey, "api");
      };
      ColumnApi2.prototype.addAggregationColumns = function(colKeys) {
        console.error("AG Grid: addAggregationColumns is deprecated, use addValueColumns");
        this.columnModel.addValueColumns(colKeys, "api");
      };
      ColumnApi2.prototype.setColumnAggFunction = function(column, aggFunc) {
        console.error("AG Grid: setColumnAggFunction is deprecated, use setColumnAggFunc");
        this.columnModel.setColumnAggFunc(column, aggFunc, "api");
      };
      ColumnApi2.prototype.getDisplayNameForCol = function(column) {
        console.error("AG Grid: getDisplayNameForCol is deprecated, use getDisplayNameForColumn");
        return this.getDisplayNameForColumn(column, null);
      };
      ColumnApi2.prototype.setColumnState = function(columnState) {
        console.error("AG Grid: setColumnState is deprecated, use applyColumnState");
        return this.columnModel.applyColumnState({ state: columnState, applyOrder: true }, "api");
      };
      ColumnApi2.prototype.getOriginalColumnGroup = function(name) {
        console.error("AG Grid: getOriginalColumnGroup is deprecated, use getProvidedColumnGroup");
        return this.columnModel.getProvidedColumnGroup(name);
      };
      __decorate$J([
        Autowired("columnModel")
      ], ColumnApi2.prototype, "columnModel", void 0);
      __decorate$J([
        PreDestroy
      ], ColumnApi2.prototype, "cleanDownReferencesToAvoidMemoryLeakInCaseApplicationIsKeepingReferenceToDestroyedGrid", null);
      ColumnApi2 = __decorate$J([
        Bean("columnApi")
      ], ColumnApi2);
      return ColumnApi2;
    }();
    __extends$H = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$I = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    ValueService = function(_super) {
      __extends$H(ValueService2, _super);
      function ValueService2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.initialised = false;
        return _this;
      }
      ValueService2.prototype.init = function() {
        var _this = this;
        this.cellExpressions = this.gridOptionsWrapper.isEnableCellExpressions();
        this.initialised = true;
        this.eventService.addEventListener(Events.EVENT_CELL_VALUE_CHANGED, function(event) {
          return _this.callColumnCellValueChangedHandler(event);
        }, this.gridOptionsWrapper.useAsyncEvents());
      };
      ValueService2.prototype.getValue = function(column, rowNode, forFilter, ignoreAggData) {
        if (forFilter === void 0) {
          forFilter = false;
        }
        if (ignoreAggData === void 0) {
          ignoreAggData = false;
        }
        if (!this.initialised) {
          this.init();
        }
        if (!rowNode) {
          return;
        }
        var colDef = column.getColDef();
        var field = colDef.field;
        var colId = column.getId();
        var data = rowNode.data;
        var result;
        var groupDataExists = rowNode.groupData && rowNode.groupData[colId] !== void 0;
        var aggDataExists = !ignoreAggData && rowNode.aggData && rowNode.aggData[colId] !== void 0;
        if (forFilter && colDef.filterValueGetter) {
          result = this.executeFilterValueGetter(colDef.filterValueGetter, data, column, rowNode);
        } else if (this.gridOptionsWrapper.isTreeData() && aggDataExists) {
          result = rowNode.aggData[colId];
        } else if (this.gridOptionsWrapper.isTreeData() && colDef.valueGetter) {
          result = this.executeValueGetter(colDef.valueGetter, data, column, rowNode);
        } else if (this.gridOptionsWrapper.isTreeData() && (field && data)) {
          result = getValueUsingField(data, field, column.isFieldContainsDots());
        } else if (groupDataExists) {
          result = rowNode.groupData[colId];
        } else if (aggDataExists) {
          result = rowNode.aggData[colId];
        } else if (colDef.valueGetter) {
          result = this.executeValueGetter(colDef.valueGetter, data, column, rowNode);
        } else if (field && data) {
          result = getValueUsingField(data, field, column.isFieldContainsDots());
        }
        if (this.cellExpressions && typeof result === "string" && result.indexOf("=") === 0) {
          var cellValueGetter = result.substring(1);
          result = this.executeValueGetter(cellValueGetter, data, column, rowNode);
        }
        if (result == null) {
          var openedGroup = this.getOpenedGroup(rowNode, column);
          if (openedGroup != null) {
            return openedGroup;
          }
        }
        return result;
      };
      ValueService2.prototype.getOpenedGroup = function(rowNode, column) {
        if (!this.gridOptionsWrapper.isShowOpenedGroup()) {
          return;
        }
        var colDef = column.getColDef();
        if (!colDef.showRowGroup) {
          return;
        }
        var showRowGroup = column.getColDef().showRowGroup;
        var pointer = rowNode.parent;
        while (pointer != null) {
          if (pointer.rowGroupColumn && (showRowGroup === true || showRowGroup === pointer.rowGroupColumn.getId())) {
            return pointer.key;
          }
          pointer = pointer.parent;
        }
        return void 0;
      };
      ValueService2.prototype.setValue = function(rowNode, colKey, newValue, eventSource) {
        var column = this.columnModel.getPrimaryColumn(colKey);
        if (!rowNode || !column) {
          return false;
        }
        if (missing(rowNode.data)) {
          rowNode.data = {};
        }
        var _a = column.getColDef(), field = _a.field, newValueHandler = _a.newValueHandler, valueSetter = _a.valueSetter;
        if (missing(field) && missing(newValueHandler) && missing(valueSetter)) {
          console.warn("AG Grid: you need either field or valueSetter set on colDef for editing to work");
          return false;
        }
        var params = {
          node: rowNode,
          data: rowNode.data,
          oldValue: this.getValue(column, rowNode),
          newValue,
          colDef: column.getColDef(),
          column,
          api: this.gridOptionsWrapper.getApi(),
          columnApi: this.gridOptionsWrapper.getColumnApi(),
          context: this.gridOptionsWrapper.getContext()
        };
        params.newValue = newValue;
        var valueWasDifferent;
        if (newValueHandler && exists(newValueHandler)) {
          valueWasDifferent = newValueHandler(params);
        } else if (exists(valueSetter)) {
          valueWasDifferent = this.expressionService.evaluate(valueSetter, params);
        } else {
          valueWasDifferent = this.setValueUsingField(rowNode.data, field, newValue, column.isFieldContainsDots());
        }
        if (valueWasDifferent === void 0) {
          valueWasDifferent = true;
        }
        if (!valueWasDifferent) {
          return false;
        }
        rowNode.resetQuickFilterAggregateText();
        this.valueCache.onDataChanged();
        params.newValue = this.getValue(column, rowNode);
        var event = {
          type: Events.EVENT_CELL_VALUE_CHANGED,
          event: null,
          rowIndex: rowNode.rowIndex,
          rowPinned: rowNode.rowPinned,
          column: params.column,
          api: params.api,
          columnApi: params.columnApi,
          colDef: params.colDef,
          context: params.context,
          data: rowNode.data,
          node: rowNode,
          oldValue: params.oldValue,
          newValue: params.newValue,
          value: params.newValue,
          source: eventSource
        };
        this.eventService.dispatchEvent(event);
        return true;
      };
      ValueService2.prototype.callColumnCellValueChangedHandler = function(event) {
        var onCellValueChanged = event.colDef.onCellValueChanged;
        if (typeof onCellValueChanged === "function") {
          onCellValueChanged({
            node: event.node,
            data: event.data,
            oldValue: event.oldValue,
            newValue: event.newValue,
            colDef: event.colDef,
            column: event.column,
            api: event.api,
            columnApi: event.columnApi,
            context: event.context
          });
        }
      };
      ValueService2.prototype.setValueUsingField = function(data, field, newValue, isFieldContainsDots) {
        if (!field) {
          return false;
        }
        var valuesAreSame = false;
        if (!isFieldContainsDots) {
          valuesAreSame = data[field] == newValue;
          if (!valuesAreSame) {
            data[field] = newValue;
          }
        } else {
          var fieldPieces = field.split(".");
          var currentObject = data;
          while (fieldPieces.length > 0 && currentObject) {
            var fieldPiece = fieldPieces.shift();
            if (fieldPieces.length === 0) {
              valuesAreSame = currentObject[fieldPiece] == newValue;
              if (!valuesAreSame) {
                currentObject[fieldPiece] = newValue;
              }
            } else {
              currentObject = currentObject[fieldPiece];
            }
          }
        }
        return !valuesAreSame;
      };
      ValueService2.prototype.executeFilterValueGetter = function(valueGetter, data, column, rowNode) {
        var params = {
          data,
          node: rowNode,
          column,
          colDef: column.getColDef(),
          api: this.gridOptionsWrapper.getApi(),
          columnApi: this.gridOptionsWrapper.getColumnApi(),
          context: this.gridOptionsWrapper.getContext(),
          getValue: this.getValueCallback.bind(this, rowNode)
        };
        return this.expressionService.evaluate(valueGetter, params);
      };
      ValueService2.prototype.executeValueGetter = function(valueGetter, data, column, rowNode) {
        var colId = column.getId();
        var valueFromCache = this.valueCache.getValue(rowNode, colId);
        if (valueFromCache !== void 0) {
          return valueFromCache;
        }
        var params = {
          data,
          node: rowNode,
          column,
          colDef: column.getColDef(),
          api: this.gridOptionsWrapper.getApi(),
          columnApi: this.gridOptionsWrapper.getColumnApi(),
          context: this.gridOptionsWrapper.getContext(),
          getValue: this.getValueCallback.bind(this, rowNode)
        };
        var result = this.expressionService.evaluate(valueGetter, params);
        this.valueCache.setValue(rowNode, colId, result);
        return result;
      };
      ValueService2.prototype.getValueCallback = function(node, field) {
        var otherColumn = this.columnModel.getPrimaryColumn(field);
        if (otherColumn) {
          return this.getValue(otherColumn, node);
        }
        return null;
      };
      ValueService2.prototype.getKeyForNode = function(col, rowNode) {
        var value = this.getValue(col, rowNode);
        var keyCreator = col.getColDef().keyCreator;
        var result = value;
        if (keyCreator) {
          var keyParams = {
            value,
            colDef: col.getColDef(),
            column: col,
            node: rowNode,
            data: rowNode.data,
            api: this.gridOptionsWrapper.getApi(),
            columnApi: this.gridOptionsWrapper.getColumnApi(),
            context: this.gridOptionsWrapper.getContext()
          };
          result = keyCreator(keyParams);
        }
        if (typeof result === "string" || result == null) {
          return result;
        }
        result = String(result);
        if (result === "[object Object]") {
          doOnce(function() {
            console.warn("AG Grid: a column you are grouping or pivoting by has objects as values. If you want to group by complex objects then either a) use a colDef.keyCreator (se AG Grid docs) or b) to toString() on the object to return a key");
          }, "getKeyForNode - warn about [object,object]");
        }
        return result;
      };
      __decorate$I([
        Autowired("expressionService")
      ], ValueService2.prototype, "expressionService", void 0);
      __decorate$I([
        Autowired("columnModel")
      ], ValueService2.prototype, "columnModel", void 0);
      __decorate$I([
        Autowired("valueCache")
      ], ValueService2.prototype, "valueCache", void 0);
      __decorate$I([
        PostConstruct
      ], ValueService2.prototype, "init", null);
      ValueService2 = __decorate$I([
        Bean("valueService")
      ], ValueService2);
      return ValueService2;
    }(BeanStub);
    __extends$G = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$H = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param$3 = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    ExpressionService = function(_super) {
      __extends$G(ExpressionService2, _super);
      function ExpressionService2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.expressionToFunctionCache = {};
        return _this;
      }
      ExpressionService2.prototype.setBeans = function(loggerFactory) {
        this.logger = loggerFactory.create("ExpressionService");
      };
      ExpressionService2.prototype.evaluate = function(expressionOrFunc, params) {
        if (typeof expressionOrFunc === "function") {
          var func = expressionOrFunc;
          return func(params);
        } else if (typeof expressionOrFunc === "string") {
          var expression = expressionOrFunc;
          return this.evaluateExpression(expression, params);
        } else {
          console.error("AG Grid: value should be either a string or a function", expressionOrFunc);
        }
      };
      ExpressionService2.prototype.evaluateExpression = function(expression, params) {
        try {
          var javaScriptFunction = this.createExpressionFunction(expression);
          var result = javaScriptFunction(params.value, params.context, params.oldValue, params.newValue, params.value, params.node, params.data, params.colDef, params.rowIndex, params.api, params.columnApi, params.getValue, params.column, params.columnGroup);
          return result;
        } catch (e) {
          console.log("Processing of the expression failed");
          console.log("Expression = " + expression);
          console.log("Params =", params);
          console.log("Exception = " + e);
          return null;
        }
      };
      ExpressionService2.prototype.createExpressionFunction = function(expression) {
        if (this.expressionToFunctionCache[expression]) {
          return this.expressionToFunctionCache[expression];
        }
        var functionBody = this.createFunctionBody(expression);
        var theFunction = new Function("x, ctx, oldValue, newValue, value, node, data, colDef, rowIndex, api, columnApi, getValue, column, columnGroup", functionBody);
        this.expressionToFunctionCache[expression] = theFunction;
        return theFunction;
      };
      ExpressionService2.prototype.createFunctionBody = function(expression) {
        if (expression.indexOf("return") >= 0) {
          return expression;
        } else {
          return "return " + expression + ";";
        }
      };
      __decorate$H([
        __param$3(0, Qualifier("loggerFactory"))
      ], ExpressionService2.prototype, "setBeans", null);
      ExpressionService2 = __decorate$H([
        Bean("expressionService")
      ], ExpressionService2);
      return ExpressionService2;
    }(BeanStub);
    __extends$F = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$G = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    TemplateService = function(_super) {
      __extends$F(TemplateService2, _super);
      function TemplateService2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.templateCache = {};
        _this.waitingCallbacks = {};
        return _this;
      }
      TemplateService2.prototype.getTemplate = function(url, callback) {
        var templateFromCache = this.templateCache[url];
        if (templateFromCache) {
          return templateFromCache;
        }
        var callbackList = this.waitingCallbacks[url];
        var that = this;
        if (!callbackList) {
          callbackList = [];
          this.waitingCallbacks[url] = callbackList;
          var client = new XMLHttpRequest();
          client.onload = function() {
            that.handleHttpResult(this, url);
          };
          client.open("GET", url);
          client.send();
        }
        if (callback) {
          callbackList.push(callback);
        }
        return null;
      };
      TemplateService2.prototype.handleHttpResult = function(httpResult, url) {
        if (httpResult.status !== 200 || httpResult.response === null) {
          console.warn("AG Grid: Unable to get template error " + httpResult.status + " - " + url);
          return;
        }
        this.templateCache[url] = httpResult.response || httpResult.responseText;
        var callbacks = this.waitingCallbacks[url];
        for (var i = 0; i < callbacks.length; i++) {
          var callback = callbacks[i];
          callback();
        }
      };
      TemplateService2 = __decorate$G([
        Bean("templateService")
      ], TemplateService2);
      return TemplateService2;
    }(BeanStub);
    __extends$E = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$F = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param$2 = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    LoggerFactory = function(_super) {
      __extends$E(LoggerFactory2, _super);
      function LoggerFactory2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      LoggerFactory2.prototype.setBeans = function(gridOptionsWrapper) {
        this.logging = gridOptionsWrapper.isDebug();
      };
      LoggerFactory2.prototype.create = function(name) {
        return new Logger(name, this.isLogging.bind(this));
      };
      LoggerFactory2.prototype.isLogging = function() {
        return this.logging;
      };
      __decorate$F([
        __param$2(0, Qualifier("gridOptionsWrapper"))
      ], LoggerFactory2.prototype, "setBeans", null);
      LoggerFactory2 = __decorate$F([
        Bean("loggerFactory")
      ], LoggerFactory2);
      return LoggerFactory2;
    }(BeanStub);
    Logger = function() {
      function Logger2(name, isLoggingFunc) {
        this.name = name;
        this.isLoggingFunc = isLoggingFunc;
      }
      Logger2.prototype.isLogging = function() {
        return this.isLoggingFunc();
      };
      Logger2.prototype.log = function(message2) {
        if (this.isLoggingFunc()) {
          console.log("AG Grid." + this.name + ": " + message2);
        }
      };
      return Logger2;
    }();
    __extends$D = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$E = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    GridCtrl = function(_super) {
      __extends$D(GridCtrl2, _super);
      function GridCtrl2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      GridCtrl2.prototype.setComp = function(view, eGridDiv, eGui) {
        var _this = this;
        this.view = view;
        this.eGridHostDiv = eGridDiv;
        this.eGui = eGui;
        this.dragAndDropService.addDropTarget({
          getContainer: function() {
            return _this.eGui;
          },
          isInterestedIn: function(type) {
            return type === DragSourceType.HeaderCell || type === DragSourceType.ToolPanel;
          },
          getIconName: function() {
            return DragAndDropService.ICON_NOT_ALLOWED;
          }
        });
        this.mouseEventService.stampTopLevelGridCompWithGridInstance(eGridDiv);
        this.createManagedBean(new LayoutFeature(this.view));
        this.addRtlSupport();
        this.addManagedListener(this, Events.EVENT_KEYBOARD_FOCUS, function() {
          _this.view.addOrRemoveKeyboardFocusClass(true);
        });
        this.addManagedListener(this, Events.EVENT_MOUSE_FOCUS, function() {
          _this.view.addOrRemoveKeyboardFocusClass(false);
        });
        var unsubscribeFromResize = this.resizeObserverService.observeResize(this.eGridHostDiv, this.onGridSizeChanged.bind(this));
        this.addDestroyFunc(function() {
          return unsubscribeFromResize();
        });
        this.ctrlsService.registerGridCtrl(this);
      };
      GridCtrl2.prototype.isDetailGrid = function() {
        var _a, _b;
        var el = this.focusService.findTabbableParent(this.getGui());
        return ((_b = (_a = el) === null || _a === void 0 ? void 0 : _a.getAttribute("row-id")) === null || _b === void 0 ? void 0 : _b.startsWith("detail")) || false;
      };
      GridCtrl2.prototype.showDropZones = function() {
        return ModuleRegistry.isRegistered(ModuleNames.RowGroupingModule);
      };
      GridCtrl2.prototype.showSideBar = function() {
        return ModuleRegistry.isRegistered(ModuleNames.SideBarModule);
      };
      GridCtrl2.prototype.showStatusBar = function() {
        return ModuleRegistry.isRegistered(ModuleNames.StatusBarModule);
      };
      GridCtrl2.prototype.showWatermark = function() {
        return ModuleRegistry.isRegistered(ModuleNames.EnterpriseCoreModule);
      };
      GridCtrl2.prototype.onGridSizeChanged = function() {
        var event = {
          type: Events.EVENT_GRID_SIZE_CHANGED,
          clientWidth: this.eGridHostDiv.clientWidth,
          clientHeight: this.eGridHostDiv.clientHeight
        };
        this.eventService.dispatchEvent(event);
      };
      GridCtrl2.prototype.addRtlSupport = function() {
        var cssClass = this.gridOptionsWrapper.isEnableRtl() ? "ag-rtl" : "ag-ltr";
        this.view.setRtlClass(cssClass);
      };
      GridCtrl2.prototype.destroyGridUi = function() {
        this.view.destroyGridUi();
      };
      GridCtrl2.prototype.getGui = function() {
        return this.eGui;
      };
      GridCtrl2.prototype.setResizeCursor = function(on) {
        this.view.setCursor(on ? "ew-resize" : null);
      };
      GridCtrl2.prototype.disableUserSelect = function(on) {
        this.view.setUserSelect(on ? "none" : null);
      };
      GridCtrl2.prototype.focusNextInnerContainer = function(backwards) {
        var eDocument = this.gridOptionsWrapper.getDocument();
        var focusableContainers = this.view.getFocusableContainers();
        var idxWithFocus = focusableContainers.findIndex(function(container) {
          return container.contains(eDocument.activeElement);
        });
        var nextIdx = idxWithFocus + (backwards ? -1 : 1);
        if (nextIdx <= 0 || nextIdx >= focusableContainers.length) {
          return false;
        }
        return this.focusService.focusInto(focusableContainers[nextIdx]);
      };
      GridCtrl2.prototype.focusInnerElement = function(fromBottom) {
        var focusableContainers = this.view.getFocusableContainers();
        if (fromBottom) {
          if (focusableContainers.length > 1) {
            return this.focusService.focusInto(last(focusableContainers), true);
          }
          var lastColumn = last(this.columnModel.getAllDisplayedColumns());
          if (this.focusService.focusGridView(lastColumn, true)) {
            return true;
          }
        }
        return this.focusService.focusFirstHeader();
      };
      GridCtrl2.prototype.forceFocusOutOfContainer = function(up) {
        if (up === void 0) {
          up = false;
        }
        this.view.forceFocusOutOfContainer(up);
      };
      __decorate$E([
        Autowired("focusService")
      ], GridCtrl2.prototype, "focusService", void 0);
      __decorate$E([
        Autowired("resizeObserverService")
      ], GridCtrl2.prototype, "resizeObserverService", void 0);
      __decorate$E([
        Autowired("columnModel")
      ], GridCtrl2.prototype, "columnModel", void 0);
      __decorate$E([
        Autowired("ctrlsService")
      ], GridCtrl2.prototype, "ctrlsService", void 0);
      __decorate$E([
        Autowired("mouseEventService")
      ], GridCtrl2.prototype, "mouseEventService", void 0);
      __decorate$E([
        Autowired("dragAndDropService")
      ], GridCtrl2.prototype, "dragAndDropService", void 0);
      return GridCtrl2;
    }(BeanStub);
    __extends$C = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$D = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    GridComp = function(_super) {
      __extends$C(GridComp2, _super);
      function GridComp2(eGridDiv) {
        var _this = _super.call(this, void 0) || this;
        _this.eGridDiv = eGridDiv;
        return _this;
      }
      GridComp2.prototype.postConstruct = function() {
        var _this = this;
        this.logger = this.loggerFactory.create("GridComp");
        var compProxy = {
          destroyGridUi: function() {
            return _this.destroyBean(_this);
          },
          setRtlClass: function(cssClass) {
            return _this.addCssClass(cssClass);
          },
          addOrRemoveKeyboardFocusClass: function(addOrRemove) {
            return _this.addOrRemoveCssClass(FocusService.AG_KEYBOARD_FOCUS, addOrRemove);
          },
          forceFocusOutOfContainer: this.forceFocusOutOfContainer.bind(this),
          updateLayoutClasses: this.updateLayoutClasses.bind(this),
          getFocusableContainers: this.getFocusableContainers.bind(this),
          setUserSelect: function(value) {
            _this.getGui().style.userSelect = value != null ? value : "";
            _this.getGui().style.webkitUserSelect = value != null ? value : "";
          },
          setCursor: function(value) {
            _this.getGui().style.cursor = value != null ? value : "";
          }
        };
        this.ctrl = this.createManagedBean(new GridCtrl());
        var template = this.createTemplate();
        this.setTemplate(template);
        this.ctrl.setComp(compProxy, this.eGridDiv, this.getGui());
        this.insertGridIntoDom();
        this.initialiseTabGuard({
          onTabKeyDown: function() {
            return void 0;
          },
          focusInnerElement: function(fromBottom) {
            return _this.ctrl.focusInnerElement(fromBottom);
          }
        });
      };
      GridComp2.prototype.insertGridIntoDom = function() {
        var _this = this;
        var eGui = this.getGui();
        this.eGridDiv.appendChild(eGui);
        this.addDestroyFunc(function() {
          _this.eGridDiv.removeChild(eGui);
          _this.logger.log("Grid removed from DOM");
        });
      };
      GridComp2.prototype.updateLayoutClasses = function(cssClass, params) {
        var eRootWrapperBodyClassList = this.eRootWrapperBody.classList;
        eRootWrapperBodyClassList.toggle(LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);
        eRootWrapperBodyClassList.toggle(LayoutCssClasses.NORMAL, params.normal);
        eRootWrapperBodyClassList.toggle(LayoutCssClasses.PRINT, params.print);
        this.addOrRemoveCssClass(LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);
        this.addOrRemoveCssClass(LayoutCssClasses.NORMAL, params.normal);
        this.addOrRemoveCssClass(LayoutCssClasses.PRINT, params.print);
      };
      GridComp2.prototype.createTemplate = function() {
        var dropZones = this.ctrl.showDropZones() ? "<ag-grid-header-drop-zones></ag-grid-header-drop-zones>" : "";
        var sideBar = this.ctrl.showSideBar() ? '<ag-side-bar ref="sideBar"></ag-side-bar>' : "";
        var statusBar = this.ctrl.showStatusBar() ? '<ag-status-bar ref="statusBar"></ag-status-bar>' : "";
        var watermark = this.ctrl.showWatermark() ? "<ag-watermark></ag-watermark>" : "";
        var template = '<div class="ag-root-wrapper" role="presentation">\n                ' + dropZones + '\n                <div class="ag-root-wrapper-body" ref="rootWrapperBody" role="presentation">\n                    <ag-grid-body ref="gridBody"></ag-grid-body>\n                    ' + sideBar + "\n                </div>\n                " + statusBar + "\n                <ag-pagination></ag-pagination>\n                " + watermark + "\n            </div>";
        return template;
      };
      GridComp2.prototype.getFocusableElement = function() {
        return this.eRootWrapperBody;
      };
      GridComp2.prototype.getFocusableContainers = function() {
        var focusableContainers = [
          this.gridBodyComp.getGui()
        ];
        if (this.sideBarComp) {
          focusableContainers.push(this.sideBarComp.getGui());
        }
        return focusableContainers.filter(function(el) {
          return isVisible(el);
        });
      };
      __decorate$D([
        Autowired("loggerFactory")
      ], GridComp2.prototype, "loggerFactory", void 0);
      __decorate$D([
        RefSelector("gridBody")
      ], GridComp2.prototype, "gridBodyComp", void 0);
      __decorate$D([
        RefSelector("sideBar")
      ], GridComp2.prototype, "sideBarComp", void 0);
      __decorate$D([
        RefSelector("rootWrapperBody")
      ], GridComp2.prototype, "eRootWrapperBody", void 0);
      __decorate$D([
        PostConstruct
      ], GridComp2.prototype, "postConstruct", null);
      return GridComp2;
    }(TabGuardComp);
    __extends$B = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$C = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __read$4 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread$3 = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read$4(arguments[i]));
      return ar;
    };
    SortController = function(_super) {
      __extends$B(SortController2, _super);
      function SortController2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      SortController_1 = SortController2;
      SortController2.prototype.progressSort = function(column, multiSort, source) {
        var nextDirection = this.getNextSortDirection(column);
        this.setSortForColumn(column, nextDirection, multiSort, source);
      };
      SortController2.prototype.setSortForColumn = function(column, sort, multiSort, source) {
        var _a;
        if (sort !== Constants.SORT_ASC && sort !== Constants.SORT_DESC) {
          sort = null;
        }
        var isColumnsSortingCoupledToGroup = this.gridOptionsWrapper.isColumnsSortingCoupledToGroup();
        var columnsToUpdate = [column];
        if (isColumnsSortingCoupledToGroup) {
          if (column.getColDef().showRowGroup) {
            var rowGroupColumns = this.columnModel.getSourceColumnsForGroupColumn(column);
            var sortableRowGroupColumns = (_a = rowGroupColumns) === null || _a === void 0 ? void 0 : _a.filter(function(col) {
              return col.getColDef().sortable;
            });
            if (sortableRowGroupColumns) {
              columnsToUpdate = __spread$3([column], sortableRowGroupColumns);
            }
          }
        }
        columnsToUpdate.forEach(function(col) {
          return col.setSort(sort, source);
        });
        var doingMultiSort = (multiSort || this.gridOptionsWrapper.isAlwaysMultiSort()) && !this.gridOptionsWrapper.isSuppressMultiSort();
        if (!doingMultiSort) {
          this.clearSortBarTheseColumns(columnsToUpdate, source);
        }
        this.updateSortIndex(column);
        this.dispatchSortChangedEvents(source);
      };
      SortController2.prototype.updateSortIndex = function(lastColToChange) {
        var isCoupled = this.gridOptionsWrapper.isColumnsSortingCoupledToGroup();
        var groupParent = this.columnModel.getGroupDisplayColumnForGroup(lastColToChange.getId());
        var lastSortIndexCol = isCoupled ? groupParent || lastColToChange : lastColToChange;
        var allSortedCols = this.getIndexableColumnsOrdered();
        this.columnModel.getPrimaryAndSecondaryAndAutoColumns().forEach(function(col) {
          return col.setSortIndex(null);
        });
        var allSortedColsWithoutChanges = allSortedCols.filter(function(col) {
          return col !== lastSortIndexCol;
        });
        var sortedColsWithIndices = !!lastSortIndexCol.getSort() ? __spread$3(allSortedColsWithoutChanges, [lastSortIndexCol]) : allSortedColsWithoutChanges;
        sortedColsWithIndices.forEach(function(col, idx) {
          return col.setSortIndex(idx);
        });
      };
      SortController2.prototype.onSortChanged = function(source) {
        this.dispatchSortChangedEvents(source);
      };
      SortController2.prototype.isSortActive = function() {
        var allCols = this.columnModel.getPrimaryAndSecondaryAndAutoColumns();
        var sortedCols = allCols.filter(function(column) {
          return !!column.getSort();
        });
        return sortedCols && sortedCols.length > 0;
      };
      SortController2.prototype.dispatchSortChangedEvents = function(source) {
        var event = {
          type: Events.EVENT_SORT_CHANGED,
          source
        };
        this.eventService.dispatchEvent(event);
      };
      SortController2.prototype.clearSortBarTheseColumns = function(columnsToSkip, source) {
        this.columnModel.getPrimaryAndSecondaryAndAutoColumns().forEach(function(columnToClear) {
          if (!columnsToSkip.includes(columnToClear)) {
            columnToClear.setSort(void 0, source);
          }
        });
      };
      SortController2.prototype.getNextSortDirection = function(column) {
        var sortingOrder;
        if (column.getColDef().sortingOrder) {
          sortingOrder = column.getColDef().sortingOrder;
        } else if (this.gridOptionsWrapper.getSortingOrder()) {
          sortingOrder = this.gridOptionsWrapper.getSortingOrder();
        } else {
          sortingOrder = SortController_1.DEFAULT_SORTING_ORDER;
        }
        if (!Array.isArray(sortingOrder) || sortingOrder.length <= 0) {
          console.warn("AG Grid: sortingOrder must be an array with at least one element, currently it's " + sortingOrder);
          return null;
        }
        var currentIndex = sortingOrder.indexOf(column.getSort());
        var notInArray = currentIndex < 0;
        var lastItemInArray = currentIndex == sortingOrder.length - 1;
        var result;
        if (notInArray || lastItemInArray) {
          result = sortingOrder[0];
        } else {
          result = sortingOrder[currentIndex + 1];
        }
        if (SortController_1.DEFAULT_SORTING_ORDER.indexOf(result) < 0) {
          console.warn("AG Grid: invalid sort type " + result);
          return null;
        }
        return result;
      };
      SortController2.prototype.getColumnsOrderedForSort = function() {
        var allColumnsIncludingAuto = this.columnModel.getPrimaryAndSecondaryAndAutoColumns();
        var allColsIndexes = {};
        allColumnsIncludingAuto.forEach(function(col, index) {
          return allColsIndexes[col.getId()] = index;
        });
        allColumnsIncludingAuto.sort(function(a, b) {
          var iA = a.getSortIndex();
          var iB = b.getSortIndex();
          if (iA != null && iB != null) {
            return iA - iB;
          } else if (iA == null && iB == null) {
            var posA = allColsIndexes[a.getId()];
            var posB = allColsIndexes[b.getId()];
            return posA > posB ? 1 : -1;
          } else if (iB == null) {
            return -1;
          } else {
            return 1;
          }
        });
        return allColumnsIncludingAuto;
      };
      SortController2.prototype.getIndexableColumnsOrdered = function() {
        var _this = this;
        if (!this.gridOptionsWrapper.isColumnsSortingCoupledToGroup()) {
          return this.getColumnsWithSortingOrdered();
        }
        return this.getColumnsOrderedForSort().filter(function(col) {
          var _a;
          if (!!col.getColDef().showRowGroup) {
            if (col.getColDef().field && col.getSort()) {
              return true;
            }
            var sourceCols = _this.columnModel.getSourceColumnsForGroupColumn(col);
            return (_a = sourceCols) === null || _a === void 0 ? void 0 : _a.some(function(col2) {
              return !!col2.getSort();
            });
          }
          return !!col.getSort();
        });
      };
      SortController2.prototype.getColumnsWithSortingOrdered = function() {
        var orderedColumns = this.getColumnsOrderedForSort();
        return orderedColumns.filter(function(column) {
          return !!column.getSort();
        });
      };
      SortController2.prototype.getSortModel = function() {
        return this.getColumnsWithSortingOrdered().map(function(column) {
          return {
            sort: column.getSort(),
            colId: column.getId()
          };
        });
      };
      SortController2.prototype.getSortOptions = function() {
        return this.getColumnsWithSortingOrdered().map(function(column) {
          return {
            sort: column.getSort(),
            column
          };
        });
      };
      SortController2.prototype.canColumnDisplayMixedSort = function(column) {
        var isColumnSortCouplingActive = this.gridOptionsWrapper.isColumnsSortingCoupledToGroup();
        var isGroupDisplayColumn = !!column.getColDef().showRowGroup;
        return isColumnSortCouplingActive && isGroupDisplayColumn;
      };
      SortController2.prototype.getDisplaySortForColumn = function(column) {
        var _a;
        var linkedColumns = this.columnModel.getSourceColumnsForGroupColumn(column);
        if (!this.canColumnDisplayMixedSort(column) || !((_a = linkedColumns) === null || _a === void 0 ? void 0 : _a.length)) {
          return column.getSort();
        }
        var columnHasUniqueData = !!column.getColDef().field;
        var sortableColumns = columnHasUniqueData ? __spread$3([column], linkedColumns) : linkedColumns;
        var firstSort = sortableColumns[0].getSort();
        var allMatch = sortableColumns.every(function(col) {
          return col.getSort() == firstSort;
        });
        if (!allMatch) {
          return "mixed";
        }
        return firstSort;
      };
      SortController2.prototype.getDisplaySortIndexForColumn = function(column) {
        var _this = this;
        var isColumnSortCouplingActive = this.gridOptionsWrapper.isColumnsSortingCoupledToGroup();
        if (!isColumnSortCouplingActive) {
          return this.getColumnsWithSortingOrdered().indexOf(column);
        }
        var displayColumn = this.columnModel.getGroupDisplayColumnForGroup(column.getId());
        if (displayColumn) {
          if (!!column.getSort()) {
            return this.getDisplaySortIndexForColumn(displayColumn);
          }
          return null;
        }
        var allSortedCols = this.getIndexableColumnsOrdered().filter(function(col) {
          return !_this.columnModel.getGroupDisplayColumnForGroup(col.getId());
        });
        return allSortedCols.indexOf(column);
      };
      var SortController_1;
      SortController2.DEFAULT_SORTING_ORDER = [Constants.SORT_ASC, Constants.SORT_DESC, null];
      __decorate$C([
        Autowired("columnModel")
      ], SortController2.prototype, "columnModel", void 0);
      SortController2 = SortController_1 = __decorate$C([
        Bean("sortController")
      ], SortController2);
      return SortController2;
    }(BeanStub);
    __extends$A = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$B = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    ColumnHoverService = function(_super) {
      __extends$A(ColumnHoverService2, _super);
      function ColumnHoverService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      ColumnHoverService2.prototype.setMouseOver = function(columns) {
        this.selectedColumns = columns;
        var event = {
          type: Events.EVENT_COLUMN_HOVER_CHANGED
        };
        this.eventService.dispatchEvent(event);
      };
      ColumnHoverService2.prototype.clearMouseOver = function() {
        this.selectedColumns = null;
        var event = {
          type: Events.EVENT_COLUMN_HOVER_CHANGED
        };
        this.eventService.dispatchEvent(event);
      };
      ColumnHoverService2.prototype.isHovered = function(column) {
        return !!this.selectedColumns && this.selectedColumns.indexOf(column) >= 0;
      };
      ColumnHoverService2 = __decorate$B([
        Bean("columnHoverService")
      ], ColumnHoverService2);
      return ColumnHoverService2;
    }(BeanStub);
    __extends$z = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$A = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    ColumnAnimationService = function(_super) {
      __extends$z(ColumnAnimationService2, _super);
      function ColumnAnimationService2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.executeNextFuncs = [];
        _this.executeLaterFuncs = [];
        _this.active = false;
        _this.animationThreadCount = 0;
        return _this;
      }
      ColumnAnimationService2.prototype.postConstruct = function() {
        var _this = this;
        this.ctrlsService.whenReady(function(p) {
          return _this.gridBodyCtrl = p.gridBodyCtrl;
        });
      };
      ColumnAnimationService2.prototype.isActive = function() {
        return this.active;
      };
      ColumnAnimationService2.prototype.start = function() {
        if (this.active) {
          return;
        }
        if (this.gridOptionsWrapper.isSuppressColumnMoveAnimation()) {
          return;
        }
        if (this.gridOptionsWrapper.isEnableRtl()) {
          return;
        }
        this.ensureAnimationCssClassPresent();
        this.active = true;
      };
      ColumnAnimationService2.prototype.finish = function() {
        if (!this.active) {
          return;
        }
        this.flush();
        this.active = false;
      };
      ColumnAnimationService2.prototype.executeNextVMTurn = function(func) {
        if (this.active) {
          this.executeNextFuncs.push(func);
        } else {
          func();
        }
      };
      ColumnAnimationService2.prototype.executeLaterVMTurn = function(func) {
        if (this.active) {
          this.executeLaterFuncs.push(func);
        } else {
          func();
        }
      };
      ColumnAnimationService2.prototype.ensureAnimationCssClassPresent = function() {
        var _this = this;
        this.animationThreadCount++;
        var animationThreadCountCopy = this.animationThreadCount;
        this.gridBodyCtrl.setColumnMovingCss(true);
        this.executeLaterFuncs.push(function() {
          if (_this.animationThreadCount === animationThreadCountCopy) {
            _this.gridBodyCtrl.setColumnMovingCss(false);
          }
        });
      };
      ColumnAnimationService2.prototype.flush = function() {
        var nowFuncs = this.executeNextFuncs;
        this.executeNextFuncs = [];
        var waitFuncs = this.executeLaterFuncs;
        this.executeLaterFuncs = [];
        if (nowFuncs.length === 0 && waitFuncs.length === 0) {
          return;
        }
        window.setTimeout(function() {
          return nowFuncs.forEach(function(func) {
            return func();
          });
        }, 0);
        window.setTimeout(function() {
          return waitFuncs.forEach(function(func) {
            return func();
          });
        }, 300);
      };
      __decorate$A([
        Autowired("ctrlsService")
      ], ColumnAnimationService2.prototype, "ctrlsService", void 0);
      __decorate$A([
        PostConstruct
      ], ColumnAnimationService2.prototype, "postConstruct", null);
      ColumnAnimationService2 = __decorate$A([
        Bean("columnAnimationService")
      ], ColumnAnimationService2);
      return ColumnAnimationService2;
    }(BeanStub);
    __extends$y = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$z = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    AutoGroupColService = function(_super) {
      __extends$y(AutoGroupColService2, _super);
      function AutoGroupColService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      AutoGroupColService_1 = AutoGroupColService2;
      AutoGroupColService2.prototype.createAutoGroupColumns = function(existingCols, rowGroupColumns) {
        var _this = this;
        var groupAutoColumns = [];
        var doingTreeData = this.gridOptionsWrapper.isTreeData();
        var doingMultiAutoColumn = this.gridOptionsWrapper.isGroupMultiAutoColumn();
        if (doingTreeData && doingMultiAutoColumn) {
          console.warn("AG Grid: you cannot mix groupMultiAutoColumn with treeData, only one column can be used to display groups when doing tree data");
          doingMultiAutoColumn = false;
        }
        if (doingMultiAutoColumn) {
          rowGroupColumns.forEach(function(rowGroupCol, index) {
            groupAutoColumns.push(_this.createOneAutoGroupColumn(existingCols, rowGroupCol, index));
          });
        } else {
          groupAutoColumns.push(this.createOneAutoGroupColumn(existingCols));
        }
        return groupAutoColumns;
      };
      AutoGroupColService2.prototype.createOneAutoGroupColumn = function(existingCols, rowGroupCol, index) {
        var defaultAutoColDef = this.generateDefaultColDef(rowGroupCol);
        var colId;
        if (rowGroupCol) {
          colId = Constants.GROUP_AUTO_COLUMN_ID + "-" + rowGroupCol.getId();
        } else {
          colId = AutoGroupColService_1.GROUP_AUTO_COLUMN_BUNDLE_ID;
        }
        var userAutoColDef = this.gridOptionsWrapper.getAutoGroupColumnDef();
        mergeDeep(defaultAutoColDef, userAutoColDef);
        defaultAutoColDef = this.columnFactory.mergeColDefs(defaultAutoColDef);
        defaultAutoColDef.colId = colId;
        if (!this.gridOptionsWrapper.isTreeData()) {
          var noFieldOrValueGetter = missing(defaultAutoColDef.field) && missing(defaultAutoColDef.valueGetter) && missing(defaultAutoColDef.filterValueGetter);
          if (noFieldOrValueGetter) {
            defaultAutoColDef.filter = false;
          }
        }
        if (index && index > 0) {
          defaultAutoColDef.headerCheckboxSelection = false;
        }
        var existingCol = existingCols.find(function(col) {
          return col.getId() == colId;
        });
        if (existingCol) {
          existingCol.setColDef(defaultAutoColDef, null);
          this.columnFactory.applyColumnState(existingCol, defaultAutoColDef);
          return existingCol;
        }
        var newCol = new Column(defaultAutoColDef, null, colId, true);
        this.context.createBean(newCol);
        return newCol;
      };
      AutoGroupColService2.prototype.generateDefaultColDef = function(rowGroupCol) {
        var userDef = this.gridOptionsWrapper.getAutoGroupColumnDef();
        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
        var res = {
          headerName: localeTextFunc("group", "Group")
        };
        var userHasProvidedGroupCellRenderer = userDef && (userDef.cellRenderer || userDef.cellRendererFramework || userDef.cellRendererSelector);
        if (!userHasProvidedGroupCellRenderer) {
          res.cellRenderer = "agGroupCellRenderer";
        }
        if (rowGroupCol) {
          var colDef = rowGroupCol.getColDef();
          Object.assign(res, {
            headerName: this.columnModel.getDisplayNameForColumn(rowGroupCol, "header"),
            headerValueGetter: colDef.headerValueGetter
          });
          if (colDef.cellRenderer || colDef.cellRendererFramework) {
            Object.assign(res, {
              cellRendererParams: {
                innerRenderer: colDef.cellRenderer,
                innerRendererFramework: colDef.cellRendererFramework,
                innerRendererParams: colDef.cellRendererParams
              }
            });
          }
          res.showRowGroup = rowGroupCol.getColId();
        } else {
          res.showRowGroup = true;
        }
        return res;
      };
      var AutoGroupColService_1;
      AutoGroupColService2.GROUP_AUTO_COLUMN_BUNDLE_ID = Constants.GROUP_AUTO_COLUMN_ID;
      __decorate$z([
        Autowired("columnModel")
      ], AutoGroupColService2.prototype, "columnModel", void 0);
      __decorate$z([
        Autowired("columnFactory")
      ], AutoGroupColService2.prototype, "columnFactory", void 0);
      AutoGroupColService2 = AutoGroupColService_1 = __decorate$z([
        Bean("autoGroupColService")
      ], AutoGroupColService2);
      return AutoGroupColService2;
    }(BeanStub);
    __extends$x = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$y = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    PaginationAutoPageSizeService = function(_super) {
      __extends$x(PaginationAutoPageSizeService2, _super);
      function PaginationAutoPageSizeService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      PaginationAutoPageSizeService2.prototype.postConstruct = function() {
        var _this = this;
        this.ctrlsService.whenReady(function(p) {
          _this.centerRowContainerCon = p.centerRowContainerCtrl;
          _this.addManagedListener(_this.eventService, Events.EVENT_BODY_HEIGHT_CHANGED, _this.onBodyHeightChanged.bind(_this));
          _this.addManagedListener(_this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, _this.onScrollVisibilityChanged.bind(_this));
          _this.checkPageSize();
        });
      };
      PaginationAutoPageSizeService2.prototype.notActive = function() {
        return !this.gridOptionsWrapper.isPaginationAutoPageSize();
      };
      PaginationAutoPageSizeService2.prototype.onScrollVisibilityChanged = function() {
        this.checkPageSize();
      };
      PaginationAutoPageSizeService2.prototype.onBodyHeightChanged = function() {
        this.checkPageSize();
      };
      PaginationAutoPageSizeService2.prototype.checkPageSize = function() {
        if (this.notActive()) {
          return;
        }
        var rowHeight = this.gridOptionsWrapper.getRowHeightAsNumber();
        var bodyHeight = this.centerRowContainerCon.getViewportSizeFeature().getBodyHeight();
        if (bodyHeight > 0) {
          var newPageSize = Math.floor(bodyHeight / rowHeight);
          this.gridOptionsWrapper.setProperty("paginationPageSize", newPageSize);
        }
      };
      __decorate$y([
        Autowired("ctrlsService")
      ], PaginationAutoPageSizeService2.prototype, "ctrlsService", void 0);
      __decorate$y([
        PostConstruct
      ], PaginationAutoPageSizeService2.prototype, "postConstruct", null);
      PaginationAutoPageSizeService2 = __decorate$y([
        Bean("paginationAutoPageSizeService")
      ], PaginationAutoPageSizeService2);
      return PaginationAutoPageSizeService2;
    }(BeanStub);
    __extends$w = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$x = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    ValueCache = function(_super) {
      __extends$w(ValueCache2, _super);
      function ValueCache2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.cacheVersion = 0;
        return _this;
      }
      ValueCache2.prototype.init = function() {
        this.active = this.gridOptionsWrapper.isValueCache();
        this.neverExpires = this.gridOptionsWrapper.isValueCacheNeverExpires();
      };
      ValueCache2.prototype.onDataChanged = function() {
        if (this.neverExpires) {
          return;
        }
        this.expire();
      };
      ValueCache2.prototype.expire = function() {
        this.cacheVersion++;
      };
      ValueCache2.prototype.setValue = function(rowNode, colId, value) {
        if (this.active) {
          if (rowNode.__cacheVersion !== this.cacheVersion) {
            rowNode.__cacheVersion = this.cacheVersion;
            rowNode.__cacheData = {};
          }
          rowNode.__cacheData[colId] = value;
        }
      };
      ValueCache2.prototype.getValue = function(rowNode, colId) {
        if (!this.active || rowNode.__cacheVersion !== this.cacheVersion) {
          return void 0;
        }
        return rowNode.__cacheData[colId];
      };
      __decorate$x([
        PostConstruct
      ], ValueCache2.prototype, "init", null);
      ValueCache2 = __decorate$x([
        Bean("valueCache")
      ], ValueCache2);
      return ValueCache2;
    }(BeanStub);
    __extends$v = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$w = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    ChangeDetectionService = function(_super) {
      __extends$v(ChangeDetectionService2, _super);
      function ChangeDetectionService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      ChangeDetectionService2.prototype.init = function() {
        if (this.rowModel.getType() === Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {
          this.clientSideRowModel = this.rowModel;
        }
        this.addManagedListener(this.eventService, Events.EVENT_CELL_VALUE_CHANGED, this.onCellValueChanged.bind(this));
      };
      ChangeDetectionService2.prototype.onCellValueChanged = function(event) {
        if (event.source === Constants.SOURCE_PASTE) {
          return;
        }
        this.doChangeDetection(event.node, event.column);
      };
      ChangeDetectionService2.prototype.doChangeDetection = function(rowNode, column) {
        if (this.gridOptionsWrapper.isSuppressChangeDetection()) {
          return;
        }
        if (this.clientSideRowModel && !rowNode.isRowPinned()) {
          var onlyChangedColumns = this.gridOptionsWrapper.isAggregateOnlyChangedColumns();
          var changedPath = new ChangedPath(onlyChangedColumns, this.clientSideRowModel.getRootNode());
          changedPath.addParentNode(rowNode.parent, [column]);
          this.clientSideRowModel.doAggregate(changedPath);
        }
        this.rowRenderer.refreshCells();
      };
      __decorate$w([
        Autowired("rowModel")
      ], ChangeDetectionService2.prototype, "rowModel", void 0);
      __decorate$w([
        Autowired("rowRenderer")
      ], ChangeDetectionService2.prototype, "rowRenderer", void 0);
      __decorate$w([
        PostConstruct
      ], ChangeDetectionService2.prototype, "init", null);
      ChangeDetectionService2 = __decorate$w([
        Bean("changeDetectionService")
      ], ChangeDetectionService2);
      return ChangeDetectionService2;
    }(BeanStub);
    __extends$u = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$v = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    AgComponentUtils = function(_super) {
      __extends$u(AgComponentUtils2, _super);
      function AgComponentUtils2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      AgComponentUtils2.prototype.adaptFunction = function(propertyName, jsCompFunc) {
        var metadata = this.componentMetadataProvider.retrieve(propertyName);
        if (metadata && metadata.functionAdapter) {
          return metadata.functionAdapter(jsCompFunc);
        }
        return null;
      };
      AgComponentUtils2.prototype.adaptCellRendererFunction = function(callback) {
        var Adapter = function() {
          function Adapter2() {
          }
          Adapter2.prototype.refresh = function(params) {
            return false;
          };
          Adapter2.prototype.getGui = function() {
            return this.eGui;
          };
          Adapter2.prototype.init = function(params) {
            var callbackResult = callback(params);
            var type = typeof callbackResult;
            if (type === "string" || type === "number" || type === "boolean") {
              this.eGui = loadTemplate("<span>" + callbackResult + "</span>");
              return;
            }
            if (callbackResult == null) {
              this.eGui = loadTemplate("<span></span>");
              return;
            }
            this.eGui = callbackResult;
          };
          return Adapter2;
        }();
        return Adapter;
      };
      AgComponentUtils2.prototype.doesImplementIComponent = function(candidate) {
        if (!candidate) {
          return false;
        }
        return candidate.prototype && "getGui" in candidate.prototype;
      };
      __decorate$v([
        Autowired("componentMetadataProvider")
      ], AgComponentUtils2.prototype, "componentMetadataProvider", void 0);
      AgComponentUtils2 = __decorate$v([
        Bean("agComponentUtils")
      ], AgComponentUtils2);
      return AgComponentUtils2;
    }(BeanStub);
    __extends$t = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$u = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    ComponentMetadataProvider = function(_super) {
      __extends$t(ComponentMetadataProvider2, _super);
      function ComponentMetadataProvider2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      ComponentMetadataProvider2.prototype.postConstruct = function() {
        this.componentMetaData = {
          dateComponent: {
            mandatoryMethodList: ["getDate", "setDate"],
            optionalMethodList: ["afterGuiAttached", "setInputPlaceholder", "setInputAriaLabel"]
          },
          detailCellRenderer: {
            mandatoryMethodList: [],
            optionalMethodList: ["refresh"],
            functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
          },
          headerComponent: {
            mandatoryMethodList: [],
            optionalMethodList: ["refresh"]
          },
          headerGroupComponent: {
            mandatoryMethodList: [],
            optionalMethodList: []
          },
          loadingCellRenderer: {
            mandatoryMethodList: [],
            optionalMethodList: []
          },
          loadingOverlayComponent: {
            mandatoryMethodList: [],
            optionalMethodList: []
          },
          noRowsOverlayComponent: {
            mandatoryMethodList: [],
            optionalMethodList: []
          },
          floatingFilterComponent: {
            mandatoryMethodList: ["onParentModelChanged"],
            optionalMethodList: ["afterGuiAttached"]
          },
          floatingFilterWrapperComponent: {
            mandatoryMethodList: [],
            optionalMethodList: []
          },
          cellRenderer: {
            mandatoryMethodList: [],
            optionalMethodList: ["refresh", "afterGuiAttached"],
            functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
          },
          cellEditor: {
            mandatoryMethodList: ["getValue"],
            optionalMethodList: ["isPopup", "isCancelBeforeStart", "isCancelAfterEnd", "getPopupPosition", "focusIn", "focusOut", "afterGuiAttached"]
          },
          innerRenderer: {
            mandatoryMethodList: [],
            optionalMethodList: ["afterGuiAttached"],
            functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
          },
          fullWidthCellRenderer: {
            mandatoryMethodList: [],
            optionalMethodList: ["refresh", "afterGuiAttached"],
            functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
          },
          pinnedRowCellRenderer: {
            mandatoryMethodList: [],
            optionalMethodList: ["refresh", "afterGuiAttached"],
            functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
          },
          groupRowRenderer: {
            mandatoryMethodList: [],
            optionalMethodList: ["afterGuiAttached"],
            functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
          },
          filter: {
            mandatoryMethodList: ["isFilterActive", "doesFilterPass", "getModel", "setModel"],
            optionalMethodList: ["afterGuiAttached", "onNewRowsLoaded", "getModelAsString", "onFloatingFilterChanged", "onAnyFilterChanged"]
          },
          filterComponent: {
            mandatoryMethodList: ["isFilterActive", "doesFilterPass", "getModel", "setModel"],
            optionalMethodList: ["afterGuiAttached", "onNewRowsLoaded", "getModelAsString", "onFloatingFilterChanged", "onAnyFilterChanged"]
          },
          statusPanel: {
            mandatoryMethodList: [],
            optionalMethodList: ["afterGuiAttached"]
          },
          toolPanel: {
            mandatoryMethodList: [],
            optionalMethodList: ["refresh", "afterGuiAttached"]
          },
          tooltipComponent: {
            mandatoryMethodList: [],
            optionalMethodList: []
          }
        };
      };
      ComponentMetadataProvider2.prototype.retrieve = function(name) {
        return this.componentMetaData[name];
      };
      __decorate$u([
        Autowired("agComponentUtils")
      ], ComponentMetadataProvider2.prototype, "agComponentUtils", void 0);
      __decorate$u([
        PostConstruct
      ], ComponentMetadataProvider2.prototype, "postConstruct", null);
      ComponentMetadataProvider2 = __decorate$u([
        Bean("componentMetadataProvider")
      ], ComponentMetadataProvider2);
      return ComponentMetadataProvider2;
    }(BeanStub);
    __extends$s = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$t = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    MAT_GRID_SIZE = 8;
    BASE_GRID_SIZE = 4;
    BALHAM_GRID_SIZE = 4;
    ALPINE_GRID_SIZE = 6;
    HARD_CODED_SIZES = {
      "ag-theme-custom": {
        headerHeight: 25,
        headerCellMinWidth: 24,
        listItemHeight: BASE_GRID_SIZE * 5,
        rowHeight: 25,
        chartMenuPanelWidth: 220
      },
      "ag-theme-material": {
        headerHeight: MAT_GRID_SIZE * 7,
        headerCellMinWidth: 48,
        listItemHeight: MAT_GRID_SIZE * 4,
        rowHeight: MAT_GRID_SIZE * 6,
        chartMenuPanelWidth: 240
      },
      "ag-theme-balham": {
        headerHeight: BALHAM_GRID_SIZE * 8,
        headerCellMinWidth: 24,
        listItemHeight: BALHAM_GRID_SIZE * 6,
        rowHeight: BALHAM_GRID_SIZE * 7,
        chartMenuPanelWidth: 220
      },
      "ag-theme-alpine": {
        headerHeight: ALPINE_GRID_SIZE * 8,
        headerCellMinWidth: 36,
        listItemHeight: ALPINE_GRID_SIZE * 4,
        rowHeight: ALPINE_GRID_SIZE * 7,
        chartMenuPanelWidth: 240
      }
    };
    SASS_PROPERTY_BUILDER = {
      headerHeight: ["ag-header-row"],
      headerCellMinWidth: ["ag-header-cell"],
      listItemHeight: ["ag-virtual-list-item"],
      rowHeight: ["ag-row"],
      chartMenuPanelWidth: ["ag-chart-docked-container"]
    };
    CALCULATED_SIZES = {};
    Environment = function(_super) {
      __extends$s(Environment2, _super);
      function Environment2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      Environment2.prototype.getSassVariable = function(theme, key) {
        var useTheme = "ag-theme-" + (theme.match("material") ? "material" : theme.match("balham") ? "balham" : theme.match("alpine") ? "alpine" : "custom");
        var defaultValue = HARD_CODED_SIZES[useTheme][key];
        var calculatedValue = 0;
        if (!CALCULATED_SIZES[theme]) {
          CALCULATED_SIZES[theme] = {};
        }
        var size = CALCULATED_SIZES[theme][key];
        if (size != null) {
          return size;
        }
        if (SASS_PROPERTY_BUILDER[key]) {
          var classList = SASS_PROPERTY_BUILDER[key];
          var div = document.createElement("div");
          div.classList.add(theme);
          div.style.position = "absolute";
          var el = classList.reduce(function(prevEl, currentClass) {
            var currentDiv = document.createElement("div");
            currentDiv.style.position = "static";
            currentDiv.classList.add(currentClass);
            prevEl.appendChild(currentDiv);
            return currentDiv;
          }, div);
          if (document.body) {
            document.body.appendChild(div);
            var sizeName = key.toLowerCase().indexOf("height") !== -1 ? "height" : "width";
            calculatedValue = parseInt(window.getComputedStyle(el)[sizeName], 10);
            document.body.removeChild(div);
          }
        }
        CALCULATED_SIZES[theme][key] = calculatedValue || defaultValue;
        return CALCULATED_SIZES[theme][key];
      };
      Environment2.prototype.isThemeDark = function() {
        var theme = this.getTheme().theme;
        return !!theme && theme.indexOf("dark") >= 0;
      };
      Environment2.prototype.chartMenuPanelWidth = function() {
        var theme = this.getTheme().themeFamily;
        return this.getSassVariable(theme, "chartMenuPanelWidth");
      };
      Environment2.prototype.getTheme = function() {
        var reg = /\bag-(material|(?:theme-([\w\-]*)))\b/g;
        var el = this.eGridDiv;
        var themeMatch = null;
        var allThemes = [];
        while (el) {
          themeMatch = reg.exec(el.className);
          if (!themeMatch) {
            el = el.parentElement || void 0;
          } else {
            var matched = el.className.match(reg);
            if (matched) {
              allThemes = matched;
            }
            break;
          }
        }
        if (!themeMatch) {
          return { allThemes };
        }
        var theme = themeMatch[0];
        var usingOldTheme = themeMatch[2] === void 0;
        if (usingOldTheme) {
          var newTheme_1 = theme.replace("ag-", "ag-theme-");
          doOnce(function() {
            return console.warn("AG Grid: As of v19 old theme are no longer provided. Please replace " + theme + " with " + newTheme_1 + ".");
          }, "using-old-theme");
        }
        return { theme, el, themeFamily: theme.replace(/-dark$/, ""), allThemes };
      };
      __decorate$t([
        Autowired("eGridDiv")
      ], Environment2.prototype, "eGridDiv", void 0);
      Environment2 = __decorate$t([
        Bean("environment")
      ], Environment2);
      return Environment2;
    }(BeanStub);
    __extends$r = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$s = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param$1 = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    RowContainerHeightService = function(_super) {
      __extends$r(RowContainerHeightService2, _super);
      function RowContainerHeightService2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.scrollY = 0;
        _this.uiBodyHeight = 0;
        return _this;
      }
      RowContainerHeightService2.prototype.agWire = function(loggerFactory) {
        this.logger = loggerFactory.create("RowContainerHeightService");
      };
      RowContainerHeightService2.prototype.postConstruct = function() {
        this.addManagedListener(this.eventService, Events.EVENT_BODY_HEIGHT_CHANGED, this.updateOffset.bind(this));
        this.maxDivHeight = getMaxDivHeight();
        this.logger.log("maxDivHeight = " + this.maxDivHeight);
      };
      RowContainerHeightService2.prototype.isStretching = function() {
        return this.stretching;
      };
      RowContainerHeightService2.prototype.getDivStretchOffset = function() {
        return this.divStretchOffset;
      };
      RowContainerHeightService2.prototype.updateOffset = function() {
        if (!this.stretching) {
          return;
        }
        var gridBodyCon = this.ctrlsService.getGridBodyCtrl();
        var newScrollY = gridBodyCon.getScrollFeature().getVScrollPosition().top;
        var newBodyHeight = this.getUiBodyHeight();
        var atLeastOneChanged = newScrollY !== this.scrollY || newBodyHeight !== this.uiBodyHeight;
        if (atLeastOneChanged) {
          this.scrollY = newScrollY;
          this.uiBodyHeight = newBodyHeight;
          this.calculateOffset();
        }
      };
      RowContainerHeightService2.prototype.calculateOffset = function() {
        this.setUiContainerHeight(this.maxDivHeight);
        this.pixelsToShave = this.modelHeight - this.uiContainerHeight;
        this.maxScrollY = this.uiContainerHeight - this.uiBodyHeight;
        var scrollPercent = this.scrollY / this.maxScrollY;
        var divStretchOffset = scrollPercent * this.pixelsToShave;
        this.logger.log("Div Stretch Offset = " + divStretchOffset + " (" + this.pixelsToShave + " * " + scrollPercent + ")");
        this.setDivStretchOffset(divStretchOffset);
      };
      RowContainerHeightService2.prototype.setUiContainerHeight = function(height) {
        if (height !== this.uiContainerHeight) {
          this.uiContainerHeight = height;
          this.eventService.dispatchEvent({ type: Events.EVENT_ROW_CONTAINER_HEIGHT_CHANGED });
        }
      };
      RowContainerHeightService2.prototype.clearOffset = function() {
        this.setUiContainerHeight(this.modelHeight);
        this.pixelsToShave = 0;
        this.setDivStretchOffset(0);
      };
      RowContainerHeightService2.prototype.setDivStretchOffset = function(newOffset) {
        var newOffsetFloor = typeof newOffset === "number" ? Math.floor(newOffset) : null;
        if (this.divStretchOffset === newOffsetFloor) {
          return;
        }
        this.divStretchOffset = newOffsetFloor;
        this.eventService.dispatchEvent({ type: Events.EVENT_HEIGHT_SCALE_CHANGED });
      };
      RowContainerHeightService2.prototype.setModelHeight = function(modelHeight) {
        this.modelHeight = modelHeight;
        this.stretching = modelHeight != null && this.maxDivHeight > 0 && modelHeight > this.maxDivHeight;
        if (this.stretching) {
          this.calculateOffset();
        } else {
          this.clearOffset();
        }
      };
      RowContainerHeightService2.prototype.getUiContainerHeight = function() {
        return this.uiContainerHeight;
      };
      RowContainerHeightService2.prototype.getRealPixelPosition = function(modelPixel) {
        return modelPixel - this.divStretchOffset;
      };
      RowContainerHeightService2.prototype.getUiBodyHeight = function() {
        var gridBodyCon = this.ctrlsService.getGridBodyCtrl();
        var pos = gridBodyCon.getScrollFeature().getVScrollPosition();
        return pos.bottom - pos.top;
      };
      RowContainerHeightService2.prototype.getScrollPositionForPixel = function(rowTop) {
        if (this.pixelsToShave <= 0) {
          return rowTop;
        }
        var modelMaxScroll = this.modelHeight - this.getUiBodyHeight();
        var scrollPercent = rowTop / modelMaxScroll;
        var scrollPixel = this.maxScrollY * scrollPercent;
        return scrollPixel;
      };
      __decorate$s([
        Autowired("ctrlsService")
      ], RowContainerHeightService2.prototype, "ctrlsService", void 0);
      __decorate$s([
        __param$1(0, Qualifier("loggerFactory"))
      ], RowContainerHeightService2.prototype, "agWire", null);
      __decorate$s([
        PostConstruct
      ], RowContainerHeightService2.prototype, "postConstruct", null);
      RowContainerHeightService2 = __decorate$s([
        Bean("rowContainerHeightService")
      ], RowContainerHeightService2);
      return RowContainerHeightService2;
    }(BeanStub);
    __extends$q = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$r = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    SelectableService = function(_super) {
      __extends$q(SelectableService2, _super);
      function SelectableService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      SelectableService2.prototype.init = function() {
        this.groupSelectsChildren = this.gridOptionsWrapper.isGroupSelectsChildren();
        this.isRowSelectableFunc = this.gridOptionsWrapper.getIsRowSelectableFunc();
      };
      SelectableService2.prototype.updateSelectableAfterGrouping = function(rowNode) {
        if (this.isRowSelectableFunc) {
          var nextChildrenFunc = function(node) {
            return node.childrenAfterGroup;
          };
          this.recurseDown(rowNode.childrenAfterGroup, nextChildrenFunc);
        }
      };
      SelectableService2.prototype.recurseDown = function(children, nextChildrenFunc) {
        var _this = this;
        if (!children) {
          return;
        }
        children.forEach(function(child) {
          if (!child.group) {
            return;
          }
          if (child.hasChildren()) {
            _this.recurseDown(nextChildrenFunc(child), nextChildrenFunc);
          }
          var rowSelectable;
          if (_this.groupSelectsChildren) {
            var firstSelectable = (nextChildrenFunc(child) || []).find(function(rowNode) {
              return rowNode.selectable === true;
            });
            rowSelectable = exists(firstSelectable);
          } else {
            rowSelectable = _this.isRowSelectableFunc ? _this.isRowSelectableFunc(child) : false;
          }
          child.setRowSelectable(rowSelectable);
        });
      };
      __decorate$r([
        PostConstruct
      ], SelectableService2.prototype, "init", null);
      SelectableService2 = __decorate$r([
        Bean("selectableService")
      ], SelectableService2);
      return SelectableService2;
    }(BeanStub);
    __extends$p = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$q = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    PaginationComp = function(_super) {
      __extends$p(PaginationComp2, _super);
      function PaginationComp2() {
        var _this = _super.call(this) || this;
        _this.previousAndFirstButtonsDisabled = false;
        _this.nextButtonDisabled = false;
        _this.lastButtonDisabled = false;
        return _this;
      }
      PaginationComp2.prototype.postConstruct = function() {
        var _this = this;
        var isRtl = this.gridOptionsWrapper.isEnableRtl();
        this.setTemplate(this.getTemplate());
        this.btFirst.insertAdjacentElement("afterbegin", createIconNoSpan(isRtl ? "last" : "first", this.gridOptionsWrapper));
        this.btPrevious.insertAdjacentElement("afterbegin", createIconNoSpan(isRtl ? "next" : "previous", this.gridOptionsWrapper));
        this.btNext.insertAdjacentElement("afterbegin", createIconNoSpan(isRtl ? "previous" : "next", this.gridOptionsWrapper));
        this.btLast.insertAdjacentElement("afterbegin", createIconNoSpan(isRtl ? "first" : "last", this.gridOptionsWrapper));
        var isPaging = this.gridOptionsWrapper.isPagination();
        var paginationPanelEnabled = isPaging && !this.gridOptionsWrapper.isSuppressPaginationPanel();
        if (!paginationPanelEnabled) {
          this.setDisplayed(false);
          return;
        }
        this.addManagedListener(this.eventService, Events.EVENT_PAGINATION_CHANGED, this.onPaginationChanged.bind(this));
        [
          { el: this.btFirst, fn: this.onBtFirst.bind(this) },
          { el: this.btPrevious, fn: this.onBtPrevious.bind(this) },
          { el: this.btNext, fn: this.onBtNext.bind(this) },
          { el: this.btLast, fn: this.onBtLast.bind(this) }
        ].forEach(function(item) {
          var el = item.el, fn = item.fn;
          _this.addManagedListener(el, "click", fn);
          _this.addManagedListener(el, "keydown", function(e) {
            if (e.key === KeyCode.ENTER || e.key === KeyCode.SPACE) {
              e.preventDefault();
              fn();
            }
          });
        });
        this.onPaginationChanged();
      };
      PaginationComp2.prototype.onPaginationChanged = function() {
        this.enableOrDisableButtons();
        this.updateRowLabels();
        this.setCurrentPageLabel();
        this.setTotalLabels();
      };
      PaginationComp2.prototype.onBtFirst = function() {
        if (!this.previousAndFirstButtonsDisabled) {
          this.paginationProxy.goToFirstPage();
        }
      };
      PaginationComp2.prototype.setCurrentPageLabel = function() {
        var pagesExist = this.paginationProxy.getTotalPages() > 0;
        var currentPage = this.paginationProxy.getCurrentPage();
        var toDisplay = pagesExist ? currentPage + 1 : 0;
        this.lbCurrent.innerHTML = this.formatNumber(toDisplay);
      };
      PaginationComp2.prototype.formatNumber = function(value) {
        var userFunc = this.gridOptionsWrapper.getPaginationNumberFormatterFunc();
        if (userFunc) {
          var params = { value };
          return userFunc(params);
        }
        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
        var thousandSeparator = localeTextFunc("thousandSeparator", ",");
        var decimalSeparator = localeTextFunc("decimalSeparator", ".");
        return formatNumberCommas(value, thousandSeparator, decimalSeparator);
      };
      PaginationComp2.prototype.getTemplate = function() {
        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
        var strPage = localeTextFunc("page", "Page");
        var strTo = localeTextFunc("to", "to");
        var strOf = localeTextFunc("of", "of");
        var strFirst = localeTextFunc("firstPage", "First Page");
        var strPrevious = localeTextFunc("previousPage", "Previous Page");
        var strNext = localeTextFunc("nextPage", "Next Page");
        var strLast = localeTextFunc("lastPage", "Last Page");
        var compId = this.getCompId();
        return '<div class="ag-paging-panel ag-unselectable" id="ag-' + compId + '">\n                <span class="ag-paging-row-summary-panel" role="status">\n                    <span id="ag-' + compId + '-first-row" ref="lbFirstRowOnPage" class="ag-paging-row-summary-panel-number"></span>\n                    <span id="ag-' + compId + '-to">' + strTo + '</span>\n                    <span id="ag-' + compId + '-last-row" ref="lbLastRowOnPage" class="ag-paging-row-summary-panel-number"></span>\n                    <span id="ag-' + compId + '-of">' + strOf + '</span>\n                    <span id="ag-' + compId + '-row-count" ref="lbRecordCount" class="ag-paging-row-summary-panel-number"></span>\n                </span>\n                <span class="ag-paging-page-summary-panel" role="presentation">\n                    <div ref="btFirst" class="ag-paging-button" role="button" aria-label="' + strFirst + '"></div>\n                    <div ref="btPrevious" class="ag-paging-button" role="button" aria-label="' + strPrevious + '"></div>\n                    <span class="ag-paging-description" role="status">\n                        <span id="ag-' + compId + '-start-page">' + strPage + '</span>\n                        <span id="ag-' + compId + '-start-page-number" ref="lbCurrent" class="ag-paging-number"></span>\n                        <span id="ag-' + compId + '-of-page">' + strOf + '</span>\n                        <span id="ag-' + compId + '-of-page-number" ref="lbTotal" class="ag-paging-number"></span>\n                    </span>\n                    <div ref="btNext" class="ag-paging-button" role="button" aria-label="' + strNext + '"></div>\n                    <div ref="btLast" class="ag-paging-button" role="button" aria-label="' + strLast + '"></div>\n                </span>\n            </div>';
      };
      PaginationComp2.prototype.onBtNext = function() {
        if (!this.nextButtonDisabled) {
          this.paginationProxy.goToNextPage();
        }
      };
      PaginationComp2.prototype.onBtPrevious = function() {
        if (!this.previousAndFirstButtonsDisabled) {
          this.paginationProxy.goToPreviousPage();
        }
      };
      PaginationComp2.prototype.onBtLast = function() {
        if (!this.lastButtonDisabled) {
          this.paginationProxy.goToLastPage();
        }
      };
      PaginationComp2.prototype.enableOrDisableButtons = function() {
        var currentPage = this.paginationProxy.getCurrentPage();
        var maxRowFound = this.paginationProxy.isLastPageFound();
        var totalPages = this.paginationProxy.getTotalPages();
        this.previousAndFirstButtonsDisabled = currentPage === 0;
        this.toggleButtonDisabled(this.btFirst, this.previousAndFirstButtonsDisabled);
        this.toggleButtonDisabled(this.btPrevious, this.previousAndFirstButtonsDisabled);
        var zeroPagesToDisplay = this.isZeroPagesToDisplay();
        var onLastPage = maxRowFound && currentPage === totalPages - 1;
        this.nextButtonDisabled = onLastPage || zeroPagesToDisplay;
        this.lastButtonDisabled = !maxRowFound || zeroPagesToDisplay || currentPage === totalPages - 1;
        this.toggleButtonDisabled(this.btNext, this.nextButtonDisabled);
        this.toggleButtonDisabled(this.btLast, this.lastButtonDisabled);
      };
      PaginationComp2.prototype.toggleButtonDisabled = function(button, disabled) {
        setAriaDisabled(button, disabled);
        button.classList.toggle("ag-disabled", disabled);
        if (disabled) {
          button.removeAttribute("tabindex");
        } else {
          button.setAttribute("tabindex", "0");
        }
      };
      PaginationComp2.prototype.updateRowLabels = function() {
        var currentPage = this.paginationProxy.getCurrentPage();
        var pageSize = this.paginationProxy.getPageSize();
        var maxRowFound = this.paginationProxy.isLastPageFound();
        var rowCount = this.paginationProxy.isLastPageFound() ? this.paginationProxy.getMasterRowCount() : null;
        var startRow;
        var endRow;
        if (this.isZeroPagesToDisplay()) {
          startRow = endRow = 0;
        } else {
          startRow = pageSize * currentPage + 1;
          endRow = startRow + pageSize - 1;
          if (maxRowFound && endRow > rowCount) {
            endRow = rowCount;
          }
        }
        this.lbFirstRowOnPage.innerHTML = this.formatNumber(startRow);
        if (this.rowNodeBlockLoader.isLoading()) {
          this.lbLastRowOnPage.innerHTML = "?";
        } else {
          this.lbLastRowOnPage.innerHTML = this.formatNumber(endRow);
        }
      };
      PaginationComp2.prototype.isZeroPagesToDisplay = function() {
        var maxRowFound = this.paginationProxy.isLastPageFound();
        var totalPages = this.paginationProxy.getTotalPages();
        return maxRowFound && totalPages === 0;
      };
      PaginationComp2.prototype.setTotalLabels = function() {
        var lastPageFound = this.paginationProxy.isLastPageFound();
        var totalPages = this.paginationProxy.getTotalPages();
        var rowCount = lastPageFound ? this.paginationProxy.getMasterRowCount() : null;
        if (rowCount === 1) {
          var firstRow = this.paginationProxy.getRow(0);
          var hiddenGroupRow = firstRow && firstRow.group && !(firstRow.groupData || firstRow.aggData);
          if (hiddenGroupRow) {
            this.setTotalLabelsToZero();
            return;
          }
        }
        if (lastPageFound) {
          this.lbTotal.innerHTML = this.formatNumber(totalPages);
          this.lbRecordCount.innerHTML = this.formatNumber(rowCount);
        } else {
          var moreText = this.gridOptionsWrapper.getLocaleTextFunc()("more", "more");
          this.lbTotal.innerHTML = moreText;
          this.lbRecordCount.innerHTML = moreText;
        }
      };
      PaginationComp2.prototype.setTotalLabelsToZero = function() {
        this.lbFirstRowOnPage.innerHTML = this.formatNumber(0);
        this.lbCurrent.innerHTML = this.formatNumber(0);
        this.lbLastRowOnPage.innerHTML = this.formatNumber(0);
        this.lbTotal.innerHTML = this.formatNumber(0);
        this.lbRecordCount.innerHTML = this.formatNumber(0);
      };
      __decorate$q([
        Autowired("paginationProxy")
      ], PaginationComp2.prototype, "paginationProxy", void 0);
      __decorate$q([
        Autowired("rowNodeBlockLoader")
      ], PaginationComp2.prototype, "rowNodeBlockLoader", void 0);
      __decorate$q([
        RefSelector("btFirst")
      ], PaginationComp2.prototype, "btFirst", void 0);
      __decorate$q([
        RefSelector("btPrevious")
      ], PaginationComp2.prototype, "btPrevious", void 0);
      __decorate$q([
        RefSelector("btNext")
      ], PaginationComp2.prototype, "btNext", void 0);
      __decorate$q([
        RefSelector("btLast")
      ], PaginationComp2.prototype, "btLast", void 0);
      __decorate$q([
        RefSelector("lbRecordCount")
      ], PaginationComp2.prototype, "lbRecordCount", void 0);
      __decorate$q([
        RefSelector("lbFirstRowOnPage")
      ], PaginationComp2.prototype, "lbFirstRowOnPage", void 0);
      __decorate$q([
        RefSelector("lbLastRowOnPage")
      ], PaginationComp2.prototype, "lbLastRowOnPage", void 0);
      __decorate$q([
        RefSelector("lbCurrent")
      ], PaginationComp2.prototype, "lbCurrent", void 0);
      __decorate$q([
        RefSelector("lbTotal")
      ], PaginationComp2.prototype, "lbTotal", void 0);
      __decorate$q([
        PostConstruct
      ], PaginationComp2.prototype, "postConstruct", null);
      return PaginationComp2;
    }(Component);
    __extends$o = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$p = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    (function(LoadingType2) {
      LoadingType2[LoadingType2["Loading"] = 0] = "Loading";
      LoadingType2[LoadingType2["NoRows"] = 1] = "NoRows";
    })(LoadingType || (LoadingType = {}));
    OverlayWrapperComponent = function(_super) {
      __extends$o(OverlayWrapperComponent2, _super);
      function OverlayWrapperComponent2() {
        var _this = _super.call(this, OverlayWrapperComponent2.TEMPLATE) || this;
        _this.inProgress = false;
        _this.destroyRequested = false;
        _this.manuallyDisplayed = false;
        return _this;
      }
      OverlayWrapperComponent2.prototype.updateLayoutClasses = function(cssClass, params) {
        var overlayWrapperClassList = this.eOverlayWrapper.classList;
        overlayWrapperClassList.toggle(LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);
        overlayWrapperClassList.toggle(LayoutCssClasses.NORMAL, params.normal);
        overlayWrapperClassList.toggle(LayoutCssClasses.PRINT, params.print);
      };
      OverlayWrapperComponent2.prototype.postConstruct = function() {
        this.createManagedBean(new LayoutFeature(this));
        this.setDisplayed(false);
        this.addManagedListener(this.eventService, Events.EVENT_ROW_DATA_UPDATED, this.onRowDataUpdated.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.onNewColumnsLoaded.bind(this));
        if (this.gridOptionsWrapper.isRowModelDefault() && !this.gridOptionsWrapper.getRowData()) {
          this.showLoadingOverlay();
        }
        this.gridApi.registerOverlayWrapperComp(this);
      };
      OverlayWrapperComponent2.prototype.setWrapperTypeClass = function(loadingType) {
        var overlayWrapperClassList = this.eOverlayWrapper.classList;
        overlayWrapperClassList.toggle("ag-overlay-loading-wrapper", loadingType === LoadingType.Loading);
        overlayWrapperClassList.toggle("ag-overlay-no-rows-wrapper", loadingType === LoadingType.NoRows);
      };
      OverlayWrapperComponent2.prototype.showLoadingOverlay = function() {
        if (this.gridOptionsWrapper.isSuppressLoadingOverlay()) {
          return;
        }
        var params = {};
        var compDetails = this.userComponentFactory.getLoadingOverlayCompDetails(params);
        var promise = compDetails.newAgStackInstance();
        this.showOverlay(promise, LoadingType.Loading);
      };
      OverlayWrapperComponent2.prototype.showNoRowsOverlay = function() {
        if (this.gridOptionsWrapper.isSuppressNoRowsOverlay()) {
          return;
        }
        var params = {};
        var compDetails = this.userComponentFactory.getNoRowsOverlayCompDetails(params);
        var promise = compDetails.newAgStackInstance();
        this.showOverlay(promise, LoadingType.NoRows);
      };
      OverlayWrapperComponent2.prototype.showOverlay = function(workItem, type) {
        var _this = this;
        if (this.inProgress) {
          return;
        }
        this.setWrapperTypeClass(type);
        this.destroyActiveOverlay();
        this.inProgress = true;
        if (workItem) {
          workItem.then(function(comp) {
            _this.inProgress = false;
            _this.eOverlayWrapper.appendChild(comp.getGui());
            _this.activeOverlay = comp;
            if (_this.destroyRequested) {
              _this.destroyRequested = false;
              _this.destroyActiveOverlay();
            }
          });
        }
        this.manuallyDisplayed = this.columnModel.isReady() && !this.paginationProxy.isEmpty();
        this.setDisplayed(true);
      };
      OverlayWrapperComponent2.prototype.destroyActiveOverlay = function() {
        if (this.inProgress) {
          this.destroyRequested = true;
          return;
        }
        if (!this.activeOverlay) {
          return;
        }
        this.activeOverlay = this.getContext().destroyBean(this.activeOverlay);
        clearElement(this.eOverlayWrapper);
      };
      OverlayWrapperComponent2.prototype.hideOverlay = function() {
        this.manuallyDisplayed = false;
        this.destroyActiveOverlay();
        this.setDisplayed(false);
      };
      OverlayWrapperComponent2.prototype.destroy = function() {
        this.destroyActiveOverlay();
        _super.prototype.destroy.call(this);
      };
      OverlayWrapperComponent2.prototype.showOrHideOverlay = function() {
        var isEmpty = this.paginationProxy.isEmpty();
        var isSuppressNoRowsOverlay = this.gridOptionsWrapper.isSuppressNoRowsOverlay();
        if (isEmpty && !isSuppressNoRowsOverlay) {
          this.showNoRowsOverlay();
        } else {
          this.hideOverlay();
        }
      };
      OverlayWrapperComponent2.prototype.onRowDataUpdated = function() {
        this.showOrHideOverlay();
      };
      OverlayWrapperComponent2.prototype.onNewColumnsLoaded = function() {
        if (this.columnModel.isReady() && !this.paginationProxy.isEmpty() && !this.manuallyDisplayed) {
          this.hideOverlay();
        }
      };
      OverlayWrapperComponent2.TEMPLATE = '\n        <div class="ag-overlay" aria-hidden="true">\n            <div class="ag-overlay-panel">\n                <div class="ag-overlay-wrapper" ref="eOverlayWrapper"></div>\n            </div>\n        </div>';
      __decorate$p([
        Autowired("userComponentFactory")
      ], OverlayWrapperComponent2.prototype, "userComponentFactory", void 0);
      __decorate$p([
        Autowired("paginationProxy")
      ], OverlayWrapperComponent2.prototype, "paginationProxy", void 0);
      __decorate$p([
        Autowired("gridApi")
      ], OverlayWrapperComponent2.prototype, "gridApi", void 0);
      __decorate$p([
        Autowired("columnModel")
      ], OverlayWrapperComponent2.prototype, "columnModel", void 0);
      __decorate$p([
        RefSelector("eOverlayWrapper")
      ], OverlayWrapperComponent2.prototype, "eOverlayWrapper", void 0);
      __decorate$p([
        PostConstruct
      ], OverlayWrapperComponent2.prototype, "postConstruct", null);
      return OverlayWrapperComponent2;
    }(Component);
    __extends$n = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$o = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    RowPositionUtils = function(_super) {
      __extends$n(RowPositionUtils2, _super);
      function RowPositionUtils2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      RowPositionUtils2.prototype.getFirstRow = function() {
        var rowIndex = 0;
        var rowPinned;
        if (this.pinnedRowModel.getPinnedTopRowCount()) {
          rowPinned = Constants.PINNED_TOP;
        } else if (this.rowModel.getRowCount()) {
          rowPinned = null;
          rowIndex = this.paginationProxy.getPageFirstRow();
        } else if (this.pinnedRowModel.getPinnedBottomRowCount()) {
          rowPinned = Constants.PINNED_BOTTOM;
        }
        return rowPinned === void 0 ? null : { rowIndex, rowPinned };
      };
      RowPositionUtils2.prototype.getLastRow = function() {
        var rowIndex;
        var rowPinned = null;
        var pinnedBottomCount = this.pinnedRowModel.getPinnedBottomRowCount();
        var pinnedTopCount = this.pinnedRowModel.getPinnedTopRowCount();
        if (pinnedBottomCount) {
          rowPinned = Constants.PINNED_BOTTOM;
          rowIndex = pinnedBottomCount - 1;
        } else if (this.rowModel.getRowCount()) {
          rowPinned = null;
          rowIndex = this.paginationProxy.getPageLastRow();
        } else if (pinnedTopCount) {
          rowPinned = Constants.PINNED_TOP;
          rowIndex = pinnedTopCount - 1;
        }
        return rowIndex === void 0 ? null : { rowIndex, rowPinned };
      };
      RowPositionUtils2.prototype.getRowNode = function(gridRow) {
        switch (gridRow.rowPinned) {
          case Constants.PINNED_TOP:
            return this.pinnedRowModel.getPinnedTopRowData()[gridRow.rowIndex];
          case Constants.PINNED_BOTTOM:
            return this.pinnedRowModel.getPinnedBottomRowData()[gridRow.rowIndex];
          default:
            return this.rowModel.getRow(gridRow.rowIndex);
        }
      };
      RowPositionUtils2.prototype.sameRow = function(rowA, rowB) {
        if (!rowA && !rowB) {
          return true;
        }
        if (rowA && !rowB || !rowA && rowB) {
          return false;
        }
        return rowA.rowIndex === rowB.rowIndex && rowA.rowPinned == rowB.rowPinned;
      };
      RowPositionUtils2.prototype.before = function(rowA, rowB) {
        switch (rowA.rowPinned) {
          case Constants.PINNED_TOP:
            if (rowB.rowPinned !== Constants.PINNED_TOP) {
              return true;
            }
            break;
          case Constants.PINNED_BOTTOM:
            if (rowB.rowPinned !== Constants.PINNED_BOTTOM) {
              return false;
            }
            break;
          default:
            if (exists(rowB.rowPinned)) {
              return rowB.rowPinned !== Constants.PINNED_TOP;
            }
            break;
        }
        return rowA.rowIndex < rowB.rowIndex;
      };
      RowPositionUtils2.prototype.rowMax = function(rows) {
        var _this = this;
        var max;
        rows.forEach(function(row) {
          if (max === void 0 || _this.before(max, row)) {
            max = row;
          }
        });
        return max;
      };
      RowPositionUtils2.prototype.rowMin = function(rows) {
        var _this = this;
        var min;
        rows.forEach(function(row) {
          if (min === void 0 || _this.before(row, min)) {
            min = row;
          }
        });
        return min;
      };
      __decorate$o([
        Autowired("rowModel")
      ], RowPositionUtils2.prototype, "rowModel", void 0);
      __decorate$o([
        Autowired("pinnedRowModel")
      ], RowPositionUtils2.prototype, "pinnedRowModel", void 0);
      __decorate$o([
        Autowired("paginationProxy")
      ], RowPositionUtils2.prototype, "paginationProxy", void 0);
      RowPositionUtils2 = __decorate$o([
        Bean("rowPositionUtils")
      ], RowPositionUtils2);
      return RowPositionUtils2;
    }(BeanStub);
    __extends$m = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$n = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    CellPositionUtils = function(_super) {
      __extends$m(CellPositionUtils2, _super);
      function CellPositionUtils2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      CellPositionUtils2.prototype.createId = function(cellPosition) {
        var rowIndex = cellPosition.rowIndex, rowPinned = cellPosition.rowPinned, column = cellPosition.column;
        return this.createIdFromValues(rowIndex, column, rowPinned);
      };
      CellPositionUtils2.prototype.createIdFromValues = function(rowIndex, column, rowPinned) {
        return rowIndex + "." + (rowPinned == null ? "null" : rowPinned) + "." + column.getId();
      };
      CellPositionUtils2.prototype.equals = function(cellA, cellB) {
        var colsMatch = cellA.column === cellB.column;
        var floatingMatch = cellA.rowPinned === cellB.rowPinned;
        var indexMatch = cellA.rowIndex === cellB.rowIndex;
        return colsMatch && floatingMatch && indexMatch;
      };
      CellPositionUtils2 = __decorate$n([
        Bean("cellPositionUtils")
      ], CellPositionUtils2);
      return CellPositionUtils2;
    }(BeanStub);
    __extends$l = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    UndoRedoAction = function() {
      function UndoRedoAction2(cellValueChanges) {
        this.cellValueChanges = cellValueChanges;
      }
      return UndoRedoAction2;
    }();
    RangeUndoRedoAction = function(_super) {
      __extends$l(RangeUndoRedoAction2, _super);
      function RangeUndoRedoAction2(cellValueChanges, initialRange, finalRange, ranges) {
        var _this = _super.call(this, cellValueChanges) || this;
        _this.initialRange = initialRange;
        _this.finalRange = finalRange;
        _this.ranges = ranges;
        return _this;
      }
      return RangeUndoRedoAction2;
    }(UndoRedoAction);
    UndoRedoStack = function() {
      function UndoRedoStack2(maxStackSize) {
        this.actionStack = [];
        this.maxStackSize = maxStackSize ? maxStackSize : UndoRedoStack2.DEFAULT_STACK_SIZE;
        this.actionStack = new Array(this.maxStackSize);
      }
      UndoRedoStack2.prototype.pop = function() {
        return this.actionStack.pop();
      };
      UndoRedoStack2.prototype.push = function(item) {
        var shouldAddActions = item.cellValueChanges && item.cellValueChanges.length > 0;
        if (!shouldAddActions) {
          return;
        }
        if (this.actionStack.length === this.maxStackSize) {
          this.actionStack.shift();
        }
        this.actionStack.push(item);
      };
      UndoRedoStack2.prototype.clear = function() {
        this.actionStack = [];
      };
      UndoRedoStack2.prototype.getCurrentStackSize = function() {
        return this.actionStack.length;
      };
      UndoRedoStack2.DEFAULT_STACK_SIZE = 10;
      return UndoRedoStack2;
    }();
    __extends$k = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign = function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    __decorate$m = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __read$3 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread$2 = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read$3(arguments[i]));
      return ar;
    };
    UndoRedoService = function(_super) {
      __extends$k(UndoRedoService2, _super);
      function UndoRedoService2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.cellValueChanges = [];
        _this.activeCellEdit = null;
        _this.activeRowEdit = null;
        _this.isPasting = false;
        _this.isRangeInAction = false;
        _this.onCellValueChanged = function(event) {
          var eventCell = { column: event.column, rowIndex: event.rowIndex, rowPinned: event.rowPinned };
          var isCellEditing = _this.activeCellEdit !== null && _this.cellPositionUtils.equals(_this.activeCellEdit, eventCell);
          var isRowEditing = _this.activeRowEdit !== null && _this.rowPositionUtils.sameRow(_this.activeRowEdit, eventCell);
          var shouldCaptureAction = isCellEditing || isRowEditing || _this.isPasting || _this.isRangeInAction;
          if (!shouldCaptureAction) {
            return;
          }
          var rowPinned = event.rowPinned, rowIndex = event.rowIndex, column = event.column, oldValue = event.oldValue, value = event.value;
          var cellValueChange = {
            rowPinned,
            rowIndex,
            columnId: column.getColId(),
            newValue: value,
            oldValue
          };
          _this.cellValueChanges.push(cellValueChange);
        };
        _this.clearStacks = function() {
          _this.undoStack.clear();
          _this.redoStack.clear();
        };
        return _this;
      }
      UndoRedoService2.prototype.init = function() {
        var _this = this;
        if (!this.gridOptionsWrapper.isUndoRedoCellEditing()) {
          return;
        }
        var undoRedoLimit = this.gridOptionsWrapper.getUndoRedoCellEditingLimit();
        if (undoRedoLimit <= 0) {
          return;
        }
        this.undoStack = new UndoRedoStack(undoRedoLimit);
        this.redoStack = new UndoRedoStack(undoRedoLimit);
        this.addRowEditingListeners();
        this.addCellEditingListeners();
        this.addPasteListeners();
        this.addFillListeners();
        this.addCellKeyListeners();
        this.addManagedListener(this.eventService, Events.EVENT_CELL_VALUE_CHANGED, this.onCellValueChanged);
        this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, function(e) {
          if (!e.keepUndoRedoStack) {
            _this.clearStacks();
          }
        });
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.clearStacks);
        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.clearStacks);
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_GROUP_OPENED, this.clearStacks);
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.clearStacks);
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_MOVED, this.clearStacks);
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PINNED, this.clearStacks);
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VISIBLE, this.clearStacks);
        this.addManagedListener(this.eventService, Events.EVENT_ROW_DRAG_END, this.clearStacks);
        this.ctrlsService.whenReady(function() {
          _this.gridBodyCtrl = _this.ctrlsService.getGridBodyCtrl();
        });
      };
      UndoRedoService2.prototype.getCurrentUndoStackSize = function() {
        return this.undoStack ? this.undoStack.getCurrentStackSize() : 0;
      };
      UndoRedoService2.prototype.getCurrentRedoStackSize = function() {
        return this.redoStack ? this.redoStack.getCurrentStackSize() : 0;
      };
      UndoRedoService2.prototype.undo = function() {
        if (!this.undoStack) {
          return;
        }
        var undoAction = this.undoStack.pop();
        if (!undoAction || !undoAction.cellValueChanges) {
          return;
        }
        this.processAction(undoAction, function(cellValueChange) {
          return cellValueChange.oldValue;
        });
        if (undoAction instanceof RangeUndoRedoAction) {
          this.processRange(undoAction.ranges || [undoAction.initialRange]);
        } else {
          this.processCell(undoAction.cellValueChanges);
        }
        this.redoStack.push(undoAction);
      };
      UndoRedoService2.prototype.redo = function() {
        if (!this.redoStack) {
          return;
        }
        var redoAction = this.redoStack.pop();
        if (!redoAction || !redoAction.cellValueChanges) {
          return;
        }
        this.processAction(redoAction, function(cellValueChange) {
          return cellValueChange.newValue;
        });
        if (redoAction instanceof RangeUndoRedoAction) {
          this.processRange(redoAction.ranges || [redoAction.finalRange]);
        } else {
          this.processCell(redoAction.cellValueChanges);
        }
        this.undoStack.push(redoAction);
      };
      UndoRedoService2.prototype.processAction = function(action, valueExtractor) {
        var _this = this;
        action.cellValueChanges.forEach(function(cellValueChange) {
          var _a;
          var rowIndex = cellValueChange.rowIndex, rowPinned = cellValueChange.rowPinned, columnId = cellValueChange.columnId;
          var rowPosition = { rowIndex, rowPinned };
          var currentRow = _this.getRowNode(rowPosition);
          if (!currentRow.displayed) {
            return;
          }
          var extractedValue = valueExtractor(cellValueChange);
          var value = typeof ((_a = extractedValue) === null || _a === void 0 ? void 0 : _a.toString) === "function" ? extractedValue.toString() : extractedValue;
          currentRow.setDataValue(columnId, value);
        });
      };
      UndoRedoService2.prototype.processRange = function(ranges) {
        var _this = this;
        var lastFocusedCell;
        this.rangeService.removeAllCellRanges(true);
        ranges.forEach(function(range, idx) {
          if (!range) {
            return;
          }
          var startRow = range.startRow;
          var endRow = range.endRow;
          if (idx === ranges.length - 1) {
            lastFocusedCell = {
              rowPinned: startRow.rowPinned,
              rowIndex: startRow.rowIndex,
              columnId: range.startColumn.getColId()
            };
            _this.setLastFocusedCell(lastFocusedCell);
          }
          var cellRangeParams = {
            rowStartIndex: startRow.rowIndex,
            rowStartPinned: startRow.rowPinned,
            rowEndIndex: endRow.rowIndex,
            rowEndPinned: endRow.rowPinned,
            columnStart: range.startColumn,
            columns: range.columns
          };
          _this.rangeService.addCellRange(cellRangeParams);
        });
      };
      UndoRedoService2.prototype.processCell = function(cellValueChanges) {
        var cellValueChange = cellValueChanges[0];
        var rowIndex = cellValueChange.rowIndex, rowPinned = cellValueChange.rowPinned;
        var rowPosition = { rowIndex, rowPinned };
        var row = this.getRowNode(rowPosition);
        var lastFocusedCell = {
          rowPinned: cellValueChange.rowPinned,
          rowIndex: row.rowIndex,
          columnId: cellValueChange.columnId
        };
        this.setLastFocusedCell(lastFocusedCell, true);
      };
      UndoRedoService2.prototype.setLastFocusedCell = function(lastFocusedCell, setRangeToCell) {
        var rowIndex = lastFocusedCell.rowIndex, columnId = lastFocusedCell.columnId, rowPinned = lastFocusedCell.rowPinned;
        var scrollFeature = this.gridBodyCtrl.getScrollFeature();
        var column = this.columnModel.getGridColumn(columnId);
        if (!column) {
          return;
        }
        scrollFeature.ensureIndexVisible(rowIndex);
        scrollFeature.ensureColumnVisible(column);
        var cellPosition = { rowIndex, column, rowPinned };
        this.focusService.setFocusedCell(__assign(__assign({}, cellPosition), { forceBrowserFocus: true }));
        if (setRangeToCell) {
          this.rangeService.setRangeToCell(cellPosition);
        }
      };
      UndoRedoService2.prototype.addRowEditingListeners = function() {
        var _this = this;
        this.addManagedListener(this.eventService, Events.EVENT_ROW_EDITING_STARTED, function(e) {
          _this.activeRowEdit = { rowIndex: e.rowIndex, rowPinned: e.rowPinned };
        });
        this.addManagedListener(this.eventService, Events.EVENT_ROW_EDITING_STOPPED, function() {
          var action = new UndoRedoAction(_this.cellValueChanges);
          _this.pushActionsToUndoStack(action);
          _this.activeRowEdit = null;
        });
      };
      UndoRedoService2.prototype.addCellEditingListeners = function() {
        var _this = this;
        this.addManagedListener(this.eventService, Events.EVENT_CELL_EDITING_STARTED, function(e) {
          _this.activeCellEdit = { column: e.column, rowIndex: e.rowIndex, rowPinned: e.rowPinned };
        });
        this.addManagedListener(this.eventService, Events.EVENT_CELL_EDITING_STOPPED, function(e) {
          _this.activeCellEdit = null;
          var shouldPushAction = e.valueChanged && !_this.activeRowEdit && !_this.isPasting && !_this.isRangeInAction;
          if (shouldPushAction) {
            var action = new UndoRedoAction(_this.cellValueChanges);
            _this.pushActionsToUndoStack(action);
          }
        });
      };
      UndoRedoService2.prototype.addPasteListeners = function() {
        var _this = this;
        this.addManagedListener(this.eventService, Events.EVENT_PASTE_START, function() {
          _this.isPasting = true;
        });
        this.addManagedListener(this.eventService, Events.EVENT_PASTE_END, function() {
          var action = new UndoRedoAction(_this.cellValueChanges);
          _this.pushActionsToUndoStack(action);
          _this.isPasting = false;
        });
      };
      UndoRedoService2.prototype.addFillListeners = function() {
        var _this = this;
        this.addManagedListener(this.eventService, Events.EVENT_FILL_START, function() {
          _this.isRangeInAction = true;
        });
        this.addManagedListener(this.eventService, Events.EVENT_FILL_END, function(event) {
          var action = new RangeUndoRedoAction(_this.cellValueChanges, event.initialRange, event.finalRange);
          _this.pushActionsToUndoStack(action);
          _this.isRangeInAction = false;
        });
      };
      UndoRedoService2.prototype.addCellKeyListeners = function() {
        var _this = this;
        this.addManagedListener(this.eventService, Events.EVENT_KEY_SHORTCUT_CHANGED_CELL_START, function() {
          _this.isRangeInAction = true;
        });
        this.addManagedListener(this.eventService, Events.EVENT_KEY_SHORTCUT_CHANGED_CELL_END, function() {
          var action;
          if (_this.rangeService && _this.gridOptionsWrapper.isEnableRangeSelection()) {
            action = new RangeUndoRedoAction(_this.cellValueChanges, void 0, void 0, __spread$2(_this.rangeService.getCellRanges()));
          } else {
            action = new UndoRedoAction(_this.cellValueChanges);
          }
          _this.pushActionsToUndoStack(action);
          _this.isRangeInAction = false;
        });
      };
      UndoRedoService2.prototype.pushActionsToUndoStack = function(action) {
        this.undoStack.push(action);
        this.cellValueChanges = [];
        this.redoStack.clear();
      };
      UndoRedoService2.prototype.getRowNode = function(gridRow) {
        switch (gridRow.rowPinned) {
          case Constants.PINNED_TOP:
            return this.pinnedRowModel.getPinnedTopRowData()[gridRow.rowIndex];
          case Constants.PINNED_BOTTOM:
            return this.pinnedRowModel.getPinnedBottomRowData()[gridRow.rowIndex];
          default:
            return this.rowModel.getRow(gridRow.rowIndex);
        }
      };
      __decorate$m([
        Autowired("focusService")
      ], UndoRedoService2.prototype, "focusService", void 0);
      __decorate$m([
        Autowired("ctrlsService")
      ], UndoRedoService2.prototype, "ctrlsService", void 0);
      __decorate$m([
        Autowired("rowModel")
      ], UndoRedoService2.prototype, "rowModel", void 0);
      __decorate$m([
        Autowired("pinnedRowModel")
      ], UndoRedoService2.prototype, "pinnedRowModel", void 0);
      __decorate$m([
        Autowired("cellPositionUtils")
      ], UndoRedoService2.prototype, "cellPositionUtils", void 0);
      __decorate$m([
        Autowired("rowPositionUtils")
      ], UndoRedoService2.prototype, "rowPositionUtils", void 0);
      __decorate$m([
        Autowired("columnModel")
      ], UndoRedoService2.prototype, "columnModel", void 0);
      __decorate$m([
        Optional("rangeService")
      ], UndoRedoService2.prototype, "rangeService", void 0);
      __decorate$m([
        PostConstruct
      ], UndoRedoService2.prototype, "init", null);
      UndoRedoService2 = __decorate$m([
        Bean("undoRedoService")
      ], UndoRedoService2);
      return UndoRedoService2;
    }(BeanStub);
    __extends$j = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$l = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    HeaderPositionUtils = function(_super) {
      __extends$j(HeaderPositionUtils2, _super);
      function HeaderPositionUtils2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      HeaderPositionUtils2.prototype.findHeader = function(focusedHeader, direction) {
        var nextColumn;
        var getGroupMethod;
        var getColMethod;
        if (focusedHeader.column instanceof ColumnGroup) {
          getGroupMethod = "getDisplayedGroup" + direction;
          nextColumn = this.columnModel[getGroupMethod](focusedHeader.column);
        } else {
          getColMethod = "getDisplayedCol" + direction;
          nextColumn = this.columnModel[getColMethod](focusedHeader.column);
        }
        if (nextColumn) {
          return {
            column: nextColumn,
            headerRowIndex: focusedHeader.headerRowIndex
          };
        }
      };
      HeaderPositionUtils2.prototype.findColAtEdgeForHeaderRow = function(level, position) {
        var displayedColumns = this.columnModel.getAllDisplayedColumns();
        var column = displayedColumns[position === "start" ? 0 : displayedColumns.length - 1];
        if (!column) {
          return;
        }
        var childContainer = this.ctrlsService.getHeaderRowContainerCtrl(column.getPinned());
        var type = childContainer.getRowType(level);
        if (type == HeaderRowType.COLUMN_GROUP) {
          var columnGroup = this.columnModel.getColumnGroupAtLevel(column, level);
          return {
            headerRowIndex: level,
            column: columnGroup
          };
        }
        return {
          headerRowIndex: type == null ? -1 : level,
          column
        };
      };
      __decorate$l([
        Autowired("columnModel")
      ], HeaderPositionUtils2.prototype, "columnModel", void 0);
      __decorate$l([
        Autowired("ctrlsService")
      ], HeaderPositionUtils2.prototype, "ctrlsService", void 0);
      HeaderPositionUtils2 = __decorate$l([
        Bean("headerPositionUtils")
      ], HeaderPositionUtils2);
      return HeaderPositionUtils2;
    }(BeanStub);
    __decorate$k = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    ColumnDefFactory = function() {
      function ColumnDefFactory2() {
      }
      ColumnDefFactory2.prototype.buildColumnDefs = function(cols, rowGroupColumns, pivotColumns) {
        var _this = this;
        var res = [];
        var colGroupDefs = {};
        cols.forEach(function(col) {
          var colDef = _this.createDefFromColumn(col, rowGroupColumns, pivotColumns);
          var addToResult = true;
          var childDef = colDef;
          var pointer = col.getOriginalParent();
          while (pointer) {
            var parentDef = null;
            if (pointer.isPadding()) {
              pointer = pointer.getOriginalParent();
              continue;
            }
            var existingParentDef = colGroupDefs[pointer.getGroupId()];
            if (existingParentDef) {
              existingParentDef.children.push(childDef);
              addToResult = false;
              break;
            }
            parentDef = _this.createDefFromGroup(pointer);
            if (parentDef) {
              parentDef.children = [childDef];
              colGroupDefs[parentDef.groupId] = parentDef;
              childDef = parentDef;
              pointer = pointer.getOriginalParent();
            }
          }
          if (addToResult) {
            res.push(childDef);
          }
        });
        return res;
      };
      ColumnDefFactory2.prototype.createDefFromGroup = function(group) {
        var defCloned = deepCloneDefinition(group.getColGroupDef(), ["children"]);
        if (defCloned) {
          defCloned.groupId = group.getGroupId();
        }
        return defCloned;
      };
      ColumnDefFactory2.prototype.createDefFromColumn = function(col, rowGroupColumns, pivotColumns) {
        var colDefCloned = deepCloneDefinition(col.getColDef());
        colDefCloned.colId = col.getColId();
        colDefCloned.width = col.getActualWidth();
        colDefCloned.rowGroup = col.isRowGroupActive();
        colDefCloned.rowGroupIndex = col.isRowGroupActive() ? rowGroupColumns.indexOf(col) : null;
        colDefCloned.pivot = col.isPivotActive();
        colDefCloned.pivotIndex = col.isPivotActive() ? pivotColumns.indexOf(col) : null;
        colDefCloned.aggFunc = col.isValueActive() ? col.getAggFunc() : null;
        colDefCloned.hide = col.isVisible() ? void 0 : true;
        colDefCloned.pinned = col.isPinned() ? col.getPinned() : null;
        colDefCloned.sort = col.getSort() ? col.getSort() : null;
        colDefCloned.sortIndex = col.getSortIndex() != null ? col.getSortIndex() : null;
        return colDefCloned;
      };
      ColumnDefFactory2 = __decorate$k([
        Bean("columnDefFactory")
      ], ColumnDefFactory2);
      return ColumnDefFactory2;
    }();
    __decorate$j = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    RowCssClassCalculator = function() {
      function RowCssClassCalculator2() {
      }
      RowCssClassCalculator2.prototype.getInitialRowClasses = function(params) {
        var classes = [];
        if (exists(params.extraCssClass)) {
          classes.push(params.extraCssClass);
        }
        classes.push("ag-row");
        classes.push(params.rowFocused ? "ag-row-focus" : "ag-row-no-focus");
        if (params.fadeRowIn) {
          classes.push("ag-opacity-zero");
        }
        classes.push(params.rowIsEven ? "ag-row-even" : "ag-row-odd");
        if (params.rowNode.isRowPinned()) {
          classes.push("ag-row-pinned");
        }
        if (params.rowNode.isSelected()) {
          classes.push("ag-row-selected");
        }
        if (params.rowNode.footer) {
          classes.push("ag-row-footer");
        }
        classes.push("ag-row-level-" + params.rowLevel);
        if (params.rowNode.stub) {
          classes.push("ag-row-loading");
        }
        if (params.fullWidthRow) {
          classes.push("ag-full-width-row");
        }
        if (params.expandable) {
          classes.push("ag-row-group");
          classes.push(params.rowNode.expanded ? "ag-row-group-expanded" : "ag-row-group-contracted");
        }
        if (params.rowNode.dragging) {
          classes.push("ag-row-dragging");
        }
        pushAll(classes, this.processClassesFromGridOptions(params.rowNode));
        pushAll(classes, this.preProcessRowClassRules(params.rowNode));
        classes.push(params.printLayout ? "ag-row-position-relative" : "ag-row-position-absolute");
        if (params.firstRowOnPage) {
          classes.push("ag-row-first");
        }
        if (params.lastRowOnPage) {
          classes.push("ag-row-last");
        }
        if (params.fullWidthRow) {
          if (params.pinned === Constants.PINNED_LEFT) {
            classes.push("ag-cell-last-left-pinned");
          }
          if (params.pinned === Constants.PINNED_RIGHT) {
            classes.push("ag-cell-first-right-pinned");
          }
        }
        return classes;
      };
      RowCssClassCalculator2.prototype.processClassesFromGridOptions = function(rowNode) {
        var res = [];
        var process2 = function(rowCls) {
          if (typeof rowCls === "string") {
            res.push(rowCls);
          } else if (Array.isArray(rowCls)) {
            rowCls.forEach(function(e) {
              return res.push(e);
            });
          }
        };
        var rowClass = this.gridOptionsWrapper.getRowClass();
        if (rowClass) {
          if (typeof rowClass === "function") {
            console.warn("AG Grid: rowClass should not be a function, please use getRowClass instead");
            return [];
          }
          process2(rowClass);
        }
        var rowClassFunc = this.gridOptionsWrapper.getRowClassFunc();
        if (rowClassFunc) {
          var params = {
            data: rowNode.data,
            node: rowNode,
            rowIndex: rowNode.rowIndex
          };
          var rowClassFuncResult = rowClassFunc(params);
          process2(rowClassFuncResult);
        }
        return res;
      };
      RowCssClassCalculator2.prototype.preProcessRowClassRules = function(rowNode) {
        var res = [];
        this.processRowClassRules(rowNode, function(className) {
          res.push(className);
        }, function(className) {
        });
        return res;
      };
      RowCssClassCalculator2.prototype.processRowClassRules = function(rowNode, onApplicableClass, onNotApplicableClass) {
        var rowClassParams = {
          data: rowNode.data,
          node: rowNode,
          rowIndex: rowNode.rowIndex,
          api: this.gridOptionsWrapper.getApi(),
          columnApi: this.gridOptionsWrapper.getColumnApi(),
          context: this.gridOptionsWrapper.getContext()
        };
        this.stylingService.processClassRules(this.gridOptionsWrapper.rowClassRules(), rowClassParams, onApplicableClass, onNotApplicableClass);
      };
      RowCssClassCalculator2.prototype.calculateRowLevel = function(rowNode) {
        if (rowNode.group) {
          return rowNode.level;
        }
        return rowNode.parent ? rowNode.parent.level + 1 : 0;
      };
      __decorate$j([
        Autowired("stylingService")
      ], RowCssClassCalculator2.prototype, "stylingService", void 0);
      __decorate$j([
        Autowired("gridOptionsWrapper")
      ], RowCssClassCalculator2.prototype, "gridOptionsWrapper", void 0);
      RowCssClassCalculator2 = __decorate$j([
        Bean("rowCssClassCalculator")
      ], RowCssClassCalculator2);
      return RowCssClassCalculator2;
    }();
    __decorate$i = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    RowNodeSorter = function() {
      function RowNodeSorter2() {
      }
      RowNodeSorter2.prototype.doFullSort = function(rowNodes, sortOptions) {
        var mapper = function(rowNode, pos) {
          return { currentPos: pos, rowNode };
        };
        var sortedRowNodes = rowNodes.map(mapper);
        sortedRowNodes.sort(this.compareRowNodes.bind(this, sortOptions));
        return sortedRowNodes.map(function(item) {
          return item.rowNode;
        });
      };
      RowNodeSorter2.prototype.compareRowNodes = function(sortOptions, sortedNodeA, sortedNodeB) {
        var nodeA = sortedNodeA.rowNode;
        var nodeB = sortedNodeB.rowNode;
        for (var i = 0, len = sortOptions.length; i < len; i++) {
          var sortOption = sortOptions[i];
          var isDescending = sortOption.sort === Constants.SORT_DESC;
          var valueA = this.getValue(nodeA, sortOption.column);
          var valueB = this.getValue(nodeB, sortOption.column);
          var comparatorResult = void 0;
          var providedComparator = this.getComparator(sortOption, nodeA);
          if (providedComparator) {
            comparatorResult = providedComparator(valueA, valueB, nodeA, nodeB, isDescending);
          } else {
            comparatorResult = _.defaultComparator(valueA, valueB, this.gridOptionsWrapper.isAccentedSort());
          }
          var validResult = !isNaN(comparatorResult);
          if (validResult && comparatorResult !== 0) {
            return sortOption.sort === Constants.SORT_ASC ? comparatorResult : comparatorResult * -1;
          }
        }
        return sortedNodeA.currentPos - sortedNodeB.currentPos;
      };
      RowNodeSorter2.prototype.getComparator = function(sortOption, rowNode) {
        var column = sortOption.column;
        var comparatorOnCol = column.getColDef().comparator;
        if (comparatorOnCol != null) {
          return comparatorOnCol;
        }
        if (!column.getColDef().showRowGroup) {
          return;
        }
        var groupLeafField = !rowNode.group && column.getColDef().field;
        if (!groupLeafField) {
          return;
        }
        var primaryColumn = this.columnModel.getPrimaryColumn(groupLeafField);
        if (!primaryColumn) {
          return;
        }
        return primaryColumn.getColDef().comparator;
      };
      RowNodeSorter2.prototype.getValue = function(node, column) {
        var _a, _b;
        var primaryColumnsSortGroups = this.gridOptionsWrapper.isColumnsSortingCoupledToGroup();
        if (!primaryColumnsSortGroups) {
          return this.valueService.getValue(column, node, false, false);
        }
        var isNodeGroupedAtLevel = node.rowGroupColumn === column;
        if (isNodeGroupedAtLevel) {
          var isGroupRows = this.gridOptionsWrapper.isGroupUseEntireRow(this.columnModel.isPivotActive());
          if (isGroupRows) {
            var keyCreator = column.getColDef().keyCreator;
            if (keyCreator) {
              return node.key;
            }
            var leafChild = (_a = node.allLeafChildren) === null || _a === void 0 ? void 0 : _a[0];
            if (leafChild) {
              return this.valueService.getValue(column, leafChild, false, false);
            }
            return void 0;
          }
          var displayCol = this.columnModel.getGroupDisplayColumnForGroup(column.getId());
          if (!displayCol) {
            return void 0;
          }
          return (_b = node.groupData) === null || _b === void 0 ? void 0 : _b[displayCol.getId()];
        }
        if (node.group && column.getColDef().showRowGroup) {
          return void 0;
        }
        return this.valueService.getValue(column, node, false, false);
      };
      __decorate$i([
        Autowired("gridOptionsWrapper")
      ], RowNodeSorter2.prototype, "gridOptionsWrapper", void 0);
      __decorate$i([
        Autowired("valueService")
      ], RowNodeSorter2.prototype, "valueService", void 0);
      __decorate$i([
        Autowired("columnModel")
      ], RowNodeSorter2.prototype, "columnModel", void 0);
      RowNodeSorter2 = __decorate$i([
        Bean("rowNodeSorter")
      ], RowNodeSorter2);
      return RowNodeSorter2;
    }();
    __extends$i = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$h = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    CtrlsService = function(_super) {
      __extends$i(CtrlsService2, _super);
      function CtrlsService2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.ready = false;
        _this.readyCallbacks = [];
        return _this;
      }
      CtrlsService_1 = CtrlsService2;
      CtrlsService2.prototype.checkReady = function() {
        this.ready = this.gridCtrl != null && this.gridBodyCtrl != null && this.centerRowContainerCtrl != null && this.leftRowContainerCtrl != null && this.rightRowContainerCtrl != null && this.bottomCenterRowContainerCtrl != null && this.bottomLeftRowContainerCtrl != null && this.bottomRightRowContainerCtrl != null && this.topCenterRowContainerCtrl != null && this.topLeftRowContainerCtrl != null && this.topRightRowContainerCtrl != null && this.stickyTopCenterRowContainerCtrl != null && this.stickyTopLeftRowContainerCtrl != null && this.stickyTopRightRowContainerCtrl != null && this.centerHeaderRowContainerCtrl != null && this.leftHeaderRowContainerCtrl != null && this.rightHeaderRowContainerCtrl != null && this.fakeHScrollCtrl != null && this.gridHeaderCtrl != null;
        if (this.ready) {
          var p_1 = this.createReadyParams();
          this.readyCallbacks.forEach(function(c) {
            return c(p_1);
          });
          this.readyCallbacks.length = 0;
        }
      };
      CtrlsService2.prototype.whenReady = function(callback) {
        if (this.ready) {
          callback(this.createReadyParams());
        } else {
          this.readyCallbacks.push(callback);
        }
      };
      CtrlsService2.prototype.createReadyParams = function() {
        return {
          centerRowContainerCtrl: this.centerRowContainerCtrl,
          leftRowContainerCtrl: this.leftRowContainerCtrl,
          rightRowContainerCtrl: this.rightRowContainerCtrl,
          bottomCenterRowContainerCtrl: this.bottomCenterRowContainerCtrl,
          bottomLeftRowContainerCtrl: this.bottomLeftRowContainerCtrl,
          bottomRightRowContainerCtrl: this.bottomRightRowContainerCtrl,
          topCenterRowContainerCtrl: this.topCenterRowContainerCtrl,
          topLeftRowContainerCtrl: this.topLeftRowContainerCtrl,
          topRightRowContainerCtrl: this.topRightRowContainerCtrl,
          stickyTopCenterRowContainerCtrl: this.stickyTopCenterRowContainerCtrl,
          stickyTopLeftRowContainerCtrl: this.stickyTopLeftRowContainerCtrl,
          stickyTopRightRowContainerCtrl: this.stickyTopRightRowContainerCtrl,
          centerHeaderRowContainerCtrl: this.centerHeaderRowContainerCtrl,
          leftHeaderRowContainerCtrl: this.leftHeaderRowContainerCtrl,
          rightHeaderRowContainerCtrl: this.rightHeaderRowContainerCtrl,
          fakeHScrollCtrl: this.fakeHScrollCtrl,
          gridBodyCtrl: this.gridBodyCtrl,
          gridCtrl: this.gridCtrl,
          gridHeaderCtrl: this.gridHeaderCtrl
        };
      };
      CtrlsService2.prototype.registerFakeHScrollCtrl = function(ctrl) {
        this.fakeHScrollCtrl = ctrl;
        this.checkReady();
      };
      CtrlsService2.prototype.registerGridHeaderCtrl = function(gridHeaderCtrl) {
        this.gridHeaderCtrl = gridHeaderCtrl;
        this.checkReady();
      };
      CtrlsService2.prototype.registerCenterRowContainerCtrl = function(ctrl) {
        this.centerRowContainerCtrl = ctrl;
        this.checkReady();
      };
      CtrlsService2.prototype.registerLeftRowContainerCtrl = function(ctrl) {
        this.leftRowContainerCtrl = ctrl;
        this.checkReady();
      };
      CtrlsService2.prototype.registerRightRowContainerCtrl = function(ctrl) {
        this.rightRowContainerCtrl = ctrl;
        this.checkReady();
      };
      CtrlsService2.prototype.registerTopCenterRowContainerCtrl = function(ctrl) {
        this.topCenterRowContainerCtrl = ctrl;
        this.checkReady();
      };
      CtrlsService2.prototype.registerTopLeftRowContainerCon = function(ctrl) {
        this.topLeftRowContainerCtrl = ctrl;
        this.checkReady();
      };
      CtrlsService2.prototype.registerTopRightRowContainerCtrl = function(ctrl) {
        this.topRightRowContainerCtrl = ctrl;
        this.checkReady();
      };
      CtrlsService2.prototype.registerStickyTopCenterRowContainerCtrl = function(ctrl) {
        this.stickyTopCenterRowContainerCtrl = ctrl;
        this.checkReady();
      };
      CtrlsService2.prototype.registerStickyTopLeftRowContainerCon = function(ctrl) {
        this.stickyTopLeftRowContainerCtrl = ctrl;
        this.checkReady();
      };
      CtrlsService2.prototype.registerStickyTopRightRowContainerCtrl = function(ctrl) {
        this.stickyTopRightRowContainerCtrl = ctrl;
        this.checkReady();
      };
      CtrlsService2.prototype.registerBottomCenterRowContainerCtrl = function(ctrl) {
        this.bottomCenterRowContainerCtrl = ctrl;
        this.checkReady();
      };
      CtrlsService2.prototype.registerBottomLeftRowContainerCtrl = function(ctrl) {
        this.bottomLeftRowContainerCtrl = ctrl;
        this.checkReady();
      };
      CtrlsService2.prototype.registerBottomRightRowContainerCtrl = function(ctrl) {
        this.bottomRightRowContainerCtrl = ctrl;
        this.checkReady();
      };
      CtrlsService2.prototype.registerHeaderContainer = function(ctrl, pinned) {
        switch (pinned) {
          case Constants.PINNED_LEFT:
            this.leftHeaderRowContainerCtrl = ctrl;
            break;
          case Constants.PINNED_RIGHT:
            this.rightHeaderRowContainerCtrl = ctrl;
            break;
          default:
            this.centerHeaderRowContainerCtrl = ctrl;
            break;
        }
        this.checkReady();
      };
      CtrlsService2.prototype.registerGridBodyCtrl = function(ctrl) {
        this.gridBodyCtrl = ctrl;
        this.checkReady();
      };
      CtrlsService2.prototype.registerGridCtrl = function(ctrl) {
        this.gridCtrl = ctrl;
        this.checkReady();
      };
      CtrlsService2.prototype.getFakeHScrollCtrl = function() {
        return this.fakeHScrollCtrl;
      };
      CtrlsService2.prototype.getGridHeaderCtrl = function() {
        return this.gridHeaderCtrl;
      };
      CtrlsService2.prototype.getGridCtrl = function() {
        return this.gridCtrl;
      };
      CtrlsService2.prototype.getCenterRowContainerCtrl = function() {
        return this.centerRowContainerCtrl;
      };
      CtrlsService2.prototype.getTopCenterRowContainerCtrl = function() {
        return this.topCenterRowContainerCtrl;
      };
      CtrlsService2.prototype.getBottomCenterRowContainerCtrl = function() {
        return this.bottomCenterRowContainerCtrl;
      };
      CtrlsService2.prototype.getStickyTopCenterRowContainerCtrl = function() {
        return this.stickyTopCenterRowContainerCtrl;
      };
      CtrlsService2.prototype.getGridBodyCtrl = function() {
        return this.gridBodyCtrl;
      };
      CtrlsService2.prototype.getHeaderRowContainerCtrls = function() {
        return [this.leftHeaderRowContainerCtrl, this.rightHeaderRowContainerCtrl, this.centerHeaderRowContainerCtrl];
      };
      CtrlsService2.prototype.getHeaderRowContainerCtrl = function(pinned) {
        switch (pinned) {
          case Constants.PINNED_LEFT:
            return this.leftHeaderRowContainerCtrl;
          case Constants.PINNED_RIGHT:
            return this.rightHeaderRowContainerCtrl;
          default:
            return this.centerHeaderRowContainerCtrl;
        }
      };
      var CtrlsService_1;
      CtrlsService2.NAME = "ctrlsService";
      CtrlsService2 = CtrlsService_1 = __decorate$h([
        Bean(CtrlsService_1.NAME)
      ], CtrlsService2);
      return CtrlsService2;
    }(BeanStub);
    __extends$h = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$g = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    CtrlsFactory = function(_super) {
      __extends$h(CtrlsFactory2, _super);
      function CtrlsFactory2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.registry = {};
        return _this;
      }
      CtrlsFactory2.prototype.register = function(meta) {
        this.registry[meta.controllerName] = meta.controllerClass;
      };
      CtrlsFactory2.prototype.getInstance = function(name) {
        var ControllerClass = this.registry[name];
        if (ControllerClass == null) {
          return void 0;
        }
        return new ControllerClass();
      };
      CtrlsFactory2 = __decorate$g([
        Bean("ctrlsFactory")
      ], CtrlsFactory2);
      return CtrlsFactory2;
    }(BeanStub);
    __extends$g = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$f = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    FakeHScrollCtrl = function(_super) {
      __extends$g(FakeHScrollCtrl2, _super);
      function FakeHScrollCtrl2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      FakeHScrollCtrl2.prototype.setComp = function(view, eGui, eViewport, eContainer) {
        this.view = view;
        this.eViewport = eViewport;
        this.eContainer = eContainer;
        this.eGui = eGui;
        this.addManagedListener(this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, this.onScrollVisibilityChanged.bind(this));
        var spacerWidthsListener = this.setFakeHScrollSpacerWidths.bind(this);
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, spacerWidthsListener);
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, spacerWidthsListener);
        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_DOM_LAYOUT, spacerWidthsListener);
        this.addManagedListener(this.eventService, Events.EVENT_PINNED_ROW_DATA_CHANGED, this.onPinnedRowDataChanged.bind(this));
        this.onScrollVisibilityChanged();
        this.ctrlsService.registerFakeHScrollCtrl(this);
        this.view.addOrRemoveCssClass("ag-apple-scrollbar", isMacOsUserAgent() || isIOSUserAgent());
      };
      FakeHScrollCtrl2.prototype.addActiveListenerToggles = function() {
        var _this = this;
        var activateEvents = ["mouseenter", "mousedown", "touchstart"];
        var deactivateEvents = ["mouseleave", "touchend"];
        activateEvents.forEach(function(eventName) {
          return _this.addManagedListener(_this.eGui, eventName, function() {
            return _this.view.addOrRemoveCssClass("ag-scrollbar-active", true);
          });
        });
        deactivateEvents.forEach(function(eventName) {
          return _this.addManagedListener(_this.eGui, eventName, function() {
            return _this.view.addOrRemoveCssClass("ag-scrollbar-active", false);
          });
        });
      };
      FakeHScrollCtrl2.prototype.initialiseInvisibleScrollbar = function() {
        if (this.invisibleScrollbar !== void 0) {
          return;
        }
        this.enableRtl = this.gridOptionsWrapper.isEnableRtl();
        this.invisibleScrollbar = isInvisibleScrollbar();
        if (this.invisibleScrollbar) {
          this.hideAndShowInvisibleScrollAsNeeded();
          this.addActiveListenerToggles();
          this.refreshCompBottom();
        }
      };
      FakeHScrollCtrl2.prototype.onPinnedRowDataChanged = function() {
        this.refreshCompBottom();
      };
      FakeHScrollCtrl2.prototype.refreshCompBottom = function() {
        if (!this.invisibleScrollbar) {
          return;
        }
        var bottomPinnedHeight = this.pinnedRowModel.getPinnedBottomTotalHeight();
        this.view.setBottom(bottomPinnedHeight);
      };
      FakeHScrollCtrl2.prototype.onScrollVisibilityChanged = function() {
        if (this.invisibleScrollbar === void 0) {
          this.initialiseInvisibleScrollbar();
        }
        this.setScrollVisible();
        this.setFakeHScrollSpacerWidths();
      };
      FakeHScrollCtrl2.prototype.hideAndShowInvisibleScrollAsNeeded = function() {
        var _this = this;
        this.addManagedListener(this.eventService, Events.EVENT_BODY_SCROLL, function(params) {
          if (params.direction === "horizontal") {
            _this.view.addOrRemoveCssClass("ag-scrollbar-scrolling", true);
          }
        });
        this.addManagedListener(this.eventService, Events.EVENT_BODY_SCROLL_END, function() {
          return _this.view.addOrRemoveCssClass("ag-scrollbar-scrolling", false);
        });
      };
      FakeHScrollCtrl2.prototype.setFakeHScrollSpacerWidths = function() {
        var vScrollShowing = this.scrollVisibleService.isVerticalScrollShowing();
        var rightSpacing = this.columnModel.getDisplayedColumnsRightWidth();
        var scrollOnRight = !this.enableRtl && vScrollShowing;
        var scrollbarWidth = this.gridOptionsWrapper.getScrollbarWidth();
        if (scrollOnRight) {
          rightSpacing += scrollbarWidth;
        }
        this.view.setRightSpacerFixedWidth(rightSpacing);
        this.view.includeRightSpacerScrollerCss("ag-scroller-corner", rightSpacing <= scrollbarWidth);
        var leftSpacing = this.columnModel.getDisplayedColumnsLeftWidth();
        var scrollOnLeft = this.enableRtl && vScrollShowing;
        if (scrollOnLeft) {
          leftSpacing += scrollbarWidth;
        }
        this.view.setLeftSpacerFixedWidth(leftSpacing);
        this.view.includeLeftSpacerScrollerCss("ag-scroller-corner", leftSpacing <= scrollbarWidth);
      };
      FakeHScrollCtrl2.prototype.setScrollVisible = function() {
        var hScrollShowing = this.scrollVisibleService.isHorizontalScrollShowing();
        var invisibleScrollbar2 = this.invisibleScrollbar;
        var isSuppressHorizontalScroll = this.gridOptionsWrapper.isSuppressHorizontalScroll();
        var scrollbarWidth = hScrollShowing ? this.gridOptionsWrapper.getScrollbarWidth() || 0 : 0;
        var adjustedScrollbarWidth = scrollbarWidth === 0 && invisibleScrollbar2 ? 15 : scrollbarWidth;
        var scrollContainerSize = !isSuppressHorizontalScroll ? adjustedScrollbarWidth : 0;
        this.view.addOrRemoveCssClass("ag-scrollbar-invisible", invisibleScrollbar2);
        this.view.setHeight(scrollContainerSize);
        this.view.setViewportHeight(scrollContainerSize);
        this.view.setContainerHeight(scrollContainerSize);
        this.view.addOrRemoveCssClass("ag-hidden", !hScrollShowing);
      };
      FakeHScrollCtrl2.prototype.getViewport = function() {
        return this.eViewport;
      };
      FakeHScrollCtrl2.prototype.getContainer = function() {
        return this.eContainer;
      };
      __decorate$f([
        Autowired("scrollVisibleService")
      ], FakeHScrollCtrl2.prototype, "scrollVisibleService", void 0);
      __decorate$f([
        Autowired("columnModel")
      ], FakeHScrollCtrl2.prototype, "columnModel", void 0);
      __decorate$f([
        Autowired("ctrlsService")
      ], FakeHScrollCtrl2.prototype, "ctrlsService", void 0);
      __decorate$f([
        Autowired("pinnedRowModel")
      ], FakeHScrollCtrl2.prototype, "pinnedRowModel", void 0);
      return FakeHScrollCtrl2;
    }(BeanStub);
    __extends$f = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$e = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    FakeHScrollComp = function(_super) {
      __extends$f(FakeHScrollComp2, _super);
      function FakeHScrollComp2() {
        return _super.call(this, FakeHScrollComp2.TEMPLATE) || this;
      }
      FakeHScrollComp2.prototype.postConstruct = function() {
        var _this = this;
        var compProxy = {
          addOrRemoveCssClass: function(cssClassName, on) {
            return _this.addOrRemoveCssClass(cssClassName, on);
          },
          setHeight: function(height) {
            return setFixedHeight(_this.getGui(), height);
          },
          setBottom: function(bottom) {
            return _this.getGui().style.bottom = bottom + "px";
          },
          setContainerHeight: function(height) {
            return setFixedHeight(_this.eContainer, height);
          },
          setViewportHeight: function(height) {
            return setFixedHeight(_this.eViewport, height);
          },
          setRightSpacerFixedWidth: function(width) {
            return setFixedWidth(_this.eRightSpacer, width);
          },
          setLeftSpacerFixedWidth: function(width) {
            return setFixedWidth(_this.eLeftSpacer, width);
          },
          includeLeftSpacerScrollerCss: function(cssClass, include) {
            return _this.eLeftSpacer.classList.toggle(cssClass, include);
          },
          includeRightSpacerScrollerCss: function(cssClass, include) {
            return _this.eRightSpacer.classList.toggle(cssClass, include);
          }
        };
        var ctrl = this.createManagedBean(new FakeHScrollCtrl());
        ctrl.setComp(compProxy, this.getGui(), this.eViewport, this.eContainer);
        this.createManagedBean(new CenterWidthFeature(function(width) {
          return _this.eContainer.style.width = width + "px";
        }));
      };
      FakeHScrollComp2.TEMPLATE = '<div class="ag-body-horizontal-scroll" aria-hidden="true">\n            <div class="ag-horizontal-left-spacer" ref="eLeftSpacer"></div>\n            <div class="ag-body-horizontal-scroll-viewport" ref="eViewport">\n                <div class="ag-body-horizontal-scroll-container" ref="eContainer"></div>\n            </div>\n            <div class="ag-horizontal-right-spacer" ref="eRightSpacer"></div>\n        </div>';
      __decorate$e([
        RefSelector("eLeftSpacer")
      ], FakeHScrollComp2.prototype, "eLeftSpacer", void 0);
      __decorate$e([
        RefSelector("eRightSpacer")
      ], FakeHScrollComp2.prototype, "eRightSpacer", void 0);
      __decorate$e([
        RefSelector("eViewport")
      ], FakeHScrollComp2.prototype, "eViewport", void 0);
      __decorate$e([
        RefSelector("eContainer")
      ], FakeHScrollComp2.prototype, "eContainer", void 0);
      __decorate$e([
        PostConstruct
      ], FakeHScrollComp2.prototype, "postConstruct", null);
      return FakeHScrollComp2;
    }(Component);
    __extends$e = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$d = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    PinnedWidthService = function(_super) {
      __extends$e(PinnedWidthService2, _super);
      function PinnedWidthService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      PinnedWidthService2.prototype.postConstruct = function() {
        var listener = this.checkContainerWidths.bind(this);
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, listener);
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, listener);
        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_DOM_LAYOUT, listener);
      };
      PinnedWidthService2.prototype.checkContainerWidths = function() {
        var printLayout = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;
        var newLeftWidth = printLayout ? 0 : this.columnModel.getDisplayedColumnsLeftWidth();
        var newRightWidth = printLayout ? 0 : this.columnModel.getDisplayedColumnsRightWidth();
        if (newLeftWidth != this.leftWidth) {
          this.leftWidth = newLeftWidth;
          this.eventService.dispatchEvent({ type: Events.EVENT_LEFT_PINNED_WIDTH_CHANGED });
        }
        if (newRightWidth != this.rightWidth) {
          this.rightWidth = newRightWidth;
          this.eventService.dispatchEvent({ type: Events.EVENT_RIGHT_PINNED_WIDTH_CHANGED });
        }
      };
      PinnedWidthService2.prototype.getPinnedRightWidth = function() {
        return this.rightWidth;
      };
      PinnedWidthService2.prototype.getPinnedLeftWidth = function() {
        return this.leftWidth;
      };
      __decorate$d([
        Autowired("columnModel")
      ], PinnedWidthService2.prototype, "columnModel", void 0);
      __decorate$d([
        PostConstruct
      ], PinnedWidthService2.prototype, "postConstruct", null);
      PinnedWidthService2 = __decorate$d([
        Bean("pinnedWidthService")
      ], PinnedWidthService2);
      return PinnedWidthService2;
    }(BeanStub);
    __extends$d = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$c = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    RowNodeEventThrottle = function(_super) {
      __extends$d(RowNodeEventThrottle2, _super);
      function RowNodeEventThrottle2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.events = [];
        return _this;
      }
      RowNodeEventThrottle2.prototype.postConstruct = function() {
        if (this.rowModel.getType() == Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {
          this.clientSideRowModel = this.rowModel;
        }
      };
      RowNodeEventThrottle2.prototype.dispatchExpanded = function(event) {
        var _this = this;
        if (this.clientSideRowModel == null) {
          this.eventService.dispatchEvent(event);
          return;
        }
        this.events.push(event);
        var func = function() {
          if (_this.clientSideRowModel) {
            _this.clientSideRowModel.onRowGroupOpened();
          }
          _this.events.forEach(function(e) {
            return _this.eventService.dispatchEvent(e);
          });
          _this.events = [];
        };
        if (this.dispatchExpandedDebounced == null) {
          this.dispatchExpandedDebounced = this.animationFrameService.debounce(func);
        }
        this.dispatchExpandedDebounced();
      };
      __decorate$c([
        Autowired("animationFrameService")
      ], RowNodeEventThrottle2.prototype, "animationFrameService", void 0);
      __decorate$c([
        Autowired("rowModel")
      ], RowNodeEventThrottle2.prototype, "rowModel", void 0);
      __decorate$c([
        PostConstruct
      ], RowNodeEventThrottle2.prototype, "postConstruct", null);
      RowNodeEventThrottle2 = __decorate$c([
        Bean("rowNodeEventThrottle")
      ], RowNodeEventThrottle2);
      return RowNodeEventThrottle2;
    }(BeanStub);
    __read$2 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread$1 = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read$2(arguments[i]));
      return ar;
    };
    Grid = function() {
      function Grid2(eGridDiv, gridOptions, params) {
        if (!gridOptions) {
          console.error("AG Grid: no gridOptions provided to the grid");
          return;
        }
        this.gridOptions = gridOptions;
        new GridCoreCreator().create(eGridDiv, gridOptions, function(context) {
          var gridComp = new GridComp(eGridDiv);
          context.createBean(gridComp);
        }, void 0, params);
      }
      Grid2.prototype.destroy = function() {
        if (this.gridOptions && this.gridOptions.api) {
          this.gridOptions.api.destroy();
        }
      };
      return Grid2;
    }();
    GridCoreCreator = function() {
      function GridCoreCreator2() {
      }
      GridCoreCreator2.prototype.create = function(eGridDiv, gridOptions, createUi, acceptChanges, params) {
        var _this = this;
        var debug = !!gridOptions.debug;
        var registeredModules = this.getRegisteredModules(params);
        var beanClasses = this.createBeansList(gridOptions.rowModelType, registeredModules);
        var providedBeanInstances = this.createProvidedBeans(eGridDiv, gridOptions, params);
        if (!beanClasses) {
          return;
        }
        var contextParams = {
          providedBeanInstances,
          beanClasses,
          debug
        };
        var logger = new Logger("AG Grid", function() {
          return gridOptions.debug;
        });
        var contextLogger = new Logger("Context", function() {
          return contextParams.debug;
        });
        var context = new Context(contextParams, contextLogger);
        var beans = context.getBean("beans");
        this.registerModuleUserComponents(beans, registeredModules);
        this.registerStackComponents(beans, registeredModules);
        this.registerControllers(beans, registeredModules);
        createUi(context);
        beans.ctrlsService.whenReady(function() {
          _this.setColumnsAndData(beans);
          _this.dispatchGridReadyEvent(beans);
          var isEnterprise = ModuleRegistry.isRegistered(ModuleNames.EnterpriseCoreModule);
          logger.log("initialised successfully, enterprise = " + isEnterprise);
        });
        if (acceptChanges) {
          acceptChanges(context);
        }
      };
      GridCoreCreator2.prototype.registerControllers = function(beans, registeredModules) {
        registeredModules.forEach(function(module) {
          if (module.controllers) {
            module.controllers.forEach(function(meta) {
              return beans.ctrlsFactory.register(meta);
            });
          }
        });
      };
      GridCoreCreator2.prototype.registerStackComponents = function(beans, registeredModules) {
        var agStackComponents = this.createAgStackComponentsList(registeredModules);
        beans.agStackComponentsRegistry.setupComponents(agStackComponents);
      };
      GridCoreCreator2.prototype.getRegisteredModules = function(params) {
        var passedViaConstructor = params ? params.modules : null;
        var registered = ModuleRegistry.getRegisteredModules();
        var allModules = [];
        var mapNames = {};
        function addModule(moduleBased, mod) {
          function addIndividualModule(currentModule) {
            if (!mapNames[currentModule.moduleName]) {
              mapNames[currentModule.moduleName] = true;
              allModules.push(currentModule);
              ModuleRegistry.register(currentModule, moduleBased);
            }
          }
          addIndividualModule(mod);
          if (mod.dependantModules) {
            mod.dependantModules.forEach(addModule.bind(null, moduleBased));
          }
        }
        if (passedViaConstructor) {
          passedViaConstructor.forEach(addModule.bind(null, true));
        }
        if (registered) {
          registered.forEach(addModule.bind(null, !ModuleRegistry.isPackageBased()));
        }
        return allModules;
      };
      GridCoreCreator2.prototype.registerModuleUserComponents = function(beans, registeredModules) {
        var moduleUserComps = this.extractModuleEntity(registeredModules, function(module) {
          return module.userComponents ? module.userComponents : [];
        });
        moduleUserComps.forEach(function(compMeta) {
          beans.userComponentRegistry.registerDefaultComponent(compMeta.componentName, compMeta.componentClass);
        });
      };
      GridCoreCreator2.prototype.createProvidedBeans = function(eGridDiv, gridOptions, params) {
        var frameworkOverrides = params ? params.frameworkOverrides : null;
        if (missing(frameworkOverrides)) {
          frameworkOverrides = new VanillaFrameworkOverrides();
        }
        var seed = {
          gridOptions,
          eGridDiv,
          globalEventListener: params ? params.globalEventListener : null,
          frameworkOverrides
        };
        if (params && params.providedBeanInstances) {
          Object.assign(seed, params.providedBeanInstances);
        }
        return seed;
      };
      GridCoreCreator2.prototype.createAgStackComponentsList = function(registeredModules) {
        var components = [
          { componentName: "AgCheckbox", componentClass: AgCheckbox },
          { componentName: "AgRadioButton", componentClass: AgRadioButton },
          { componentName: "AgToggleButton", componentClass: AgToggleButton },
          { componentName: "AgInputTextField", componentClass: AgInputTextField },
          { componentName: "AgInputTextArea", componentClass: AgInputTextArea },
          { componentName: "AgInputNumberField", componentClass: AgInputNumberField },
          { componentName: "AgInputRange", componentClass: AgInputRange },
          { componentName: "AgSelect", componentClass: AgSelect },
          { componentName: "AgSlider", componentClass: AgSlider },
          { componentName: "AgAngleSelect", componentClass: AgAngleSelect },
          { componentName: "AgColorPicker", componentClass: AgColorPicker },
          { componentName: "AgGridBody", componentClass: GridBodyComp },
          { componentName: "AgHeaderRoot", componentClass: GridHeaderComp },
          { componentName: "AgSortIndicator", componentClass: SortIndicatorComp },
          { componentName: "AgPagination", componentClass: PaginationComp },
          { componentName: "AgOverlayWrapper", componentClass: OverlayWrapperComponent },
          { componentName: "AgGroupComponent", componentClass: AgGroupComponent },
          { componentName: "AgPanel", componentClass: AgPanel },
          { componentName: "AgDialog", componentClass: AgDialog },
          { componentName: "AgRowContainer", componentClass: RowContainerComp },
          { componentName: "AgFakeHorizontalScroll", componentClass: FakeHScrollComp }
        ];
        var moduleAgStackComps = this.extractModuleEntity(registeredModules, function(module) {
          return module.agStackComponents ? module.agStackComponents : [];
        });
        components = components.concat(moduleAgStackComps);
        return components;
      };
      GridCoreCreator2.prototype.createBeansList = function(rowModelType, registeredModules) {
        var rowModelClass = this.getRowModelClass(rowModelType, registeredModules);
        if (!rowModelClass) {
          return;
        }
        var beans = [
          rowModelClass,
          Beans,
          RowPositionUtils,
          CellPositionUtils,
          HeaderPositionUtils,
          PaginationAutoPageSizeService,
          GridApi,
          UserComponentRegistry,
          AgComponentUtils,
          ComponentMetadataProvider,
          ResizeObserverService,
          UserComponentFactory,
          RowContainerHeightService,
          HorizontalResizeService,
          PinnedRowModel,
          DragService,
          DisplayedGroupCreator,
          EventService,
          GridOptionsWrapper,
          PopupService,
          SelectionService,
          FilterManager,
          ColumnModel,
          HeaderNavigationService,
          PaginationProxy,
          RowRenderer,
          ExpressionService,
          ColumnFactory,
          TemplateService,
          AlignedGridsService,
          NavigationService,
          ValueCache,
          ValueService,
          LoggerFactory,
          ColumnUtils,
          AutoWidthCalculator,
          StandardMenuFactory,
          DragAndDropService,
          ColumnApi,
          FocusService,
          MouseEventService,
          Environment,
          CellNavigationService,
          ValueFormatterService,
          StylingService,
          ScrollVisibleService,
          SortController,
          ColumnHoverService,
          ColumnAnimationService,
          SelectableService,
          AutoGroupColService,
          ChangeDetectionService,
          AnimationFrameService,
          UndoRedoService,
          AgStackComponentsRegistry,
          ColumnDefFactory,
          RowCssClassCalculator,
          RowNodeBlockLoader,
          RowNodeSorter,
          CtrlsService,
          PinnedWidthService,
          RowNodeEventThrottle,
          CtrlsFactory
        ];
        var moduleBeans = this.extractModuleEntity(registeredModules, function(module) {
          return module.beans ? module.beans : [];
        });
        beans.push.apply(beans, __spread$1(moduleBeans));
        var beansNoDuplicates = [];
        beans.forEach(function(bean) {
          if (beansNoDuplicates.indexOf(bean) < 0) {
            beansNoDuplicates.push(bean);
          }
        });
        return beansNoDuplicates;
      };
      GridCoreCreator2.prototype.extractModuleEntity = function(moduleEntities, extractor) {
        return [].concat.apply([], __spread$1(moduleEntities.map(extractor)));
      };
      GridCoreCreator2.prototype.setColumnsAndData = function(beans) {
        var columnDefs = beans.gridOptionsWrapper.getColumnDefs();
        beans.columnModel.setColumnDefs(columnDefs || [], "gridInitializing");
        beans.rowModel.start();
      };
      GridCoreCreator2.prototype.dispatchGridReadyEvent = function(beans) {
        var readyEvent = {
          type: Events.EVENT_GRID_READY
        };
        beans.eventService.dispatchEvent(readyEvent);
      };
      GridCoreCreator2.prototype.getRowModelClass = function(rowModelType, registeredModules) {
        if (!rowModelType) {
          rowModelType = Constants.ROW_MODEL_TYPE_CLIENT_SIDE;
        }
        var rowModelClasses = {};
        registeredModules.forEach(function(module) {
          iterateObject(module.rowModels, function(key, value) {
            rowModelClasses[key] = value;
          });
        });
        var rowModelClass = rowModelClasses[rowModelType];
        if (exists(rowModelClass)) {
          return rowModelClass;
        }
        if (ModuleRegistry.isPackageBased()) {
          if ([Constants.ROW_MODEL_TYPE_VIEWPORT, Constants.ROW_MODEL_TYPE_SERVER_SIDE].includes(rowModelType)) {
            console.error('AG Grid: Row Model "' + rowModelType + `" not found. Please ensure the package 'ag-grid-enterprise' is imported. Please see: https://www.ag-grid.com/javascript-grid/packages/`);
          } else {
            console.error("AG Grid: could not find row model for rowModelType " + rowModelType);
          }
        } else {
          if (rowModelType === Constants.ROW_MODEL_TYPE_INFINITE) {
            console.error('AG Grid: Row Model "Infinite" not found. Please ensure the ' + ModuleNames.InfiniteRowModelModule + " module is registered. Please see: https://www.ag-grid.com/javascript-grid/modules/");
          } else if (rowModelType === Constants.ROW_MODEL_TYPE_VIEWPORT) {
            console.error('AG Grid: Row Model "Viewport" not found. Please ensure the AG Grid Enterprise Module ' + ModuleNames.ViewportRowModelModule + " module is registered. Please see: https://www.ag-grid.com/javascript-grid/modules/");
          } else if (rowModelType === Constants.ROW_MODEL_TYPE_SERVER_SIDE) {
            console.error('AG Grid: Row Model "Server Side" not found. Please ensure the AG Grid Enterprise Module ' + ModuleNames.ServerSideRowModelModule + " module is registered. Please see: https://www.ag-grid.com/javascript-grid/modules/");
          } else if (rowModelType === Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {
            console.error('AG Grid: Row Model "Client Side" not found. Please ensure the ' + ModuleNames.ClientSideRowModelModule + " module is registered. Please see: https://www.ag-grid.com/javascript-grid/modules/");
          } else {
            console.error("AG Grid: could not find row model for rowModelType " + rowModelType);
          }
        }
      };
      return GridCoreCreator2;
    }();
    BaseComponentWrapper = function() {
      function BaseComponentWrapper2() {
      }
      BaseComponentWrapper2.prototype.wrap = function(OriginalConstructor, mandatoryMethodList, optionalMethodList, componentType) {
        var _this = this;
        if (optionalMethodList === void 0) {
          optionalMethodList = [];
        }
        var wrapper = this.createWrapper(OriginalConstructor, componentType);
        mandatoryMethodList.forEach(function(methodName) {
          _this.createMethod(wrapper, methodName, true);
        });
        optionalMethodList.forEach(function(methodName) {
          _this.createMethod(wrapper, methodName, false);
        });
        return wrapper;
      };
      BaseComponentWrapper2.prototype.unwrap = function(comp) {
        return comp;
      };
      BaseComponentWrapper2.prototype.createMethod = function(wrapper, methodName, mandatory) {
        wrapper.addMethod(methodName, this.createMethodProxy(wrapper, methodName, mandatory));
      };
      BaseComponentWrapper2.prototype.createMethodProxy = function(wrapper, methodName, mandatory) {
        return function() {
          if (wrapper.hasMethod(methodName)) {
            return wrapper.callMethod(methodName, arguments);
          }
          if (mandatory) {
            console.warn("AG Grid: Framework component is missing the method " + methodName + "()");
          }
          return null;
        };
      };
      return BaseComponentWrapper2;
    }();
    DEFAULT_CHART_GROUPS = {
      columnGroup: [
        "column",
        "stackedColumn",
        "normalizedColumn"
      ],
      barGroup: [
        "bar",
        "stackedBar",
        "normalizedBar"
      ],
      pieGroup: [
        "pie",
        "doughnut"
      ],
      lineGroup: [
        "line"
      ],
      scatterGroup: [
        "scatter",
        "bubble"
      ],
      areaGroup: [
        "area",
        "stackedArea",
        "normalizedArea"
      ],
      histogramGroup: [
        "histogram"
      ],
      combinationGroup: [
        "columnLineCombo",
        "areaColumnCombo",
        "customCombo"
      ]
    };
    CHART_TOOL_PANEL_ALLOW_LIST = [
      "chartSettings",
      "chartData",
      "chartFormat"
    ];
    CHART_TOOLBAR_ALLOW_LIST = [
      "chartUnlink",
      "chartLink",
      "chartDownload"
    ];
    CHART_TOOL_PANEL_MENU_OPTIONS = {
      settings: "chartSettings",
      data: "chartData",
      format: "chartFormat"
    };
    (function(BarColumnLabelPlacement2) {
      BarColumnLabelPlacement2["InsideBase"] = "insideBase";
      BarColumnLabelPlacement2["InsideEnd"] = "insideEnd";
      BarColumnLabelPlacement2["Center"] = "center";
      BarColumnLabelPlacement2["OutsideEnd"] = "outsideEnd";
    })(BarColumnLabelPlacement || (BarColumnLabelPlacement = {}));
    globalObj = typeof global === "undefined" ? {} : global;
    globalObj.HTMLElement = typeof HTMLElement === "undefined" ? {} : HTMLElement;
    globalObj.HTMLButtonElement = typeof HTMLButtonElement === "undefined" ? {} : HTMLButtonElement;
    globalObj.HTMLSelectElement = typeof HTMLSelectElement === "undefined" ? {} : HTMLSelectElement;
    globalObj.HTMLInputElement = typeof HTMLInputElement === "undefined" ? {} : HTMLInputElement;
    globalObj.Node = typeof Node === "undefined" ? {} : Node;
    globalObj.MouseEvent = typeof MouseEvent === "undefined" ? {} : MouseEvent;
    __read$1 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read$1(arguments[i]));
      return ar;
    };
    ClientSideNodeManager = function() {
      function ClientSideNodeManager2(rootNode, gridOptionsWrapper, eventService, columnModel, selectionService, beans) {
        this.nextId = 0;
        this.allNodesMap = {};
        this.rootNode = rootNode;
        this.gridOptionsWrapper = gridOptionsWrapper;
        this.eventService = eventService;
        this.columnModel = columnModel;
        this.beans = beans;
        this.selectionService = selectionService;
        this.rootNode.group = true;
        this.rootNode.level = -1;
        this.rootNode.id = ClientSideNodeManager2.ROOT_NODE_ID;
        this.rootNode.allLeafChildren = [];
        this.rootNode.childrenAfterGroup = [];
        this.rootNode.childrenAfterSort = [];
        this.rootNode.childrenAfterAggFilter = [];
        this.rootNode.childrenAfterFilter = [];
        this.postConstruct();
      }
      ClientSideNodeManager2.prototype.postConstruct = function() {
        this.suppressParentsInRowNodes = this.gridOptionsWrapper.isSuppressParentsInRowNodes();
        this.isRowMasterFunc = this.gridOptionsWrapper.getIsRowMasterFunc();
        this.doingTreeData = this.gridOptionsWrapper.isTreeData();
        this.doingMasterDetail = this.gridOptionsWrapper.isMasterDetail();
      };
      ClientSideNodeManager2.prototype.getCopyOfNodesMap = function() {
        return _.cloneObject(this.allNodesMap);
      };
      ClientSideNodeManager2.prototype.getRowNode = function(id) {
        return this.allNodesMap[id];
      };
      ClientSideNodeManager2.prototype.setRowData = function(rowData) {
        var _this = this;
        if (typeof rowData === "string") {
          console.warn("AG Grid: rowData must be an array, however you passed in a string. If you are loading JSON, make sure you convert the JSON string to JavaScript objects first");
          return;
        }
        var rootNode = this.rootNode;
        var sibling = this.rootNode.sibling;
        rootNode.childrenAfterFilter = null;
        rootNode.childrenAfterGroup = null;
        rootNode.childrenAfterAggFilter = null;
        rootNode.childrenAfterSort = null;
        rootNode.childrenMapped = null;
        rootNode.updateHasChildren();
        this.nextId = 0;
        this.allNodesMap = {};
        if (rowData) {
          rootNode.allLeafChildren = rowData.map(function(dataItem) {
            return _this.createNode(dataItem, _this.rootNode, ClientSideNodeManager2.TOP_LEVEL);
          });
        } else {
          rootNode.allLeafChildren = [];
          rootNode.childrenAfterGroup = [];
        }
        if (sibling) {
          sibling.childrenAfterFilter = rootNode.childrenAfterFilter;
          sibling.childrenAfterGroup = rootNode.childrenAfterGroup;
          sibling.childrenAfterAggFilter = rootNode.childrenAfterAggFilter;
          sibling.childrenAfterSort = rootNode.childrenAfterSort;
          sibling.childrenMapped = rootNode.childrenMapped;
          sibling.allLeafChildren = rootNode.allLeafChildren;
        }
      };
      ClientSideNodeManager2.prototype.updateRowData = function(rowDataTran, rowNodeOrder) {
        var rowNodeTransaction = {
          remove: [],
          update: [],
          add: []
        };
        var nodesToUnselect = [];
        this.executeRemove(rowDataTran, rowNodeTransaction, nodesToUnselect);
        this.executeUpdate(rowDataTran, rowNodeTransaction, nodesToUnselect);
        this.executeAdd(rowDataTran, rowNodeTransaction);
        this.updateSelection(nodesToUnselect);
        if (rowNodeOrder) {
          _.sortRowNodesByOrder(this.rootNode.allLeafChildren, rowNodeOrder);
        }
        return rowNodeTransaction;
      };
      ClientSideNodeManager2.prototype.updateSelection = function(nodesToUnselect) {
        var selectionChanged = nodesToUnselect.length > 0;
        if (selectionChanged) {
          nodesToUnselect.forEach(function(rowNode) {
            rowNode.setSelected(false, false, true);
          });
        }
        this.selectionService.updateGroupsFromChildrenSelections();
        if (selectionChanged) {
          var event_1 = {
            type: Events.EVENT_SELECTION_CHANGED
          };
          this.eventService.dispatchEvent(event_1);
        }
      };
      ClientSideNodeManager2.prototype.executeAdd = function(rowDataTran, rowNodeTransaction) {
        var _this = this;
        var add = rowDataTran.add, addIndex = rowDataTran.addIndex;
        if (_.missingOrEmpty(add)) {
          return;
        }
        var newNodes = add.map(function(item) {
          return _this.createNode(item, _this.rootNode, ClientSideNodeManager2.TOP_LEVEL);
        });
        var useIndex = typeof addIndex === "number" && addIndex >= 0;
        var nodesBeforeIndex;
        var nodesAfterIndex;
        if (useIndex) {
          var allLeafChildren_1 = this.rootNode.allLeafChildren;
          var normalizedAddIndex = addIndex === 0 ? 0 : allLeafChildren_1.reduce(function(prevIdx, currNode, currIdx) {
            var _a;
            var rowIndex = currNode.rowIndex;
            var prevValueAtIndex = (_a = allLeafChildren_1[prevIdx]) === null || _a === void 0 ? void 0 : _a.rowIndex;
            var shouldUpdateIndex = rowIndex != null && prevValueAtIndex != null && rowIndex < addIndex && rowIndex > prevValueAtIndex;
            return shouldUpdateIndex ? currIdx : prevIdx;
          }, 0) + 1;
          nodesBeforeIndex = allLeafChildren_1.slice(0, normalizedAddIndex);
          nodesAfterIndex = allLeafChildren_1.slice(normalizedAddIndex, allLeafChildren_1.length);
        } else {
          nodesBeforeIndex = this.rootNode.allLeafChildren;
          nodesAfterIndex = [];
        }
        this.rootNode.allLeafChildren = __spread(nodesBeforeIndex, newNodes, nodesAfterIndex);
        if (this.rootNode.sibling) {
          this.rootNode.sibling.allLeafChildren = this.rootNode.allLeafChildren;
        }
        rowNodeTransaction.add = newNodes;
      };
      ClientSideNodeManager2.prototype.executeRemove = function(rowDataTran, rowNodeTransaction, nodesToUnselect) {
        var _this = this;
        var remove = rowDataTran.remove;
        if (_.missingOrEmpty(remove)) {
          return;
        }
        var rowIdsRemoved = {};
        remove.forEach(function(item) {
          var rowNode = _this.lookupRowNode(item);
          if (!rowNode) {
            return;
          }
          if (rowNode.isSelected()) {
            nodesToUnselect.push(rowNode);
          }
          rowNode.clearRowTopAndRowIndex();
          rowIdsRemoved[rowNode.id] = true;
          delete _this.allNodesMap[rowNode.id];
          rowNodeTransaction.remove.push(rowNode);
        });
        this.rootNode.allLeafChildren = this.rootNode.allLeafChildren.filter(function(rowNode) {
          return !rowIdsRemoved[rowNode.id];
        });
        if (this.rootNode.sibling) {
          this.rootNode.sibling.allLeafChildren = this.rootNode.allLeafChildren;
        }
      };
      ClientSideNodeManager2.prototype.executeUpdate = function(rowDataTran, rowNodeTransaction, nodesToUnselect) {
        var _this = this;
        var update = rowDataTran.update;
        if (_.missingOrEmpty(update)) {
          return;
        }
        update.forEach(function(item) {
          var rowNode = _this.lookupRowNode(item);
          if (!rowNode) {
            return;
          }
          rowNode.updateData(item);
          if (!rowNode.selectable && rowNode.isSelected()) {
            nodesToUnselect.push(rowNode);
          }
          _this.setMasterForRow(rowNode, item, ClientSideNodeManager2.TOP_LEVEL, false);
          rowNodeTransaction.update.push(rowNode);
        });
      };
      ClientSideNodeManager2.prototype.lookupRowNode = function(data) {
        var getRowIdFunc = this.gridOptionsWrapper.getRowIdFunc();
        var rowNode;
        if (getRowIdFunc) {
          var id = getRowIdFunc({ data, level: 0 });
          rowNode = this.allNodesMap[id];
          if (!rowNode) {
            console.error("AG Grid: could not find row id=" + id + ", data item was not found for this id");
            return null;
          }
        } else {
          rowNode = this.rootNode.allLeafChildren.find(function(node) {
            return node.data === data;
          });
          if (!rowNode) {
            console.error("AG Grid: could not find data item as object was not found", data);
            console.error("Consider using getRowId to help the Grid find matching row data");
            return null;
          }
        }
        return rowNode || null;
      };
      ClientSideNodeManager2.prototype.createNode = function(dataItem, parent, level) {
        var node = new RowNode(this.beans);
        node.group = false;
        this.setMasterForRow(node, dataItem, level, true);
        if (parent && !this.suppressParentsInRowNodes) {
          node.parent = parent;
        }
        node.level = level;
        node.setDataAndId(dataItem, this.nextId.toString());
        if (this.allNodesMap[node.id]) {
          console.warn("AG Grid: duplicate node id '" + node.id + "' detected from getRowId callback, this could cause issues in your grid.");
        }
        this.allNodesMap[node.id] = node;
        this.nextId++;
        return node;
      };
      ClientSideNodeManager2.prototype.setMasterForRow = function(rowNode, data, level, setExpanded) {
        if (this.doingTreeData) {
          rowNode.setMaster(false);
          if (setExpanded) {
            rowNode.expanded = false;
          }
        } else {
          if (this.doingMasterDetail) {
            if (this.isRowMasterFunc) {
              rowNode.setMaster(this.isRowMasterFunc(data));
            } else {
              rowNode.setMaster(true);
            }
          } else {
            rowNode.setMaster(false);
          }
          if (setExpanded) {
            var rowGroupColumns = this.columnModel.getRowGroupColumns();
            var numRowGroupColumns = rowGroupColumns ? rowGroupColumns.length : 0;
            var masterRowLevel = level + numRowGroupColumns;
            rowNode.expanded = rowNode.master ? this.isExpanded(masterRowLevel) : false;
          }
        }
      };
      ClientSideNodeManager2.prototype.isExpanded = function(level) {
        var expandByDefault = this.gridOptionsWrapper.getGroupDefaultExpanded();
        if (expandByDefault === -1) {
          return true;
        }
        return level < expandByDefault;
      };
      ClientSideNodeManager2.TOP_LEVEL = 0;
      ClientSideNodeManager2.ROOT_NODE_ID = "ROOT_NODE_ID";
      return ClientSideNodeManager2;
    }();
    __extends$c = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$b = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    (function(RecursionType2) {
      RecursionType2[RecursionType2["Normal"] = 0] = "Normal";
      RecursionType2[RecursionType2["AfterFilter"] = 1] = "AfterFilter";
      RecursionType2[RecursionType2["AfterFilterAndSort"] = 2] = "AfterFilterAndSort";
      RecursionType2[RecursionType2["PivotNodes"] = 3] = "PivotNodes";
    })(RecursionType || (RecursionType = {}));
    ClientSideRowModel = function(_super) {
      __extends$c(ClientSideRowModel2, _super);
      function ClientSideRowModel2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onRowHeightChanged_debounced = _.debounce(_this.onRowHeightChanged.bind(_this), 100);
        _this.rowsToDisplay = [];
        return _this;
      }
      ClientSideRowModel2.prototype.init = function() {
        var refreshEverythingFunc = this.refreshModel.bind(this, { step: ClientSideRowModelSteps.EVERYTHING });
        var animate = !this.gridOptionsWrapper.isSuppressAnimationFrame();
        var refreshEverythingAfterColsChangedFunc = this.refreshModel.bind(this, {
          step: ClientSideRowModelSteps.EVERYTHING,
          afterColumnsChanged: true,
          keepRenderedRows: true,
          animate
        });
        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, refreshEverythingAfterColsChangedFunc);
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, refreshEverythingFunc);
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VALUE_CHANGED, this.onValueChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_CHANGED, this.refreshModel.bind(this, { step: ClientSideRowModelSteps.PIVOT }));
        this.addManagedListener(this.eventService, Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, refreshEverythingFunc);
        var refreshMapListener = this.refreshModel.bind(this, {
          step: ClientSideRowModelSteps.MAP,
          keepRenderedRows: true,
          animate
        });
        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_GROUP_REMOVE_SINGLE_CHILDREN, refreshMapListener);
        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN, refreshMapListener);
        this.rootNode = new RowNode(this.beans);
        this.nodeManager = new ClientSideNodeManager(this.rootNode, this.gridOptionsWrapper, this.eventService, this.columnModel, this.selectionService, this.beans);
      };
      ClientSideRowModel2.prototype.start = function() {
        var rowData = this.gridOptionsWrapper.getRowData();
        if (rowData) {
          this.setRowData(rowData);
        }
      };
      ClientSideRowModel2.prototype.ensureRowHeightsValid = function(startPixel, endPixel, startLimitIndex, endLimitIndex) {
        var atLeastOneChange;
        var res = false;
        do {
          atLeastOneChange = false;
          var rowAtStartPixel = this.getRowIndexAtPixel(startPixel);
          var rowAtEndPixel = this.getRowIndexAtPixel(endPixel);
          var firstRow = Math.max(rowAtStartPixel, startLimitIndex);
          var lastRow = Math.min(rowAtEndPixel, endLimitIndex);
          for (var rowIndex = firstRow; rowIndex <= lastRow; rowIndex++) {
            var rowNode = this.getRow(rowIndex);
            if (rowNode.rowHeightEstimated) {
              var rowHeight = this.gridOptionsWrapper.getRowHeightForNode(rowNode);
              rowNode.setRowHeight(rowHeight.height);
              atLeastOneChange = true;
              res = true;
            }
          }
          if (atLeastOneChange) {
            this.setRowTopAndRowIndex();
          }
        } while (atLeastOneChange);
        return res;
      };
      ClientSideRowModel2.prototype.setRowTopAndRowIndex = function() {
        var defaultRowHeight = this.gridOptionsWrapper.getDefaultRowHeight();
        var nextRowTop = 0;
        var displayedRowsMapped = /* @__PURE__ */ new Set();
        var allowEstimate = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_NORMAL;
        for (var i = 0; i < this.rowsToDisplay.length; i++) {
          var rowNode = this.rowsToDisplay[i];
          if (rowNode.id != null) {
            displayedRowsMapped.add(rowNode.id);
          }
          if (rowNode.rowHeight == null) {
            var rowHeight = this.gridOptionsWrapper.getRowHeightForNode(rowNode, allowEstimate, defaultRowHeight);
            rowNode.setRowHeight(rowHeight.height, rowHeight.estimated);
          }
          rowNode.setRowTop(nextRowTop);
          rowNode.setRowIndex(i);
          nextRowTop += rowNode.rowHeight;
        }
        return displayedRowsMapped;
      };
      ClientSideRowModel2.prototype.clearRowTopAndRowIndex = function(changedPath, displayedRowsMapped) {
        var changedPathActive = changedPath.isActive();
        var clearIfNotDisplayed = function(rowNode) {
          if (rowNode && rowNode.id != null && !displayedRowsMapped.has(rowNode.id)) {
            rowNode.clearRowTopAndRowIndex();
          }
        };
        var recurse = function(rowNode) {
          clearIfNotDisplayed(rowNode);
          clearIfNotDisplayed(rowNode.detailNode);
          clearIfNotDisplayed(rowNode.sibling);
          if (rowNode.hasChildren()) {
            if (rowNode.childrenAfterGroup) {
              var isRootNode = rowNode.level == -1;
              var skipChildren = changedPathActive && !isRootNode && !rowNode.expanded;
              if (!skipChildren) {
                rowNode.childrenAfterGroup.forEach(recurse);
              }
            }
          }
        };
        recurse(this.rootNode);
      };
      ClientSideRowModel2.prototype.ensureRowsAtPixel = function(rowNodes, pixel, increment) {
        var _this = this;
        if (increment === void 0) {
          increment = 0;
        }
        var indexAtPixelNow = this.getRowIndexAtPixel(pixel);
        var rowNodeAtPixelNow = this.getRow(indexAtPixelNow);
        var animate = !this.gridOptionsWrapper.isSuppressAnimationFrame();
        if (rowNodeAtPixelNow === rowNodes[0]) {
          return false;
        }
        rowNodes.forEach(function(rowNode) {
          _.removeFromArray(_this.rootNode.allLeafChildren, rowNode);
        });
        rowNodes.forEach(function(rowNode, idx) {
          _.insertIntoArray(_this.rootNode.allLeafChildren, rowNode, Math.max(indexAtPixelNow + increment, 0) + idx);
        });
        this.refreshModel({
          step: ClientSideRowModelSteps.EVERYTHING,
          keepRenderedRows: true,
          keepEditingRows: true,
          animate
        });
        return true;
      };
      ClientSideRowModel2.prototype.highlightRowAtPixel = function(rowNode, pixel) {
        var indexAtPixelNow = pixel != null ? this.getRowIndexAtPixel(pixel) : null;
        var rowNodeAtPixelNow = indexAtPixelNow != null ? this.getRow(indexAtPixelNow) : null;
        if (!rowNodeAtPixelNow || !rowNode || rowNodeAtPixelNow === rowNode || pixel == null) {
          if (this.lastHighlightedRow) {
            this.lastHighlightedRow.setHighlighted(null);
            this.lastHighlightedRow = null;
          }
          return;
        }
        var highlight = this.getHighlightPosition(pixel, rowNodeAtPixelNow);
        if (this.lastHighlightedRow && this.lastHighlightedRow !== rowNodeAtPixelNow) {
          this.lastHighlightedRow.setHighlighted(null);
          this.lastHighlightedRow = null;
        }
        rowNodeAtPixelNow.setHighlighted(highlight);
        this.lastHighlightedRow = rowNodeAtPixelNow;
      };
      ClientSideRowModel2.prototype.getHighlightPosition = function(pixel, rowNode) {
        if (!rowNode) {
          var index = this.getRowIndexAtPixel(pixel);
          rowNode = this.getRow(index || 0);
          if (!rowNode) {
            return RowHighlightPosition.Below;
          }
        }
        var rowTop = rowNode.rowTop, rowHeight = rowNode.rowHeight;
        return pixel - rowTop < rowHeight / 2 ? RowHighlightPosition.Above : RowHighlightPosition.Below;
      };
      ClientSideRowModel2.prototype.getLastHighlightedRowNode = function() {
        return this.lastHighlightedRow;
      };
      ClientSideRowModel2.prototype.isLastRowIndexKnown = function() {
        return true;
      };
      ClientSideRowModel2.prototype.getRowCount = function() {
        if (this.rowsToDisplay) {
          return this.rowsToDisplay.length;
        }
        return 0;
      };
      ClientSideRowModel2.prototype.getTopLevelRowCount = function() {
        var showingRootNode = this.rowsToDisplay && this.rowsToDisplay[0] === this.rootNode;
        if (showingRootNode) {
          return 1;
        }
        var filteredChildren = this.rootNode.childrenAfterAggFilter;
        return filteredChildren ? filteredChildren.length : 0;
      };
      ClientSideRowModel2.prototype.getTopLevelRowDisplayedIndex = function(topLevelIndex) {
        var showingRootNode = this.rowsToDisplay && this.rowsToDisplay[0] === this.rootNode;
        if (showingRootNode) {
          return topLevelIndex;
        }
        var rowNode = this.rootNode.childrenAfterSort[topLevelIndex];
        if (this.gridOptionsWrapper.isGroupHideOpenParents()) {
          while (rowNode.expanded && rowNode.childrenAfterSort && rowNode.childrenAfterSort.length > 0) {
            rowNode = rowNode.childrenAfterSort[0];
          }
        }
        return rowNode.rowIndex;
      };
      ClientSideRowModel2.prototype.getRowBounds = function(index) {
        if (_.missing(this.rowsToDisplay)) {
          return null;
        }
        var rowNode = this.rowsToDisplay[index];
        if (rowNode) {
          return {
            rowTop: rowNode.rowTop,
            rowHeight: rowNode.rowHeight
          };
        }
        return null;
      };
      ClientSideRowModel2.prototype.onRowGroupOpened = function() {
        var animate = this.gridOptionsWrapper.isAnimateRows();
        this.refreshModel({ step: ClientSideRowModelSteps.MAP, keepRenderedRows: true, animate });
      };
      ClientSideRowModel2.prototype.onFilterChanged = function(event) {
        if (event.afterDataChange) {
          return;
        }
        var animate = this.gridOptionsWrapper.isAnimateRows();
        var primaryOrQuickFilterChanged = event.columns.length === 0 || event.columns.some(function(col) {
          return col.isPrimary();
        });
        var step = primaryOrQuickFilterChanged ? ClientSideRowModelSteps.FILTER : ClientSideRowModelSteps.FILTER_AGGREGATES;
        this.refreshModel({ step, keepRenderedRows: true, animate });
      };
      ClientSideRowModel2.prototype.onSortChanged = function() {
        var animate = this.gridOptionsWrapper.isAnimateRows();
        this.refreshModel({ step: ClientSideRowModelSteps.SORT, keepRenderedRows: true, animate, keepEditingRows: true });
      };
      ClientSideRowModel2.prototype.getType = function() {
        return Constants.ROW_MODEL_TYPE_CLIENT_SIDE;
      };
      ClientSideRowModel2.prototype.onValueChanged = function() {
        if (this.columnModel.isPivotActive()) {
          this.refreshModel({ step: ClientSideRowModelSteps.PIVOT });
        } else {
          this.refreshModel({ step: ClientSideRowModelSteps.AGGREGATE });
        }
      };
      ClientSideRowModel2.prototype.createChangePath = function(rowNodeTransactions) {
        var noTransactions = _.missingOrEmpty(rowNodeTransactions);
        var changedPath = new ChangedPath(false, this.rootNode);
        if (noTransactions || this.gridOptionsWrapper.isTreeData()) {
          changedPath.setInactive();
        }
        return changedPath;
      };
      ClientSideRowModel2.prototype.isSuppressModelUpdateAfterUpdateTransaction = function(params) {
        if (!this.gridOptionsWrapper.isSuppressModelUpdateAfterUpdateTransaction()) {
          return false;
        }
        if (params.rowNodeTransactions == null) {
          return false;
        }
        var transWithAddsOrDeletes = params.rowNodeTransactions.filter(function(tx) {
          return tx.add != null && tx.add.length > 0 || tx.remove != null && tx.remove.length > 0;
        });
        var transactionsContainUpdatesOnly = transWithAddsOrDeletes == null || transWithAddsOrDeletes.length == 0;
        return transactionsContainUpdatesOnly;
      };
      ClientSideRowModel2.prototype.refreshModel = function(params) {
        if (this.isSuppressModelUpdateAfterUpdateTransaction(params)) {
          return;
        }
        var changedPath = this.createChangePath(params.rowNodeTransactions);
        switch (params.step) {
          case ClientSideRowModelSteps.EVERYTHING:
            this.doRowGrouping(params.groupState, params.rowNodeTransactions, params.rowNodeOrder, changedPath, !!params.afterColumnsChanged);
          case ClientSideRowModelSteps.FILTER:
            this.doFilter(changedPath);
          case ClientSideRowModelSteps.PIVOT:
            this.doPivot(changedPath);
          case ClientSideRowModelSteps.AGGREGATE:
            this.doAggregate(changedPath);
          case ClientSideRowModelSteps.FILTER_AGGREGATES:
            this.doFilterAggregates(changedPath);
          case ClientSideRowModelSteps.SORT:
            this.doSort(params.rowNodeTransactions, changedPath);
          case ClientSideRowModelSteps.MAP:
            this.doRowsToDisplay();
        }
        var displayedNodesMapped = this.setRowTopAndRowIndex();
        this.clearRowTopAndRowIndex(changedPath, displayedNodesMapped);
        var event = {
          type: Events.EVENT_MODEL_UPDATED,
          animate: params.animate,
          keepRenderedRows: params.keepRenderedRows,
          newData: params.newData,
          newPage: false,
          keepUndoRedoStack: params.keepUndoRedoStack
        };
        this.eventService.dispatchEvent(event);
      };
      ClientSideRowModel2.prototype.isEmpty = function() {
        var rowsMissing = _.missing(this.rootNode.allLeafChildren) || this.rootNode.allLeafChildren.length === 0;
        return _.missing(this.rootNode) || rowsMissing || !this.columnModel.isReady();
      };
      ClientSideRowModel2.prototype.isRowsToRender = function() {
        return _.exists(this.rowsToDisplay) && this.rowsToDisplay.length > 0;
      };
      ClientSideRowModel2.prototype.getNodesInRangeForSelection = function(firstInRange, lastInRange) {
        var firstRowHit = !lastInRange;
        var lastRowHit = false;
        var lastRow;
        var result = [];
        var groupsSelectChildren = this.gridOptionsWrapper.isGroupSelectsChildren();
        this.forEachNodeAfterFilterAndSort(function(rowNode) {
          var lookingForLastRow = firstRowHit && !lastRowHit;
          if (!firstRowHit) {
            if (rowNode === lastInRange || rowNode === firstInRange) {
              firstRowHit = true;
            }
          }
          var skipThisGroupNode = rowNode.group && groupsSelectChildren;
          if (!skipThisGroupNode) {
            var inRange = firstRowHit && !lastRowHit;
            var childOfLastRow = rowNode.isParentOfNode(lastRow);
            if (inRange || childOfLastRow) {
              result.push(rowNode);
            }
          }
          if (lookingForLastRow) {
            if (rowNode === lastInRange || rowNode === firstInRange) {
              lastRowHit = true;
              if (rowNode === lastInRange) {
                lastRow = lastInRange;
              } else {
                lastRow = firstInRange;
              }
            }
          }
        });
        return result;
      };
      ClientSideRowModel2.prototype.setDatasource = function(datasource) {
        console.error("AG Grid: should never call setDatasource on clientSideRowController");
      };
      ClientSideRowModel2.prototype.getTopLevelNodes = function() {
        return this.rootNode ? this.rootNode.childrenAfterGroup : null;
      };
      ClientSideRowModel2.prototype.getRootNode = function() {
        return this.rootNode;
      };
      ClientSideRowModel2.prototype.getRow = function(index) {
        return this.rowsToDisplay[index];
      };
      ClientSideRowModel2.prototype.isRowPresent = function(rowNode) {
        return this.rowsToDisplay.indexOf(rowNode) >= 0;
      };
      ClientSideRowModel2.prototype.getRowIndexAtPixel = function(pixelToMatch) {
        if (this.isEmpty() || this.rowsToDisplay.length === 0) {
          return -1;
        }
        var bottomPointer = 0;
        var topPointer = this.rowsToDisplay.length - 1;
        if (pixelToMatch <= 0) {
          return 0;
        }
        var lastNode = _.last(this.rowsToDisplay);
        if (lastNode.rowTop <= pixelToMatch) {
          return this.rowsToDisplay.length - 1;
        }
        var oldBottomPointer = -1;
        var oldTopPointer = -1;
        while (true) {
          var midPointer = Math.floor((bottomPointer + topPointer) / 2);
          var currentRowNode = this.rowsToDisplay[midPointer];
          if (this.isRowInPixel(currentRowNode, pixelToMatch)) {
            return midPointer;
          }
          if (currentRowNode.rowTop < pixelToMatch) {
            bottomPointer = midPointer + 1;
          } else if (currentRowNode.rowTop > pixelToMatch) {
            topPointer = midPointer - 1;
          }
          var caughtInInfiniteLoop = oldBottomPointer === bottomPointer && oldTopPointer === topPointer;
          if (caughtInInfiniteLoop) {
            return midPointer;
          }
          oldBottomPointer = bottomPointer;
          oldTopPointer = topPointer;
        }
      };
      ClientSideRowModel2.prototype.isRowInPixel = function(rowNode, pixelToMatch) {
        var topPixel = rowNode.rowTop;
        var bottomPixel = rowNode.rowTop + rowNode.rowHeight;
        var pixelInRow = topPixel <= pixelToMatch && bottomPixel > pixelToMatch;
        return pixelInRow;
      };
      ClientSideRowModel2.prototype.forEachLeafNode = function(callback) {
        if (this.rootNode.allLeafChildren) {
          this.rootNode.allLeafChildren.forEach(function(rowNode, index) {
            return callback(rowNode, index);
          });
        }
      };
      ClientSideRowModel2.prototype.forEachNode = function(callback) {
        this.recursivelyWalkNodesAndCallback(this.rootNode.childrenAfterGroup, callback, RecursionType.Normal, 0);
      };
      ClientSideRowModel2.prototype.forEachNodeAfterFilter = function(callback) {
        this.recursivelyWalkNodesAndCallback(this.rootNode.childrenAfterAggFilter, callback, RecursionType.AfterFilter, 0);
      };
      ClientSideRowModel2.prototype.forEachNodeAfterFilterAndSort = function(callback) {
        this.recursivelyWalkNodesAndCallback(this.rootNode.childrenAfterSort, callback, RecursionType.AfterFilterAndSort, 0);
      };
      ClientSideRowModel2.prototype.forEachPivotNode = function(callback) {
        this.recursivelyWalkNodesAndCallback([this.rootNode], callback, RecursionType.PivotNodes, 0);
      };
      ClientSideRowModel2.prototype.recursivelyWalkNodesAndCallback = function(nodes, callback, recursionType, index) {
        if (!nodes) {
          return index;
        }
        for (var i = 0; i < nodes.length; i++) {
          var node = nodes[i];
          callback(node, index++);
          if (node.hasChildren()) {
            var nodeChildren = null;
            switch (recursionType) {
              case RecursionType.Normal:
                nodeChildren = node.childrenAfterGroup;
                break;
              case RecursionType.AfterFilter:
                nodeChildren = node.childrenAfterAggFilter;
                break;
              case RecursionType.AfterFilterAndSort:
                nodeChildren = node.childrenAfterSort;
                break;
              case RecursionType.PivotNodes:
                nodeChildren = !node.leafGroup ? node.childrenAfterSort : null;
                break;
            }
            if (nodeChildren) {
              index = this.recursivelyWalkNodesAndCallback(nodeChildren, callback, recursionType, index);
            }
          }
        }
        return index;
      };
      ClientSideRowModel2.prototype.doAggregate = function(changedPath) {
        if (this.aggregationStage) {
          this.aggregationStage.execute({ rowNode: this.rootNode, changedPath });
        }
      };
      ClientSideRowModel2.prototype.doFilterAggregates = function(changedPath) {
        if (this.filterAggregatesStage) {
          this.filterAggregatesStage.execute({ rowNode: this.rootNode, changedPath });
        } else {
          this.rootNode.childrenAfterAggFilter = this.rootNode.childrenAfterFilter;
        }
      };
      ClientSideRowModel2.prototype.expandOrCollapseAll = function(expand) {
        var usingTreeData = this.gridOptionsWrapper.isTreeData();
        var usingPivotMode = this.columnModel.isPivotActive();
        var recursiveExpandOrCollapse = function(rowNodes) {
          if (!rowNodes) {
            return;
          }
          rowNodes.forEach(function(rowNode) {
            var actionRow = function() {
              rowNode.expanded = expand;
              recursiveExpandOrCollapse(rowNode.childrenAfterGroup);
            };
            if (usingTreeData) {
              var hasChildren = _.exists(rowNode.childrenAfterGroup);
              if (hasChildren) {
                actionRow();
              }
              return;
            }
            if (usingPivotMode) {
              var notLeafGroup = !rowNode.leafGroup;
              if (notLeafGroup) {
                actionRow();
              }
              return;
            }
            var isRowGroup = rowNode.group;
            if (isRowGroup) {
              actionRow();
            }
          });
        };
        if (this.rootNode) {
          recursiveExpandOrCollapse(this.rootNode.childrenAfterGroup);
        }
        this.refreshModel({ step: ClientSideRowModelSteps.MAP });
        var eventSource = expand ? "expandAll" : "collapseAll";
        var event = {
          type: Events.EVENT_EXPAND_COLLAPSE_ALL,
          source: eventSource
        };
        this.eventService.dispatchEvent(event);
      };
      ClientSideRowModel2.prototype.doSort = function(rowNodeTransactions, changedPath) {
        this.sortStage.execute({
          rowNode: this.rootNode,
          rowNodeTransactions,
          changedPath
        });
      };
      ClientSideRowModel2.prototype.doRowGrouping = function(groupState, rowNodeTransactions, rowNodeOrder, changedPath, afterColumnsChanged) {
        if (this.groupStage) {
          if (rowNodeTransactions) {
            this.groupStage.execute({
              rowNode: this.rootNode,
              rowNodeTransactions,
              rowNodeOrder,
              changedPath
            });
          } else {
            this.groupStage.execute({
              rowNode: this.rootNode,
              changedPath,
              afterColumnsChanged
            });
            this.restoreGroupState(groupState);
          }
          if (this.gridOptionsWrapper.isGroupSelectsChildren()) {
            this.selectionService.updateGroupsFromChildrenSelections(changedPath);
          }
        } else {
          this.rootNode.childrenAfterGroup = this.rootNode.allLeafChildren;
          if (this.rootNode.sibling) {
            this.rootNode.sibling.childrenAfterGroup = this.rootNode.childrenAfterGroup;
          }
          this.rootNode.updateHasChildren();
        }
      };
      ClientSideRowModel2.prototype.restoreGroupState = function(groupState) {
        if (!groupState) {
          return;
        }
        _.traverseNodesWithKey(this.rootNode.childrenAfterGroup, function(node, key) {
          if (typeof groupState[key] === "boolean") {
            node.expanded = groupState[key];
          }
        });
      };
      ClientSideRowModel2.prototype.doFilter = function(changedPath) {
        this.filterStage.execute({ rowNode: this.rootNode, changedPath });
      };
      ClientSideRowModel2.prototype.doPivot = function(changedPath) {
        if (this.pivotStage) {
          this.pivotStage.execute({ rowNode: this.rootNode, changedPath });
        }
      };
      ClientSideRowModel2.prototype.getGroupState = function() {
        if (!this.rootNode.childrenAfterGroup || !this.gridOptionsWrapper.isRememberGroupStateWhenNewData()) {
          return null;
        }
        var result = {};
        _.traverseNodesWithKey(this.rootNode.childrenAfterGroup, function(node, key) {
          return result[key] = node.expanded;
        });
        return result;
      };
      ClientSideRowModel2.prototype.getCopyOfNodesMap = function() {
        return this.nodeManager.getCopyOfNodesMap();
      };
      ClientSideRowModel2.prototype.getRowNode = function(id) {
        var idIsGroup = typeof id == "string" && id.indexOf(RowNode.ID_PREFIX_ROW_GROUP) == 0;
        if (idIsGroup) {
          var res_1 = void 0;
          this.forEachNode(function(node) {
            if (node.id === id) {
              res_1 = node;
            }
          });
          return res_1;
        }
        return this.nodeManager.getRowNode(id);
      };
      ClientSideRowModel2.prototype.setRowData = function(rowData) {
        var groupState = this.getGroupState();
        this.nodeManager.setRowData(rowData);
        this.selectionService.reset();
        this.filterManager.onNewRowsLoaded("rowDataUpdated");
        var rowDataUpdatedEvent = {
          type: Events.EVENT_ROW_DATA_UPDATED
        };
        this.eventService.dispatchEvent(rowDataUpdatedEvent);
        this.refreshModel({
          step: ClientSideRowModelSteps.EVERYTHING,
          groupState,
          newData: true
        });
      };
      ClientSideRowModel2.prototype.batchUpdateRowData = function(rowDataTransaction, callback) {
        var _this = this;
        if (this.applyAsyncTransactionsTimeout == null) {
          this.rowDataTransactionBatch = [];
          var waitMillis = this.gridOptionsWrapper.getAsyncTransactionWaitMillis();
          this.applyAsyncTransactionsTimeout = window.setTimeout(function() {
            _this.executeBatchUpdateRowData();
          }, waitMillis);
        }
        this.rowDataTransactionBatch.push({ rowDataTransaction, callback });
      };
      ClientSideRowModel2.prototype.flushAsyncTransactions = function() {
        if (this.applyAsyncTransactionsTimeout != null) {
          clearTimeout(this.applyAsyncTransactionsTimeout);
          this.executeBatchUpdateRowData();
        }
      };
      ClientSideRowModel2.prototype.executeBatchUpdateRowData = function() {
        var _this = this;
        this.valueCache.onDataChanged();
        var callbackFuncsBound = [];
        var rowNodeTrans = [];
        var forceRowNodeOrder = false;
        if (this.rowDataTransactionBatch) {
          this.rowDataTransactionBatch.forEach(function(tranItem) {
            var rowNodeTran = _this.nodeManager.updateRowData(tranItem.rowDataTransaction, void 0);
            rowNodeTrans.push(rowNodeTran);
            if (tranItem.callback) {
              callbackFuncsBound.push(tranItem.callback.bind(null, rowNodeTran));
            }
            if (typeof tranItem.rowDataTransaction.addIndex === "number") {
              forceRowNodeOrder = true;
            }
          });
        }
        this.commonUpdateRowData(rowNodeTrans, void 0, forceRowNodeOrder);
        if (callbackFuncsBound.length > 0) {
          window.setTimeout(function() {
            callbackFuncsBound.forEach(function(func) {
              return func();
            });
          }, 0);
        }
        if (rowNodeTrans.length > 0) {
          var event_1 = {
            type: Events.EVENT_ASYNC_TRANSACTIONS_FLUSHED,
            results: rowNodeTrans
          };
          this.eventService.dispatchEvent(event_1);
        }
        this.rowDataTransactionBatch = null;
        this.applyAsyncTransactionsTimeout = void 0;
      };
      ClientSideRowModel2.prototype.updateRowData = function(rowDataTran, rowNodeOrder) {
        this.valueCache.onDataChanged();
        var rowNodeTran = this.nodeManager.updateRowData(rowDataTran, rowNodeOrder);
        var forceRowNodeOrder = typeof rowDataTran.addIndex === "number";
        this.commonUpdateRowData([rowNodeTran], rowNodeOrder, forceRowNodeOrder);
        return rowNodeTran;
      };
      ClientSideRowModel2.prototype.createRowNodeOrder = function() {
        var suppressSortOrder = this.gridOptionsWrapper.isSuppressMaintainUnsortedOrder();
        if (suppressSortOrder) {
          return;
        }
        var orderMap = {};
        if (this.rootNode && this.rootNode.allLeafChildren) {
          for (var index = 0; index < this.rootNode.allLeafChildren.length; index++) {
            var node = this.rootNode.allLeafChildren[index];
            orderMap[node.id] = index;
          }
        }
        return orderMap;
      };
      ClientSideRowModel2.prototype.commonUpdateRowData = function(rowNodeTrans, rowNodeOrder, forceRowNodeOrder) {
        var animate = !this.gridOptionsWrapper.isSuppressAnimationFrame();
        if (forceRowNodeOrder) {
          rowNodeOrder = this.createRowNodeOrder();
        }
        this.refreshModel({
          step: ClientSideRowModelSteps.EVERYTHING,
          rowNodeTransactions: rowNodeTrans,
          rowNodeOrder,
          keepRenderedRows: true,
          keepEditingRows: true,
          animate
        });
        this.filterManager.onNewRowsLoaded("rowDataUpdated");
        var event = {
          type: Events.EVENT_ROW_DATA_UPDATED
        };
        this.eventService.dispatchEvent(event);
      };
      ClientSideRowModel2.prototype.doRowsToDisplay = function() {
        this.rowsToDisplay = this.flattenStage.execute({ rowNode: this.rootNode });
      };
      ClientSideRowModel2.prototype.onRowHeightChanged = function() {
        this.refreshModel({ step: ClientSideRowModelSteps.MAP, keepRenderedRows: true, keepEditingRows: true, keepUndoRedoStack: true });
      };
      ClientSideRowModel2.prototype.onRowHeightChangedDebounced = function() {
        this.onRowHeightChanged_debounced();
      };
      ClientSideRowModel2.prototype.resetRowHeights = function() {
        var atLeastOne = false;
        this.forEachNode(function(rowNode) {
          rowNode.setRowHeight(rowNode.rowHeight, true);
          var detailNode = rowNode.detailNode;
          if (detailNode) {
            detailNode.setRowHeight(detailNode.rowHeight, true);
          }
          atLeastOne = true;
        });
        if (atLeastOne) {
          this.onRowHeightChanged();
        }
      };
      __decorate$b([
        Autowired("columnModel")
      ], ClientSideRowModel2.prototype, "columnModel", void 0);
      __decorate$b([
        Autowired("selectionService")
      ], ClientSideRowModel2.prototype, "selectionService", void 0);
      __decorate$b([
        Autowired("filterManager")
      ], ClientSideRowModel2.prototype, "filterManager", void 0);
      __decorate$b([
        Autowired("valueCache")
      ], ClientSideRowModel2.prototype, "valueCache", void 0);
      __decorate$b([
        Autowired("beans")
      ], ClientSideRowModel2.prototype, "beans", void 0);
      __decorate$b([
        Autowired("filterStage")
      ], ClientSideRowModel2.prototype, "filterStage", void 0);
      __decorate$b([
        Autowired("sortStage")
      ], ClientSideRowModel2.prototype, "sortStage", void 0);
      __decorate$b([
        Autowired("flattenStage")
      ], ClientSideRowModel2.prototype, "flattenStage", void 0);
      __decorate$b([
        Optional("groupStage")
      ], ClientSideRowModel2.prototype, "groupStage", void 0);
      __decorate$b([
        Optional("aggregationStage")
      ], ClientSideRowModel2.prototype, "aggregationStage", void 0);
      __decorate$b([
        Optional("pivotStage")
      ], ClientSideRowModel2.prototype, "pivotStage", void 0);
      __decorate$b([
        Optional("filterAggregatesStage")
      ], ClientSideRowModel2.prototype, "filterAggregatesStage", void 0);
      __decorate$b([
        PostConstruct
      ], ClientSideRowModel2.prototype, "init", null);
      ClientSideRowModel2 = __decorate$b([
        Bean("rowModel")
      ], ClientSideRowModel2);
      return ClientSideRowModel2;
    }(BeanStub);
    __extends$b = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$a = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    FilterStage = function(_super) {
      __extends$b(FilterStage2, _super);
      function FilterStage2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      FilterStage2.prototype.execute = function(params) {
        var changedPath = params.changedPath;
        this.filterService.filter(changedPath);
      };
      __decorate$a([
        Autowired("filterService")
      ], FilterStage2.prototype, "filterService", void 0);
      FilterStage2 = __decorate$a([
        Bean("filterStage")
      ], FilterStage2);
      return FilterStage2;
    }(BeanStub);
    __extends$a = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$9 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    SortStage = function(_super) {
      __extends$a(SortStage2, _super);
      function SortStage2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      SortStage2.prototype.execute = function(params) {
        var _this = this;
        var sortOptions = this.sortController.getSortOptions();
        var sortActive = _.exists(sortOptions) && sortOptions.length > 0;
        var deltaSort = sortActive && _.exists(params.rowNodeTransactions) && this.gridOptionsWrapper.isDeltaSort();
        var sortContainsGroupColumns = sortOptions.some(function(opt) {
          return !!_this.columnModel.getGroupDisplayColumnForGroup(opt.column.getId());
        });
        this.sortService.sort(sortOptions, sortActive, deltaSort, params.rowNodeTransactions, params.changedPath, sortContainsGroupColumns);
      };
      __decorate$9([
        Autowired("sortService")
      ], SortStage2.prototype, "sortService", void 0);
      __decorate$9([
        Autowired("sortController")
      ], SortStage2.prototype, "sortController", void 0);
      __decorate$9([
        Autowired("columnModel")
      ], SortStage2.prototype, "columnModel", void 0);
      SortStage2 = __decorate$9([
        Bean("sortStage")
      ], SortStage2);
      return SortStage2;
    }(BeanStub);
    __extends$9 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$8 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    FlattenStage = function(_super) {
      __extends$9(FlattenStage2, _super);
      function FlattenStage2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      FlattenStage2.prototype.execute = function(params) {
        var rootNode = params.rowNode;
        var result = [];
        var nextRowTop = { value: 0 };
        var skipLeafNodes = this.columnModel.isPivotMode();
        var showRootNode = skipLeafNodes && rootNode.leafGroup;
        var topList = showRootNode ? [rootNode] : rootNode.childrenAfterSort;
        this.recursivelyAddToRowsToDisplay(topList, result, nextRowTop, skipLeafNodes, 0);
        var atLeastOneRowPresent = result.length > 0;
        var includeGroupTotalFooter = !showRootNode && atLeastOneRowPresent && this.gridOptionsWrapper.isGroupIncludeTotalFooter();
        if (includeGroupTotalFooter) {
          this.ensureFooterNodeExists(rootNode);
          this.addRowNodeToRowsToDisplay(rootNode.sibling, result, nextRowTop, 0);
        }
        return result;
      };
      FlattenStage2.prototype.recursivelyAddToRowsToDisplay = function(rowsToFlatten, result, nextRowTop, skipLeafNodes, uiLevel) {
        if (_.missingOrEmpty(rowsToFlatten)) {
          return;
        }
        var hideOpenParents = this.gridOptionsWrapper.isGroupHideOpenParents();
        var groupRemoveSingleChildren = this.gridOptionsWrapper.isGroupRemoveSingleChildren();
        var groupRemoveLowestSingleChildren = !groupRemoveSingleChildren && this.gridOptionsWrapper.isGroupRemoveLowestSingleChildren();
        for (var i = 0; i < rowsToFlatten.length; i++) {
          var rowNode = rowsToFlatten[i];
          var isParent = rowNode.hasChildren();
          var isSkippedLeafNode = skipLeafNodes && !isParent;
          var isRemovedSingleChildrenGroup = groupRemoveSingleChildren && isParent && rowNode.childrenAfterGroup.length === 1;
          var isRemovedLowestSingleChildrenGroup = groupRemoveLowestSingleChildren && isParent && rowNode.leafGroup && rowNode.childrenAfterGroup.length === 1;
          var neverAllowToExpand = skipLeafNodes && rowNode.leafGroup;
          var isHiddenOpenParent = hideOpenParents && rowNode.expanded && !rowNode.master && !neverAllowToExpand;
          var thisRowShouldBeRendered = !isSkippedLeafNode && !isHiddenOpenParent && !isRemovedSingleChildrenGroup && !isRemovedLowestSingleChildrenGroup;
          if (thisRowShouldBeRendered) {
            this.addRowNodeToRowsToDisplay(rowNode, result, nextRowTop, uiLevel);
          }
          if (skipLeafNodes && rowNode.leafGroup) {
            continue;
          }
          if (isParent) {
            var excludedParent = isRemovedSingleChildrenGroup || isRemovedLowestSingleChildrenGroup;
            if (rowNode.expanded || excludedParent) {
              var uiLevelForChildren = excludedParent ? uiLevel : uiLevel + 1;
              this.recursivelyAddToRowsToDisplay(rowNode.childrenAfterSort, result, nextRowTop, skipLeafNodes, uiLevelForChildren);
              if (this.gridOptionsWrapper.isGroupIncludeFooter()) {
                this.ensureFooterNodeExists(rowNode);
                this.addRowNodeToRowsToDisplay(rowNode.sibling, result, nextRowTop, uiLevel);
              }
            }
          } else if (rowNode.master && rowNode.expanded) {
            var detailNode = this.createDetailNode(rowNode);
            this.addRowNodeToRowsToDisplay(detailNode, result, nextRowTop, uiLevel);
          }
        }
      };
      FlattenStage2.prototype.addRowNodeToRowsToDisplay = function(rowNode, result, nextRowTop, uiLevel) {
        var isGroupMultiAutoColumn = this.gridOptionsWrapper.isGroupMultiAutoColumn();
        result.push(rowNode);
        rowNode.setUiLevel(isGroupMultiAutoColumn ? 0 : uiLevel);
      };
      FlattenStage2.prototype.ensureFooterNodeExists = function(groupNode) {
        if (_.exists(groupNode.sibling)) {
          return;
        }
        var footerNode = new RowNode(this.beans);
        Object.keys(groupNode).forEach(function(key) {
          footerNode[key] = groupNode[key];
        });
        footerNode.footer = true;
        footerNode.setRowTop(null);
        footerNode.setRowIndex(null);
        footerNode.oldRowTop = null;
        if (_.exists(footerNode.id)) {
          footerNode.id = "rowGroupFooter_" + footerNode.id;
        }
        footerNode.sibling = groupNode;
        groupNode.sibling = footerNode;
      };
      FlattenStage2.prototype.createDetailNode = function(masterNode) {
        if (_.exists(masterNode.detailNode)) {
          return masterNode.detailNode;
        }
        var detailNode = new RowNode(this.beans);
        detailNode.detail = true;
        detailNode.selectable = false;
        detailNode.parent = masterNode;
        if (_.exists(masterNode.id)) {
          detailNode.id = "detail_" + masterNode.id;
        }
        detailNode.data = masterNode.data;
        detailNode.level = masterNode.level + 1;
        masterNode.detailNode = detailNode;
        return detailNode;
      };
      __decorate$8([
        Autowired("columnModel")
      ], FlattenStage2.prototype, "columnModel", void 0);
      __decorate$8([
        Autowired("beans")
      ], FlattenStage2.prototype, "beans", void 0);
      FlattenStage2 = __decorate$8([
        Bean("flattenStage")
      ], FlattenStage2);
      return FlattenStage2;
    }(BeanStub);
    __extends$8 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$7 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    SortService = function(_super) {
      __extends$8(SortService2, _super);
      function SortService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      SortService2.prototype.init = function() {
        this.postSortFunc = this.gridOptionsWrapper.getPostSortFunc();
      };
      SortService2.prototype.sort = function(sortOptions, sortActive, useDeltaSort, rowNodeTransactions, changedPath, sortContainsGroupColumns) {
        var _this = this;
        var groupMaintainOrder = this.gridOptionsWrapper.isGroupMaintainOrder();
        var groupColumnsPresent = this.columnModel.getAllGridColumns().some(function(c) {
          return c.isRowGroupActive();
        });
        var allDirtyNodes = {};
        if (useDeltaSort && rowNodeTransactions) {
          allDirtyNodes = this.calculateDirtyNodes(rowNodeTransactions);
        }
        var isPivotMode = this.columnModel.isPivotMode();
        var callback = function(rowNode) {
          _this.pullDownGroupDataForHideOpenParents(rowNode.childrenAfterAggFilter, true);
          var skipSortingPivotLeafs = isPivotMode && rowNode.leafGroup;
          var skipSortingGroups = groupMaintainOrder && groupColumnsPresent && !rowNode.leafGroup && !sortContainsGroupColumns;
          if (!sortActive || skipSortingGroups || skipSortingPivotLeafs) {
            var childrenToBeSorted = rowNode.childrenAfterAggFilter.slice(0);
            if (groupMaintainOrder && rowNode.childrenAfterSort) {
              var indexedOrders_1 = rowNode.childrenAfterSort.reduce(function(acc, row, idx) {
                acc[row.id] = idx;
                return acc;
              }, {});
              childrenToBeSorted.sort(function(row1, row2) {
                return (indexedOrders_1[row1.id] || 0) - (indexedOrders_1[row2.id] || 0);
              });
            }
            rowNode.childrenAfterSort = childrenToBeSorted;
          } else if (useDeltaSort) {
            rowNode.childrenAfterSort = _this.doDeltaSort(rowNode, allDirtyNodes, changedPath, sortOptions);
          } else {
            rowNode.childrenAfterSort = _this.rowNodeSorter.doFullSort(rowNode.childrenAfterAggFilter, sortOptions);
          }
          if (rowNode.sibling) {
            rowNode.sibling.childrenAfterSort = rowNode.childrenAfterSort;
          }
          _this.updateChildIndexes(rowNode);
          if (_this.postSortFunc) {
            var params = { nodes: rowNode.childrenAfterSort };
            _this.postSortFunc(params);
          }
        };
        if (changedPath) {
          changedPath.forEachChangedNodeDepthFirst(callback);
        }
        this.updateGroupDataForHideOpenParents(changedPath);
      };
      SortService2.prototype.calculateDirtyNodes = function(rowNodeTransactions) {
        var dirtyNodes = {};
        var addNodesFunc = function(rowNodes) {
          if (rowNodes) {
            rowNodes.forEach(function(rowNode) {
              return dirtyNodes[rowNode.id] = true;
            });
          }
        };
        if (rowNodeTransactions) {
          rowNodeTransactions.forEach(function(tran) {
            addNodesFunc(tran.add);
            addNodesFunc(tran.update);
            addNodesFunc(tran.remove);
          });
        }
        return dirtyNodes;
      };
      SortService2.prototype.doDeltaSort = function(rowNode, allTouchedNodes, changedPath, sortOptions) {
        var _this = this;
        var unsortedRows = rowNode.childrenAfterAggFilter;
        var oldSortedRows = rowNode.childrenAfterSort;
        if (!oldSortedRows) {
          return this.rowNodeSorter.doFullSort(unsortedRows, sortOptions);
        }
        var untouchedRowsMap = {};
        var touchedRows = [];
        unsortedRows.forEach(function(row) {
          if (allTouchedNodes[row.id] || !changedPath.canSkip(row)) {
            touchedRows.push(row);
          } else {
            untouchedRowsMap[row.id] = true;
          }
        });
        var sortedUntouchedRows = oldSortedRows.filter(function(child) {
          return untouchedRowsMap[child.id];
        });
        var mapNodeToSortedNode = function(rowNode2, pos) {
          return { currentPos: pos, rowNode: rowNode2 };
        };
        var sortedChangedRows = touchedRows.map(mapNodeToSortedNode).sort(function(a, b) {
          return _this.rowNodeSorter.compareRowNodes(sortOptions, a, b);
        });
        return this.mergeSortedArrays(sortOptions, sortedChangedRows, sortedUntouchedRows.map(mapNodeToSortedNode)).map(function(_a) {
          var rowNode2 = _a.rowNode;
          return rowNode2;
        });
      };
      SortService2.prototype.mergeSortedArrays = function(sortOptions, arr1, arr2) {
        var res = [];
        var i = 0;
        var j = 0;
        while (i < arr1.length && j < arr2.length) {
          var compareResult = this.rowNodeSorter.compareRowNodes(sortOptions, arr1[i], arr2[j]);
          if (compareResult < 0) {
            res.push(arr1[i++]);
          } else {
            res.push(arr2[j++]);
          }
        }
        while (i < arr1.length) {
          res.push(arr1[i++]);
        }
        while (j < arr2.length) {
          res.push(arr2[j++]);
        }
        return res;
      };
      SortService2.prototype.updateChildIndexes = function(rowNode) {
        if (_.missing(rowNode.childrenAfterSort)) {
          return;
        }
        var listToSort = rowNode.childrenAfterSort;
        for (var i = 0; i < listToSort.length; i++) {
          var child = listToSort[i];
          var firstChild = i === 0;
          var lastChild = i === rowNode.childrenAfterSort.length - 1;
          child.setFirstChild(firstChild);
          child.setLastChild(lastChild);
          child.setChildIndex(i);
        }
      };
      SortService2.prototype.updateGroupDataForHideOpenParents = function(changedPath) {
        var _this = this;
        if (!this.gridOptionsWrapper.isGroupHideOpenParents()) {
          return;
        }
        if (this.gridOptionsWrapper.isTreeData()) {
          var msg_1 = "AG Grid: The property hideOpenParents dose not work with Tree Data. This is because Tree Data has values at the group level, it doesn't make sense to hide them (as opposed to Row Grouping, which only has Aggregated Values at the group level).";
          _.doOnce(function() {
            return console.warn(msg_1);
          }, "sortService.hideOpenParentsWithTreeData");
          return false;
        }
        var callback = function(rowNode) {
          _this.pullDownGroupDataForHideOpenParents(rowNode.childrenAfterSort, false);
          rowNode.childrenAfterSort.forEach(function(child) {
            if (child.hasChildren()) {
              callback(child);
            }
          });
        };
        if (changedPath) {
          changedPath.executeFromRootNode(function(rowNode) {
            return callback(rowNode);
          });
        }
      };
      SortService2.prototype.pullDownGroupDataForHideOpenParents = function(rowNodes, clearOperation) {
        var _this = this;
        if (!this.gridOptionsWrapper.isGroupHideOpenParents() || _.missing(rowNodes)) {
          return;
        }
        rowNodes.forEach(function(childRowNode) {
          var groupDisplayCols = _this.columnModel.getGroupDisplayColumns();
          groupDisplayCols.forEach(function(groupDisplayCol) {
            var showRowGroup = groupDisplayCol.getColDef().showRowGroup;
            if (typeof showRowGroup !== "string") {
              console.error("AG Grid: groupHideOpenParents only works when specifying specific columns for colDef.showRowGroup");
              return;
            }
            var displayingGroupKey = showRowGroup;
            var rowGroupColumn = _this.columnModel.getPrimaryColumn(displayingGroupKey);
            var thisRowNodeMatches = rowGroupColumn === childRowNode.rowGroupColumn;
            if (thisRowNodeMatches) {
              return;
            }
            if (clearOperation) {
              childRowNode.setGroupValue(groupDisplayCol.getId(), void 0);
            } else {
              var parentToStealFrom = childRowNode.getFirstChildOfFirstChild(rowGroupColumn);
              if (parentToStealFrom) {
                childRowNode.setGroupValue(groupDisplayCol.getId(), parentToStealFrom.key);
              }
            }
          });
        });
      };
      __decorate$7([
        Autowired("columnModel")
      ], SortService2.prototype, "columnModel", void 0);
      __decorate$7([
        Autowired("rowNodeSorter")
      ], SortService2.prototype, "rowNodeSorter", void 0);
      __decorate$7([
        PostConstruct
      ], SortService2.prototype, "init", null);
      SortService2 = __decorate$7([
        Bean("sortService")
      ], SortService2);
      return SortService2;
    }(BeanStub);
    __extends$7 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$6 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    FilterService = function(_super) {
      __extends$7(FilterService2, _super);
      function FilterService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      FilterService2.prototype.filter = function(changedPath) {
        var filterActive = this.filterManager.isColumnFilterPresent() || this.filterManager.isQuickFilterPresent() || this.filterManager.isExternalFilterPresent();
        this.filterNodes(filterActive, changedPath);
      };
      FilterService2.prototype.filterNodes = function(filterActive, changedPath) {
        var _this = this;
        var filterCallback = function(rowNode, includeChildNodes) {
          if (rowNode.hasChildren()) {
            if (filterActive && !includeChildNodes) {
              rowNode.childrenAfterFilter = rowNode.childrenAfterGroup.filter(function(childNode) {
                var passBecauseChildren = childNode.childrenAfterFilter && childNode.childrenAfterFilter.length > 0;
                var passBecauseDataPasses = childNode.data && _this.filterManager.doesRowPassFilter({ rowNode: childNode });
                return passBecauseChildren || passBecauseDataPasses;
              });
            } else {
              rowNode.childrenAfterFilter = rowNode.childrenAfterGroup;
            }
          } else {
            rowNode.childrenAfterFilter = rowNode.childrenAfterGroup;
          }
          if (rowNode.sibling) {
            rowNode.sibling.childrenAfterFilter = rowNode.childrenAfterFilter;
          }
        };
        if (this.doingTreeDataFiltering()) {
          var treeDataDepthFirstFilter_1 = function(rowNode, alreadyFoundInParent) {
            if (rowNode.childrenAfterGroup) {
              for (var i = 0; i < rowNode.childrenAfterGroup.length; i++) {
                var childNode = rowNode.childrenAfterGroup[i];
                var foundInParent = alreadyFoundInParent || _this.filterManager.doesRowPassFilter({ rowNode: childNode });
                if (childNode.childrenAfterGroup) {
                  treeDataDepthFirstFilter_1(rowNode.childrenAfterGroup[i], foundInParent);
                } else {
                  filterCallback(childNode, foundInParent);
                }
              }
            }
            filterCallback(rowNode, alreadyFoundInParent);
          };
          var treeDataFilterCallback = function(rowNode) {
            return treeDataDepthFirstFilter_1(rowNode, false);
          };
          changedPath.executeFromRootNode(treeDataFilterCallback);
        } else {
          var defaultFilterCallback = function(rowNode) {
            return filterCallback(rowNode, false);
          };
          changedPath.forEachChangedNodeDepthFirst(defaultFilterCallback, true);
        }
      };
      FilterService2.prototype.doingTreeDataFiltering = function() {
        return this.gridOptionsWrapper.isTreeData() && !this.gridOptionsWrapper.isExcludeChildrenWhenTreeDataFiltering();
      };
      __decorate$6([
        Autowired("filterManager")
      ], FilterService2.prototype, "filterManager", void 0);
      FilterService2 = __decorate$6([
        Bean("filterService")
      ], FilterService2);
      return FilterService2;
    }(BeanStub);
    __extends$6 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$5 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __read = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    ImmutableService = function(_super) {
      __extends$6(ImmutableService2, _super);
      function ImmutableService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      ImmutableService2.prototype.postConstruct = function() {
        if (this.rowModel.getType() === Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {
          this.clientSideRowModel = this.rowModel;
        }
      };
      ImmutableService2.prototype.isActive = function() {
        return this.gridOptionsWrapper.isImmutableData();
      };
      ImmutableService2.prototype.setRowData = function(rowData) {
        var transactionAndMap = this.createTransactionForRowData(rowData);
        if (!transactionAndMap) {
          return;
        }
        var _a = __read(transactionAndMap, 2), transaction = _a[0], orderIdMap = _a[1];
        var nodeTransaction = this.clientSideRowModel.updateRowData(transaction, orderIdMap);
        if (nodeTransaction) {
          this.rowRenderer.refreshFullWidthRows(nodeTransaction.update);
        }
      };
      ImmutableService2.prototype.createTransactionForRowData = function(rowData) {
        if (_.missing(this.clientSideRowModel)) {
          console.error("AG Grid: ImmutableService only works with ClientSideRowModel");
          return;
        }
        var getRowIdFunc = this.gridOptionsWrapper.getRowIdFunc();
        if (getRowIdFunc == null) {
          console.error("AG Grid: ImmutableService requires getRowId() callback to be implemented, your row data needs IDs!");
          return;
        }
        var transaction = {
          remove: [],
          update: [],
          add: []
        };
        var existingNodesMap = this.clientSideRowModel.getCopyOfNodesMap();
        var suppressSortOrder = this.gridOptionsWrapper.isSuppressMaintainUnsortedOrder();
        var orderMap = suppressSortOrder ? void 0 : {};
        if (_.exists(rowData)) {
          rowData.forEach(function(data, index) {
            var id = getRowIdFunc({ data, level: 0 });
            var existingNode = existingNodesMap[id];
            if (orderMap) {
              orderMap[id] = index;
            }
            if (existingNode) {
              var dataHasChanged = existingNode.data !== data;
              if (dataHasChanged) {
                transaction.update.push(data);
              }
              existingNodesMap[id] = void 0;
            } else {
              transaction.add.push(data);
            }
          });
        }
        _.iterateObject(existingNodesMap, function(id, rowNode) {
          if (rowNode) {
            transaction.remove.push(rowNode.data);
          }
        });
        return [transaction, orderMap];
      };
      __decorate$5([
        Autowired("rowModel")
      ], ImmutableService2.prototype, "rowModel", void 0);
      __decorate$5([
        Autowired("rowRenderer")
      ], ImmutableService2.prototype, "rowRenderer", void 0);
      __decorate$5([
        Autowired("columnApi")
      ], ImmutableService2.prototype, "columnApi", void 0);
      __decorate$5([
        Autowired("gridApi")
      ], ImmutableService2.prototype, "gridApi", void 0);
      __decorate$5([
        Autowired("filterManager")
      ], ImmutableService2.prototype, "filterManager", void 0);
      __decorate$5([
        PostConstruct
      ], ImmutableService2.prototype, "postConstruct", null);
      ImmutableService2 = __decorate$5([
        Bean("immutableService")
      ], ImmutableService2);
      return ImmutableService2;
    }(BeanStub);
    ClientSideRowModelModule = {
      moduleName: ModuleNames.ClientSideRowModelModule,
      beans: [FilterStage, SortStage, FlattenStage, SortService, FilterService, ImmutableService],
      rowModels: { clientSide: ClientSideRowModel }
    };
    __extends$5 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$4 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    InfiniteBlock = function(_super) {
      __extends$5(InfiniteBlock2, _super);
      function InfiniteBlock2(id, parentCache, params) {
        var _this = _super.call(this, id) || this;
        _this.parentCache = parentCache;
        _this.params = params;
        _this.startRow = id * params.blockSize;
        _this.endRow = _this.startRow + params.blockSize;
        return _this;
      }
      InfiniteBlock2.prototype.postConstruct = function() {
        this.createRowNodes();
      };
      InfiniteBlock2.prototype.getBlockStateJson = function() {
        return {
          id: "" + this.getId(),
          state: {
            blockNumber: this.getId(),
            startRow: this.getStartRow(),
            endRow: this.getEndRow(),
            pageStatus: this.getState()
          }
        };
      };
      InfiniteBlock2.prototype.setDataAndId = function(rowNode, data, index) {
        if (!rowNode.id && rowNode.alreadyRendered) {
          rowNode.alreadyRendered = false;
        }
        if (_.exists(data)) {
          rowNode.setDataAndId(data, index.toString());
        } else {
          rowNode.setDataAndId(void 0, void 0);
        }
      };
      InfiniteBlock2.prototype.loadFromDatasource = function() {
        var _this = this;
        var params = this.createLoadParams();
        if (_.missing(this.params.datasource.getRows)) {
          console.warn("AG Grid: datasource is missing getRows method");
          return;
        }
        window.setTimeout(function() {
          _this.params.datasource.getRows(params);
        }, 0);
      };
      InfiniteBlock2.prototype.processServerFail = function() {
      };
      InfiniteBlock2.prototype.createLoadParams = function() {
        var params = {
          startRow: this.getStartRow(),
          endRow: this.getEndRow(),
          successCallback: this.pageLoaded.bind(this, this.getVersion()),
          failCallback: this.pageLoadFailed.bind(this, this.getVersion()),
          sortModel: this.params.sortModel,
          filterModel: this.params.filterModel,
          context: this.gridOptionsWrapper.getContext()
        };
        return params;
      };
      InfiniteBlock2.prototype.forEachNode = function(callback, sequence, rowCount) {
        var _this = this;
        this.rowNodes.forEach(function(rowNode, index) {
          var rowIndex = _this.startRow + index;
          if (rowIndex < rowCount) {
            callback(rowNode, sequence.next());
          }
        });
      };
      InfiniteBlock2.prototype.getLastAccessed = function() {
        return this.lastAccessed;
      };
      InfiniteBlock2.prototype.getRow = function(rowIndex, dontTouchLastAccessed) {
        if (dontTouchLastAccessed === void 0) {
          dontTouchLastAccessed = false;
        }
        if (!dontTouchLastAccessed) {
          this.lastAccessed = this.params.lastAccessedSequence.next();
        }
        var localIndex = rowIndex - this.startRow;
        return this.rowNodes[localIndex];
      };
      InfiniteBlock2.prototype.getStartRow = function() {
        return this.startRow;
      };
      InfiniteBlock2.prototype.getEndRow = function() {
        return this.endRow;
      };
      InfiniteBlock2.prototype.createRowNodes = function() {
        this.rowNodes = [];
        for (var i = 0; i < this.params.blockSize; i++) {
          var rowIndex = this.startRow + i;
          var rowNode = new RowNode(this.beans);
          rowNode.setRowHeight(this.params.rowHeight);
          rowNode.uiLevel = 0;
          rowNode.setRowIndex(rowIndex);
          rowNode.setRowTop(this.params.rowHeight * rowIndex);
          this.rowNodes.push(rowNode);
        }
      };
      InfiniteBlock2.prototype.processServerResult = function(params) {
        var _this = this;
        this.rowNodes.forEach(function(rowNode, index) {
          var data = params.rowData ? params.rowData[index] : void 0;
          _this.setDataAndId(rowNode, data, _this.startRow + index);
        });
        var finalRowCount = params.rowCount != null && params.rowCount >= 0 ? params.rowCount : void 0;
        this.parentCache.pageLoaded(this, finalRowCount);
      };
      InfiniteBlock2.prototype.destroyRowNodes = function() {
        this.rowNodes.forEach(function(rowNode) {
          rowNode.clearRowTopAndRowIndex();
        });
      };
      __decorate$4([
        Autowired("beans")
      ], InfiniteBlock2.prototype, "beans", void 0);
      __decorate$4([
        PostConstruct
      ], InfiniteBlock2.prototype, "postConstruct", null);
      __decorate$4([
        PreDestroy
      ], InfiniteBlock2.prototype, "destroyRowNodes", null);
      return InfiniteBlock2;
    }(RowNodeBlock);
    __extends$4 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$3 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    InfiniteCache = function(_super) {
      __extends$4(InfiniteCache2, _super);
      function InfiniteCache2(params) {
        var _this = _super.call(this) || this;
        _this.lastRowIndexKnown = false;
        _this.blocks = {};
        _this.blockCount = 0;
        _this.rowCount = params.initialRowCount;
        _this.params = params;
        return _this;
      }
      InfiniteCache2.prototype.setBeans = function(loggerFactory) {
        this.logger = loggerFactory.create("InfiniteCache");
      };
      InfiniteCache2.prototype.getRow = function(rowIndex, dontCreatePage) {
        if (dontCreatePage === void 0) {
          dontCreatePage = false;
        }
        var blockId = Math.floor(rowIndex / this.params.blockSize);
        var block = this.blocks[blockId];
        if (!block) {
          if (dontCreatePage) {
            return void 0;
          }
          block = this.createBlock(blockId);
        }
        return block.getRow(rowIndex);
      };
      InfiniteCache2.prototype.createBlock = function(blockNumber) {
        var newBlock = this.createBean(new InfiniteBlock(blockNumber, this, this.params));
        this.blocks[newBlock.getId()] = newBlock;
        this.blockCount++;
        this.purgeBlocksIfNeeded(newBlock);
        this.params.rowNodeBlockLoader.addBlock(newBlock);
        return newBlock;
      };
      InfiniteCache2.prototype.refreshCache = function() {
        var nothingToRefresh = this.blockCount == 0;
        if (nothingToRefresh) {
          this.purgeCache();
          return;
        }
        this.getBlocksInOrder().forEach(function(block) {
          return block.setStateWaitingToLoad();
        });
        this.params.rowNodeBlockLoader.checkBlockToLoad();
      };
      InfiniteCache2.prototype.destroyAllBlocks = function() {
        var _this = this;
        this.getBlocksInOrder().forEach(function(block) {
          return _this.destroyBlock(block);
        });
      };
      InfiniteCache2.prototype.getRowCount = function() {
        return this.rowCount;
      };
      InfiniteCache2.prototype.isLastRowIndexKnown = function() {
        return this.lastRowIndexKnown;
      };
      InfiniteCache2.prototype.pageLoaded = function(block, lastRow) {
        if (!this.isAlive()) {
          return;
        }
        this.logger.log("onPageLoaded: page = " + block.getId() + ", lastRow = " + lastRow);
        this.checkRowCount(block, lastRow);
        this.onCacheUpdated();
      };
      InfiniteCache2.prototype.purgeBlocksIfNeeded = function(blockToExclude) {
        var _this = this;
        var blocksForPurging = this.getBlocksInOrder().filter(function(b) {
          return b != blockToExclude;
        });
        var lastAccessedComparator = function(a, b) {
          return b.getLastAccessed() - a.getLastAccessed();
        };
        blocksForPurging.sort(lastAccessedComparator);
        var maxBlocksProvided = this.params.maxBlocksInCache > 0;
        var blocksToKeep = maxBlocksProvided ? this.params.maxBlocksInCache - 1 : null;
        var emptyBlocksToKeep = InfiniteCache2.MAX_EMPTY_BLOCKS_TO_KEEP - 1;
        blocksForPurging.forEach(function(block, index) {
          var purgeBecauseBlockEmpty = block.getState() === InfiniteBlock.STATE_WAITING_TO_LOAD && index >= emptyBlocksToKeep;
          var purgeBecauseCacheFull = maxBlocksProvided ? index >= blocksToKeep : false;
          if (purgeBecauseBlockEmpty || purgeBecauseCacheFull) {
            if (_this.isBlockCurrentlyDisplayed(block)) {
              return;
            }
            if (_this.isBlockFocused(block)) {
              return;
            }
            _this.removeBlockFromCache(block);
          }
        });
      };
      InfiniteCache2.prototype.isBlockFocused = function(block) {
        var focusedCell = this.focusService.getFocusCellToUseAfterRefresh();
        if (!focusedCell) {
          return false;
        }
        if (focusedCell.rowPinned != null) {
          return false;
        }
        var blockIndexStart = block.getStartRow();
        var blockIndexEnd = block.getEndRow();
        var hasFocus = focusedCell.rowIndex >= blockIndexStart && focusedCell.rowIndex < blockIndexEnd;
        return hasFocus;
      };
      InfiniteCache2.prototype.isBlockCurrentlyDisplayed = function(block) {
        var startIndex = block.getStartRow();
        var endIndex = block.getEndRow() - 1;
        return this.rowRenderer.isRangeInRenderedViewport(startIndex, endIndex);
      };
      InfiniteCache2.prototype.removeBlockFromCache = function(blockToRemove) {
        if (!blockToRemove) {
          return;
        }
        this.destroyBlock(blockToRemove);
      };
      InfiniteCache2.prototype.checkRowCount = function(block, lastRow) {
        if (typeof lastRow === "number" && lastRow >= 0) {
          this.rowCount = lastRow;
          this.lastRowIndexKnown = true;
        } else if (!this.lastRowIndexKnown) {
          var lastRowIndex = (block.getId() + 1) * this.params.blockSize;
          var lastRowIndexPlusOverflow = lastRowIndex + this.params.overflowSize;
          if (this.rowCount < lastRowIndexPlusOverflow) {
            this.rowCount = lastRowIndexPlusOverflow;
          }
        }
      };
      InfiniteCache2.prototype.setRowCount = function(rowCount, lastRowIndexKnown) {
        this.rowCount = rowCount;
        if (_.exists(lastRowIndexKnown)) {
          this.lastRowIndexKnown = lastRowIndexKnown;
        }
        if (!this.lastRowIndexKnown) {
          if (this.rowCount % this.params.blockSize === 0) {
            this.rowCount++;
          }
        }
        this.onCacheUpdated();
      };
      InfiniteCache2.prototype.forEachNodeDeep = function(callback) {
        var _this = this;
        var sequence = new NumberSequence();
        this.getBlocksInOrder().forEach(function(block) {
          return block.forEachNode(callback, sequence, _this.rowCount);
        });
      };
      InfiniteCache2.prototype.getBlocksInOrder = function() {
        var blockComparator = function(a, b) {
          return a.getId() - b.getId();
        };
        var blocks = _.getAllValuesInObject(this.blocks).sort(blockComparator);
        return blocks;
      };
      InfiniteCache2.prototype.destroyBlock = function(block) {
        delete this.blocks[block.getId()];
        this.destroyBean(block);
        this.blockCount--;
        this.params.rowNodeBlockLoader.removeBlock(block);
      };
      InfiniteCache2.prototype.onCacheUpdated = function() {
        if (this.isAlive()) {
          this.destroyAllBlocksPastVirtualRowCount();
          var event_1 = {
            type: Events.EVENT_STORE_UPDATED
          };
          this.eventService.dispatchEvent(event_1);
        }
      };
      InfiniteCache2.prototype.destroyAllBlocksPastVirtualRowCount = function() {
        var _this = this;
        var blocksToDestroy = [];
        this.getBlocksInOrder().forEach(function(block) {
          var startRow = block.getId() * _this.params.blockSize;
          if (startRow >= _this.rowCount) {
            blocksToDestroy.push(block);
          }
        });
        if (blocksToDestroy.length > 0) {
          blocksToDestroy.forEach(function(block) {
            return _this.destroyBlock(block);
          });
        }
      };
      InfiniteCache2.prototype.purgeCache = function() {
        var _this = this;
        this.getBlocksInOrder().forEach(function(block) {
          return _this.removeBlockFromCache(block);
        });
        this.lastRowIndexKnown = false;
        if (this.rowCount === 0) {
          this.rowCount = this.params.initialRowCount;
        }
        this.onCacheUpdated();
      };
      InfiniteCache2.prototype.getRowNodesInRange = function(firstInRange, lastInRange) {
        var _this = this;
        var result = [];
        var lastBlockId = -1;
        var inActiveRange = false;
        var numberSequence = new NumberSequence();
        if (_.missing(firstInRange)) {
          inActiveRange = true;
        }
        var foundGapInSelection = false;
        this.getBlocksInOrder().forEach(function(block) {
          if (foundGapInSelection) {
            return;
          }
          if (inActiveRange && lastBlockId + 1 !== block.getId()) {
            foundGapInSelection = true;
            return;
          }
          lastBlockId = block.getId();
          block.forEachNode(function(rowNode) {
            var hitFirstOrLast = rowNode === firstInRange || rowNode === lastInRange;
            if (inActiveRange || hitFirstOrLast) {
              result.push(rowNode);
            }
            if (hitFirstOrLast) {
              inActiveRange = !inActiveRange;
            }
          }, numberSequence, _this.rowCount);
        });
        var invalidRange = foundGapInSelection || inActiveRange;
        return invalidRange ? [] : result;
      };
      InfiniteCache2.MAX_EMPTY_BLOCKS_TO_KEEP = 2;
      __decorate$3([
        Autowired("rowRenderer")
      ], InfiniteCache2.prototype, "rowRenderer", void 0);
      __decorate$3([
        Autowired("focusService")
      ], InfiniteCache2.prototype, "focusService", void 0);
      __decorate$3([
        __param(0, Qualifier("loggerFactory"))
      ], InfiniteCache2.prototype, "setBeans", null);
      __decorate$3([
        PreDestroy
      ], InfiniteCache2.prototype, "destroyAllBlocks", null);
      return InfiniteCache2;
    }(BeanStub);
    __extends$3 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$2 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    InfiniteRowModel = function(_super) {
      __extends$3(InfiniteRowModel2, _super);
      function InfiniteRowModel2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      InfiniteRowModel2.prototype.getRowBounds = function(index) {
        return {
          rowHeight: this.rowHeight,
          rowTop: this.rowHeight * index
        };
      };
      InfiniteRowModel2.prototype.ensureRowHeightsValid = function(startPixel, endPixel, startLimitIndex, endLimitIndex) {
        return false;
      };
      InfiniteRowModel2.prototype.init = function() {
        var _this = this;
        if (!this.gridOptionsWrapper.isRowModelInfinite()) {
          return;
        }
        this.rowHeight = this.gridOptionsWrapper.getRowHeightAsNumber();
        this.addEventListeners();
        this.addDestroyFunc(function() {
          return _this.destroyCache();
        });
        this.verifyProps();
      };
      InfiniteRowModel2.prototype.verifyProps = function() {
        if (this.gridOptionsWrapper.getInitialGroupOrderComparator() != null) {
          var message_1 = "AG Grid: initialGroupOrderComparator cannot be used with Infinite Row Model. If using Infinite Row Model, then sorting is done on the server side, nothing to do with the client.";
          _.doOnce(function() {
            return console.warn(message_1);
          }, "IRM.InitialGroupOrderComparator");
        }
      };
      InfiniteRowModel2.prototype.start = function() {
        this.setDatasource(this.gridOptionsWrapper.getDatasource());
      };
      InfiniteRowModel2.prototype.destroyDatasource = function() {
        if (this.datasource) {
          this.getContext().destroyBean(this.datasource);
          this.rowRenderer.datasourceChanged();
          this.datasource = null;
        }
      };
      InfiniteRowModel2.prototype.addEventListeners = function() {
        this.addManagedListener(this.eventService, Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.onColumnEverything.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_STORE_UPDATED, this.onCacheUpdated.bind(this));
      };
      InfiniteRowModel2.prototype.onFilterChanged = function() {
        this.reset();
      };
      InfiniteRowModel2.prototype.onSortChanged = function() {
        this.reset();
      };
      InfiniteRowModel2.prototype.onColumnEverything = function() {
        var resetRequired;
        if (this.cacheParams) {
          resetRequired = this.isSortModelDifferent();
        } else {
          resetRequired = true;
        }
        if (resetRequired) {
          this.reset();
        }
      };
      InfiniteRowModel2.prototype.isSortModelDifferent = function() {
        return !_.jsonEquals(this.cacheParams.sortModel, this.sortController.getSortModel());
      };
      InfiniteRowModel2.prototype.getType = function() {
        return Constants.ROW_MODEL_TYPE_INFINITE;
      };
      InfiniteRowModel2.prototype.setDatasource = function(datasource) {
        this.destroyDatasource();
        this.datasource = datasource;
        if (datasource) {
          this.reset();
        }
      };
      InfiniteRowModel2.prototype.isEmpty = function() {
        return !this.infiniteCache;
      };
      InfiniteRowModel2.prototype.isRowsToRender = function() {
        return !!this.infiniteCache;
      };
      InfiniteRowModel2.prototype.getNodesInRangeForSelection = function(firstInRange, lastInRange) {
        return this.infiniteCache ? this.infiniteCache.getRowNodesInRange(firstInRange, lastInRange) : [];
      };
      InfiniteRowModel2.prototype.reset = function() {
        if (!this.datasource) {
          return;
        }
        var getRowIdFunc = this.gridOptionsWrapper.getRowIdFunc();
        var userGeneratingIds = getRowIdFunc != null;
        if (!userGeneratingIds) {
          this.selectionService.reset();
        }
        this.resetCache();
        var event = this.createModelUpdatedEvent();
        this.eventService.dispatchEvent(event);
      };
      InfiniteRowModel2.prototype.createModelUpdatedEvent = function() {
        return {
          type: Events.EVENT_MODEL_UPDATED,
          newPage: false,
          newData: false,
          keepRenderedRows: true,
          animate: false
        };
      };
      InfiniteRowModel2.prototype.resetCache = function() {
        this.destroyCache();
        this.cacheParams = {
          datasource: this.datasource,
          filterModel: this.filterManager.getFilterModel(),
          sortModel: this.sortController.getSortModel(),
          rowNodeBlockLoader: this.rowNodeBlockLoader,
          initialRowCount: this.defaultIfInvalid(this.gridOptionsWrapper.getInfiniteInitialRowCount(), 1),
          maxBlocksInCache: this.gridOptionsWrapper.getMaxBlocksInCache(),
          rowHeight: this.gridOptionsWrapper.getRowHeightAsNumber(),
          overflowSize: this.defaultIfInvalid(this.gridOptionsWrapper.getCacheOverflowSize(), 1),
          blockSize: this.defaultIfInvalid(this.gridOptionsWrapper.getCacheBlockSize(), 100),
          lastAccessedSequence: new NumberSequence()
        };
        this.infiniteCache = this.createBean(new InfiniteCache(this.cacheParams));
      };
      InfiniteRowModel2.prototype.defaultIfInvalid = function(value, defaultValue) {
        return value > 0 ? value : defaultValue;
      };
      InfiniteRowModel2.prototype.destroyCache = function() {
        if (this.infiniteCache) {
          this.infiniteCache = this.destroyBean(this.infiniteCache);
        }
      };
      InfiniteRowModel2.prototype.onCacheUpdated = function() {
        var event = this.createModelUpdatedEvent();
        this.eventService.dispatchEvent(event);
      };
      InfiniteRowModel2.prototype.getRow = function(rowIndex) {
        if (!this.infiniteCache) {
          return void 0;
        }
        if (rowIndex >= this.infiniteCache.getRowCount()) {
          return void 0;
        }
        return this.infiniteCache.getRow(rowIndex);
      };
      InfiniteRowModel2.prototype.getRowNode = function(id) {
        var result;
        this.forEachNode(function(rowNode) {
          if (rowNode.id === id) {
            result = rowNode;
          }
        });
        return result;
      };
      InfiniteRowModel2.prototype.forEachNode = function(callback) {
        if (this.infiniteCache) {
          this.infiniteCache.forEachNodeDeep(callback);
        }
      };
      InfiniteRowModel2.prototype.getTopLevelRowCount = function() {
        return this.getRowCount();
      };
      InfiniteRowModel2.prototype.getTopLevelRowDisplayedIndex = function(topLevelIndex) {
        return topLevelIndex;
      };
      InfiniteRowModel2.prototype.getRowIndexAtPixel = function(pixel) {
        if (this.rowHeight !== 0) {
          var rowIndexForPixel = Math.floor(pixel / this.rowHeight);
          var lastRowIndex = this.getRowCount() - 1;
          if (rowIndexForPixel > lastRowIndex) {
            return lastRowIndex;
          }
          return rowIndexForPixel;
        }
        return 0;
      };
      InfiniteRowModel2.prototype.getRowCount = function() {
        return this.infiniteCache ? this.infiniteCache.getRowCount() : 0;
      };
      InfiniteRowModel2.prototype.isRowPresent = function(rowNode) {
        var foundRowNode = this.getRowNode(rowNode.id);
        return !!foundRowNode;
      };
      InfiniteRowModel2.prototype.refreshCache = function() {
        if (this.infiniteCache) {
          this.infiniteCache.refreshCache();
        }
      };
      InfiniteRowModel2.prototype.purgeCache = function() {
        if (this.infiniteCache) {
          this.infiniteCache.purgeCache();
        }
      };
      InfiniteRowModel2.prototype.isLastRowIndexKnown = function() {
        if (this.infiniteCache) {
          return this.infiniteCache.isLastRowIndexKnown();
        }
        return false;
      };
      InfiniteRowModel2.prototype.setRowCount = function(rowCount, lastRowIndexKnown) {
        if (this.infiniteCache) {
          this.infiniteCache.setRowCount(rowCount, lastRowIndexKnown);
        }
      };
      __decorate$2([
        Autowired("filterManager")
      ], InfiniteRowModel2.prototype, "filterManager", void 0);
      __decorate$2([
        Autowired("sortController")
      ], InfiniteRowModel2.prototype, "sortController", void 0);
      __decorate$2([
        Autowired("selectionService")
      ], InfiniteRowModel2.prototype, "selectionService", void 0);
      __decorate$2([
        Autowired("rowRenderer")
      ], InfiniteRowModel2.prototype, "rowRenderer", void 0);
      __decorate$2([
        Autowired("rowNodeBlockLoader")
      ], InfiniteRowModel2.prototype, "rowNodeBlockLoader", void 0);
      __decorate$2([
        PostConstruct
      ], InfiniteRowModel2.prototype, "init", null);
      __decorate$2([
        PreDestroy
      ], InfiniteRowModel2.prototype, "destroyDatasource", null);
      InfiniteRowModel2 = __decorate$2([
        Bean("rowModel")
      ], InfiniteRowModel2);
      return InfiniteRowModel2;
    }(BeanStub);
    InfiniteRowModelModule = {
      moduleName: ModuleNames.InfiniteRowModelModule,
      rowModels: { infinite: InfiniteRowModel }
    };
    BaseCreator = function() {
      function BaseCreator2() {
      }
      BaseCreator2.prototype.setBeans = function(beans) {
        this.beans = beans;
      };
      BaseCreator2.prototype.getFileName = function(fileName) {
        var extension = this.getDefaultFileExtension();
        if (fileName == null || !fileName.length) {
          fileName = this.getDefaultFileName();
        }
        return fileName.indexOf(".") === -1 ? fileName + "." + extension : fileName;
      };
      BaseCreator2.prototype.getData = function(params) {
        var serializingSession = this.createSerializingSession(params);
        var data = this.beans.gridSerializer.serialize(serializingSession, params);
        return data;
      };
      return BaseCreator2;
    }();
    BaseGridSerializingSession = function() {
      function BaseGridSerializingSession2(config) {
        this.groupColumns = [];
        var columnModel = config.columnModel, valueService = config.valueService, gridOptionsWrapper = config.gridOptionsWrapper, processCellCallback = config.processCellCallback, processHeaderCallback = config.processHeaderCallback, processGroupHeaderCallback = config.processGroupHeaderCallback, processRowGroupCallback = config.processRowGroupCallback;
        this.columnModel = columnModel;
        this.valueService = valueService;
        this.gridOptionsWrapper = gridOptionsWrapper;
        this.processCellCallback = processCellCallback;
        this.processHeaderCallback = processHeaderCallback;
        this.processGroupHeaderCallback = processGroupHeaderCallback;
        this.processRowGroupCallback = processRowGroupCallback;
      }
      BaseGridSerializingSession2.prototype.prepare = function(columnsToExport) {
        this.groupColumns = columnsToExport.filter(function(col) {
          return !!col.getColDef().showRowGroup;
        });
      };
      BaseGridSerializingSession2.prototype.extractHeaderValue = function(column) {
        var value = this.getHeaderName(this.processHeaderCallback, column);
        return value != null ? value : "";
      };
      BaseGridSerializingSession2.prototype.extractRowCellValue = function(column, index, accumulatedRowIndex, type, node) {
        var hideOpenParents = this.gridOptionsWrapper.isGroupHideOpenParents();
        var value = !hideOpenParents && this.shouldRenderGroupSummaryCell(node, column, index) ? this.createValueForGroupNode(node) : this.valueService.getValue(column, node);
        var processedValue = this.processCell({
          accumulatedRowIndex,
          rowNode: node,
          column,
          value,
          processCellCallback: this.processCellCallback,
          type
        });
        return processedValue != null ? processedValue : "";
      };
      BaseGridSerializingSession2.prototype.shouldRenderGroupSummaryCell = function(node, column, currentColumnIndex) {
        var _a;
        var isGroupNode = node && node.group;
        if (!isGroupNode) {
          return false;
        }
        var currentColumnGroupIndex = this.groupColumns.indexOf(column);
        if (currentColumnGroupIndex !== -1 && ((_a = node.groupData) === null || _a === void 0 ? void 0 : _a[column.getId()])) {
          return true;
        }
        var isGroupUseEntireRow = this.gridOptionsWrapper.isGroupUseEntireRow(this.columnModel.isPivotMode());
        return currentColumnIndex === 0 && isGroupUseEntireRow;
      };
      BaseGridSerializingSession2.prototype.getHeaderName = function(callback, column) {
        if (callback) {
          return callback({
            column,
            api: this.gridOptionsWrapper.getApi(),
            columnApi: this.gridOptionsWrapper.getColumnApi(),
            context: this.gridOptionsWrapper.getContext()
          });
        }
        return this.columnModel.getDisplayNameForColumn(column, "csv", true);
      };
      BaseGridSerializingSession2.prototype.createValueForGroupNode = function(node) {
        if (this.processRowGroupCallback) {
          return this.processRowGroupCallback({
            node,
            api: this.gridOptionsWrapper.getApi(),
            columnApi: this.gridOptionsWrapper.getColumnApi(),
            context: this.gridOptionsWrapper.getContext()
          });
        }
        var keys2 = [node.key];
        if (!this.gridOptionsWrapper.isGroupMultiAutoColumn()) {
          while (node.parent) {
            node = node.parent;
            keys2.push(node.key);
          }
        }
        return keys2.reverse().join(" -> ");
      };
      BaseGridSerializingSession2.prototype.processCell = function(params) {
        var accumulatedRowIndex = params.accumulatedRowIndex, rowNode = params.rowNode, column = params.column, value = params.value, processCellCallback = params.processCellCallback, type = params.type;
        if (processCellCallback) {
          return processCellCallback({
            accumulatedRowIndex,
            column,
            node: rowNode,
            value,
            api: this.gridOptionsWrapper.getApi(),
            columnApi: this.gridOptionsWrapper.getColumnApi(),
            context: this.gridOptionsWrapper.getContext(),
            type
          });
        }
        return value != null ? value : "";
      };
      return BaseGridSerializingSession2;
    }();
    Downloader = function() {
      function Downloader2() {
      }
      Downloader2.download = function(fileName, content) {
        var win = document.defaultView || window;
        if (!win) {
          console.warn("AG Grid: There is no `window` associated with the current `document`");
          return;
        }
        var element = document.createElement("a");
        var url = win.URL.createObjectURL(content);
        element.setAttribute("href", url);
        element.setAttribute("download", fileName);
        element.style.display = "none";
        document.body.appendChild(element);
        element.dispatchEvent(new MouseEvent("click", {
          bubbles: false,
          cancelable: true,
          view: win
        }));
        document.body.removeChild(element);
        win.setTimeout(function() {
          win.URL.revokeObjectURL(url);
        }, 0);
      };
      return Downloader2;
    }();
    __extends$2 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    LINE_SEPARATOR$1 = "\r\n";
    CsvSerializingSession = function(_super) {
      __extends$2(CsvSerializingSession2, _super);
      function CsvSerializingSession2(config) {
        var _this = _super.call(this, config) || this;
        _this.isFirstLine = true;
        _this.result = "";
        var suppressQuotes = config.suppressQuotes, columnSeparator = config.columnSeparator;
        _this.suppressQuotes = suppressQuotes;
        _this.columnSeparator = columnSeparator;
        return _this;
      }
      CsvSerializingSession2.prototype.addCustomContent = function(content) {
        var _this = this;
        if (!content) {
          return;
        }
        if (typeof content === "string") {
          if (!/^\s*\n/.test(content)) {
            this.beginNewLine();
          }
          content = content.replace(/\r?\n/g, LINE_SEPARATOR$1);
          this.result += content;
        } else {
          content.forEach(function(row) {
            _this.beginNewLine();
            row.forEach(function(cell, index) {
              if (index !== 0) {
                _this.result += _this.columnSeparator;
              }
              _this.result += _this.putInQuotes(cell.data.value || "");
              if (cell.mergeAcross) {
                _this.appendEmptyCells(cell.mergeAcross);
              }
            });
          });
        }
      };
      CsvSerializingSession2.prototype.onNewHeaderGroupingRow = function() {
        this.beginNewLine();
        return {
          onColumn: this.onNewHeaderGroupingRowColumn.bind(this)
        };
      };
      CsvSerializingSession2.prototype.onNewHeaderGroupingRowColumn = function(columnGroup, header, index, span) {
        if (index != 0) {
          this.result += this.columnSeparator;
        }
        this.result += this.putInQuotes(header);
        this.appendEmptyCells(span);
      };
      CsvSerializingSession2.prototype.appendEmptyCells = function(count) {
        for (var i = 1; i <= count; i++) {
          this.result += this.columnSeparator + this.putInQuotes("");
        }
      };
      CsvSerializingSession2.prototype.onNewHeaderRow = function() {
        this.beginNewLine();
        return {
          onColumn: this.onNewHeaderRowColumn.bind(this)
        };
      };
      CsvSerializingSession2.prototype.onNewHeaderRowColumn = function(column, index) {
        if (index != 0) {
          this.result += this.columnSeparator;
        }
        this.result += this.putInQuotes(this.extractHeaderValue(column));
      };
      CsvSerializingSession2.prototype.onNewBodyRow = function() {
        this.beginNewLine();
        return {
          onColumn: this.onNewBodyRowColumn.bind(this)
        };
      };
      CsvSerializingSession2.prototype.onNewBodyRowColumn = function(column, index, node) {
        if (index != 0) {
          this.result += this.columnSeparator;
        }
        this.result += this.putInQuotes(this.extractRowCellValue(column, index, index, Constants.EXPORT_TYPE_CSV, node));
      };
      CsvSerializingSession2.prototype.putInQuotes = function(value) {
        if (this.suppressQuotes) {
          return value;
        }
        if (value === null || value === void 0) {
          return '""';
        }
        var stringValue;
        if (typeof value === "string") {
          stringValue = value;
        } else if (typeof value.toString === "function") {
          stringValue = value.toString();
        } else {
          console.warn("AG Grid: unknown value type during csv conversion");
          stringValue = "";
        }
        var valueEscaped = stringValue.replace(/"/g, '""');
        return '"' + valueEscaped + '"';
      };
      CsvSerializingSession2.prototype.parse = function() {
        return this.result;
      };
      CsvSerializingSession2.prototype.beginNewLine = function() {
        if (!this.isFirstLine) {
          this.result += LINE_SEPARATOR$1;
        }
        this.isFirstLine = false;
      };
      return CsvSerializingSession2;
    }(BaseGridSerializingSession);
    __extends$1 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    CsvCreator = function(_super) {
      __extends$1(CsvCreator2, _super);
      function CsvCreator2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      CsvCreator2.prototype.postConstruct = function() {
        this.setBeans({
          gridSerializer: this.gridSerializer,
          gridOptionsWrapper: this.gridOptionsWrapper
        });
      };
      CsvCreator2.prototype.getMergedParams = function(params) {
        var baseParams = this.gridOptionsWrapper.getDefaultExportParams("csv");
        return Object.assign({}, baseParams, params);
      };
      CsvCreator2.prototype.export = function(userParams) {
        if (this.isExportSuppressed()) {
          console.warn("AG Grid: Export cancelled. Export is not allowed as per your configuration.");
          return "";
        }
        var mergedParams = this.getMergedParams(userParams);
        var data = this.getData(mergedParams);
        var packagedFile = new Blob(["\uFEFF", data], { type: "text/plain" });
        Downloader.download(this.getFileName(mergedParams.fileName), packagedFile);
        return data;
      };
      CsvCreator2.prototype.exportDataAsCsv = function(params) {
        return this.export(params);
      };
      CsvCreator2.prototype.getDataAsCsv = function(params, skipDefaultParams) {
        if (skipDefaultParams === void 0) {
          skipDefaultParams = false;
        }
        var mergedParams = skipDefaultParams ? Object.assign({}, params) : this.getMergedParams(params);
        return this.getData(mergedParams);
      };
      CsvCreator2.prototype.getDefaultFileName = function() {
        return "export.csv";
      };
      CsvCreator2.prototype.getDefaultFileExtension = function() {
        return "csv";
      };
      CsvCreator2.prototype.createSerializingSession = function(params) {
        var _a = this, columnModel = _a.columnModel, valueService = _a.valueService, gridOptionsWrapper = _a.gridOptionsWrapper;
        var _b = params, processCellCallback = _b.processCellCallback, processHeaderCallback = _b.processHeaderCallback, processGroupHeaderCallback = _b.processGroupHeaderCallback, processRowGroupCallback = _b.processRowGroupCallback, suppressQuotes = _b.suppressQuotes, columnSeparator = _b.columnSeparator;
        return new CsvSerializingSession({
          columnModel,
          valueService,
          gridOptionsWrapper,
          processCellCallback: processCellCallback || void 0,
          processHeaderCallback: processHeaderCallback || void 0,
          processGroupHeaderCallback: processGroupHeaderCallback || void 0,
          processRowGroupCallback: processRowGroupCallback || void 0,
          suppressQuotes: suppressQuotes || false,
          columnSeparator: columnSeparator || ","
        });
      };
      CsvCreator2.prototype.isExportSuppressed = function() {
        return this.gridOptionsWrapper.isSuppressCsvExport();
      };
      __decorate$1([
        Autowired("columnModel")
      ], CsvCreator2.prototype, "columnModel", void 0);
      __decorate$1([
        Autowired("valueService")
      ], CsvCreator2.prototype, "valueService", void 0);
      __decorate$1([
        Autowired("gridSerializer")
      ], CsvCreator2.prototype, "gridSerializer", void 0);
      __decorate$1([
        Autowired("gridOptionsWrapper")
      ], CsvCreator2.prototype, "gridOptionsWrapper", void 0);
      __decorate$1([
        PostConstruct
      ], CsvCreator2.prototype, "postConstruct", null);
      CsvCreator2 = __decorate$1([
        Bean("csvCreator")
      ], CsvCreator2);
      return CsvCreator2;
    }(BaseCreator);
    __extends = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    (function(RowType2) {
      RowType2[RowType2["HEADER_GROUPING"] = 0] = "HEADER_GROUPING";
      RowType2[RowType2["HEADER"] = 1] = "HEADER";
      RowType2[RowType2["BODY"] = 2] = "BODY";
    })(RowType || (RowType = {}));
    GridSerializer = function(_super) {
      __extends(GridSerializer2, _super);
      function GridSerializer2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      GridSerializer2.prototype.serialize = function(gridSerializingSession, params) {
        if (params === void 0) {
          params = {};
        }
        var columnsToExport = this.getColumnsToExport(params.allColumns, params.columnKeys);
        var serializeChain = _.compose(this.prepareSession(columnsToExport), this.prependContent(params), this.exportColumnGroups(params, columnsToExport), this.exportHeaders(params, columnsToExport), this.processPinnedTopRows(params, columnsToExport), this.processRows(params, columnsToExport), this.processPinnedBottomRows(params, columnsToExport), this.appendContent(params));
        return serializeChain(gridSerializingSession).parse();
      };
      GridSerializer2.prototype.processRow = function(gridSerializingSession, params, columnsToExport, node) {
        var rowSkipper = params.shouldRowBeSkipped || function() {
          return false;
        };
        var gridOptionsWrapper = this.gridOptionsWrapper;
        var context = gridOptionsWrapper.getContext();
        var api = gridOptionsWrapper.getApi();
        var columnApi = gridOptionsWrapper.getColumnApi();
        var skipSingleChildrenGroup = gridOptionsWrapper.isGroupRemoveSingleChildren();
        var skipLowestSingleChildrenGroup = gridOptionsWrapper.isGroupRemoveLowestSingleChildren();
        var isClipboardExport = params.rowPositions != null;
        var isExplicitExportSelection = isClipboardExport || !!params.onlySelected;
        var hideOpenParents = gridOptionsWrapper.isGroupHideOpenParents() && !isExplicitExportSelection;
        var isLeafNode = this.columnModel.isPivotMode() ? node.leafGroup : !node.group;
        var skipRowGroups = params.skipGroups || params.skipRowGroups;
        var shouldSkipLowestGroup = skipLowestSingleChildrenGroup && node.leafGroup;
        var shouldSkipCurrentGroup = node.allChildrenCount === 1 && (skipSingleChildrenGroup || shouldSkipLowestGroup);
        if (skipRowGroups && params.skipGroups) {
          _.doOnce(function() {
            return console.warn("AG Grid: Since v25.2 `skipGroups` has been renamed to `skipRowGroups`.");
          }, "gridSerializer-skipGroups");
        }
        if (!isLeafNode && (params.skipRowGroups || shouldSkipCurrentGroup || hideOpenParents) || params.onlySelected && !node.isSelected() || params.skipPinnedTop && node.rowPinned === "top" || params.skipPinnedBottom && node.rowPinned === "bottom") {
          return;
        }
        var nodeIsRootNode = node.level === -1;
        if (nodeIsRootNode && !node.leafGroup && (!node.footer || !isClipboardExport)) {
          return;
        }
        var shouldRowBeSkipped = rowSkipper({ node, api, columnApi, context });
        if (shouldRowBeSkipped) {
          return;
        }
        var rowAccumulator = gridSerializingSession.onNewBodyRow();
        columnsToExport.forEach(function(column, index) {
          rowAccumulator.onColumn(column, index, node);
        });
        if (params.getCustomContentBelowRow) {
          var content = params.getCustomContentBelowRow({ node, api, columnApi, context });
          if (content) {
            gridSerializingSession.addCustomContent(content);
          }
        }
      };
      GridSerializer2.prototype.appendContent = function(params) {
        return function(gridSerializingSession) {
          var appendContent = params.customFooter || params.appendContent;
          if (appendContent) {
            if (params.customFooter) {
              _.doOnce(function() {
                return console.warn("AG Grid: Since version 25.2.0 the `customFooter` param has been deprecated. Use `appendContent` instead.");
              }, "gridSerializer-customFooter");
            }
            gridSerializingSession.addCustomContent(appendContent);
          }
          return gridSerializingSession;
        };
      };
      GridSerializer2.prototype.prependContent = function(params) {
        return function(gridSerializingSession) {
          var prependContent = params.customHeader || params.prependContent;
          if (prependContent) {
            if (params.customHeader) {
              _.doOnce(function() {
                return console.warn("AG Grid: Since version 25.2.0 the `customHeader` param has been deprecated. Use `prependContent` instead.");
              }, "gridSerializer-customHeader");
            }
            gridSerializingSession.addCustomContent(prependContent);
          }
          return gridSerializingSession;
        };
      };
      GridSerializer2.prototype.prepareSession = function(columnsToExport) {
        return function(gridSerializingSession) {
          gridSerializingSession.prepare(columnsToExport);
          return gridSerializingSession;
        };
      };
      GridSerializer2.prototype.exportColumnGroups = function(params, columnsToExport) {
        var _this = this;
        return function(gridSerializingSession) {
          if (!params.skipColumnGroupHeaders) {
            var groupInstanceIdCreator = new GroupInstanceIdCreator();
            var displayedGroups = _this.displayedGroupCreator.createDisplayedGroups(columnsToExport, _this.columnModel.getGridBalancedTree(), groupInstanceIdCreator, null);
            _this.recursivelyAddHeaderGroups(displayedGroups, gridSerializingSession, params.processGroupHeaderCallback);
          } else if (params.columnGroups) {
            _.doOnce(function() {
              return console.warn("AG Grid: Since v25.2 the `columnGroups` param has deprecated, and groups are exported by default.");
            }, "gridSerializer-columnGroups");
          }
          return gridSerializingSession;
        };
      };
      GridSerializer2.prototype.exportHeaders = function(params, columnsToExport) {
        return function(gridSerializingSession) {
          if (!params.skipHeader && !params.skipColumnHeaders) {
            var gridRowIterator_1 = gridSerializingSession.onNewHeaderRow();
            columnsToExport.forEach(function(column, index) {
              gridRowIterator_1.onColumn(column, index, void 0);
            });
          } else if (params.skipHeader) {
            _.doOnce(function() {
              return console.warn("AG Grid: Since v25.2 the `skipHeader` param has been renamed to `skipColumnHeaders`.");
            }, "gridSerializer-skipHeader");
          }
          return gridSerializingSession;
        };
      };
      GridSerializer2.prototype.processPinnedTopRows = function(params, columnsToExport) {
        var _this = this;
        return function(gridSerializingSession) {
          var processRow = _this.processRow.bind(_this, gridSerializingSession, params, columnsToExport);
          if (params.rowPositions) {
            params.rowPositions.filter(function(position) {
              return position.rowPinned === "top";
            }).sort(function(a, b) {
              return a.rowIndex - b.rowIndex;
            }).map(function(position) {
              return _this.pinnedRowModel.getPinnedTopRow(position.rowIndex);
            }).forEach(processRow);
          } else {
            _this.pinnedRowModel.forEachPinnedTopRow(processRow);
          }
          return gridSerializingSession;
        };
      };
      GridSerializer2.prototype.processRows = function(params, columnsToExport) {
        var _this = this;
        return function(gridSerializingSession) {
          var rowModel = _this.rowModel;
          var rowModelType = rowModel.getType();
          var usingCsrm = rowModelType === Constants.ROW_MODEL_TYPE_CLIENT_SIDE;
          var usingSsrm = rowModelType === Constants.ROW_MODEL_TYPE_SERVER_SIDE;
          var onlySelectedNonStandardModel = !usingCsrm && params.onlySelected;
          var processRow = _this.processRow.bind(_this, gridSerializingSession, params, columnsToExport);
          var _a = params.exportedRows, exportedRows = _a === void 0 ? "filteredAndSorted" : _a;
          if (params.rowPositions) {
            params.rowPositions.filter(function(position) {
              return position.rowPinned == null;
            }).sort(function(a, b) {
              return a.rowIndex - b.rowIndex;
            }).map(function(position) {
              return rowModel.getRow(position.rowIndex);
            }).forEach(processRow);
          } else if (_this.columnModel.isPivotMode()) {
            if (usingCsrm) {
              rowModel.forEachPivotNode(processRow);
            } else {
              rowModel.forEachNode(processRow);
            }
          } else {
            if (params.onlySelectedAllPages || onlySelectedNonStandardModel) {
              var selectedNodes = _this.selectionService.getSelectedNodes();
              selectedNodes.forEach(processRow);
            } else {
              if (exportedRows === "all") {
                rowModel.forEachNode(processRow);
              } else if (usingCsrm) {
                rowModel.forEachNodeAfterFilterAndSort(processRow);
              } else if (usingSsrm) {
                rowModel.forEachNodeAfterFilterAndSort(processRow);
              } else {
                rowModel.forEachNode(processRow);
              }
            }
          }
          return gridSerializingSession;
        };
      };
      GridSerializer2.prototype.processPinnedBottomRows = function(params, columnsToExport) {
        var _this = this;
        return function(gridSerializingSession) {
          var processRow = _this.processRow.bind(_this, gridSerializingSession, params, columnsToExport);
          if (params.rowPositions) {
            params.rowPositions.filter(function(position) {
              return position.rowPinned === "bottom";
            }).sort(function(a, b) {
              return a.rowIndex - b.rowIndex;
            }).map(function(position) {
              return _this.pinnedRowModel.getPinnedBottomRow(position.rowIndex);
            }).forEach(processRow);
          } else {
            _this.pinnedRowModel.forEachPinnedBottomRow(processRow);
          }
          return gridSerializingSession;
        };
      };
      GridSerializer2.prototype.getColumnsToExport = function(allColumns, columnKeys) {
        if (allColumns === void 0) {
          allColumns = false;
        }
        var isPivotMode = this.columnModel.isPivotMode();
        if (columnKeys && columnKeys.length) {
          return this.columnModel.getGridColumns(columnKeys);
        }
        if (allColumns && !isPivotMode) {
          var columns = this.gridOptionsWrapper.isTreeData() ? this.columnModel.getGridColumns([Constants.GROUP_AUTO_COLUMN_ID]) : [];
          return columns.concat(this.columnModel.getAllPrimaryColumns() || []);
        }
        return this.columnModel.getAllDisplayedColumns();
      };
      GridSerializer2.prototype.recursivelyAddHeaderGroups = function(displayedGroups, gridSerializingSession, processGroupHeaderCallback) {
        var directChildrenHeaderGroups = [];
        displayedGroups.forEach(function(columnGroupChild) {
          var columnGroup = columnGroupChild;
          if (!columnGroup.getChildren) {
            return;
          }
          columnGroup.getChildren().forEach(function(it) {
            return directChildrenHeaderGroups.push(it);
          });
        });
        if (displayedGroups.length > 0 && displayedGroups[0] instanceof ColumnGroup) {
          this.doAddHeaderHeader(gridSerializingSession, displayedGroups, processGroupHeaderCallback);
        }
        if (directChildrenHeaderGroups && directChildrenHeaderGroups.length > 0) {
          this.recursivelyAddHeaderGroups(directChildrenHeaderGroups, gridSerializingSession, processGroupHeaderCallback);
        }
      };
      GridSerializer2.prototype.doAddHeaderHeader = function(gridSerializingSession, displayedGroups, processGroupHeaderCallback) {
        var _this = this;
        var gridRowIterator = gridSerializingSession.onNewHeaderGroupingRow();
        var columnIndex = 0;
        displayedGroups.forEach(function(columnGroupChild) {
          var columnGroup = columnGroupChild;
          var name;
          if (processGroupHeaderCallback) {
            name = processGroupHeaderCallback({
              columnGroup,
              api: _this.gridOptionsWrapper.getApi(),
              columnApi: _this.gridOptionsWrapper.getColumnApi(),
              context: _this.gridOptionsWrapper.getContext()
            });
          } else {
            name = _this.columnModel.getDisplayNameForColumnGroup(columnGroup, "header");
          }
          var collapsibleGroupRanges = columnGroup.getLeafColumns().reduce(function(collapsibleGroups, currentColumn, currentIdx, arr) {
            var lastGroup = _.last(collapsibleGroups);
            var groupShow = currentColumn.getColumnGroupShow() === "open";
            if (!groupShow) {
              if (lastGroup && lastGroup[1] == null) {
                lastGroup[1] = currentIdx - 1;
              }
            } else if (!lastGroup || lastGroup[1] != null) {
              lastGroup = [currentIdx];
              collapsibleGroups.push(lastGroup);
            }
            if (currentIdx === arr.length - 1 && lastGroup && lastGroup[1] == null) {
              lastGroup[1] = currentIdx;
            }
            return collapsibleGroups;
          }, []);
          gridRowIterator.onColumn(columnGroup, name || "", columnIndex++, columnGroup.getLeafColumns().length - 1, collapsibleGroupRanges);
        });
      };
      __decorate([
        Autowired("displayedGroupCreator")
      ], GridSerializer2.prototype, "displayedGroupCreator", void 0);
      __decorate([
        Autowired("columnModel")
      ], GridSerializer2.prototype, "columnModel", void 0);
      __decorate([
        Autowired("rowModel")
      ], GridSerializer2.prototype, "rowModel", void 0);
      __decorate([
        Autowired("pinnedRowModel")
      ], GridSerializer2.prototype, "pinnedRowModel", void 0);
      __decorate([
        Autowired("selectionService")
      ], GridSerializer2.prototype, "selectionService", void 0);
      __decorate([
        Autowired("rowPositionUtils")
      ], GridSerializer2.prototype, "rowPositionUtils", void 0);
      GridSerializer2 = __decorate([
        Bean("gridSerializer")
      ], GridSerializer2);
      return GridSerializer2;
    }(BeanStub);
    CsvExportModule = {
      moduleName: ModuleNames.CsvExportModule,
      beans: [CsvCreator, GridSerializer]
    };
    LINE_SEPARATOR = "\r\n";
    XmlFactory = function() {
      function XmlFactory2() {
      }
      XmlFactory2.createHeader = function(headerElement) {
        if (headerElement === void 0) {
          headerElement = {};
        }
        var headerStart = "<?";
        var headerEnd = "?>";
        var keys2 = ["version"];
        if (!headerElement.version) {
          headerElement.version = "1.0";
        }
        if (headerElement.encoding) {
          keys2.push("encoding");
        }
        if (headerElement.standalone) {
          keys2.push("standalone");
        }
        var att = keys2.map(function(key) {
          return key + '="' + headerElement[key] + '"';
        }).join(" ");
        return headerStart + "xml " + att + " " + headerEnd;
      };
      XmlFactory2.createXml = function(xmlElement, booleanTransformer) {
        var _this = this;
        var props = "";
        if (xmlElement.properties) {
          if (xmlElement.properties.prefixedAttributes) {
            xmlElement.properties.prefixedAttributes.forEach(function(prefixedSet) {
              Object.keys(prefixedSet.map).forEach(function(key) {
                props += _this.returnAttributeIfPopulated(prefixedSet.prefix + key, prefixedSet.map[key], booleanTransformer);
              });
            });
          }
          if (xmlElement.properties.rawMap) {
            Object.keys(xmlElement.properties.rawMap).forEach(function(key) {
              props += _this.returnAttributeIfPopulated(key, xmlElement.properties.rawMap[key], booleanTransformer);
            });
          }
        }
        var result = "<" + xmlElement.name + props;
        if (!xmlElement.children && xmlElement.textNode == null) {
          return result + "/>" + LINE_SEPARATOR;
        }
        if (xmlElement.textNode != null) {
          return result + ">" + xmlElement.textNode + "</" + xmlElement.name + ">" + LINE_SEPARATOR;
        }
        result += ">" + LINE_SEPARATOR;
        if (xmlElement.children) {
          xmlElement.children.forEach(function(it) {
            result += _this.createXml(it, booleanTransformer);
          });
        }
        return result + "</" + xmlElement.name + ">" + LINE_SEPARATOR;
      };
      XmlFactory2.returnAttributeIfPopulated = function(key, value, booleanTransformer) {
        if (!value && value !== "" && value !== 0) {
          return "";
        }
        var xmlValue = value;
        if (typeof value === "boolean") {
          if (booleanTransformer) {
            xmlValue = booleanTransformer(value);
          }
        }
        return " " + key + '="' + xmlValue + '"';
      };
      return XmlFactory2;
    }();
    __values = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    crcTable = new Uint32Array([
      0,
      1996959894,
      3993919788,
      2567524794,
      124634137,
      1886057615,
      3915621685,
      2657392035,
      249268274,
      2044508324,
      3772115230,
      2547177864,
      162941995,
      2125561021,
      3887607047,
      2428444049,
      498536548,
      1789927666,
      4089016648,
      2227061214,
      450548861,
      1843258603,
      4107580753,
      2211677639,
      325883990,
      1684777152,
      4251122042,
      2321926636,
      335633487,
      1661365465,
      4195302755,
      2366115317,
      997073096,
      1281953886,
      3579855332,
      2724688242,
      1006888145,
      1258607687,
      3524101629,
      2768942443,
      901097722,
      1119000684,
      3686517206,
      2898065728,
      853044451,
      1172266101,
      3705015759,
      2882616665,
      651767980,
      1373503546,
      3369554304,
      3218104598,
      565507253,
      1454621731,
      3485111705,
      3099436303,
      671266974,
      1594198024,
      3322730930,
      2970347812,
      795835527,
      1483230225,
      3244367275,
      3060149565,
      1994146192,
      31158534,
      2563907772,
      4023717930,
      1907459465,
      112637215,
      2680153253,
      3904427059,
      2013776290,
      251722036,
      2517215374,
      3775830040,
      2137656763,
      141376813,
      2439277719,
      3865271297,
      1802195444,
      476864866,
      2238001368,
      4066508878,
      1812370925,
      453092731,
      2181625025,
      4111451223,
      1706088902,
      314042704,
      2344532202,
      4240017532,
      1658658271,
      366619977,
      2362670323,
      4224994405,
      1303535960,
      984961486,
      2747007092,
      3569037538,
      1256170817,
      1037604311,
      2765210733,
      3554079995,
      1131014506,
      879679996,
      2909243462,
      3663771856,
      1141124467,
      855842277,
      2852801631,
      3708648649,
      1342533948,
      654459306,
      3188396048,
      3373015174,
      1466479909,
      544179635,
      3110523913,
      3462522015,
      1591671054,
      702138776,
      2966460450,
      3352799412,
      1504918807,
      783551873,
      3082640443,
      3233442989,
      3988292384,
      2596254646,
      62317068,
      1957810842,
      3939845945,
      2647816111,
      81470997,
      1943803523,
      3814918930,
      2489596804,
      225274430,
      2053790376,
      3826175755,
      2466906013,
      167816743,
      2097651377,
      4027552580,
      2265490386,
      503444072,
      1762050814,
      4150417245,
      2154129355,
      426522225,
      1852507879,
      4275313526,
      2312317920,
      282753626,
      1742555852,
      4189708143,
      2394877945,
      397917763,
      1622183637,
      3604390888,
      2714866558,
      953729732,
      1340076626,
      3518719985,
      2797360999,
      1068828381,
      1219638859,
      3624741850,
      2936675148,
      906185462,
      1090812512,
      3747672003,
      2825379669,
      829329135,
      1181335161,
      3412177804,
      3160834842,
      628085408,
      1382605366,
      3423369109,
      3138078467,
      570562233,
      1426400815,
      3317316542,
      2998733608,
      733239954,
      1555261956,
      3268935591,
      3050360625,
      752459403,
      1541320221,
      2607071920,
      3965973030,
      1969922972,
      40735498,
      2617837225,
      3943577151,
      1913087877,
      83908371,
      2512341634,
      3803740692,
      2075208622,
      213261112,
      2463272603,
      3855990285,
      2094854071,
      198958881,
      2262029012,
      4057260610,
      1759359992,
      534414190,
      2176718541,
      4139329115,
      1873836001,
      414664567,
      2282248934,
      4279200368,
      1711684554,
      285281116,
      2405801727,
      4167216745,
      1634467795,
      376229701,
      2685067896,
      3608007406,
      1308918612,
      956543938,
      2808555105,
      3495958263,
      1231636301,
      1047427035,
      2932959818,
      3654703836,
      1088359270,
      936918e3,
      2847714899,
      3736837829,
      1202900863,
      817233897,
      3183342108,
      3401237130,
      1404277552,
      615818150,
      3134207493,
      3453421203,
      1423857449,
      601450431,
      3009837614,
      3294710456,
      1567103746,
      711928724,
      3020668471,
      3272380065,
      1510334235,
      755167117
    ]);
    ZipContainer = function() {
      function ZipContainer2() {
      }
      ZipContainer2.addFolders = function(paths) {
        paths.forEach(this.addFolder.bind(this));
      };
      ZipContainer2.addFolder = function(path) {
        this.folders.push({
          path,
          created: new Date(),
          isBase64: false
        });
      };
      ZipContainer2.addFile = function(path, content, isBase64) {
        if (isBase64 === void 0) {
          isBase64 = false;
        }
        this.files.push({
          path,
          created: new Date(),
          content,
          isBase64
        });
      };
      ZipContainer2.getContent = function(mimeType) {
        if (mimeType === void 0) {
          mimeType = "application/zip";
        }
        var textOutput = this.buildFileStream();
        var uInt8Output = this.buildUint8Array(textOutput);
        this.clearStream();
        return new Blob([uInt8Output], { type: mimeType });
      };
      ZipContainer2.clearStream = function() {
        this.folders = [];
        this.files = [];
      };
      ZipContainer2.buildFileStream = function(fData) {
        var e_1, _a;
        if (fData === void 0) {
          fData = "";
        }
        var totalFiles = this.folders.concat(this.files);
        var len = totalFiles.length;
        var foData = "";
        var lL = 0;
        var cL = 0;
        try {
          for (var totalFiles_1 = __values(totalFiles), totalFiles_1_1 = totalFiles_1.next(); !totalFiles_1_1.done; totalFiles_1_1 = totalFiles_1.next()) {
            var currentFile = totalFiles_1_1.value;
            var _b = this.getHeader(currentFile, lL), fileHeader = _b.fileHeader, folderHeader = _b.folderHeader, content = _b.content;
            lL += fileHeader.length + content.length;
            cL += folderHeader.length;
            fData += fileHeader + content;
            foData += folderHeader;
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (totalFiles_1_1 && !totalFiles_1_1.done && (_a = totalFiles_1.return))
              _a.call(totalFiles_1);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        var foEnd = this.buildFolderEnd(len, cL, lL);
        return fData + foData + foEnd;
      };
      ZipContainer2.getHeader = function(currentFile, offset) {
        var content = currentFile.content, path = currentFile.path, created = currentFile.created, isBase64 = currentFile.isBase64;
        var utf8_encode2 = _.utf8_encode, decToHex2 = _.decToHex;
        var utfPath = utf8_encode2(path);
        var isUTF8 = utfPath !== path;
        var time = this.convertTime(created);
        var dt = this.convertDate(created);
        var extraFields = "";
        if (isUTF8) {
          var uExtraFieldPath = decToHex2(1, 1) + decToHex2(this.getFromCrc32Table(utfPath), 4) + utfPath;
          extraFields = "up" + decToHex2(uExtraFieldPath.length, 2) + uExtraFieldPath;
        }
        var _a = !content ? { size: 0, content: "" } : this.getConvertedContent(content, isBase64), size = _a.size, convertedContent = _a.content;
        var header = "\n\0" + (isUTF8 ? "\0\b" : "\0\0") + "\0\0" + decToHex2(time, 2) + decToHex2(dt, 2) + decToHex2(size ? this.getFromCrc32Table(convertedContent) : 0, 4) + decToHex2(size, 4) + decToHex2(size, 4) + decToHex2(utfPath.length, 2) + decToHex2(extraFields.length, 2);
        var fileHeader = "PK" + header + utfPath + extraFields;
        var folderHeader = "PK\0" + header + "\0\0\0\0\0\0" + (content ? "\0\0\0\0" : "\0\0\0") + decToHex2(offset, 4) + utfPath + extraFields;
        return { fileHeader, folderHeader, content: convertedContent || "" };
      };
      ZipContainer2.getConvertedContent = function(content, isBase64) {
        if (isBase64 === void 0) {
          isBase64 = false;
        }
        if (isBase64) {
          content = content.split(";base64,")[1];
        }
        content = isBase64 ? atob(content) : content;
        return {
          size: content.length,
          content
        };
      };
      ZipContainer2.buildFolderEnd = function(tLen, cLen, lLen) {
        var decToHex2 = _.decToHex;
        return "PK\0\0\0\0" + decToHex2(tLen, 2) + decToHex2(tLen, 2) + decToHex2(cLen, 4) + decToHex2(lLen, 4) + "\0\0";
      };
      ZipContainer2.buildUint8Array = function(content) {
        var uint8 = new Uint8Array(content.length);
        for (var i = 0; i < uint8.length; i++) {
          uint8[i] = content.charCodeAt(i);
        }
        return uint8;
      };
      ZipContainer2.getFromCrc32Table = function(content) {
        if (!content.length) {
          return 0;
        }
        var size = content.length;
        var iterable = new Uint8Array(size);
        for (var i = 0; i < size; i++) {
          iterable[i] = content.charCodeAt(i);
        }
        var crc = 0 ^ -1;
        var j = 0;
        var k = 0;
        var l = 0;
        for (var i = 0; i < size; i++) {
          j = iterable[i];
          k = (crc ^ j) & 255;
          l = crcTable[k];
          crc = crc >>> 8 ^ l;
        }
        return crc ^ -1;
      };
      ZipContainer2.convertTime = function(date) {
        var time = date.getHours();
        time <<= 6;
        time = time | date.getMinutes();
        time <<= 5;
        time = time | date.getSeconds() / 2;
        return time;
      };
      ZipContainer2.convertDate = function(date) {
        var dt = date.getFullYear() - 1980;
        dt <<= 4;
        dt = dt | date.getMonth() + 1;
        dt <<= 5;
        dt = dt | date.getDate();
        return dt;
      };
      ZipContainer2.folders = [];
      ZipContainer2.files = [];
      return ZipContainer2;
    }();
    AllCommunityModules = [ClientSideRowModelModule, InfiniteRowModelModule, CsvExportModule];
    ModuleRegistry.registerModules(AllCommunityModules);
  }
});

// node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement2(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element2;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement2;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/react-is/index.js
var require_react_is = __commonJS({
  "node_modules/react-is/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development();
    }
  }
});

// node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "node_modules/object-assign/index.js"(exports, module) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]];
            }
          }
        }
      }
      return to;
    };
  }
});

// node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  }
});

// node_modules/prop-types/lib/has.js
var require_has = __commonJS({
  "node_modules/prop-types/lib/has.js"(exports, module) {
    module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  }
});

// node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "node_modules/prop-types/checkPropTypes.js"(exports, module) {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has = require_has();
      printWarning = function(text) {
        var message2 = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message2);
        }
        try {
          throw new Error(message2);
        } catch (x) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has;
    function checkPropTypes(typeSpecs, values2, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning((componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).");
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning("Failed " + location + " type: " + error.message + (stack != null ? stack : ""));
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  }
});

// node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
    "use strict";
    var ReactIs = require_react_is();
    var assign = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var has = require_has();
    var checkPropTypes = require_checkPropTypes();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message2 = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message2);
        }
        try {
          throw new Error(message2);
        } catch (x) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x, y) {
        if (x === y) {
          return x !== 0 || 1 / x === 1 / y;
        } else {
          return x !== x && y !== y;
        }
      }
      function PropTypeError(message2, data) {
        this.message = message2;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
                printWarning("You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details.");
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."), { expectedType });
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning("Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).");
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i = 0; i < expectedValues.length; i++) {
            if (is(propValue, expectedValues[i])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker !== "function") {
            printWarning("Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + ".");
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker2 = arrayOfTypeCheckers[i2];
            var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode2(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError((componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`.");
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  "));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode2(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode2);
            }
            if (propValue === null || isValidElement(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode2(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode2(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "node_modules/prop-types/index.js"(exports, module) {
    if (true) {
      ReactIs = require_react_is();
      throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
    var ReactIs;
    var throwOnDirectAccess;
  }
});

// node_modules/ag-grid-react/lib/shared/reactComponent.js
var require_reactComponent = __commonJS({
  "node_modules/ag-grid-react/lib/shared/reactComponent.js"(exports) {
    "use strict";
    var __extends2 = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var BaseReactComponent = function() {
      function BaseReactComponent2() {
      }
      return BaseReactComponent2;
    }();
    var ReactComponent = function(_super) {
      __extends2(ReactComponent2, _super);
      function ReactComponent2(reactComponent, portalManager, componentType) {
        var _this = _super.call(this) || this;
        _this.portal = null;
        _this.reactComponent = reactComponent;
        _this.portalManager = portalManager;
        _this.componentType = componentType;
        _this.statelessComponent = _this.isStateless(_this.reactComponent);
        return _this;
      }
      ReactComponent2.prototype.getGui = function() {
        return this.eParentElement;
      };
      ReactComponent2.prototype.destroy = function() {
        if (this.componentInstance && typeof this.componentInstance.destroy == "function") {
          this.componentInstance.destroy();
        }
        return this.portalManager.destroyPortal(this.portal);
      };
      ReactComponent2.prototype.createParentElement = function(params) {
        var componentWrappingElement = this.portalManager.getComponentWrappingElement();
        var eParentElement = document.createElement(componentWrappingElement || "div");
        eParentElement.classList.add("ag-react-container");
        params.reactContainer = eParentElement;
        return eParentElement;
      };
      ReactComponent2.prototype.addParentContainerStyleAndClasses = function() {
        var _this = this;
        if (!this.componentInstance) {
          return;
        }
        if (this.componentInstance.getReactContainerStyle && this.componentInstance.getReactContainerStyle()) {
          Object.assign(this.eParentElement.style, this.componentInstance.getReactContainerStyle());
        }
        if (this.componentInstance.getReactContainerClasses && this.componentInstance.getReactContainerClasses()) {
          var parentContainerClasses = this.componentInstance.getReactContainerClasses();
          parentContainerClasses.forEach(function(className) {
            return _this.eParentElement.classList.add(className);
          });
        }
      };
      ReactComponent2.prototype.statelessComponentRendered = function() {
        return this.eParentElement.childElementCount > 0 || this.eParentElement.childNodes.length > 0;
      };
      ReactComponent2.prototype.getFrameworkComponentInstance = function() {
        return this.componentInstance;
      };
      ReactComponent2.prototype.isStatelessComponent = function() {
        return this.statelessComponent;
      };
      ReactComponent2.prototype.getReactComponentName = function() {
        return this.reactComponent.name;
      };
      ReactComponent2.prototype.getMemoType = function() {
        return this.hasSymbol() ? Symbol.for("react.memo") : 60115;
      };
      ReactComponent2.prototype.hasSymbol = function() {
        return typeof Symbol === "function" && Symbol.for;
      };
      ReactComponent2.prototype.isStateless = function(Component2) {
        return typeof Component2 === "function" && !(Component2.prototype && Component2.prototype.isReactComponent) || typeof Component2 === "object" && Component2.$$typeof === this.getMemoType();
      };
      ReactComponent2.prototype.hasMethod = function(name) {
        var frameworkComponentInstance = this.getFrameworkComponentInstance();
        return !!frameworkComponentInstance && frameworkComponentInstance[name] !== null || this.fallbackMethodAvailable(name);
      };
      ReactComponent2.prototype.callMethod = function(name, args) {
        var _this = this;
        var frameworkComponentInstance = this.getFrameworkComponentInstance();
        if (this.isStatelessComponent()) {
          return this.fallbackMethod(name, !!args && args[0] ? args[0] : {});
        } else if (!!!frameworkComponentInstance) {
          setTimeout(function() {
            return _this.callMethod(name, args);
          });
          return;
        }
        var method = frameworkComponentInstance[name];
        if (!!method) {
          return method.apply(frameworkComponentInstance, args);
        }
        if (this.fallbackMethodAvailable(name)) {
          return this.fallbackMethod(name, !!args && args[0] ? args[0] : {});
        }
      };
      ReactComponent2.prototype.addMethod = function(name, callback) {
        this[name] = callback;
      };
      return ReactComponent2;
    }(BaseReactComponent);
    exports.ReactComponent = ReactComponent;
  }
});

// node_modules/react-dom/cjs/react-dom-server-legacy.browser.development.js
var require_react_dom_server_legacy_browser_development = __commonJS({
  "node_modules/react-dom/cjs/react-dom-server-legacy.browser.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var React = require_react();
        var ReactVersion = "18.2.0";
        var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function warn(format) {
          {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
        }
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        function scheduleWork(callback) {
          callback();
        }
        function beginWriting(destination) {
        }
        function writeChunk(destination, chunk) {
          writeChunkAndReturn(destination, chunk);
        }
        function writeChunkAndReturn(destination, chunk) {
          return destination.push(chunk);
        }
        function completeWriting(destination) {
        }
        function close(destination) {
          destination.push(null);
        }
        function stringToChunk(content) {
          return content;
        }
        function stringToPrecomputedChunk(content) {
          return content;
        }
        function closeWithError(destination, error2) {
          destination.destroy(error2);
        }
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkAttributeStringCoercion(value, attributeName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkCSSPropertyStringCoercion(value, propName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkHtmlStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var RESERVED = 0;
        var STRING = 1;
        var BOOLEANISH_STRING = 2;
        var BOOLEAN = 3;
        var OVERLOADED_BOOLEAN = 4;
        var NUMERIC = 5;
        var POSITIVE_NUMERIC = 6;
        var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
        var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
        var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var illegalAttributeNameCache = {};
        var validatedAttributeNameCache = {};
        function isAttributeNameSafe(attributeName) {
          if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
            return true;
          }
          if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
            return false;
          }
          if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
          }
          illegalAttributeNameCache[attributeName] = true;
          {
            error("Invalid attribute name: `%s`", attributeName);
          }
          return false;
        }
        function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null && propertyInfo.type === RESERVED) {
            return false;
          }
          switch (typeof value) {
            case "function":
            case "symbol":
              return true;
            case "boolean": {
              if (isCustomComponentTag) {
                return false;
              }
              if (propertyInfo !== null) {
                return !propertyInfo.acceptsBooleans;
              } else {
                var prefix2 = name.toLowerCase().slice(0, 5);
                return prefix2 !== "data-" && prefix2 !== "aria-";
              }
            }
            default:
              return false;
          }
        }
        function getPropertyInfo(name) {
          return properties.hasOwnProperty(name) ? properties[name] : null;
        }
        function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
          this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
          this.attributeName = attributeName;
          this.attributeNamespace = attributeNamespace;
          this.mustUseProperty = mustUseProperty;
          this.propertyName = name;
          this.type = type;
          this.sanitizeURL = sanitizeURL2;
          this.removeEmptyString = removeEmptyString;
        }
        var properties = {};
        var reservedProps = [
          "children",
          "dangerouslySetInnerHTML",
          "defaultValue",
          "defaultChecked",
          "innerHTML",
          "suppressContentEditableWarning",
          "suppressHydrationWarning",
          "style"
        ];
        reservedProps.forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
        });
        [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
          var name = _ref[0], attributeName = _ref[1];
          properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
        });
        ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
        });
        ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
        });
        [
          "allowFullScreen",
          "async",
          "autoFocus",
          "autoPlay",
          "controls",
          "default",
          "defer",
          "disabled",
          "disablePictureInPicture",
          "disableRemotePlayback",
          "formNoValidate",
          "hidden",
          "loop",
          "noModule",
          "noValidate",
          "open",
          "playsInline",
          "readOnly",
          "required",
          "reversed",
          "scoped",
          "seamless",
          "itemScope"
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
        });
        [
          "checked",
          "multiple",
          "muted",
          "selected"
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
        });
        [
          "capture",
          "download"
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
        });
        [
          "cols",
          "rows",
          "size",
          "span"
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
        });
        ["rowSpan", "start"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
        });
        var CAMELIZE = /[\-\:]([a-z])/g;
        var capitalize = function(token) {
          return token[1].toUpperCase();
        };
        [
          "accent-height",
          "alignment-baseline",
          "arabic-form",
          "baseline-shift",
          "cap-height",
          "clip-path",
          "clip-rule",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "dominant-baseline",
          "enable-background",
          "fill-opacity",
          "fill-rule",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-name",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "horiz-adv-x",
          "horiz-origin-x",
          "image-rendering",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "overline-position",
          "overline-thickness",
          "paint-order",
          "panose-1",
          "pointer-events",
          "rendering-intent",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "strikethrough-position",
          "strikethrough-thickness",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "underline-position",
          "underline-thickness",
          "unicode-bidi",
          "unicode-range",
          "units-per-em",
          "v-alphabetic",
          "v-hanging",
          "v-ideographic",
          "v-mathematical",
          "vector-effect",
          "vert-adv-y",
          "vert-origin-x",
          "vert-origin-y",
          "word-spacing",
          "writing-mode",
          "xmlns:xlink",
          "x-height"
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
        });
        [
          "xlink:actuate",
          "xlink:arcrole",
          "xlink:role",
          "xlink:show",
          "xlink:title",
          "xlink:type"
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false, false);
        });
        [
          "xml:base",
          "xml:lang",
          "xml:space"
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false, false);
        });
        ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
        });
        var xlinkHref = "xlinkHref";
        properties[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
        ["src", "href", "action", "formAction"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
        });
        var isUnitlessNumber = {
          animationIterationCount: true,
          aspectRatio: true,
          borderImageOutset: true,
          borderImageSlice: true,
          borderImageWidth: true,
          boxFlex: true,
          boxFlexGroup: true,
          boxOrdinalGroup: true,
          columnCount: true,
          columns: true,
          flex: true,
          flexGrow: true,
          flexPositive: true,
          flexShrink: true,
          flexNegative: true,
          flexOrder: true,
          gridArea: true,
          gridRow: true,
          gridRowEnd: true,
          gridRowSpan: true,
          gridRowStart: true,
          gridColumn: true,
          gridColumnEnd: true,
          gridColumnSpan: true,
          gridColumnStart: true,
          fontWeight: true,
          lineClamp: true,
          lineHeight: true,
          opacity: true,
          order: true,
          orphans: true,
          tabSize: true,
          widows: true,
          zIndex: true,
          zoom: true,
          fillOpacity: true,
          floodOpacity: true,
          stopOpacity: true,
          strokeDasharray: true,
          strokeDashoffset: true,
          strokeMiterlimit: true,
          strokeOpacity: true,
          strokeWidth: true
        };
        function prefixKey(prefix2, key) {
          return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
        }
        var prefixes = ["Webkit", "ms", "Moz", "O"];
        Object.keys(isUnitlessNumber).forEach(function(prop) {
          prefixes.forEach(function(prefix2) {
            isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
          });
        });
        var hasReadOnlyValue = {
          button: true,
          checkbox: true,
          image: true,
          hidden: true,
          radio: true,
          reset: true,
          submit: true
        };
        function checkControlledValueProps(tagName, props) {
          {
            if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
              error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
            }
            if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
              error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
            }
          }
        }
        function isCustomComponent(tagName, props) {
          if (tagName.indexOf("-") === -1) {
            return typeof props.is === "string";
          }
          switch (tagName) {
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
              return false;
            default:
              return true;
          }
        }
        var ariaProperties = {
          "aria-current": 0,
          "aria-description": 0,
          "aria-details": 0,
          "aria-disabled": 0,
          "aria-hidden": 0,
          "aria-invalid": 0,
          "aria-keyshortcuts": 0,
          "aria-label": 0,
          "aria-roledescription": 0,
          "aria-autocomplete": 0,
          "aria-checked": 0,
          "aria-expanded": 0,
          "aria-haspopup": 0,
          "aria-level": 0,
          "aria-modal": 0,
          "aria-multiline": 0,
          "aria-multiselectable": 0,
          "aria-orientation": 0,
          "aria-placeholder": 0,
          "aria-pressed": 0,
          "aria-readonly": 0,
          "aria-required": 0,
          "aria-selected": 0,
          "aria-sort": 0,
          "aria-valuemax": 0,
          "aria-valuemin": 0,
          "aria-valuenow": 0,
          "aria-valuetext": 0,
          "aria-atomic": 0,
          "aria-busy": 0,
          "aria-live": 0,
          "aria-relevant": 0,
          "aria-dropeffect": 0,
          "aria-grabbed": 0,
          "aria-activedescendant": 0,
          "aria-colcount": 0,
          "aria-colindex": 0,
          "aria-colspan": 0,
          "aria-controls": 0,
          "aria-describedby": 0,
          "aria-errormessage": 0,
          "aria-flowto": 0,
          "aria-labelledby": 0,
          "aria-owns": 0,
          "aria-posinset": 0,
          "aria-rowcount": 0,
          "aria-rowindex": 0,
          "aria-rowspan": 0,
          "aria-setsize": 0
        };
        var warnedProperties = {};
        var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        function validateProperty(tagName, name) {
          {
            if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
              return true;
            }
            if (rARIACamel.test(name)) {
              var ariaName = "aria-" + name.slice(4).toLowerCase();
              var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
              if (correctName == null) {
                error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                warnedProperties[name] = true;
                return true;
              }
              if (name !== correctName) {
                error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                warnedProperties[name] = true;
                return true;
              }
            }
            if (rARIA.test(name)) {
              var lowerCasedName = name.toLowerCase();
              var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
              if (standardName == null) {
                warnedProperties[name] = true;
                return false;
              }
              if (name !== standardName) {
                error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties[name] = true;
                return true;
              }
            }
          }
          return true;
        }
        function warnInvalidARIAProps(type, props) {
          {
            var invalidProps = [];
            for (var key in props) {
              var isValid = validateProperty(type, key);
              if (!isValid) {
                invalidProps.push(key);
              }
            }
            var unknownPropString = invalidProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (invalidProps.length === 1) {
              error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            } else if (invalidProps.length > 1) {
              error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            }
          }
        }
        function validateProperties(type, props) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnInvalidARIAProps(type, props);
        }
        var didWarnValueNull = false;
        function validateProperties$1(type, props) {
          {
            if (type !== "input" && type !== "textarea" && type !== "select") {
              return;
            }
            if (props != null && props.value === null && !didWarnValueNull) {
              didWarnValueNull = true;
              if (type === "select" && props.multiple) {
                error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
              } else {
                error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
              }
            }
          }
        }
        var possibleStandardNames = {
          accept: "accept",
          acceptcharset: "acceptCharset",
          "accept-charset": "acceptCharset",
          accesskey: "accessKey",
          action: "action",
          allowfullscreen: "allowFullScreen",
          alt: "alt",
          as: "as",
          async: "async",
          autocapitalize: "autoCapitalize",
          autocomplete: "autoComplete",
          autocorrect: "autoCorrect",
          autofocus: "autoFocus",
          autoplay: "autoPlay",
          autosave: "autoSave",
          capture: "capture",
          cellpadding: "cellPadding",
          cellspacing: "cellSpacing",
          challenge: "challenge",
          charset: "charSet",
          checked: "checked",
          children: "children",
          cite: "cite",
          class: "className",
          classid: "classID",
          classname: "className",
          cols: "cols",
          colspan: "colSpan",
          content: "content",
          contenteditable: "contentEditable",
          contextmenu: "contextMenu",
          controls: "controls",
          controlslist: "controlsList",
          coords: "coords",
          crossorigin: "crossOrigin",
          dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
          data: "data",
          datetime: "dateTime",
          default: "default",
          defaultchecked: "defaultChecked",
          defaultvalue: "defaultValue",
          defer: "defer",
          dir: "dir",
          disabled: "disabled",
          disablepictureinpicture: "disablePictureInPicture",
          disableremoteplayback: "disableRemotePlayback",
          download: "download",
          draggable: "draggable",
          enctype: "encType",
          enterkeyhint: "enterKeyHint",
          for: "htmlFor",
          form: "form",
          formmethod: "formMethod",
          formaction: "formAction",
          formenctype: "formEncType",
          formnovalidate: "formNoValidate",
          formtarget: "formTarget",
          frameborder: "frameBorder",
          headers: "headers",
          height: "height",
          hidden: "hidden",
          high: "high",
          href: "href",
          hreflang: "hrefLang",
          htmlfor: "htmlFor",
          httpequiv: "httpEquiv",
          "http-equiv": "httpEquiv",
          icon: "icon",
          id: "id",
          imagesizes: "imageSizes",
          imagesrcset: "imageSrcSet",
          innerhtml: "innerHTML",
          inputmode: "inputMode",
          integrity: "integrity",
          is: "is",
          itemid: "itemID",
          itemprop: "itemProp",
          itemref: "itemRef",
          itemscope: "itemScope",
          itemtype: "itemType",
          keyparams: "keyParams",
          keytype: "keyType",
          kind: "kind",
          label: "label",
          lang: "lang",
          list: "list",
          loop: "loop",
          low: "low",
          manifest: "manifest",
          marginwidth: "marginWidth",
          marginheight: "marginHeight",
          max: "max",
          maxlength: "maxLength",
          media: "media",
          mediagroup: "mediaGroup",
          method: "method",
          min: "min",
          minlength: "minLength",
          multiple: "multiple",
          muted: "muted",
          name: "name",
          nomodule: "noModule",
          nonce: "nonce",
          novalidate: "noValidate",
          open: "open",
          optimum: "optimum",
          pattern: "pattern",
          placeholder: "placeholder",
          playsinline: "playsInline",
          poster: "poster",
          preload: "preload",
          profile: "profile",
          radiogroup: "radioGroup",
          readonly: "readOnly",
          referrerpolicy: "referrerPolicy",
          rel: "rel",
          required: "required",
          reversed: "reversed",
          role: "role",
          rows: "rows",
          rowspan: "rowSpan",
          sandbox: "sandbox",
          scope: "scope",
          scoped: "scoped",
          scrolling: "scrolling",
          seamless: "seamless",
          selected: "selected",
          shape: "shape",
          size: "size",
          sizes: "sizes",
          span: "span",
          spellcheck: "spellCheck",
          src: "src",
          srcdoc: "srcDoc",
          srclang: "srcLang",
          srcset: "srcSet",
          start: "start",
          step: "step",
          style: "style",
          summary: "summary",
          tabindex: "tabIndex",
          target: "target",
          title: "title",
          type: "type",
          usemap: "useMap",
          value: "value",
          width: "width",
          wmode: "wmode",
          wrap: "wrap",
          about: "about",
          accentheight: "accentHeight",
          "accent-height": "accentHeight",
          accumulate: "accumulate",
          additive: "additive",
          alignmentbaseline: "alignmentBaseline",
          "alignment-baseline": "alignmentBaseline",
          allowreorder: "allowReorder",
          alphabetic: "alphabetic",
          amplitude: "amplitude",
          arabicform: "arabicForm",
          "arabic-form": "arabicForm",
          ascent: "ascent",
          attributename: "attributeName",
          attributetype: "attributeType",
          autoreverse: "autoReverse",
          azimuth: "azimuth",
          basefrequency: "baseFrequency",
          baselineshift: "baselineShift",
          "baseline-shift": "baselineShift",
          baseprofile: "baseProfile",
          bbox: "bbox",
          begin: "begin",
          bias: "bias",
          by: "by",
          calcmode: "calcMode",
          capheight: "capHeight",
          "cap-height": "capHeight",
          clip: "clip",
          clippath: "clipPath",
          "clip-path": "clipPath",
          clippathunits: "clipPathUnits",
          cliprule: "clipRule",
          "clip-rule": "clipRule",
          color: "color",
          colorinterpolation: "colorInterpolation",
          "color-interpolation": "colorInterpolation",
          colorinterpolationfilters: "colorInterpolationFilters",
          "color-interpolation-filters": "colorInterpolationFilters",
          colorprofile: "colorProfile",
          "color-profile": "colorProfile",
          colorrendering: "colorRendering",
          "color-rendering": "colorRendering",
          contentscripttype: "contentScriptType",
          contentstyletype: "contentStyleType",
          cursor: "cursor",
          cx: "cx",
          cy: "cy",
          d: "d",
          datatype: "datatype",
          decelerate: "decelerate",
          descent: "descent",
          diffuseconstant: "diffuseConstant",
          direction: "direction",
          display: "display",
          divisor: "divisor",
          dominantbaseline: "dominantBaseline",
          "dominant-baseline": "dominantBaseline",
          dur: "dur",
          dx: "dx",
          dy: "dy",
          edgemode: "edgeMode",
          elevation: "elevation",
          enablebackground: "enableBackground",
          "enable-background": "enableBackground",
          end: "end",
          exponent: "exponent",
          externalresourcesrequired: "externalResourcesRequired",
          fill: "fill",
          fillopacity: "fillOpacity",
          "fill-opacity": "fillOpacity",
          fillrule: "fillRule",
          "fill-rule": "fillRule",
          filter: "filter",
          filterres: "filterRes",
          filterunits: "filterUnits",
          floodopacity: "floodOpacity",
          "flood-opacity": "floodOpacity",
          floodcolor: "floodColor",
          "flood-color": "floodColor",
          focusable: "focusable",
          fontfamily: "fontFamily",
          "font-family": "fontFamily",
          fontsize: "fontSize",
          "font-size": "fontSize",
          fontsizeadjust: "fontSizeAdjust",
          "font-size-adjust": "fontSizeAdjust",
          fontstretch: "fontStretch",
          "font-stretch": "fontStretch",
          fontstyle: "fontStyle",
          "font-style": "fontStyle",
          fontvariant: "fontVariant",
          "font-variant": "fontVariant",
          fontweight: "fontWeight",
          "font-weight": "fontWeight",
          format: "format",
          from: "from",
          fx: "fx",
          fy: "fy",
          g1: "g1",
          g2: "g2",
          glyphname: "glyphName",
          "glyph-name": "glyphName",
          glyphorientationhorizontal: "glyphOrientationHorizontal",
          "glyph-orientation-horizontal": "glyphOrientationHorizontal",
          glyphorientationvertical: "glyphOrientationVertical",
          "glyph-orientation-vertical": "glyphOrientationVertical",
          glyphref: "glyphRef",
          gradienttransform: "gradientTransform",
          gradientunits: "gradientUnits",
          hanging: "hanging",
          horizadvx: "horizAdvX",
          "horiz-adv-x": "horizAdvX",
          horizoriginx: "horizOriginX",
          "horiz-origin-x": "horizOriginX",
          ideographic: "ideographic",
          imagerendering: "imageRendering",
          "image-rendering": "imageRendering",
          in2: "in2",
          in: "in",
          inlist: "inlist",
          intercept: "intercept",
          k1: "k1",
          k2: "k2",
          k3: "k3",
          k4: "k4",
          k: "k",
          kernelmatrix: "kernelMatrix",
          kernelunitlength: "kernelUnitLength",
          kerning: "kerning",
          keypoints: "keyPoints",
          keysplines: "keySplines",
          keytimes: "keyTimes",
          lengthadjust: "lengthAdjust",
          letterspacing: "letterSpacing",
          "letter-spacing": "letterSpacing",
          lightingcolor: "lightingColor",
          "lighting-color": "lightingColor",
          limitingconeangle: "limitingConeAngle",
          local: "local",
          markerend: "markerEnd",
          "marker-end": "markerEnd",
          markerheight: "markerHeight",
          markermid: "markerMid",
          "marker-mid": "markerMid",
          markerstart: "markerStart",
          "marker-start": "markerStart",
          markerunits: "markerUnits",
          markerwidth: "markerWidth",
          mask: "mask",
          maskcontentunits: "maskContentUnits",
          maskunits: "maskUnits",
          mathematical: "mathematical",
          mode: "mode",
          numoctaves: "numOctaves",
          offset: "offset",
          opacity: "opacity",
          operator: "operator",
          order: "order",
          orient: "orient",
          orientation: "orientation",
          origin: "origin",
          overflow: "overflow",
          overlineposition: "overlinePosition",
          "overline-position": "overlinePosition",
          overlinethickness: "overlineThickness",
          "overline-thickness": "overlineThickness",
          paintorder: "paintOrder",
          "paint-order": "paintOrder",
          panose1: "panose1",
          "panose-1": "panose1",
          pathlength: "pathLength",
          patterncontentunits: "patternContentUnits",
          patterntransform: "patternTransform",
          patternunits: "patternUnits",
          pointerevents: "pointerEvents",
          "pointer-events": "pointerEvents",
          points: "points",
          pointsatx: "pointsAtX",
          pointsaty: "pointsAtY",
          pointsatz: "pointsAtZ",
          prefix: "prefix",
          preservealpha: "preserveAlpha",
          preserveaspectratio: "preserveAspectRatio",
          primitiveunits: "primitiveUnits",
          property: "property",
          r: "r",
          radius: "radius",
          refx: "refX",
          refy: "refY",
          renderingintent: "renderingIntent",
          "rendering-intent": "renderingIntent",
          repeatcount: "repeatCount",
          repeatdur: "repeatDur",
          requiredextensions: "requiredExtensions",
          requiredfeatures: "requiredFeatures",
          resource: "resource",
          restart: "restart",
          result: "result",
          results: "results",
          rotate: "rotate",
          rx: "rx",
          ry: "ry",
          scale: "scale",
          security: "security",
          seed: "seed",
          shaperendering: "shapeRendering",
          "shape-rendering": "shapeRendering",
          slope: "slope",
          spacing: "spacing",
          specularconstant: "specularConstant",
          specularexponent: "specularExponent",
          speed: "speed",
          spreadmethod: "spreadMethod",
          startoffset: "startOffset",
          stddeviation: "stdDeviation",
          stemh: "stemh",
          stemv: "stemv",
          stitchtiles: "stitchTiles",
          stopcolor: "stopColor",
          "stop-color": "stopColor",
          stopopacity: "stopOpacity",
          "stop-opacity": "stopOpacity",
          strikethroughposition: "strikethroughPosition",
          "strikethrough-position": "strikethroughPosition",
          strikethroughthickness: "strikethroughThickness",
          "strikethrough-thickness": "strikethroughThickness",
          string: "string",
          stroke: "stroke",
          strokedasharray: "strokeDasharray",
          "stroke-dasharray": "strokeDasharray",
          strokedashoffset: "strokeDashoffset",
          "stroke-dashoffset": "strokeDashoffset",
          strokelinecap: "strokeLinecap",
          "stroke-linecap": "strokeLinecap",
          strokelinejoin: "strokeLinejoin",
          "stroke-linejoin": "strokeLinejoin",
          strokemiterlimit: "strokeMiterlimit",
          "stroke-miterlimit": "strokeMiterlimit",
          strokewidth: "strokeWidth",
          "stroke-width": "strokeWidth",
          strokeopacity: "strokeOpacity",
          "stroke-opacity": "strokeOpacity",
          suppresscontenteditablewarning: "suppressContentEditableWarning",
          suppresshydrationwarning: "suppressHydrationWarning",
          surfacescale: "surfaceScale",
          systemlanguage: "systemLanguage",
          tablevalues: "tableValues",
          targetx: "targetX",
          targety: "targetY",
          textanchor: "textAnchor",
          "text-anchor": "textAnchor",
          textdecoration: "textDecoration",
          "text-decoration": "textDecoration",
          textlength: "textLength",
          textrendering: "textRendering",
          "text-rendering": "textRendering",
          to: "to",
          transform: "transform",
          typeof: "typeof",
          u1: "u1",
          u2: "u2",
          underlineposition: "underlinePosition",
          "underline-position": "underlinePosition",
          underlinethickness: "underlineThickness",
          "underline-thickness": "underlineThickness",
          unicode: "unicode",
          unicodebidi: "unicodeBidi",
          "unicode-bidi": "unicodeBidi",
          unicoderange: "unicodeRange",
          "unicode-range": "unicodeRange",
          unitsperem: "unitsPerEm",
          "units-per-em": "unitsPerEm",
          unselectable: "unselectable",
          valphabetic: "vAlphabetic",
          "v-alphabetic": "vAlphabetic",
          values: "values",
          vectoreffect: "vectorEffect",
          "vector-effect": "vectorEffect",
          version: "version",
          vertadvy: "vertAdvY",
          "vert-adv-y": "vertAdvY",
          vertoriginx: "vertOriginX",
          "vert-origin-x": "vertOriginX",
          vertoriginy: "vertOriginY",
          "vert-origin-y": "vertOriginY",
          vhanging: "vHanging",
          "v-hanging": "vHanging",
          videographic: "vIdeographic",
          "v-ideographic": "vIdeographic",
          viewbox: "viewBox",
          viewtarget: "viewTarget",
          visibility: "visibility",
          vmathematical: "vMathematical",
          "v-mathematical": "vMathematical",
          vocab: "vocab",
          widths: "widths",
          wordspacing: "wordSpacing",
          "word-spacing": "wordSpacing",
          writingmode: "writingMode",
          "writing-mode": "writingMode",
          x1: "x1",
          x2: "x2",
          x: "x",
          xchannelselector: "xChannelSelector",
          xheight: "xHeight",
          "x-height": "xHeight",
          xlinkactuate: "xlinkActuate",
          "xlink:actuate": "xlinkActuate",
          xlinkarcrole: "xlinkArcrole",
          "xlink:arcrole": "xlinkArcrole",
          xlinkhref: "xlinkHref",
          "xlink:href": "xlinkHref",
          xlinkrole: "xlinkRole",
          "xlink:role": "xlinkRole",
          xlinkshow: "xlinkShow",
          "xlink:show": "xlinkShow",
          xlinktitle: "xlinkTitle",
          "xlink:title": "xlinkTitle",
          xlinktype: "xlinkType",
          "xlink:type": "xlinkType",
          xmlbase: "xmlBase",
          "xml:base": "xmlBase",
          xmllang: "xmlLang",
          "xml:lang": "xmlLang",
          xmlns: "xmlns",
          "xml:space": "xmlSpace",
          xmlnsxlink: "xmlnsXlink",
          "xmlns:xlink": "xmlnsXlink",
          xmlspace: "xmlSpace",
          y1: "y1",
          y2: "y2",
          y: "y",
          ychannelselector: "yChannelSelector",
          z: "z",
          zoomandpan: "zoomAndPan"
        };
        var validateProperty$1 = function() {
        };
        {
          var warnedProperties$1 = {};
          var EVENT_NAME_REGEX = /^on./;
          var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
          var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          validateProperty$1 = function(tagName, name, value, eventRegistry) {
            if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
              return true;
            }
            var lowerCasedName = name.toLowerCase();
            if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
              error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (eventRegistry != null) {
              var registrationNameDependencies = eventRegistry.registrationNameDependencies, possibleRegistrationNames = eventRegistry.possibleRegistrationNames;
              if (registrationNameDependencies.hasOwnProperty(name)) {
                return true;
              }
              var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
              if (registrationName != null) {
                error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (EVENT_NAME_REGEX.test(name)) {
                error("Unknown event handler property `%s`. It will be ignored.", name);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (EVENT_NAME_REGEX.test(name)) {
              if (INVALID_EVENT_NAME_REGEX.test(name)) {
                error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
              return true;
            }
            if (lowerCasedName === "innerhtml") {
              error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "aria") {
              error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
              error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "number" && isNaN(value)) {
              error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
              warnedProperties$1[name] = true;
              return true;
            }
            var propertyInfo = getPropertyInfo(name);
            var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
            if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              var standardName = possibleStandardNames[lowerCasedName];
              if (standardName !== name) {
                error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (!isReserved && name !== lowerCasedName) {
              error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              if (value) {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
              } else {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (isReserved) {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              warnedProperties$1[name] = true;
              return false;
            }
            if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
              error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
              warnedProperties$1[name] = true;
              return true;
            }
            return true;
          };
        }
        var warnUnknownProperties = function(type, props, eventRegistry) {
          {
            var unknownProps = [];
            for (var key in props) {
              var isValid = validateProperty$1(type, key, props[key], eventRegistry);
              if (!isValid) {
                unknownProps.push(key);
              }
            }
            var unknownPropString = unknownProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (unknownProps.length === 1) {
              error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            } else if (unknownProps.length > 1) {
              error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            }
          }
        };
        function validateProperties$2(type, props, eventRegistry) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnUnknownProperties(type, props, eventRegistry);
        }
        var warnValidStyle = function() {
        };
        {
          var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
          var msPattern = /^-ms-/;
          var hyphenPattern = /-(.)/g;
          var badStyleValueWithSemicolonPattern = /;\s*$/;
          var warnedStyleNames = {};
          var warnedStyleValues = {};
          var warnedForNaNValue = false;
          var warnedForInfinityValue = false;
          var camelize = function(string) {
            return string.replace(hyphenPattern, function(_2, character) {
              return character.toUpperCase();
            });
          };
          var warnHyphenatedStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error("Unsupported style property %s. Did you mean %s?", name, camelize(name.replace(msPattern, "ms-")));
          };
          var warnBadVendoredStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
          };
          var warnStyleValueWithSemicolon = function(name, value) {
            if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
              return;
            }
            warnedStyleValues[value] = true;
            error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
          };
          var warnStyleValueIsNaN = function(name, value) {
            if (warnedForNaNValue) {
              return;
            }
            warnedForNaNValue = true;
            error("`NaN` is an invalid value for the `%s` css style property.", name);
          };
          var warnStyleValueIsInfinity = function(name, value) {
            if (warnedForInfinityValue) {
              return;
            }
            warnedForInfinityValue = true;
            error("`Infinity` is an invalid value for the `%s` css style property.", name);
          };
          warnValidStyle = function(name, value) {
            if (name.indexOf("-") > -1) {
              warnHyphenatedStyleName(name);
            } else if (badVendoredStyleNamePattern.test(name)) {
              warnBadVendoredStyleName(name);
            } else if (badStyleValueWithSemicolonPattern.test(value)) {
              warnStyleValueWithSemicolon(name, value);
            }
            if (typeof value === "number") {
              if (isNaN(value)) {
                warnStyleValueIsNaN(name, value);
              } else if (!isFinite(value)) {
                warnStyleValueIsInfinity(name, value);
              }
            }
          };
        }
        var warnValidStyle$1 = warnValidStyle;
        var matchHtmlRegExp = /["'&<>]/;
        function escapeHtml(string) {
          {
            checkHtmlStringCoercion(string);
          }
          var str = "" + string;
          var match = matchHtmlRegExp.exec(str);
          if (!match) {
            return str;
          }
          var escape;
          var html = "";
          var index;
          var lastIndex = 0;
          for (index = match.index; index < str.length; index++) {
            switch (str.charCodeAt(index)) {
              case 34:
                escape = "&quot;";
                break;
              case 38:
                escape = "&amp;";
                break;
              case 39:
                escape = "&#x27;";
                break;
              case 60:
                escape = "&lt;";
                break;
              case 62:
                escape = "&gt;";
                break;
              default:
                continue;
            }
            if (lastIndex !== index) {
              html += str.substring(lastIndex, index);
            }
            lastIndex = index + 1;
            html += escape;
          }
          return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
        }
        function escapeTextForBrowser(text) {
          if (typeof text === "boolean" || typeof text === "number") {
            return "" + text;
          }
          return escapeHtml(text);
        }
        var uppercasePattern = /([A-Z])/g;
        var msPattern$1 = /^ms-/;
        function hyphenateStyleName(name) {
          return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern$1, "-ms-");
        }
        var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
        var didWarn = false;
        function sanitizeURL(url) {
          {
            if (!didWarn && isJavaScriptProtocol.test(url)) {
              didWarn = true;
              error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
            }
          }
        }
        var isArrayImpl = Array.isArray;
        function isArray(a) {
          return isArrayImpl(a);
        }
        var startInlineScript = stringToPrecomputedChunk("<script>");
        var endInlineScript = stringToPrecomputedChunk("<\/script>");
        var startScriptSrc = stringToPrecomputedChunk('<script src="');
        var startModuleSrc = stringToPrecomputedChunk('<script type="module" src="');
        var endAsyncScript = stringToPrecomputedChunk('" async=""><\/script>');
        function escapeBootstrapScriptContent(scriptText) {
          {
            checkHtmlStringCoercion(scriptText);
          }
          return ("" + scriptText).replace(scriptRegex, scriptReplacer);
        }
        var scriptRegex = /(<\/|<)(s)(cript)/gi;
        var scriptReplacer = function(match, prefix2, s, suffix) {
          return "" + prefix2 + (s === "s" ? "\\u0073" : "\\u0053") + suffix;
        };
        function createResponseState(identifierPrefix, nonce, bootstrapScriptContent, bootstrapScripts, bootstrapModules) {
          var idPrefix = identifierPrefix === void 0 ? "" : identifierPrefix;
          var inlineScriptWithNonce = nonce === void 0 ? startInlineScript : stringToPrecomputedChunk('<script nonce="' + escapeTextForBrowser(nonce) + '">');
          var bootstrapChunks = [];
          if (bootstrapScriptContent !== void 0) {
            bootstrapChunks.push(inlineScriptWithNonce, stringToChunk(escapeBootstrapScriptContent(bootstrapScriptContent)), endInlineScript);
          }
          if (bootstrapScripts !== void 0) {
            for (var i = 0; i < bootstrapScripts.length; i++) {
              bootstrapChunks.push(startScriptSrc, stringToChunk(escapeTextForBrowser(bootstrapScripts[i])), endAsyncScript);
            }
          }
          if (bootstrapModules !== void 0) {
            for (var _i = 0; _i < bootstrapModules.length; _i++) {
              bootstrapChunks.push(startModuleSrc, stringToChunk(escapeTextForBrowser(bootstrapModules[_i])), endAsyncScript);
            }
          }
          return {
            bootstrapChunks,
            startInlineScript: inlineScriptWithNonce,
            placeholderPrefix: stringToPrecomputedChunk(idPrefix + "P:"),
            segmentPrefix: stringToPrecomputedChunk(idPrefix + "S:"),
            boundaryPrefix: idPrefix + "B:",
            idPrefix,
            nextSuspenseID: 0,
            sentCompleteSegmentFunction: false,
            sentCompleteBoundaryFunction: false,
            sentClientRenderFunction: false
          };
        }
        var ROOT_HTML_MODE = 0;
        var HTML_MODE = 1;
        var SVG_MODE = 2;
        var MATHML_MODE = 3;
        var HTML_TABLE_MODE = 4;
        var HTML_TABLE_BODY_MODE = 5;
        var HTML_TABLE_ROW_MODE = 6;
        var HTML_COLGROUP_MODE = 7;
        function createFormatContext(insertionMode, selectedValue) {
          return {
            insertionMode,
            selectedValue
          };
        }
        function getChildFormatContext(parentContext, type, props) {
          switch (type) {
            case "select":
              return createFormatContext(HTML_MODE, props.value != null ? props.value : props.defaultValue);
            case "svg":
              return createFormatContext(SVG_MODE, null);
            case "math":
              return createFormatContext(MATHML_MODE, null);
            case "foreignObject":
              return createFormatContext(HTML_MODE, null);
            case "table":
              return createFormatContext(HTML_TABLE_MODE, null);
            case "thead":
            case "tbody":
            case "tfoot":
              return createFormatContext(HTML_TABLE_BODY_MODE, null);
            case "colgroup":
              return createFormatContext(HTML_COLGROUP_MODE, null);
            case "tr":
              return createFormatContext(HTML_TABLE_ROW_MODE, null);
          }
          if (parentContext.insertionMode >= HTML_TABLE_MODE) {
            return createFormatContext(HTML_MODE, null);
          }
          if (parentContext.insertionMode === ROOT_HTML_MODE) {
            return createFormatContext(HTML_MODE, null);
          }
          return parentContext;
        }
        var UNINITIALIZED_SUSPENSE_BOUNDARY_ID = null;
        function assignSuspenseBoundaryID(responseState) {
          var generatedID = responseState.nextSuspenseID++;
          return stringToPrecomputedChunk(responseState.boundaryPrefix + generatedID.toString(16));
        }
        function makeId(responseState, treeId, localId) {
          var idPrefix = responseState.idPrefix;
          var id = ":" + idPrefix + "R" + treeId;
          if (localId > 0) {
            id += "H" + localId.toString(32);
          }
          return id + ":";
        }
        function encodeHTMLTextNode(text) {
          return escapeTextForBrowser(text);
        }
        var textSeparator = stringToPrecomputedChunk("<!-- -->");
        function pushTextInstance(target, text, responseState, textEmbedded) {
          if (text === "") {
            return textEmbedded;
          }
          if (textEmbedded) {
            target.push(textSeparator);
          }
          target.push(stringToChunk(encodeHTMLTextNode(text)));
          return true;
        }
        function pushSegmentFinale(target, responseState, lastPushedText, textEmbedded) {
          if (lastPushedText && textEmbedded) {
            target.push(textSeparator);
          }
        }
        var styleNameCache = /* @__PURE__ */ new Map();
        function processStyleName(styleName) {
          var chunk = styleNameCache.get(styleName);
          if (chunk !== void 0) {
            return chunk;
          }
          var result = stringToPrecomputedChunk(escapeTextForBrowser(hyphenateStyleName(styleName)));
          styleNameCache.set(styleName, result);
          return result;
        }
        var styleAttributeStart = stringToPrecomputedChunk(' style="');
        var styleAssign = stringToPrecomputedChunk(":");
        var styleSeparator = stringToPrecomputedChunk(";");
        function pushStyle(target, responseState, style) {
          if (typeof style !== "object") {
            throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
          }
          var isFirst = true;
          for (var styleName in style) {
            if (!hasOwnProperty.call(style, styleName)) {
              continue;
            }
            var styleValue = style[styleName];
            if (styleValue == null || typeof styleValue === "boolean" || styleValue === "") {
              continue;
            }
            var nameChunk = void 0;
            var valueChunk = void 0;
            var isCustomProperty = styleName.indexOf("--") === 0;
            if (isCustomProperty) {
              nameChunk = stringToChunk(escapeTextForBrowser(styleName));
              {
                checkCSSPropertyStringCoercion(styleValue, styleName);
              }
              valueChunk = stringToChunk(escapeTextForBrowser(("" + styleValue).trim()));
            } else {
              {
                warnValidStyle$1(styleName, styleValue);
              }
              nameChunk = processStyleName(styleName);
              if (typeof styleValue === "number") {
                if (styleValue !== 0 && !hasOwnProperty.call(isUnitlessNumber, styleName)) {
                  valueChunk = stringToChunk(styleValue + "px");
                } else {
                  valueChunk = stringToChunk("" + styleValue);
                }
              } else {
                {
                  checkCSSPropertyStringCoercion(styleValue, styleName);
                }
                valueChunk = stringToChunk(escapeTextForBrowser(("" + styleValue).trim()));
              }
            }
            if (isFirst) {
              isFirst = false;
              target.push(styleAttributeStart, nameChunk, styleAssign, valueChunk);
            } else {
              target.push(styleSeparator, nameChunk, styleAssign, valueChunk);
            }
          }
          if (!isFirst) {
            target.push(attributeEnd);
          }
        }
        var attributeSeparator = stringToPrecomputedChunk(" ");
        var attributeAssign = stringToPrecomputedChunk('="');
        var attributeEnd = stringToPrecomputedChunk('"');
        var attributeEmptyString = stringToPrecomputedChunk('=""');
        function pushAttribute(target, responseState, name, value) {
          switch (name) {
            case "style": {
              pushStyle(target, responseState, value);
              return;
            }
            case "defaultValue":
            case "defaultChecked":
            case "innerHTML":
            case "suppressContentEditableWarning":
            case "suppressHydrationWarning":
              return;
          }
          if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
            return;
          }
          var propertyInfo = getPropertyInfo(name);
          if (propertyInfo !== null) {
            switch (typeof value) {
              case "function":
              case "symbol":
                return;
              case "boolean": {
                if (!propertyInfo.acceptsBooleans) {
                  return;
                }
              }
            }
            var attributeName = propertyInfo.attributeName;
            var attributeNameChunk = stringToChunk(attributeName);
            switch (propertyInfo.type) {
              case BOOLEAN:
                if (value) {
                  target.push(attributeSeparator, attributeNameChunk, attributeEmptyString);
                }
                return;
              case OVERLOADED_BOOLEAN:
                if (value === true) {
                  target.push(attributeSeparator, attributeNameChunk, attributeEmptyString);
                } else if (value === false)
                  ;
                else {
                  target.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
                }
                return;
              case NUMERIC:
                if (!isNaN(value)) {
                  target.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
                }
                break;
              case POSITIVE_NUMERIC:
                if (!isNaN(value) && value >= 1) {
                  target.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
                }
                break;
              default:
                if (propertyInfo.sanitizeURL) {
                  {
                    checkAttributeStringCoercion(value, attributeName);
                  }
                  value = "" + value;
                  sanitizeURL(value);
                }
                target.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
            }
          } else if (isAttributeNameSafe(name)) {
            switch (typeof value) {
              case "function":
              case "symbol":
                return;
              case "boolean": {
                var prefix2 = name.toLowerCase().slice(0, 5);
                if (prefix2 !== "data-" && prefix2 !== "aria-") {
                  return;
                }
              }
            }
            target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
          }
        }
        var endOfStartTag = stringToPrecomputedChunk(">");
        var endOfStartTagSelfClosing = stringToPrecomputedChunk("/>");
        function pushInnerHTML(target, innerHTML, children) {
          if (innerHTML != null) {
            if (children != null) {
              throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            }
            if (typeof innerHTML !== "object" || !("__html" in innerHTML)) {
              throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
            }
            var html = innerHTML.__html;
            if (html !== null && html !== void 0) {
              {
                checkHtmlStringCoercion(html);
              }
              target.push(stringToChunk("" + html));
            }
          }
        }
        var didWarnDefaultInputValue = false;
        var didWarnDefaultChecked = false;
        var didWarnDefaultSelectValue = false;
        var didWarnDefaultTextareaValue = false;
        var didWarnInvalidOptionChildren = false;
        var didWarnInvalidOptionInnerHTML = false;
        var didWarnSelectedSetOnOption = false;
        function checkSelectProp(props, propName) {
          {
            var value = props[propName];
            if (value != null) {
              var array = isArray(value);
              if (props.multiple && !array) {
                error("The `%s` prop supplied to <select> must be an array if `multiple` is true.", propName);
              } else if (!props.multiple && array) {
                error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.", propName);
              }
            }
          }
        }
        function pushStartSelect(target, props, responseState) {
          {
            checkControlledValueProps("select", props);
            checkSelectProp(props, "value");
            checkSelectProp(props, "defaultValue");
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultSelectValue) {
              error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
              didWarnDefaultSelectValue = true;
            }
          }
          target.push(startChunkForTag("select"));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "defaultValue":
                case "value":
                  break;
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          return children;
        }
        function flattenOptionChildren(children) {
          var content = "";
          React.Children.forEach(children, function(child) {
            if (child == null) {
              return;
            }
            content += child;
            {
              if (!didWarnInvalidOptionChildren && typeof child !== "string" && typeof child !== "number") {
                didWarnInvalidOptionChildren = true;
                error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
              }
            }
          });
          return content;
        }
        var selectedMarkerAttribute = stringToPrecomputedChunk(' selected=""');
        function pushStartOption(target, props, responseState, formatContext) {
          var selectedValue = formatContext.selectedValue;
          target.push(startChunkForTag("option"));
          var children = null;
          var value = null;
          var selected = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "selected":
                  selected = propValue;
                  {
                    if (!didWarnSelectedSetOnOption) {
                      error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                      didWarnSelectedSetOnOption = true;
                    }
                  }
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "value":
                  value = propValue;
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          if (selectedValue != null) {
            var stringValue;
            if (value !== null) {
              {
                checkAttributeStringCoercion(value, "value");
              }
              stringValue = "" + value;
            } else {
              {
                if (innerHTML !== null) {
                  if (!didWarnInvalidOptionInnerHTML) {
                    didWarnInvalidOptionInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              stringValue = flattenOptionChildren(children);
            }
            if (isArray(selectedValue)) {
              for (var i = 0; i < selectedValue.length; i++) {
                {
                  checkAttributeStringCoercion(selectedValue[i], "value");
                }
                var v = "" + selectedValue[i];
                if (v === stringValue) {
                  target.push(selectedMarkerAttribute);
                  break;
                }
              }
            } else {
              {
                checkAttributeStringCoercion(selectedValue, "select.value");
              }
              if ("" + selectedValue === stringValue) {
                target.push(selectedMarkerAttribute);
              }
            }
          } else if (selected) {
            target.push(selectedMarkerAttribute);
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          return children;
        }
        function pushInput(target, props, responseState) {
          {
            checkControlledValueProps("input", props);
            if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnDefaultChecked) {
              error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type);
              didWarnDefaultChecked = true;
            }
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultInputValue) {
              error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type);
              didWarnDefaultInputValue = true;
            }
          }
          target.push(startChunkForTag("input"));
          var value = null;
          var defaultValue = null;
          var checked = null;
          var defaultChecked = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error("input is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                case "defaultChecked":
                  defaultChecked = propValue;
                  break;
                case "defaultValue":
                  defaultValue = propValue;
                  break;
                case "checked":
                  checked = propValue;
                  break;
                case "value":
                  value = propValue;
                  break;
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          if (checked !== null) {
            pushAttribute(target, responseState, "checked", checked);
          } else if (defaultChecked !== null) {
            pushAttribute(target, responseState, "checked", defaultChecked);
          }
          if (value !== null) {
            pushAttribute(target, responseState, "value", value);
          } else if (defaultValue !== null) {
            pushAttribute(target, responseState, "value", defaultValue);
          }
          target.push(endOfStartTagSelfClosing);
          return null;
        }
        function pushStartTextArea(target, props, responseState) {
          {
            checkControlledValueProps("textarea", props);
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultTextareaValue) {
              error("Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components");
              didWarnDefaultTextareaValue = true;
            }
          }
          target.push(startChunkForTag("textarea"));
          var value = null;
          var defaultValue = null;
          var children = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "value":
                  value = propValue;
                  break;
                case "defaultValue":
                  defaultValue = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          if (value === null && defaultValue !== null) {
            value = defaultValue;
          }
          target.push(endOfStartTag);
          if (children != null) {
            {
              error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
            }
            if (value != null) {
              throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
            }
            if (isArray(children)) {
              if (children.length > 1) {
                throw new Error("<textarea> can only have at most one child.");
              }
              {
                checkHtmlStringCoercion(children[0]);
              }
              value = "" + children[0];
            }
            {
              checkHtmlStringCoercion(children);
            }
            value = "" + children;
          }
          if (typeof value === "string" && value[0] === "\n") {
            target.push(leadingNewline);
          }
          if (value !== null) {
            {
              checkAttributeStringCoercion(value, "value");
            }
            target.push(stringToChunk(encodeHTMLTextNode("" + value)));
          }
          return null;
        }
        function pushSelfClosing(target, props, tag, responseState) {
          target.push(startChunkForTag(tag));
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error(tag + " is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTagSelfClosing);
          return null;
        }
        function pushStartMenuItem(target, props, responseState) {
          target.push(startChunkForTag("menuitem"));
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error("menuitems cannot have `children` nor `dangerouslySetInnerHTML`.");
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          return null;
        }
        function pushStartTitle(target, props, responseState) {
          target.push(startChunkForTag("title"));
          var children = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  throw new Error("`dangerouslySetInnerHTML` does not make sense on <title>.");
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          {
            var child = Array.isArray(children) && children.length < 2 ? children[0] || null : children;
            if (Array.isArray(children) && children.length > 1) {
              error("A title element received an array with more than 1 element as children. In browsers title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering");
            } else if (child != null && child.$$typeof != null) {
              error("A title element received a React element for children. In the browser title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering");
            } else if (child != null && typeof child !== "string" && typeof child !== "number") {
              error("A title element received a value that was not a string or number for children. In the browser title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering");
            }
          }
          return children;
        }
        function pushStartGenericElement(target, props, tag, responseState) {
          target.push(startChunkForTag(tag));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          if (typeof children === "string") {
            target.push(stringToChunk(encodeHTMLTextNode(children)));
            return null;
          }
          return children;
        }
        function pushStartCustomElement(target, props, tag, responseState) {
          target.push(startChunkForTag(tag));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "style":
                  pushStyle(target, responseState, propValue);
                  break;
                case "suppressContentEditableWarning":
                case "suppressHydrationWarning":
                  break;
                default:
                  if (isAttributeNameSafe(propKey) && typeof propValue !== "function" && typeof propValue !== "symbol") {
                    target.push(attributeSeparator, stringToChunk(propKey), attributeAssign, stringToChunk(escapeTextForBrowser(propValue)), attributeEnd);
                  }
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          return children;
        }
        var leadingNewline = stringToPrecomputedChunk("\n");
        function pushStartPreformattedElement(target, props, tag, responseState) {
          target.push(startChunkForTag(tag));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          if (innerHTML != null) {
            if (children != null) {
              throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            }
            if (typeof innerHTML !== "object" || !("__html" in innerHTML)) {
              throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
            }
            var html = innerHTML.__html;
            if (html !== null && html !== void 0) {
              if (typeof html === "string" && html.length > 0 && html[0] === "\n") {
                target.push(leadingNewline, stringToChunk(html));
              } else {
                {
                  checkHtmlStringCoercion(html);
                }
                target.push(stringToChunk("" + html));
              }
            }
          }
          if (typeof children === "string" && children[0] === "\n") {
            target.push(leadingNewline);
          }
          return children;
        }
        var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/;
        var validatedTagCache = /* @__PURE__ */ new Map();
        function startChunkForTag(tag) {
          var tagStartChunk = validatedTagCache.get(tag);
          if (tagStartChunk === void 0) {
            if (!VALID_TAG_REGEX.test(tag)) {
              throw new Error("Invalid tag: " + tag);
            }
            tagStartChunk = stringToPrecomputedChunk("<" + tag);
            validatedTagCache.set(tag, tagStartChunk);
          }
          return tagStartChunk;
        }
        var DOCTYPE = stringToPrecomputedChunk("<!DOCTYPE html>");
        function pushStartInstance(target, type, props, responseState, formatContext) {
          {
            validateProperties(type, props);
            validateProperties$1(type, props);
            validateProperties$2(type, props, null);
            if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
              error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
            }
            if (formatContext.insertionMode !== SVG_MODE && formatContext.insertionMode !== MATHML_MODE) {
              if (type.indexOf("-") === -1 && typeof props.is !== "string" && type.toLowerCase() !== type) {
                error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
              }
            }
          }
          switch (type) {
            case "select":
              return pushStartSelect(target, props, responseState);
            case "option":
              return pushStartOption(target, props, responseState, formatContext);
            case "textarea":
              return pushStartTextArea(target, props, responseState);
            case "input":
              return pushInput(target, props, responseState);
            case "menuitem":
              return pushStartMenuItem(target, props, responseState);
            case "title":
              return pushStartTitle(target, props, responseState);
            case "listing":
            case "pre": {
              return pushStartPreformattedElement(target, props, type, responseState);
            }
            case "area":
            case "base":
            case "br":
            case "col":
            case "embed":
            case "hr":
            case "img":
            case "keygen":
            case "link":
            case "meta":
            case "param":
            case "source":
            case "track":
            case "wbr": {
              return pushSelfClosing(target, props, type, responseState);
            }
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph": {
              return pushStartGenericElement(target, props, type, responseState);
            }
            case "html": {
              if (formatContext.insertionMode === ROOT_HTML_MODE) {
                target.push(DOCTYPE);
              }
              return pushStartGenericElement(target, props, type, responseState);
            }
            default: {
              if (type.indexOf("-") === -1 && typeof props.is !== "string") {
                return pushStartGenericElement(target, props, type, responseState);
              } else {
                return pushStartCustomElement(target, props, type, responseState);
              }
            }
          }
        }
        var endTag1 = stringToPrecomputedChunk("</");
        var endTag2 = stringToPrecomputedChunk(">");
        function pushEndInstance(target, type, props) {
          switch (type) {
            case "area":
            case "base":
            case "br":
            case "col":
            case "embed":
            case "hr":
            case "img":
            case "input":
            case "keygen":
            case "link":
            case "meta":
            case "param":
            case "source":
            case "track":
            case "wbr": {
              break;
            }
            default: {
              target.push(endTag1, stringToChunk(type), endTag2);
            }
          }
        }
        function writeCompletedRoot(destination, responseState) {
          var bootstrapChunks = responseState.bootstrapChunks;
          var i = 0;
          for (; i < bootstrapChunks.length - 1; i++) {
            writeChunk(destination, bootstrapChunks[i]);
          }
          if (i < bootstrapChunks.length) {
            return writeChunkAndReturn(destination, bootstrapChunks[i]);
          }
          return true;
        }
        var placeholder1 = stringToPrecomputedChunk('<template id="');
        var placeholder2 = stringToPrecomputedChunk('"></template>');
        function writePlaceholder(destination, responseState, id) {
          writeChunk(destination, placeholder1);
          writeChunk(destination, responseState.placeholderPrefix);
          var formattedID = stringToChunk(id.toString(16));
          writeChunk(destination, formattedID);
          return writeChunkAndReturn(destination, placeholder2);
        }
        var startCompletedSuspenseBoundary = stringToPrecomputedChunk("<!--$-->");
        var startPendingSuspenseBoundary1 = stringToPrecomputedChunk('<!--$?--><template id="');
        var startPendingSuspenseBoundary2 = stringToPrecomputedChunk('"></template>');
        var startClientRenderedSuspenseBoundary = stringToPrecomputedChunk("<!--$!-->");
        var endSuspenseBoundary = stringToPrecomputedChunk("<!--/$-->");
        var clientRenderedSuspenseBoundaryError1 = stringToPrecomputedChunk("<template");
        var clientRenderedSuspenseBoundaryErrorAttrInterstitial = stringToPrecomputedChunk('"');
        var clientRenderedSuspenseBoundaryError1A = stringToPrecomputedChunk(' data-dgst="');
        var clientRenderedSuspenseBoundaryError1B = stringToPrecomputedChunk(' data-msg="');
        var clientRenderedSuspenseBoundaryError1C = stringToPrecomputedChunk(' data-stck="');
        var clientRenderedSuspenseBoundaryError2 = stringToPrecomputedChunk("></template>");
        function writeStartCompletedSuspenseBoundary(destination, responseState) {
          return writeChunkAndReturn(destination, startCompletedSuspenseBoundary);
        }
        function writeStartPendingSuspenseBoundary(destination, responseState, id) {
          writeChunk(destination, startPendingSuspenseBoundary1);
          if (id === null) {
            throw new Error("An ID must have been assigned before we can complete the boundary.");
          }
          writeChunk(destination, id);
          return writeChunkAndReturn(destination, startPendingSuspenseBoundary2);
        }
        function writeStartClientRenderedSuspenseBoundary(destination, responseState, errorDigest, errorMesssage, errorComponentStack) {
          var result;
          result = writeChunkAndReturn(destination, startClientRenderedSuspenseBoundary);
          writeChunk(destination, clientRenderedSuspenseBoundaryError1);
          if (errorDigest) {
            writeChunk(destination, clientRenderedSuspenseBoundaryError1A);
            writeChunk(destination, stringToChunk(escapeTextForBrowser(errorDigest)));
            writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
          }
          {
            if (errorMesssage) {
              writeChunk(destination, clientRenderedSuspenseBoundaryError1B);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorMesssage)));
              writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
            }
            if (errorComponentStack) {
              writeChunk(destination, clientRenderedSuspenseBoundaryError1C);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorComponentStack)));
              writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
            }
          }
          result = writeChunkAndReturn(destination, clientRenderedSuspenseBoundaryError2);
          return result;
        }
        function writeEndCompletedSuspenseBoundary(destination, responseState) {
          return writeChunkAndReturn(destination, endSuspenseBoundary);
        }
        function writeEndPendingSuspenseBoundary(destination, responseState) {
          return writeChunkAndReturn(destination, endSuspenseBoundary);
        }
        function writeEndClientRenderedSuspenseBoundary(destination, responseState) {
          return writeChunkAndReturn(destination, endSuspenseBoundary);
        }
        var startSegmentHTML = stringToPrecomputedChunk('<div hidden id="');
        var startSegmentHTML2 = stringToPrecomputedChunk('">');
        var endSegmentHTML = stringToPrecomputedChunk("</div>");
        var startSegmentSVG = stringToPrecomputedChunk('<svg aria-hidden="true" style="display:none" id="');
        var startSegmentSVG2 = stringToPrecomputedChunk('">');
        var endSegmentSVG = stringToPrecomputedChunk("</svg>");
        var startSegmentMathML = stringToPrecomputedChunk('<math aria-hidden="true" style="display:none" id="');
        var startSegmentMathML2 = stringToPrecomputedChunk('">');
        var endSegmentMathML = stringToPrecomputedChunk("</math>");
        var startSegmentTable = stringToPrecomputedChunk('<table hidden id="');
        var startSegmentTable2 = stringToPrecomputedChunk('">');
        var endSegmentTable = stringToPrecomputedChunk("</table>");
        var startSegmentTableBody = stringToPrecomputedChunk('<table hidden><tbody id="');
        var startSegmentTableBody2 = stringToPrecomputedChunk('">');
        var endSegmentTableBody = stringToPrecomputedChunk("</tbody></table>");
        var startSegmentTableRow = stringToPrecomputedChunk('<table hidden><tr id="');
        var startSegmentTableRow2 = stringToPrecomputedChunk('">');
        var endSegmentTableRow = stringToPrecomputedChunk("</tr></table>");
        var startSegmentColGroup = stringToPrecomputedChunk('<table hidden><colgroup id="');
        var startSegmentColGroup2 = stringToPrecomputedChunk('">');
        var endSegmentColGroup = stringToPrecomputedChunk("</colgroup></table>");
        function writeStartSegment(destination, responseState, formatContext, id) {
          switch (formatContext.insertionMode) {
            case ROOT_HTML_MODE:
            case HTML_MODE: {
              writeChunk(destination, startSegmentHTML);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentHTML2);
            }
            case SVG_MODE: {
              writeChunk(destination, startSegmentSVG);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentSVG2);
            }
            case MATHML_MODE: {
              writeChunk(destination, startSegmentMathML);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentMathML2);
            }
            case HTML_TABLE_MODE: {
              writeChunk(destination, startSegmentTable);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentTable2);
            }
            case HTML_TABLE_BODY_MODE: {
              writeChunk(destination, startSegmentTableBody);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentTableBody2);
            }
            case HTML_TABLE_ROW_MODE: {
              writeChunk(destination, startSegmentTableRow);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentTableRow2);
            }
            case HTML_COLGROUP_MODE: {
              writeChunk(destination, startSegmentColGroup);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentColGroup2);
            }
            default: {
              throw new Error("Unknown insertion mode. This is a bug in React.");
            }
          }
        }
        function writeEndSegment(destination, formatContext) {
          switch (formatContext.insertionMode) {
            case ROOT_HTML_MODE:
            case HTML_MODE: {
              return writeChunkAndReturn(destination, endSegmentHTML);
            }
            case SVG_MODE: {
              return writeChunkAndReturn(destination, endSegmentSVG);
            }
            case MATHML_MODE: {
              return writeChunkAndReturn(destination, endSegmentMathML);
            }
            case HTML_TABLE_MODE: {
              return writeChunkAndReturn(destination, endSegmentTable);
            }
            case HTML_TABLE_BODY_MODE: {
              return writeChunkAndReturn(destination, endSegmentTableBody);
            }
            case HTML_TABLE_ROW_MODE: {
              return writeChunkAndReturn(destination, endSegmentTableRow);
            }
            case HTML_COLGROUP_MODE: {
              return writeChunkAndReturn(destination, endSegmentColGroup);
            }
            default: {
              throw new Error("Unknown insertion mode. This is a bug in React.");
            }
          }
        }
        var completeSegmentFunction = "function $RS(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)}";
        var completeBoundaryFunction = 'function $RC(a,b){a=document.getElementById(a);b=document.getElementById(b);b.parentNode.removeChild(b);if(a){a=a.previousSibling;var f=a.parentNode,c=a.nextSibling,e=0;do{if(c&&8===c.nodeType){var d=c.data;if("/$"===d)if(0===e)break;else e--;else"$"!==d&&"$?"!==d&&"$!"!==d||e++}d=c.nextSibling;f.removeChild(c);c=d}while(c);for(;b.firstChild;)f.insertBefore(b.firstChild,c);a.data="$";a._reactRetry&&a._reactRetry()}}';
        var clientRenderFunction = 'function $RX(b,c,d,e){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data="$!",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),b._reactRetry&&b._reactRetry())}';
        var completeSegmentScript1Full = stringToPrecomputedChunk(completeSegmentFunction + ';$RS("');
        var completeSegmentScript1Partial = stringToPrecomputedChunk('$RS("');
        var completeSegmentScript2 = stringToPrecomputedChunk('","');
        var completeSegmentScript3 = stringToPrecomputedChunk('")<\/script>');
        function writeCompletedSegmentInstruction(destination, responseState, contentSegmentID) {
          writeChunk(destination, responseState.startInlineScript);
          if (!responseState.sentCompleteSegmentFunction) {
            responseState.sentCompleteSegmentFunction = true;
            writeChunk(destination, completeSegmentScript1Full);
          } else {
            writeChunk(destination, completeSegmentScript1Partial);
          }
          writeChunk(destination, responseState.segmentPrefix);
          var formattedID = stringToChunk(contentSegmentID.toString(16));
          writeChunk(destination, formattedID);
          writeChunk(destination, completeSegmentScript2);
          writeChunk(destination, responseState.placeholderPrefix);
          writeChunk(destination, formattedID);
          return writeChunkAndReturn(destination, completeSegmentScript3);
        }
        var completeBoundaryScript1Full = stringToPrecomputedChunk(completeBoundaryFunction + ';$RC("');
        var completeBoundaryScript1Partial = stringToPrecomputedChunk('$RC("');
        var completeBoundaryScript2 = stringToPrecomputedChunk('","');
        var completeBoundaryScript3 = stringToPrecomputedChunk('")<\/script>');
        function writeCompletedBoundaryInstruction(destination, responseState, boundaryID, contentSegmentID) {
          writeChunk(destination, responseState.startInlineScript);
          if (!responseState.sentCompleteBoundaryFunction) {
            responseState.sentCompleteBoundaryFunction = true;
            writeChunk(destination, completeBoundaryScript1Full);
          } else {
            writeChunk(destination, completeBoundaryScript1Partial);
          }
          if (boundaryID === null) {
            throw new Error("An ID must have been assigned before we can complete the boundary.");
          }
          var formattedContentID = stringToChunk(contentSegmentID.toString(16));
          writeChunk(destination, boundaryID);
          writeChunk(destination, completeBoundaryScript2);
          writeChunk(destination, responseState.segmentPrefix);
          writeChunk(destination, formattedContentID);
          return writeChunkAndReturn(destination, completeBoundaryScript3);
        }
        var clientRenderScript1Full = stringToPrecomputedChunk(clientRenderFunction + ';$RX("');
        var clientRenderScript1Partial = stringToPrecomputedChunk('$RX("');
        var clientRenderScript1A = stringToPrecomputedChunk('"');
        var clientRenderScript2 = stringToPrecomputedChunk(")<\/script>");
        var clientRenderErrorScriptArgInterstitial = stringToPrecomputedChunk(",");
        function writeClientRenderBoundaryInstruction(destination, responseState, boundaryID, errorDigest, errorMessage, errorComponentStack) {
          writeChunk(destination, responseState.startInlineScript);
          if (!responseState.sentClientRenderFunction) {
            responseState.sentClientRenderFunction = true;
            writeChunk(destination, clientRenderScript1Full);
          } else {
            writeChunk(destination, clientRenderScript1Partial);
          }
          if (boundaryID === null) {
            throw new Error("An ID must have been assigned before we can complete the boundary.");
          }
          writeChunk(destination, boundaryID);
          writeChunk(destination, clientRenderScript1A);
          if (errorDigest || errorMessage || errorComponentStack) {
            writeChunk(destination, clientRenderErrorScriptArgInterstitial);
            writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorDigest || "")));
          }
          if (errorMessage || errorComponentStack) {
            writeChunk(destination, clientRenderErrorScriptArgInterstitial);
            writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorMessage || "")));
          }
          if (errorComponentStack) {
            writeChunk(destination, clientRenderErrorScriptArgInterstitial);
            writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorComponentStack)));
          }
          return writeChunkAndReturn(destination, clientRenderScript2);
        }
        var regexForJSStringsInScripts = /[<\u2028\u2029]/g;
        function escapeJSStringsForInstructionScripts(input) {
          var escaped = JSON.stringify(input);
          return escaped.replace(regexForJSStringsInScripts, function(match) {
            switch (match) {
              case "<":
                return "\\u003c";
              case "\u2028":
                return "\\u2028";
              case "\u2029":
                return "\\u2029";
              default: {
                throw new Error("escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React");
              }
            }
          });
        }
        function createResponseState$1(generateStaticMarkup, identifierPrefix) {
          var responseState = createResponseState(identifierPrefix, void 0);
          return {
            bootstrapChunks: responseState.bootstrapChunks,
            startInlineScript: responseState.startInlineScript,
            placeholderPrefix: responseState.placeholderPrefix,
            segmentPrefix: responseState.segmentPrefix,
            boundaryPrefix: responseState.boundaryPrefix,
            idPrefix: responseState.idPrefix,
            nextSuspenseID: responseState.nextSuspenseID,
            sentCompleteSegmentFunction: responseState.sentCompleteSegmentFunction,
            sentCompleteBoundaryFunction: responseState.sentCompleteBoundaryFunction,
            sentClientRenderFunction: responseState.sentClientRenderFunction,
            generateStaticMarkup
          };
        }
        function createRootFormatContext() {
          return {
            insertionMode: HTML_MODE,
            selectedValue: null
          };
        }
        function pushTextInstance$1(target, text, responseState, textEmbedded) {
          if (responseState.generateStaticMarkup) {
            target.push(stringToChunk(escapeTextForBrowser(text)));
            return false;
          } else {
            return pushTextInstance(target, text, responseState, textEmbedded);
          }
        }
        function pushSegmentFinale$1(target, responseState, lastPushedText, textEmbedded) {
          if (responseState.generateStaticMarkup) {
            return;
          } else {
            return pushSegmentFinale(target, responseState, lastPushedText, textEmbedded);
          }
        }
        function writeStartCompletedSuspenseBoundary$1(destination, responseState) {
          if (responseState.generateStaticMarkup) {
            return true;
          }
          return writeStartCompletedSuspenseBoundary(destination);
        }
        function writeStartClientRenderedSuspenseBoundary$1(destination, responseState, errorDigest, errorMessage, errorComponentStack) {
          if (responseState.generateStaticMarkup) {
            return true;
          }
          return writeStartClientRenderedSuspenseBoundary(destination, responseState, errorDigest, errorMessage, errorComponentStack);
        }
        function writeEndCompletedSuspenseBoundary$1(destination, responseState) {
          if (responseState.generateStaticMarkup) {
            return true;
          }
          return writeEndCompletedSuspenseBoundary(destination);
        }
        function writeEndClientRenderedSuspenseBoundary$1(destination, responseState) {
          if (responseState.generateStaticMarkup) {
            return true;
          }
          return writeEndClientRenderedSuspenseBoundary(destination);
        }
        var assign = Object.assign;
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_SCOPE_TYPE = Symbol.for("react.scope");
        var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
        var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
        var REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = Symbol.for("react.default_value");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c = controlLines.length - 1;
              while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                c--;
              }
              for (; s >= 1 && c >= 0; s--, c--) {
                if (sampleLines[s] !== controlLines[c]) {
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--;
                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeClassComponentFrame(ctor, source, ownerFn) {
          {
            return describeNativeComponentFrame(ctor, true);
          }
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component2) {
          var prototype = Component2.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values2, location, componentName, element) {
          {
            var has = Function.call.bind(hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        var warnedAboutMissingGetChildContext;
        {
          warnedAboutMissingGetChildContext = {};
        }
        var emptyContextObject = {};
        {
          Object.freeze(emptyContextObject);
        }
        function getMaskedContext(type, unmaskedContext) {
          {
            var contextTypes = type.contextTypes;
            if (!contextTypes) {
              return emptyContextObject;
            }
            var context = {};
            for (var key in contextTypes) {
              context[key] = unmaskedContext[key];
            }
            {
              var name = getComponentNameFromType(type) || "Unknown";
              checkPropTypes(contextTypes, context, "context", name);
            }
            return context;
          }
        }
        function processChildContext(instance, type, parentContext, childContextTypes) {
          {
            if (typeof instance.getChildContext !== "function") {
              {
                var componentName = getComponentNameFromType(type) || "Unknown";
                if (!warnedAboutMissingGetChildContext[componentName]) {
                  warnedAboutMissingGetChildContext[componentName] = true;
                  error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                }
              }
              return parentContext;
            }
            var childContext = instance.getChildContext();
            for (var contextKey in childContext) {
              if (!(contextKey in childContextTypes)) {
                throw new Error((getComponentNameFromType(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
              }
            }
            {
              var name = getComponentNameFromType(type) || "Unknown";
              checkPropTypes(childContextTypes, childContext, "child context", name);
            }
            return assign({}, parentContext, childContext);
          }
        }
        var rendererSigil;
        {
          rendererSigil = {};
        }
        var rootContextSnapshot = null;
        var currentActiveSnapshot = null;
        function popNode(prev) {
          {
            prev.context._currentValue2 = prev.parentValue;
          }
        }
        function pushNode(next) {
          {
            next.context._currentValue2 = next.value;
          }
        }
        function popToNearestCommonAncestor(prev, next) {
          if (prev === next)
            ;
          else {
            popNode(prev);
            var parentPrev = prev.parent;
            var parentNext = next.parent;
            if (parentPrev === null) {
              if (parentNext !== null) {
                throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
              }
            } else {
              if (parentNext === null) {
                throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
              }
              popToNearestCommonAncestor(parentPrev, parentNext);
            }
            pushNode(next);
          }
        }
        function popAllPrevious(prev) {
          popNode(prev);
          var parentPrev = prev.parent;
          if (parentPrev !== null) {
            popAllPrevious(parentPrev);
          }
        }
        function pushAllNext(next) {
          var parentNext = next.parent;
          if (parentNext !== null) {
            pushAllNext(parentNext);
          }
          pushNode(next);
        }
        function popPreviousToCommonLevel(prev, next) {
          popNode(prev);
          var parentPrev = prev.parent;
          if (parentPrev === null) {
            throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
          }
          if (parentPrev.depth === next.depth) {
            popToNearestCommonAncestor(parentPrev, next);
          } else {
            popPreviousToCommonLevel(parentPrev, next);
          }
        }
        function popNextToCommonLevel(prev, next) {
          var parentNext = next.parent;
          if (parentNext === null) {
            throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
          }
          if (prev.depth === parentNext.depth) {
            popToNearestCommonAncestor(prev, parentNext);
          } else {
            popNextToCommonLevel(prev, parentNext);
          }
          pushNode(next);
        }
        function switchContext(newSnapshot) {
          var prev = currentActiveSnapshot;
          var next = newSnapshot;
          if (prev !== next) {
            if (prev === null) {
              pushAllNext(next);
            } else if (next === null) {
              popAllPrevious(prev);
            } else if (prev.depth === next.depth) {
              popToNearestCommonAncestor(prev, next);
            } else if (prev.depth > next.depth) {
              popPreviousToCommonLevel(prev, next);
            } else {
              popNextToCommonLevel(prev, next);
            }
            currentActiveSnapshot = next;
          }
        }
        function pushProvider(context, nextValue) {
          var prevValue;
          {
            prevValue = context._currentValue2;
            context._currentValue2 = nextValue;
            {
              if (context._currentRenderer2 !== void 0 && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer2 = rendererSigil;
            }
          }
          var prevNode = currentActiveSnapshot;
          var newNode = {
            parent: prevNode,
            depth: prevNode === null ? 0 : prevNode.depth + 1,
            context,
            parentValue: prevValue,
            value: nextValue
          };
          currentActiveSnapshot = newNode;
          return newNode;
        }
        function popProvider(context) {
          var prevSnapshot = currentActiveSnapshot;
          if (prevSnapshot === null) {
            throw new Error("Tried to pop a Context at the root of the app. This is a bug in React.");
          }
          {
            if (prevSnapshot.context !== context) {
              error("The parent context is not the expected context. This is probably a bug in React.");
            }
          }
          {
            var _value = prevSnapshot.parentValue;
            if (_value === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED) {
              prevSnapshot.context._currentValue2 = prevSnapshot.context._defaultValue;
            } else {
              prevSnapshot.context._currentValue2 = _value;
            }
            {
              if (context._currentRenderer2 !== void 0 && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer2 = rendererSigil;
            }
          }
          return currentActiveSnapshot = prevSnapshot.parent;
        }
        function getActiveContext() {
          return currentActiveSnapshot;
        }
        function readContext(context) {
          var value = context._currentValue2;
          return value;
        }
        function get2(key) {
          return key._reactInternals;
        }
        function set2(key, value) {
          key._reactInternals = value;
        }
        var didWarnAboutNoopUpdateForComponent = {};
        var didWarnAboutDeprecatedWillMount = {};
        var didWarnAboutUninitializedState;
        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
        var didWarnAboutLegacyLifecyclesAndDerivedState;
        var didWarnAboutUndefinedDerivedState;
        var warnOnUndefinedDerivedState;
        var warnOnInvalidCallback;
        var didWarnAboutDirectlyAssigningPropsToState;
        var didWarnAboutContextTypeAndContextTypes;
        var didWarnAboutInvalidateContextType;
        {
          didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
          didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
          didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
          didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
          var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
          warnOnInvalidCallback = function(callback, callerName) {
            if (callback === null || typeof callback === "function") {
              return;
            }
            var key = callerName + "_" + callback;
            if (!didWarnOnInvalidCallback.has(key)) {
              didWarnOnInvalidCallback.add(key);
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          };
          warnOnUndefinedDerivedState = function(type, partialState) {
            if (partialState === void 0) {
              var componentName = getComponentNameFromType(type) || "Component";
              if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
              }
            }
          };
        }
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && getComponentNameFromType(_constructor) || "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnAboutNoopUpdateForComponent[warningKey]) {
              return;
            }
            error("%s(...): Can only update a mounting component. This usually means you called %s() outside componentWillMount() on the server. This is a no-op.\n\nPlease check the code for the %s component.", callerName, callerName, componentName);
            didWarnAboutNoopUpdateForComponent[warningKey] = true;
          }
        }
        var classComponentUpdater = {
          isMounted: function(inst) {
            return false;
          },
          enqueueSetState: function(inst, payload, callback) {
            var internals = get2(inst);
            if (internals.queue === null) {
              warnNoop(inst, "setState");
            } else {
              internals.queue.push(payload);
              {
                if (callback !== void 0 && callback !== null) {
                  warnOnInvalidCallback(callback, "setState");
                }
              }
            }
          },
          enqueueReplaceState: function(inst, payload, callback) {
            var internals = get2(inst);
            internals.replace = true;
            internals.queue = [payload];
            {
              if (callback !== void 0 && callback !== null) {
                warnOnInvalidCallback(callback, "setState");
              }
            }
          },
          enqueueForceUpdate: function(inst, callback) {
            var internals = get2(inst);
            if (internals.queue === null) {
              warnNoop(inst, "forceUpdate");
            } else {
              {
                if (callback !== void 0 && callback !== null) {
                  warnOnInvalidCallback(callback, "setState");
                }
              }
            }
          }
        };
        function applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, prevState, nextProps) {
          var partialState = getDerivedStateFromProps(nextProps, prevState);
          {
            warnOnUndefinedDerivedState(ctor, partialState);
          }
          var newState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
          return newState;
        }
        function constructClassInstance(ctor, props, maskedLegacyContext) {
          var context = emptyContextObject;
          var contextType = ctor.contextType;
          {
            if ("contextType" in ctor) {
              var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
              if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = "";
                if (contextType === void 0) {
                  addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                } else if (typeof contextType !== "object") {
                  addendum = " However, it is set to a " + typeof contextType + ".";
                } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                  addendum = " Did you accidentally pass the Context.Provider instead?";
                } else if (contextType._context !== void 0) {
                  addendum = " Did you accidentally pass the Context.Consumer instead?";
                } else {
                  addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                }
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
              }
            }
          }
          if (typeof contextType === "object" && contextType !== null) {
            context = readContext(contextType);
          } else {
            context = maskedLegacyContext;
          }
          var instance = new ctor(props, context);
          {
            if (typeof ctor.getDerivedStateFromProps === "function" && (instance.state === null || instance.state === void 0)) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
              }
            }
            if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
              var foundWillMountName = null;
              var foundWillReceivePropsName = null;
              var foundWillUpdateName = null;
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                foundWillMountName = "componentWillMount";
              } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                foundWillMountName = "UNSAFE_componentWillMount";
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                foundWillReceivePropsName = "componentWillReceiveProps";
              } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                foundWillUpdateName = "componentWillUpdate";
              } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                foundWillUpdateName = "UNSAFE_componentWillUpdate";
              }
              if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentNameFromType(ctor) || "Component";
                var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                  didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                  error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                }
              }
            }
          }
          return instance;
        }
        function checkClassInstance(instance, ctor, newProps) {
          {
            var name = getComponentNameFromType(ctor) || "Component";
            var renderPresent = instance.render;
            if (!renderPresent) {
              if (ctor.prototype && typeof ctor.prototype.render === "function") {
                error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
              } else {
                error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
              }
            }
            if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
              error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
            }
            if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
            }
            if (instance.propTypes) {
              error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
            }
            if (instance.contextType) {
              error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
            }
            {
              if (instance.contextTypes) {
                error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
              }
              if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                didWarnAboutContextTypeAndContextTypes.add(ctor);
                error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
              }
            }
            if (typeof instance.componentShouldUpdate === "function") {
              error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
              error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
            }
            if (typeof instance.componentDidUnmount === "function") {
              error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
            }
            if (typeof instance.componentDidReceiveProps === "function") {
              error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
            }
            if (typeof instance.componentWillRecieveProps === "function") {
              error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
            }
            if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
              error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
            }
            var hasMutatedProps = instance.props !== newProps;
            if (instance.props !== void 0 && hasMutatedProps) {
              error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
            }
            if (instance.defaultProps) {
              error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
              error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
            }
            if (typeof instance.getDerivedStateFromProps === "function") {
              error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof instance.getDerivedStateFromError === "function") {
              error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof ctor.getSnapshotBeforeUpdate === "function") {
              error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
            }
            var _state = instance.state;
            if (_state && (typeof _state !== "object" || isArray(_state))) {
              error("%s.state: must be set to an object or null", name);
            }
            if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
              error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
            }
          }
        }
        function callComponentWillMount(type, instance) {
          var oldState = instance.state;
          if (typeof instance.componentWillMount === "function") {
            {
              if (instance.componentWillMount.__suppressDeprecationWarning !== true) {
                var componentName = getComponentNameFromType(type) || "Unknown";
                if (!didWarnAboutDeprecatedWillMount[componentName]) {
                  warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code from componentWillMount to componentDidMount (preferred in most cases) or the constructor.\n\nPlease update the following components: %s", componentName);
                  didWarnAboutDeprecatedWillMount[componentName] = true;
                }
              }
            }
            instance.componentWillMount();
          }
          if (typeof instance.UNSAFE_componentWillMount === "function") {
            instance.UNSAFE_componentWillMount();
          }
          if (oldState !== instance.state) {
            {
              error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromType(type) || "Component");
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function processUpdateQueue(internalInstance, inst, props, maskedLegacyContext) {
          if (internalInstance.queue !== null && internalInstance.queue.length > 0) {
            var oldQueue = internalInstance.queue;
            var oldReplace = internalInstance.replace;
            internalInstance.queue = null;
            internalInstance.replace = false;
            if (oldReplace && oldQueue.length === 1) {
              inst.state = oldQueue[0];
            } else {
              var nextState = oldReplace ? oldQueue[0] : inst.state;
              var dontMutate = true;
              for (var i = oldReplace ? 1 : 0; i < oldQueue.length; i++) {
                var partial = oldQueue[i];
                var partialState = typeof partial === "function" ? partial.call(inst, nextState, props, maskedLegacyContext) : partial;
                if (partialState != null) {
                  if (dontMutate) {
                    dontMutate = false;
                    nextState = assign({}, nextState, partialState);
                  } else {
                    assign(nextState, partialState);
                  }
                }
              }
              inst.state = nextState;
            }
          } else {
            internalInstance.queue = null;
          }
        }
        function mountClassInstance(instance, ctor, newProps, maskedLegacyContext) {
          {
            checkClassInstance(instance, ctor, newProps);
          }
          var initialState = instance.state !== void 0 ? instance.state : null;
          instance.updater = classComponentUpdater;
          instance.props = newProps;
          instance.state = initialState;
          var internalInstance = {
            queue: [],
            replace: false
          };
          set2(instance, internalInstance);
          var contextType = ctor.contextType;
          if (typeof contextType === "object" && contextType !== null) {
            instance.context = readContext(contextType);
          } else {
            instance.context = maskedLegacyContext;
          }
          {
            if (instance.state === newProps) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
              }
            }
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          if (typeof getDerivedStateFromProps === "function") {
            instance.state = applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, initialState, newProps);
          }
          if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            callComponentWillMount(ctor, instance);
            processUpdateQueue(internalInstance, instance, newProps, maskedLegacyContext);
          }
        }
        var emptyTreeContext = {
          id: 1,
          overflow: ""
        };
        function getTreeId(context) {
          var overflow = context.overflow;
          var idWithLeadingBit = context.id;
          var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
          return id.toString(32) + overflow;
        }
        function pushTreeContext(baseContext, totalChildren, index) {
          var baseIdWithLeadingBit = baseContext.id;
          var baseOverflow = baseContext.overflow;
          var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
          var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
          var slot = index + 1;
          var length = getBitLength(totalChildren) + baseLength;
          if (length > 30) {
            var numberOfOverflowBits = baseLength - baseLength % 5;
            var newOverflowBits = (1 << numberOfOverflowBits) - 1;
            var newOverflow = (baseId & newOverflowBits).toString(32);
            var restOfBaseId = baseId >> numberOfOverflowBits;
            var restOfBaseLength = baseLength - numberOfOverflowBits;
            var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
            var restOfNewBits = slot << restOfBaseLength;
            var id = restOfNewBits | restOfBaseId;
            var overflow = newOverflow + baseOverflow;
            return {
              id: 1 << restOfLength | id,
              overflow
            };
          } else {
            var newBits = slot << baseLength;
            var _id = newBits | baseId;
            var _overflow = baseOverflow;
            return {
              id: 1 << length | _id,
              overflow: _overflow
            };
          }
        }
        function getBitLength(number) {
          return 32 - clz32(number);
        }
        function getLeadingBit(id) {
          return 1 << getBitLength(id) - 1;
        }
        var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
        var log = Math.log;
        var LN2 = Math.LN2;
        function clz32Fallback(x) {
          var asUint = x >>> 0;
          if (asUint === 0) {
            return 32;
          }
          return 31 - (log(asUint) / LN2 | 0) | 0;
        }
        function is(x, y) {
          return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is;
        var currentlyRenderingComponent = null;
        var currentlyRenderingTask = null;
        var firstWorkInProgressHook = null;
        var workInProgressHook = null;
        var isReRender = false;
        var didScheduleRenderPhaseUpdate = false;
        var localIdCounter = 0;
        var renderPhaseUpdates = null;
        var numberOfReRenders = 0;
        var RE_RENDER_LIMIT = 25;
        var isInHookUserCodeInDev = false;
        var currentHookNameInDev;
        function resolveCurrentlyRenderingComponent() {
          if (currentlyRenderingComponent === null) {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          {
            if (isInHookUserCodeInDev) {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            }
          }
          return currentlyRenderingComponent;
        }
        function areHookInputsEqual(nextDeps, prevDeps) {
          if (prevDeps === null) {
            {
              error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            }
            return false;
          }
          {
            if (nextDeps.length !== prevDeps.length) {
              error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + nextDeps.join(", ") + "]", "[" + prevDeps.join(", ") + "]");
            }
          }
          for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
            if (objectIs(nextDeps[i], prevDeps[i])) {
              continue;
            }
            return false;
          }
          return true;
        }
        function createHook() {
          if (numberOfReRenders > 0) {
            throw new Error("Rendered more hooks than during the previous render");
          }
          return {
            memoizedState: null,
            queue: null,
            next: null
          };
        }
        function createWorkInProgressHook() {
          if (workInProgressHook === null) {
            if (firstWorkInProgressHook === null) {
              isReRender = false;
              firstWorkInProgressHook = workInProgressHook = createHook();
            } else {
              isReRender = true;
              workInProgressHook = firstWorkInProgressHook;
            }
          } else {
            if (workInProgressHook.next === null) {
              isReRender = false;
              workInProgressHook = workInProgressHook.next = createHook();
            } else {
              isReRender = true;
              workInProgressHook = workInProgressHook.next;
            }
          }
          return workInProgressHook;
        }
        function prepareToUseHooks(task, componentIdentity) {
          currentlyRenderingComponent = componentIdentity;
          currentlyRenderingTask = task;
          {
            isInHookUserCodeInDev = false;
          }
          localIdCounter = 0;
        }
        function finishHooks(Component2, props, children, refOrContext) {
          while (didScheduleRenderPhaseUpdate) {
            didScheduleRenderPhaseUpdate = false;
            localIdCounter = 0;
            numberOfReRenders += 1;
            workInProgressHook = null;
            children = Component2(props, refOrContext);
          }
          resetHooksState();
          return children;
        }
        function checkDidRenderIdHook() {
          var didRenderIdHook = localIdCounter !== 0;
          return didRenderIdHook;
        }
        function resetHooksState() {
          {
            isInHookUserCodeInDev = false;
          }
          currentlyRenderingComponent = null;
          currentlyRenderingTask = null;
          didScheduleRenderPhaseUpdate = false;
          firstWorkInProgressHook = null;
          numberOfReRenders = 0;
          renderPhaseUpdates = null;
          workInProgressHook = null;
        }
        function readContext$1(context) {
          {
            if (isInHookUserCodeInDev) {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
          }
          return readContext(context);
        }
        function useContext(context) {
          {
            currentHookNameInDev = "useContext";
          }
          resolveCurrentlyRenderingComponent();
          return readContext(context);
        }
        function basicStateReducer(state, action) {
          return typeof action === "function" ? action(state) : action;
        }
        function useState(initialState) {
          {
            currentHookNameInDev = "useState";
          }
          return useReducer(basicStateReducer, initialState);
        }
        function useReducer(reducer, initialArg, init) {
          {
            if (reducer !== basicStateReducer) {
              currentHookNameInDev = "useReducer";
            }
          }
          currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
          workInProgressHook = createWorkInProgressHook();
          if (isReRender) {
            var queue = workInProgressHook.queue;
            var dispatch = queue.dispatch;
            if (renderPhaseUpdates !== null) {
              var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
              if (firstRenderPhaseUpdate !== void 0) {
                renderPhaseUpdates.delete(queue);
                var newState = workInProgressHook.memoizedState;
                var update = firstRenderPhaseUpdate;
                do {
                  var action = update.action;
                  {
                    isInHookUserCodeInDev = true;
                  }
                  newState = reducer(newState, action);
                  {
                    isInHookUserCodeInDev = false;
                  }
                  update = update.next;
                } while (update !== null);
                workInProgressHook.memoizedState = newState;
                return [newState, dispatch];
              }
            }
            return [workInProgressHook.memoizedState, dispatch];
          } else {
            {
              isInHookUserCodeInDev = true;
            }
            var initialState;
            if (reducer === basicStateReducer) {
              initialState = typeof initialArg === "function" ? initialArg() : initialArg;
            } else {
              initialState = init !== void 0 ? init(initialArg) : initialArg;
            }
            {
              isInHookUserCodeInDev = false;
            }
            workInProgressHook.memoizedState = initialState;
            var _queue = workInProgressHook.queue = {
              last: null,
              dispatch: null
            };
            var _dispatch = _queue.dispatch = dispatchAction.bind(null, currentlyRenderingComponent, _queue);
            return [workInProgressHook.memoizedState, _dispatch];
          }
        }
        function useMemo(nextCreate, deps) {
          currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
          workInProgressHook = createWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          if (workInProgressHook !== null) {
            var prevState = workInProgressHook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
          }
          {
            isInHookUserCodeInDev = true;
          }
          var nextValue = nextCreate();
          {
            isInHookUserCodeInDev = false;
          }
          workInProgressHook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function useRef(initialValue) {
          currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
          workInProgressHook = createWorkInProgressHook();
          var previousRef = workInProgressHook.memoizedState;
          if (previousRef === null) {
            var ref = {
              current: initialValue
            };
            {
              Object.seal(ref);
            }
            workInProgressHook.memoizedState = ref;
            return ref;
          } else {
            return previousRef;
          }
        }
        function useLayoutEffect(create, inputs) {
          {
            currentHookNameInDev = "useLayoutEffect";
            error("useLayoutEffect does nothing on the server, because its effect cannot be encoded into the server renderer's output format. This will lead to a mismatch between the initial, non-hydrated UI and the intended UI. To avoid this, useLayoutEffect should only be used in components that render exclusively on the client. See https://reactjs.org/link/uselayouteffect-ssr for common fixes.");
          }
        }
        function dispatchAction(componentIdentity, queue, action) {
          if (numberOfReRenders >= RE_RENDER_LIMIT) {
            throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
          }
          if (componentIdentity === currentlyRenderingComponent) {
            didScheduleRenderPhaseUpdate = true;
            var update = {
              action,
              next: null
            };
            if (renderPhaseUpdates === null) {
              renderPhaseUpdates = /* @__PURE__ */ new Map();
            }
            var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
            if (firstRenderPhaseUpdate === void 0) {
              renderPhaseUpdates.set(queue, update);
            } else {
              var lastRenderPhaseUpdate = firstRenderPhaseUpdate;
              while (lastRenderPhaseUpdate.next !== null) {
                lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              }
              lastRenderPhaseUpdate.next = update;
            }
          }
        }
        function useCallback(callback, deps) {
          return useMemo(function() {
            return callback;
          }, deps);
        }
        function useMutableSource(source, getSnapshot, subscribe) {
          resolveCurrentlyRenderingComponent();
          return getSnapshot(source._source);
        }
        function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          if (getServerSnapshot === void 0) {
            throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
          }
          return getServerSnapshot();
        }
        function useDeferredValue(value) {
          resolveCurrentlyRenderingComponent();
          return value;
        }
        function unsupportedStartTransition() {
          throw new Error("startTransition cannot be called during server rendering.");
        }
        function useTransition() {
          resolveCurrentlyRenderingComponent();
          return [false, unsupportedStartTransition];
        }
        function useId() {
          var task = currentlyRenderingTask;
          var treeId = getTreeId(task.treeContext);
          var responseState = currentResponseState;
          if (responseState === null) {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component.");
          }
          var localId = localIdCounter++;
          return makeId(responseState, treeId, localId);
        }
        function noop2() {
        }
        var Dispatcher = {
          readContext: readContext$1,
          useContext,
          useMemo,
          useReducer,
          useRef,
          useState,
          useInsertionEffect: noop2,
          useLayoutEffect,
          useCallback,
          useImperativeHandle: noop2,
          useEffect: noop2,
          useDebugValue: noop2,
          useDeferredValue,
          useTransition,
          useId,
          useMutableSource,
          useSyncExternalStore
        };
        var currentResponseState = null;
        function setCurrentResponseState(responseState) {
          currentResponseState = responseState;
        }
        function getStackByComponentStackNode(componentStack) {
          try {
            var info = "";
            var node = componentStack;
            do {
              switch (node.tag) {
                case 0:
                  info += describeBuiltInComponentFrame(node.type, null, null);
                  break;
                case 1:
                  info += describeFunctionComponentFrame(node.type, null, null);
                  break;
                case 2:
                  info += describeClassComponentFrame(node.type, null, null);
                  break;
              }
              node = node.parent;
            } while (node);
            return info;
          } catch (x) {
            return "\nError generating stack: " + x.message + "\n" + x.stack;
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        var PENDING = 0;
        var COMPLETED = 1;
        var FLUSHED = 2;
        var ABORTED = 3;
        var ERRORED = 4;
        var OPEN = 0;
        var CLOSING = 1;
        var CLOSED = 2;
        var DEFAULT_PROGRESSIVE_CHUNK_SIZE = 12800;
        function defaultErrorHandler(error2) {
          console["error"](error2);
          return null;
        }
        function noop$1() {
        }
        function createRequest(children, responseState, rootFormatContext, progressiveChunkSize, onError2, onAllReady, onShellReady, onShellError, onFatalError) {
          var pingedTasks = [];
          var abortSet = /* @__PURE__ */ new Set();
          var request = {
            destination: null,
            responseState,
            progressiveChunkSize: progressiveChunkSize === void 0 ? DEFAULT_PROGRESSIVE_CHUNK_SIZE : progressiveChunkSize,
            status: OPEN,
            fatalError: null,
            nextSegmentId: 0,
            allPendingTasks: 0,
            pendingRootTasks: 0,
            completedRootSegment: null,
            abortableTasks: abortSet,
            pingedTasks,
            clientRenderedBoundaries: [],
            completedBoundaries: [],
            partialBoundaries: [],
            onError: onError2 === void 0 ? defaultErrorHandler : onError2,
            onAllReady: onAllReady === void 0 ? noop$1 : onAllReady,
            onShellReady: onShellReady === void 0 ? noop$1 : onShellReady,
            onShellError: onShellError === void 0 ? noop$1 : onShellError,
            onFatalError: onFatalError === void 0 ? noop$1 : onFatalError
          };
          var rootSegment = createPendingSegment(request, 0, null, rootFormatContext, false, false);
          rootSegment.parentFlushed = true;
          var rootTask = createTask(request, children, null, rootSegment, abortSet, emptyContextObject, rootContextSnapshot, emptyTreeContext);
          pingedTasks.push(rootTask);
          return request;
        }
        function pingTask(request, task) {
          var pingedTasks = request.pingedTasks;
          pingedTasks.push(task);
          if (pingedTasks.length === 1) {
            scheduleWork(function() {
              return performWork(request);
            });
          }
        }
        function createSuspenseBoundary(request, fallbackAbortableTasks) {
          return {
            id: UNINITIALIZED_SUSPENSE_BOUNDARY_ID,
            rootSegmentID: -1,
            parentFlushed: false,
            pendingTasks: 0,
            forceClientRender: false,
            completedSegments: [],
            byteSize: 0,
            fallbackAbortableTasks,
            errorDigest: null
          };
        }
        function createTask(request, node, blockedBoundary, blockedSegment, abortSet, legacyContext, context, treeContext) {
          request.allPendingTasks++;
          if (blockedBoundary === null) {
            request.pendingRootTasks++;
          } else {
            blockedBoundary.pendingTasks++;
          }
          var task = {
            node,
            ping: function() {
              return pingTask(request, task);
            },
            blockedBoundary,
            blockedSegment,
            abortSet,
            legacyContext,
            context,
            treeContext
          };
          {
            task.componentStack = null;
          }
          abortSet.add(task);
          return task;
        }
        function createPendingSegment(request, index, boundary, formatContext, lastPushedText, textEmbedded) {
          return {
            status: PENDING,
            id: -1,
            index,
            parentFlushed: false,
            chunks: [],
            children: [],
            formatContext,
            boundary,
            lastPushedText,
            textEmbedded
          };
        }
        var currentTaskInDEV = null;
        function getCurrentStackInDEV() {
          {
            if (currentTaskInDEV === null || currentTaskInDEV.componentStack === null) {
              return "";
            }
            return getStackByComponentStackNode(currentTaskInDEV.componentStack);
          }
        }
        function pushBuiltInComponentStackInDEV(task, type) {
          {
            task.componentStack = {
              tag: 0,
              parent: task.componentStack,
              type
            };
          }
        }
        function pushFunctionComponentStackInDEV(task, type) {
          {
            task.componentStack = {
              tag: 1,
              parent: task.componentStack,
              type
            };
          }
        }
        function pushClassComponentStackInDEV(task, type) {
          {
            task.componentStack = {
              tag: 2,
              parent: task.componentStack,
              type
            };
          }
        }
        function popComponentStackInDEV(task) {
          {
            if (task.componentStack === null) {
              error("Unexpectedly popped too many stack frames. This is a bug in React.");
            } else {
              task.componentStack = task.componentStack.parent;
            }
          }
        }
        var lastBoundaryErrorComponentStackDev = null;
        function captureBoundaryErrorDetailsDev(boundary, error2) {
          {
            var errorMessage;
            if (typeof error2 === "string") {
              errorMessage = error2;
            } else if (error2 && typeof error2.message === "string") {
              errorMessage = error2.message;
            } else {
              errorMessage = String(error2);
            }
            var errorComponentStack = lastBoundaryErrorComponentStackDev || getCurrentStackInDEV();
            lastBoundaryErrorComponentStackDev = null;
            boundary.errorMessage = errorMessage;
            boundary.errorComponentStack = errorComponentStack;
          }
        }
        function logRecoverableError(request, error2) {
          var errorDigest = request.onError(error2);
          if (errorDigest != null && typeof errorDigest !== "string") {
            throw new Error('onError returned something with a type other than "string". onError should return a string and may return null or undefined but must not return anything else. It received something of type "' + typeof errorDigest + '" instead');
          }
          return errorDigest;
        }
        function fatalError(request, error2) {
          var onShellError = request.onShellError;
          onShellError(error2);
          var onFatalError = request.onFatalError;
          onFatalError(error2);
          if (request.destination !== null) {
            request.status = CLOSED;
            closeWithError(request.destination, error2);
          } else {
            request.status = CLOSING;
            request.fatalError = error2;
          }
        }
        function renderSuspenseBoundary(request, task, props) {
          pushBuiltInComponentStackInDEV(task, "Suspense");
          var parentBoundary = task.blockedBoundary;
          var parentSegment = task.blockedSegment;
          var fallback = props.fallback;
          var content = props.children;
          var fallbackAbortSet = /* @__PURE__ */ new Set();
          var newBoundary = createSuspenseBoundary(request, fallbackAbortSet);
          var insertionIndex = parentSegment.chunks.length;
          var boundarySegment = createPendingSegment(request, insertionIndex, newBoundary, parentSegment.formatContext, false, false);
          parentSegment.children.push(boundarySegment);
          parentSegment.lastPushedText = false;
          var contentRootSegment = createPendingSegment(request, 0, null, parentSegment.formatContext, false, false);
          contentRootSegment.parentFlushed = true;
          task.blockedBoundary = newBoundary;
          task.blockedSegment = contentRootSegment;
          try {
            renderNode(request, task, content);
            pushSegmentFinale$1(contentRootSegment.chunks, request.responseState, contentRootSegment.lastPushedText, contentRootSegment.textEmbedded);
            contentRootSegment.status = COMPLETED;
            queueCompletedSegment(newBoundary, contentRootSegment);
            if (newBoundary.pendingTasks === 0) {
              popComponentStackInDEV(task);
              return;
            }
          } catch (error2) {
            contentRootSegment.status = ERRORED;
            newBoundary.forceClientRender = true;
            newBoundary.errorDigest = logRecoverableError(request, error2);
            {
              captureBoundaryErrorDetailsDev(newBoundary, error2);
            }
          } finally {
            task.blockedBoundary = parentBoundary;
            task.blockedSegment = parentSegment;
          }
          var suspendedFallbackTask = createTask(request, fallback, parentBoundary, boundarySegment, fallbackAbortSet, task.legacyContext, task.context, task.treeContext);
          {
            suspendedFallbackTask.componentStack = task.componentStack;
          }
          request.pingedTasks.push(suspendedFallbackTask);
          popComponentStackInDEV(task);
        }
        function renderHostElement(request, task, type, props) {
          pushBuiltInComponentStackInDEV(task, type);
          var segment = task.blockedSegment;
          var children = pushStartInstance(segment.chunks, type, props, request.responseState, segment.formatContext);
          segment.lastPushedText = false;
          var prevContext = segment.formatContext;
          segment.formatContext = getChildFormatContext(prevContext, type, props);
          renderNode(request, task, children);
          segment.formatContext = prevContext;
          pushEndInstance(segment.chunks, type);
          segment.lastPushedText = false;
          popComponentStackInDEV(task);
        }
        function shouldConstruct$1(Component2) {
          return Component2.prototype && Component2.prototype.isReactComponent;
        }
        function renderWithHooks(request, task, Component2, props, secondArg) {
          var componentIdentity = {};
          prepareToUseHooks(task, componentIdentity);
          var result = Component2(props, secondArg);
          return finishHooks(Component2, props, result, secondArg);
        }
        function finishClassComponent(request, task, instance, Component2, props) {
          var nextChildren = instance.render();
          {
            if (instance.props !== props) {
              if (!didWarnAboutReassigningProps) {
                error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromType(Component2) || "a component");
              }
              didWarnAboutReassigningProps = true;
            }
          }
          {
            var childContextTypes = Component2.childContextTypes;
            if (childContextTypes !== null && childContextTypes !== void 0) {
              var previousContext = task.legacyContext;
              var mergedContext = processChildContext(instance, Component2, previousContext, childContextTypes);
              task.legacyContext = mergedContext;
              renderNodeDestructive(request, task, nextChildren);
              task.legacyContext = previousContext;
              return;
            }
          }
          renderNodeDestructive(request, task, nextChildren);
        }
        function renderClassComponent(request, task, Component2, props) {
          pushClassComponentStackInDEV(task, Component2);
          var maskedContext = getMaskedContext(Component2, task.legacyContext);
          var instance = constructClassInstance(Component2, props, maskedContext);
          mountClassInstance(instance, Component2, props, maskedContext);
          finishClassComponent(request, task, instance, Component2, props);
          popComponentStackInDEV(task);
        }
        var didWarnAboutBadClass = {};
        var didWarnAboutModulePatternComponent = {};
        var didWarnAboutContextTypeOnFunctionComponent = {};
        var didWarnAboutGetDerivedStateOnFunctionComponent = {};
        var didWarnAboutReassigningProps = false;
        var didWarnAboutGenerators = false;
        var didWarnAboutMaps = false;
        var hasWarnedAboutUsingContextAsConsumer = false;
        function renderIndeterminateComponent(request, task, Component2, props) {
          var legacyContext;
          {
            legacyContext = getMaskedContext(Component2, task.legacyContext);
          }
          pushFunctionComponentStackInDEV(task, Component2);
          {
            if (Component2.prototype && typeof Component2.prototype.render === "function") {
              var componentName = getComponentNameFromType(Component2) || "Unknown";
              if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
              }
            }
          }
          var value = renderWithHooks(request, task, Component2, props, legacyContext);
          var hasId = checkDidRenderIdHook();
          {
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              var _componentName = getComponentNameFromType(Component2) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
              }
            }
          }
          if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
            {
              var _componentName2 = getComponentNameFromType(Component2) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
              }
            }
            mountClassInstance(value, Component2, props, legacyContext);
            finishClassComponent(request, task, value, Component2, props);
          } else {
            {
              validateFunctionComponentInDev(Component2);
            }
            if (hasId) {
              var prevTreeContext = task.treeContext;
              var totalChildren = 1;
              var index = 0;
              task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index);
              try {
                renderNodeDestructive(request, task, value);
              } finally {
                task.treeContext = prevTreeContext;
              }
            } else {
              renderNodeDestructive(request, task, value);
            }
          }
          popComponentStackInDEV(task);
        }
        function validateFunctionComponentInDev(Component2) {
          {
            if (Component2) {
              if (Component2.childContextTypes) {
                error("%s(...): childContextTypes cannot be defined on a function component.", Component2.displayName || Component2.name || "Component");
              }
            }
            if (typeof Component2.getDerivedStateFromProps === "function") {
              var _componentName3 = getComponentNameFromType(Component2) || "Unknown";
              if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
              }
            }
            if (typeof Component2.contextType === "object" && Component2.contextType !== null) {
              var _componentName4 = getComponentNameFromType(Component2) || "Unknown";
              if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error("%s: Function components do not support contextType.", _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
              }
            }
          }
        }
        function resolveDefaultProps(Component2, baseProps) {
          if (Component2 && Component2.defaultProps) {
            var props = assign({}, baseProps);
            var defaultProps = Component2.defaultProps;
            for (var propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
            return props;
          }
          return baseProps;
        }
        function renderForwardRef(request, task, type, props, ref) {
          pushFunctionComponentStackInDEV(task, type.render);
          var children = renderWithHooks(request, task, type.render, props, ref);
          var hasId = checkDidRenderIdHook();
          if (hasId) {
            var prevTreeContext = task.treeContext;
            var totalChildren = 1;
            var index = 0;
            task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index);
            try {
              renderNodeDestructive(request, task, children);
            } finally {
              task.treeContext = prevTreeContext;
            }
          } else {
            renderNodeDestructive(request, task, children);
          }
          popComponentStackInDEV(task);
        }
        function renderMemo(request, task, type, props, ref) {
          var innerType = type.type;
          var resolvedProps = resolveDefaultProps(innerType, props);
          renderElement(request, task, innerType, resolvedProps, ref);
        }
        function renderContextConsumer(request, task, context, props) {
          {
            if (context._context === void 0) {
              if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                  hasWarnedAboutUsingContextAsConsumer = true;
                  error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
              }
            } else {
              context = context._context;
            }
          }
          var render = props.children;
          {
            if (typeof render !== "function") {
              error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
            }
          }
          var newValue = readContext(context);
          var newChildren = render(newValue);
          renderNodeDestructive(request, task, newChildren);
        }
        function renderContextProvider(request, task, type, props) {
          var context = type._context;
          var value = props.value;
          var children = props.children;
          var prevSnapshot;
          {
            prevSnapshot = task.context;
          }
          task.context = pushProvider(context, value);
          renderNodeDestructive(request, task, children);
          task.context = popProvider(context);
          {
            if (prevSnapshot !== task.context) {
              error("Popping the context provider did not return back to the original snapshot. This is a bug in React.");
            }
          }
        }
        function renderLazyComponent(request, task, lazyComponent, props, ref) {
          pushBuiltInComponentStackInDEV(task, "Lazy");
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;
          var Component2 = init(payload);
          var resolvedProps = resolveDefaultProps(Component2, props);
          renderElement(request, task, Component2, resolvedProps, ref);
          popComponentStackInDEV(task);
        }
        function renderElement(request, task, type, props, ref) {
          if (typeof type === "function") {
            if (shouldConstruct$1(type)) {
              renderClassComponent(request, task, type, props);
              return;
            } else {
              renderIndeterminateComponent(request, task, type, props);
              return;
            }
          }
          if (typeof type === "string") {
            renderHostElement(request, task, type, props);
            return;
          }
          switch (type) {
            case REACT_LEGACY_HIDDEN_TYPE:
            case REACT_DEBUG_TRACING_MODE_TYPE:
            case REACT_STRICT_MODE_TYPE:
            case REACT_PROFILER_TYPE:
            case REACT_FRAGMENT_TYPE: {
              renderNodeDestructive(request, task, props.children);
              return;
            }
            case REACT_SUSPENSE_LIST_TYPE: {
              pushBuiltInComponentStackInDEV(task, "SuspenseList");
              renderNodeDestructive(request, task, props.children);
              popComponentStackInDEV(task);
              return;
            }
            case REACT_SCOPE_TYPE: {
              throw new Error("ReactDOMServer does not yet support scope components.");
            }
            case REACT_SUSPENSE_TYPE: {
              {
                renderSuspenseBoundary(request, task, props);
              }
              return;
            }
          }
          if (typeof type === "object" && type !== null) {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE: {
                renderForwardRef(request, task, type, props, ref);
                return;
              }
              case REACT_MEMO_TYPE: {
                renderMemo(request, task, type, props, ref);
                return;
              }
              case REACT_PROVIDER_TYPE: {
                renderContextProvider(request, task, type, props);
                return;
              }
              case REACT_CONTEXT_TYPE: {
                renderContextConsumer(request, task, type, props);
                return;
              }
              case REACT_LAZY_TYPE: {
                renderLazyComponent(request, task, type, props);
                return;
              }
            }
          }
          var info = "";
          {
            if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
          }
          throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
        }
        function validateIterable(iterable, iteratorFn) {
          {
            if (typeof Symbol === "function" && iterable[Symbol.toStringTag] === "Generator") {
              if (!didWarnAboutGenerators) {
                error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
              }
              didWarnAboutGenerators = true;
            }
            if (iterable.entries === iteratorFn) {
              if (!didWarnAboutMaps) {
                error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
              }
              didWarnAboutMaps = true;
            }
          }
        }
        function renderNodeDestructive(request, task, node) {
          {
            try {
              return renderNodeDestructiveImpl(request, task, node);
            } catch (x) {
              if (typeof x === "object" && x !== null && typeof x.then === "function")
                ;
              else {
                lastBoundaryErrorComponentStackDev = lastBoundaryErrorComponentStackDev !== null ? lastBoundaryErrorComponentStackDev : getCurrentStackInDEV();
              }
              throw x;
            }
          }
        }
        function renderNodeDestructiveImpl(request, task, node) {
          task.node = node;
          if (typeof node === "object" && node !== null) {
            switch (node.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                var element = node;
                var type = element.type;
                var props = element.props;
                var ref = element.ref;
                renderElement(request, task, type, props, ref);
                return;
              }
              case REACT_PORTAL_TYPE:
                throw new Error("Portals are not currently supported by the server renderer. Render them conditionally so that they only appear on the client render.");
              case REACT_LAZY_TYPE: {
                var lazyNode = node;
                var payload = lazyNode._payload;
                var init = lazyNode._init;
                var resolvedNode;
                {
                  try {
                    resolvedNode = init(payload);
                  } catch (x) {
                    if (typeof x === "object" && x !== null && typeof x.then === "function") {
                      pushBuiltInComponentStackInDEV(task, "Lazy");
                    }
                    throw x;
                  }
                }
                renderNodeDestructive(request, task, resolvedNode);
                return;
              }
            }
            if (isArray(node)) {
              renderChildrenArray(request, task, node);
              return;
            }
            var iteratorFn = getIteratorFn(node);
            if (iteratorFn) {
              {
                validateIterable(node, iteratorFn);
              }
              var iterator = iteratorFn.call(node);
              if (iterator) {
                var step = iterator.next();
                if (!step.done) {
                  var children = [];
                  do {
                    children.push(step.value);
                    step = iterator.next();
                  } while (!step.done);
                  renderChildrenArray(request, task, children);
                  return;
                }
                return;
              }
            }
            var childString = Object.prototype.toString.call(node);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(node).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          if (typeof node === "string") {
            var segment = task.blockedSegment;
            segment.lastPushedText = pushTextInstance$1(task.blockedSegment.chunks, node, request.responseState, segment.lastPushedText);
            return;
          }
          if (typeof node === "number") {
            var _segment = task.blockedSegment;
            _segment.lastPushedText = pushTextInstance$1(task.blockedSegment.chunks, "" + node, request.responseState, _segment.lastPushedText);
            return;
          }
          {
            if (typeof node === "function") {
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
        }
        function renderChildrenArray(request, task, children) {
          var totalChildren = children.length;
          for (var i = 0; i < totalChildren; i++) {
            var prevTreeContext = task.treeContext;
            task.treeContext = pushTreeContext(prevTreeContext, totalChildren, i);
            try {
              renderNode(request, task, children[i]);
            } finally {
              task.treeContext = prevTreeContext;
            }
          }
        }
        function spawnNewSuspendedTask(request, task, x) {
          var segment = task.blockedSegment;
          var insertionIndex = segment.chunks.length;
          var newSegment = createPendingSegment(request, insertionIndex, null, segment.formatContext, segment.lastPushedText, true);
          segment.children.push(newSegment);
          segment.lastPushedText = false;
          var newTask = createTask(request, task.node, task.blockedBoundary, newSegment, task.abortSet, task.legacyContext, task.context, task.treeContext);
          {
            if (task.componentStack !== null) {
              newTask.componentStack = task.componentStack.parent;
            }
          }
          var ping = newTask.ping;
          x.then(ping, ping);
        }
        function renderNode(request, task, node) {
          var previousFormatContext = task.blockedSegment.formatContext;
          var previousLegacyContext = task.legacyContext;
          var previousContext = task.context;
          var previousComponentStack = null;
          {
            previousComponentStack = task.componentStack;
          }
          try {
            return renderNodeDestructive(request, task, node);
          } catch (x) {
            resetHooksState();
            if (typeof x === "object" && x !== null && typeof x.then === "function") {
              spawnNewSuspendedTask(request, task, x);
              task.blockedSegment.formatContext = previousFormatContext;
              task.legacyContext = previousLegacyContext;
              task.context = previousContext;
              switchContext(previousContext);
              {
                task.componentStack = previousComponentStack;
              }
              return;
            } else {
              task.blockedSegment.formatContext = previousFormatContext;
              task.legacyContext = previousLegacyContext;
              task.context = previousContext;
              switchContext(previousContext);
              {
                task.componentStack = previousComponentStack;
              }
              throw x;
            }
          }
        }
        function erroredTask(request, boundary, segment, error2) {
          var errorDigest = logRecoverableError(request, error2);
          if (boundary === null) {
            fatalError(request, error2);
          } else {
            boundary.pendingTasks--;
            if (!boundary.forceClientRender) {
              boundary.forceClientRender = true;
              boundary.errorDigest = errorDigest;
              {
                captureBoundaryErrorDetailsDev(boundary, error2);
              }
              if (boundary.parentFlushed) {
                request.clientRenderedBoundaries.push(boundary);
              }
            }
          }
          request.allPendingTasks--;
          if (request.allPendingTasks === 0) {
            var onAllReady = request.onAllReady;
            onAllReady();
          }
        }
        function abortTaskSoft(task) {
          var request = this;
          var boundary = task.blockedBoundary;
          var segment = task.blockedSegment;
          segment.status = ABORTED;
          finishedTask(request, boundary, segment);
        }
        function abortTask(task, request, reason) {
          var boundary = task.blockedBoundary;
          var segment = task.blockedSegment;
          segment.status = ABORTED;
          if (boundary === null) {
            request.allPendingTasks--;
            if (request.status !== CLOSED) {
              request.status = CLOSED;
              if (request.destination !== null) {
                close(request.destination);
              }
            }
          } else {
            boundary.pendingTasks--;
            if (!boundary.forceClientRender) {
              boundary.forceClientRender = true;
              var _error = reason === void 0 ? new Error("The render was aborted by the server without a reason.") : reason;
              boundary.errorDigest = request.onError(_error);
              {
                var errorPrefix = "The server did not finish this Suspense boundary: ";
                if (_error && typeof _error.message === "string") {
                  _error = errorPrefix + _error.message;
                } else {
                  _error = errorPrefix + String(_error);
                }
                var previousTaskInDev = currentTaskInDEV;
                currentTaskInDEV = task;
                try {
                  captureBoundaryErrorDetailsDev(boundary, _error);
                } finally {
                  currentTaskInDEV = previousTaskInDev;
                }
              }
              if (boundary.parentFlushed) {
                request.clientRenderedBoundaries.push(boundary);
              }
            }
            boundary.fallbackAbortableTasks.forEach(function(fallbackTask) {
              return abortTask(fallbackTask, request, reason);
            });
            boundary.fallbackAbortableTasks.clear();
            request.allPendingTasks--;
            if (request.allPendingTasks === 0) {
              var onAllReady = request.onAllReady;
              onAllReady();
            }
          }
        }
        function queueCompletedSegment(boundary, segment) {
          if (segment.chunks.length === 0 && segment.children.length === 1 && segment.children[0].boundary === null) {
            var childSegment = segment.children[0];
            childSegment.id = segment.id;
            childSegment.parentFlushed = true;
            if (childSegment.status === COMPLETED) {
              queueCompletedSegment(boundary, childSegment);
            }
          } else {
            var completedSegments = boundary.completedSegments;
            completedSegments.push(segment);
          }
        }
        function finishedTask(request, boundary, segment) {
          if (boundary === null) {
            if (segment.parentFlushed) {
              if (request.completedRootSegment !== null) {
                throw new Error("There can only be one root segment. This is a bug in React.");
              }
              request.completedRootSegment = segment;
            }
            request.pendingRootTasks--;
            if (request.pendingRootTasks === 0) {
              request.onShellError = noop$1;
              var onShellReady = request.onShellReady;
              onShellReady();
            }
          } else {
            boundary.pendingTasks--;
            if (boundary.forceClientRender)
              ;
            else if (boundary.pendingTasks === 0) {
              if (segment.parentFlushed) {
                if (segment.status === COMPLETED) {
                  queueCompletedSegment(boundary, segment);
                }
              }
              if (boundary.parentFlushed) {
                request.completedBoundaries.push(boundary);
              }
              boundary.fallbackAbortableTasks.forEach(abortTaskSoft, request);
              boundary.fallbackAbortableTasks.clear();
            } else {
              if (segment.parentFlushed) {
                if (segment.status === COMPLETED) {
                  queueCompletedSegment(boundary, segment);
                  var completedSegments = boundary.completedSegments;
                  if (completedSegments.length === 1) {
                    if (boundary.parentFlushed) {
                      request.partialBoundaries.push(boundary);
                    }
                  }
                }
              }
            }
          }
          request.allPendingTasks--;
          if (request.allPendingTasks === 0) {
            var onAllReady = request.onAllReady;
            onAllReady();
          }
        }
        function retryTask(request, task) {
          var segment = task.blockedSegment;
          if (segment.status !== PENDING) {
            return;
          }
          switchContext(task.context);
          var prevTaskInDEV = null;
          {
            prevTaskInDEV = currentTaskInDEV;
            currentTaskInDEV = task;
          }
          try {
            renderNodeDestructive(request, task, task.node);
            pushSegmentFinale$1(segment.chunks, request.responseState, segment.lastPushedText, segment.textEmbedded);
            task.abortSet.delete(task);
            segment.status = COMPLETED;
            finishedTask(request, task.blockedBoundary, segment);
          } catch (x) {
            resetHooksState();
            if (typeof x === "object" && x !== null && typeof x.then === "function") {
              var ping = task.ping;
              x.then(ping, ping);
            } else {
              task.abortSet.delete(task);
              segment.status = ERRORED;
              erroredTask(request, task.blockedBoundary, segment, x);
            }
          } finally {
            {
              currentTaskInDEV = prevTaskInDEV;
            }
          }
        }
        function performWork(request) {
          if (request.status === CLOSED) {
            return;
          }
          var prevContext = getActiveContext();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = Dispatcher;
          var prevGetCurrentStackImpl;
          {
            prevGetCurrentStackImpl = ReactDebugCurrentFrame$1.getCurrentStack;
            ReactDebugCurrentFrame$1.getCurrentStack = getCurrentStackInDEV;
          }
          var prevResponseState = currentResponseState;
          setCurrentResponseState(request.responseState);
          try {
            var pingedTasks = request.pingedTasks;
            var i;
            for (i = 0; i < pingedTasks.length; i++) {
              var task = pingedTasks[i];
              retryTask(request, task);
            }
            pingedTasks.splice(0, i);
            if (request.destination !== null) {
              flushCompletedQueues(request, request.destination);
            }
          } catch (error2) {
            logRecoverableError(request, error2);
            fatalError(request, error2);
          } finally {
            setCurrentResponseState(prevResponseState);
            ReactCurrentDispatcher$1.current = prevDispatcher;
            {
              ReactDebugCurrentFrame$1.getCurrentStack = prevGetCurrentStackImpl;
            }
            if (prevDispatcher === Dispatcher) {
              switchContext(prevContext);
            }
          }
        }
        function flushSubtree(request, destination, segment) {
          segment.parentFlushed = true;
          switch (segment.status) {
            case PENDING: {
              var segmentID = segment.id = request.nextSegmentId++;
              segment.lastPushedText = false;
              segment.textEmbedded = false;
              return writePlaceholder(destination, request.responseState, segmentID);
            }
            case COMPLETED: {
              segment.status = FLUSHED;
              var r = true;
              var chunks = segment.chunks;
              var chunkIdx = 0;
              var children = segment.children;
              for (var childIdx = 0; childIdx < children.length; childIdx++) {
                var nextChild = children[childIdx];
                for (; chunkIdx < nextChild.index; chunkIdx++) {
                  writeChunk(destination, chunks[chunkIdx]);
                }
                r = flushSegment(request, destination, nextChild);
              }
              for (; chunkIdx < chunks.length - 1; chunkIdx++) {
                writeChunk(destination, chunks[chunkIdx]);
              }
              if (chunkIdx < chunks.length) {
                r = writeChunkAndReturn(destination, chunks[chunkIdx]);
              }
              return r;
            }
            default: {
              throw new Error("Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React.");
            }
          }
        }
        function flushSegment(request, destination, segment) {
          var boundary = segment.boundary;
          if (boundary === null) {
            return flushSubtree(request, destination, segment);
          }
          boundary.parentFlushed = true;
          if (boundary.forceClientRender) {
            writeStartClientRenderedSuspenseBoundary$1(destination, request.responseState, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack);
            flushSubtree(request, destination, segment);
            return writeEndClientRenderedSuspenseBoundary$1(destination, request.responseState);
          } else if (boundary.pendingTasks > 0) {
            boundary.rootSegmentID = request.nextSegmentId++;
            if (boundary.completedSegments.length > 0) {
              request.partialBoundaries.push(boundary);
            }
            var id = boundary.id = assignSuspenseBoundaryID(request.responseState);
            writeStartPendingSuspenseBoundary(destination, request.responseState, id);
            flushSubtree(request, destination, segment);
            return writeEndPendingSuspenseBoundary(destination, request.responseState);
          } else if (boundary.byteSize > request.progressiveChunkSize) {
            boundary.rootSegmentID = request.nextSegmentId++;
            request.completedBoundaries.push(boundary);
            writeStartPendingSuspenseBoundary(destination, request.responseState, boundary.id);
            flushSubtree(request, destination, segment);
            return writeEndPendingSuspenseBoundary(destination, request.responseState);
          } else {
            writeStartCompletedSuspenseBoundary$1(destination, request.responseState);
            var completedSegments = boundary.completedSegments;
            if (completedSegments.length !== 1) {
              throw new Error("A previously unvisited boundary must have exactly one root segment. This is a bug in React.");
            }
            var contentSegment = completedSegments[0];
            flushSegment(request, destination, contentSegment);
            return writeEndCompletedSuspenseBoundary$1(destination, request.responseState);
          }
        }
        function flushClientRenderedBoundary(request, destination, boundary) {
          return writeClientRenderBoundaryInstruction(destination, request.responseState, boundary.id, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack);
        }
        function flushSegmentContainer(request, destination, segment) {
          writeStartSegment(destination, request.responseState, segment.formatContext, segment.id);
          flushSegment(request, destination, segment);
          return writeEndSegment(destination, segment.formatContext);
        }
        function flushCompletedBoundary(request, destination, boundary) {
          var completedSegments = boundary.completedSegments;
          var i = 0;
          for (; i < completedSegments.length; i++) {
            var segment = completedSegments[i];
            flushPartiallyCompletedSegment(request, destination, boundary, segment);
          }
          completedSegments.length = 0;
          return writeCompletedBoundaryInstruction(destination, request.responseState, boundary.id, boundary.rootSegmentID);
        }
        function flushPartialBoundary(request, destination, boundary) {
          var completedSegments = boundary.completedSegments;
          var i = 0;
          for (; i < completedSegments.length; i++) {
            var segment = completedSegments[i];
            if (!flushPartiallyCompletedSegment(request, destination, boundary, segment)) {
              i++;
              completedSegments.splice(0, i);
              return false;
            }
          }
          completedSegments.splice(0, i);
          return true;
        }
        function flushPartiallyCompletedSegment(request, destination, boundary, segment) {
          if (segment.status === FLUSHED) {
            return true;
          }
          var segmentID = segment.id;
          if (segmentID === -1) {
            var rootSegmentID = segment.id = boundary.rootSegmentID;
            if (rootSegmentID === -1) {
              throw new Error("A root segment ID must have been assigned by now. This is a bug in React.");
            }
            return flushSegmentContainer(request, destination, segment);
          } else {
            flushSegmentContainer(request, destination, segment);
            return writeCompletedSegmentInstruction(destination, request.responseState, segmentID);
          }
        }
        function flushCompletedQueues(request, destination) {
          try {
            var completedRootSegment = request.completedRootSegment;
            if (completedRootSegment !== null && request.pendingRootTasks === 0) {
              flushSegment(request, destination, completedRootSegment);
              request.completedRootSegment = null;
              writeCompletedRoot(destination, request.responseState);
            }
            var clientRenderedBoundaries = request.clientRenderedBoundaries;
            var i;
            for (i = 0; i < clientRenderedBoundaries.length; i++) {
              var boundary = clientRenderedBoundaries[i];
              if (!flushClientRenderedBoundary(request, destination, boundary)) {
                request.destination = null;
                i++;
                clientRenderedBoundaries.splice(0, i);
                return;
              }
            }
            clientRenderedBoundaries.splice(0, i);
            var completedBoundaries = request.completedBoundaries;
            for (i = 0; i < completedBoundaries.length; i++) {
              var _boundary = completedBoundaries[i];
              if (!flushCompletedBoundary(request, destination, _boundary)) {
                request.destination = null;
                i++;
                completedBoundaries.splice(0, i);
                return;
              }
            }
            completedBoundaries.splice(0, i);
            completeWriting(destination);
            beginWriting(destination);
            var partialBoundaries = request.partialBoundaries;
            for (i = 0; i < partialBoundaries.length; i++) {
              var _boundary2 = partialBoundaries[i];
              if (!flushPartialBoundary(request, destination, _boundary2)) {
                request.destination = null;
                i++;
                partialBoundaries.splice(0, i);
                return;
              }
            }
            partialBoundaries.splice(0, i);
            var largeBoundaries = request.completedBoundaries;
            for (i = 0; i < largeBoundaries.length; i++) {
              var _boundary3 = largeBoundaries[i];
              if (!flushCompletedBoundary(request, destination, _boundary3)) {
                request.destination = null;
                i++;
                largeBoundaries.splice(0, i);
                return;
              }
            }
            largeBoundaries.splice(0, i);
          } finally {
            if (request.allPendingTasks === 0 && request.pingedTasks.length === 0 && request.clientRenderedBoundaries.length === 0 && request.completedBoundaries.length === 0) {
              {
                if (request.abortableTasks.size !== 0) {
                  error("There was still abortable task at the root when we closed. This is a bug in React.");
                }
              }
              close(destination);
            }
          }
        }
        function startWork(request) {
          scheduleWork(function() {
            return performWork(request);
          });
        }
        function startFlowing(request, destination) {
          if (request.status === CLOSING) {
            request.status = CLOSED;
            closeWithError(destination, request.fatalError);
            return;
          }
          if (request.status === CLOSED) {
            return;
          }
          if (request.destination !== null) {
            return;
          }
          request.destination = destination;
          try {
            flushCompletedQueues(request, destination);
          } catch (error2) {
            logRecoverableError(request, error2);
            fatalError(request, error2);
          }
        }
        function abort(request, reason) {
          try {
            var abortableTasks = request.abortableTasks;
            abortableTasks.forEach(function(task) {
              return abortTask(task, request, reason);
            });
            abortableTasks.clear();
            if (request.destination !== null) {
              flushCompletedQueues(request, request.destination);
            }
          } catch (error2) {
            logRecoverableError(request, error2);
            fatalError(request, error2);
          }
        }
        function onError() {
        }
        function renderToStringImpl(children, options, generateStaticMarkup, abortReason) {
          var didFatal = false;
          var fatalError2 = null;
          var result = "";
          var destination = {
            push: function(chunk) {
              if (chunk !== null) {
                result += chunk;
              }
              return true;
            },
            destroy: function(error2) {
              didFatal = true;
              fatalError2 = error2;
            }
          };
          var readyToStream = false;
          function onShellReady() {
            readyToStream = true;
          }
          var request = createRequest(children, createResponseState$1(generateStaticMarkup, options ? options.identifierPrefix : void 0), createRootFormatContext(), Infinity, onError, void 0, onShellReady, void 0, void 0);
          startWork(request);
          abort(request, abortReason);
          startFlowing(request, destination);
          if (didFatal) {
            throw fatalError2;
          }
          if (!readyToStream) {
            throw new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
          }
          return result;
        }
        function renderToString(children, options) {
          return renderToStringImpl(children, options, false, 'The server used "renderToString" which does not support Suspense. If you intended for this Suspense boundary to render the fallback content on the server consider throwing an Error somewhere within the Suspense boundary. If you intended to have the server wait for the suspended component please switch to "renderToReadableStream" which supports Suspense on the server');
        }
        function renderToStaticMarkup(children, options) {
          return renderToStringImpl(children, options, true, 'The server used "renderToStaticMarkup" which does not support Suspense. If you intended to have the server wait for the suspended component please switch to "renderToReadableStream" which supports Suspense on the server');
        }
        function renderToNodeStream() {
          throw new Error("ReactDOMServer.renderToNodeStream(): The streaming API is not available in the browser. Use ReactDOMServer.renderToString() instead.");
        }
        function renderToStaticNodeStream() {
          throw new Error("ReactDOMServer.renderToStaticNodeStream(): The streaming API is not available in the browser. Use ReactDOMServer.renderToStaticMarkup() instead.");
        }
        exports.renderToNodeStream = renderToNodeStream;
        exports.renderToStaticMarkup = renderToStaticMarkup;
        exports.renderToStaticNodeStream = renderToStaticNodeStream;
        exports.renderToString = renderToString;
        exports.version = ReactVersion;
      })();
    }
  }
});

// node_modules/react-dom/cjs/react-dom-server.browser.development.js
var require_react_dom_server_browser_development = __commonJS({
  "node_modules/react-dom/cjs/react-dom-server.browser.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var React = require_react();
        var ReactVersion = "18.2.0";
        var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function warn(format) {
          {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
        }
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        function scheduleWork(callback) {
          callback();
        }
        var VIEW_SIZE = 512;
        var currentView = null;
        var writtenBytes = 0;
        function beginWriting(destination) {
          currentView = new Uint8Array(VIEW_SIZE);
          writtenBytes = 0;
        }
        function writeChunk(destination, chunk) {
          if (chunk.length === 0) {
            return;
          }
          if (chunk.length > VIEW_SIZE) {
            if (writtenBytes > 0) {
              destination.enqueue(new Uint8Array(currentView.buffer, 0, writtenBytes));
              currentView = new Uint8Array(VIEW_SIZE);
              writtenBytes = 0;
            }
            destination.enqueue(chunk);
            return;
          }
          var bytesToWrite = chunk;
          var allowableBytes = currentView.length - writtenBytes;
          if (allowableBytes < bytesToWrite.length) {
            if (allowableBytes === 0) {
              destination.enqueue(currentView);
            } else {
              currentView.set(bytesToWrite.subarray(0, allowableBytes), writtenBytes);
              destination.enqueue(currentView);
              bytesToWrite = bytesToWrite.subarray(allowableBytes);
            }
            currentView = new Uint8Array(VIEW_SIZE);
            writtenBytes = 0;
          }
          currentView.set(bytesToWrite, writtenBytes);
          writtenBytes += bytesToWrite.length;
        }
        function writeChunkAndReturn(destination, chunk) {
          writeChunk(destination, chunk);
          return true;
        }
        function completeWriting(destination) {
          if (currentView && writtenBytes > 0) {
            destination.enqueue(new Uint8Array(currentView.buffer, 0, writtenBytes));
            currentView = null;
            writtenBytes = 0;
          }
        }
        function close(destination) {
          destination.close();
        }
        var textEncoder = new TextEncoder();
        function stringToChunk(content) {
          return textEncoder.encode(content);
        }
        function stringToPrecomputedChunk(content) {
          return textEncoder.encode(content);
        }
        function closeWithError(destination, error2) {
          if (typeof destination.error === "function") {
            destination.error(error2);
          } else {
            destination.close();
          }
        }
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkAttributeStringCoercion(value, attributeName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkCSSPropertyStringCoercion(value, propName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkHtmlStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var RESERVED = 0;
        var STRING = 1;
        var BOOLEANISH_STRING = 2;
        var BOOLEAN = 3;
        var OVERLOADED_BOOLEAN = 4;
        var NUMERIC = 5;
        var POSITIVE_NUMERIC = 6;
        var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
        var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
        var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var illegalAttributeNameCache = {};
        var validatedAttributeNameCache = {};
        function isAttributeNameSafe(attributeName) {
          if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
            return true;
          }
          if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
            return false;
          }
          if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
          }
          illegalAttributeNameCache[attributeName] = true;
          {
            error("Invalid attribute name: `%s`", attributeName);
          }
          return false;
        }
        function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null && propertyInfo.type === RESERVED) {
            return false;
          }
          switch (typeof value) {
            case "function":
            case "symbol":
              return true;
            case "boolean": {
              if (isCustomComponentTag) {
                return false;
              }
              if (propertyInfo !== null) {
                return !propertyInfo.acceptsBooleans;
              } else {
                var prefix2 = name.toLowerCase().slice(0, 5);
                return prefix2 !== "data-" && prefix2 !== "aria-";
              }
            }
            default:
              return false;
          }
        }
        function getPropertyInfo(name) {
          return properties.hasOwnProperty(name) ? properties[name] : null;
        }
        function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
          this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
          this.attributeName = attributeName;
          this.attributeNamespace = attributeNamespace;
          this.mustUseProperty = mustUseProperty;
          this.propertyName = name;
          this.type = type;
          this.sanitizeURL = sanitizeURL2;
          this.removeEmptyString = removeEmptyString;
        }
        var properties = {};
        var reservedProps = [
          "children",
          "dangerouslySetInnerHTML",
          "defaultValue",
          "defaultChecked",
          "innerHTML",
          "suppressContentEditableWarning",
          "suppressHydrationWarning",
          "style"
        ];
        reservedProps.forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
        });
        [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
          var name = _ref[0], attributeName = _ref[1];
          properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
        });
        ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
        });
        ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
        });
        [
          "allowFullScreen",
          "async",
          "autoFocus",
          "autoPlay",
          "controls",
          "default",
          "defer",
          "disabled",
          "disablePictureInPicture",
          "disableRemotePlayback",
          "formNoValidate",
          "hidden",
          "loop",
          "noModule",
          "noValidate",
          "open",
          "playsInline",
          "readOnly",
          "required",
          "reversed",
          "scoped",
          "seamless",
          "itemScope"
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
        });
        [
          "checked",
          "multiple",
          "muted",
          "selected"
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
        });
        [
          "capture",
          "download"
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
        });
        [
          "cols",
          "rows",
          "size",
          "span"
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
        });
        ["rowSpan", "start"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
        });
        var CAMELIZE = /[\-\:]([a-z])/g;
        var capitalize = function(token) {
          return token[1].toUpperCase();
        };
        [
          "accent-height",
          "alignment-baseline",
          "arabic-form",
          "baseline-shift",
          "cap-height",
          "clip-path",
          "clip-rule",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "dominant-baseline",
          "enable-background",
          "fill-opacity",
          "fill-rule",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-name",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "horiz-adv-x",
          "horiz-origin-x",
          "image-rendering",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "overline-position",
          "overline-thickness",
          "paint-order",
          "panose-1",
          "pointer-events",
          "rendering-intent",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "strikethrough-position",
          "strikethrough-thickness",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "underline-position",
          "underline-thickness",
          "unicode-bidi",
          "unicode-range",
          "units-per-em",
          "v-alphabetic",
          "v-hanging",
          "v-ideographic",
          "v-mathematical",
          "vector-effect",
          "vert-adv-y",
          "vert-origin-x",
          "vert-origin-y",
          "word-spacing",
          "writing-mode",
          "xmlns:xlink",
          "x-height"
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
        });
        [
          "xlink:actuate",
          "xlink:arcrole",
          "xlink:role",
          "xlink:show",
          "xlink:title",
          "xlink:type"
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false, false);
        });
        [
          "xml:base",
          "xml:lang",
          "xml:space"
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false, false);
        });
        ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
        });
        var xlinkHref = "xlinkHref";
        properties[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
        ["src", "href", "action", "formAction"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
        });
        var isUnitlessNumber = {
          animationIterationCount: true,
          aspectRatio: true,
          borderImageOutset: true,
          borderImageSlice: true,
          borderImageWidth: true,
          boxFlex: true,
          boxFlexGroup: true,
          boxOrdinalGroup: true,
          columnCount: true,
          columns: true,
          flex: true,
          flexGrow: true,
          flexPositive: true,
          flexShrink: true,
          flexNegative: true,
          flexOrder: true,
          gridArea: true,
          gridRow: true,
          gridRowEnd: true,
          gridRowSpan: true,
          gridRowStart: true,
          gridColumn: true,
          gridColumnEnd: true,
          gridColumnSpan: true,
          gridColumnStart: true,
          fontWeight: true,
          lineClamp: true,
          lineHeight: true,
          opacity: true,
          order: true,
          orphans: true,
          tabSize: true,
          widows: true,
          zIndex: true,
          zoom: true,
          fillOpacity: true,
          floodOpacity: true,
          stopOpacity: true,
          strokeDasharray: true,
          strokeDashoffset: true,
          strokeMiterlimit: true,
          strokeOpacity: true,
          strokeWidth: true
        };
        function prefixKey(prefix2, key) {
          return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
        }
        var prefixes = ["Webkit", "ms", "Moz", "O"];
        Object.keys(isUnitlessNumber).forEach(function(prop) {
          prefixes.forEach(function(prefix2) {
            isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
          });
        });
        var hasReadOnlyValue = {
          button: true,
          checkbox: true,
          image: true,
          hidden: true,
          radio: true,
          reset: true,
          submit: true
        };
        function checkControlledValueProps(tagName, props) {
          {
            if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
              error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
            }
            if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
              error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
            }
          }
        }
        function isCustomComponent(tagName, props) {
          if (tagName.indexOf("-") === -1) {
            return typeof props.is === "string";
          }
          switch (tagName) {
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
              return false;
            default:
              return true;
          }
        }
        var ariaProperties = {
          "aria-current": 0,
          "aria-description": 0,
          "aria-details": 0,
          "aria-disabled": 0,
          "aria-hidden": 0,
          "aria-invalid": 0,
          "aria-keyshortcuts": 0,
          "aria-label": 0,
          "aria-roledescription": 0,
          "aria-autocomplete": 0,
          "aria-checked": 0,
          "aria-expanded": 0,
          "aria-haspopup": 0,
          "aria-level": 0,
          "aria-modal": 0,
          "aria-multiline": 0,
          "aria-multiselectable": 0,
          "aria-orientation": 0,
          "aria-placeholder": 0,
          "aria-pressed": 0,
          "aria-readonly": 0,
          "aria-required": 0,
          "aria-selected": 0,
          "aria-sort": 0,
          "aria-valuemax": 0,
          "aria-valuemin": 0,
          "aria-valuenow": 0,
          "aria-valuetext": 0,
          "aria-atomic": 0,
          "aria-busy": 0,
          "aria-live": 0,
          "aria-relevant": 0,
          "aria-dropeffect": 0,
          "aria-grabbed": 0,
          "aria-activedescendant": 0,
          "aria-colcount": 0,
          "aria-colindex": 0,
          "aria-colspan": 0,
          "aria-controls": 0,
          "aria-describedby": 0,
          "aria-errormessage": 0,
          "aria-flowto": 0,
          "aria-labelledby": 0,
          "aria-owns": 0,
          "aria-posinset": 0,
          "aria-rowcount": 0,
          "aria-rowindex": 0,
          "aria-rowspan": 0,
          "aria-setsize": 0
        };
        var warnedProperties = {};
        var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        function validateProperty(tagName, name) {
          {
            if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
              return true;
            }
            if (rARIACamel.test(name)) {
              var ariaName = "aria-" + name.slice(4).toLowerCase();
              var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
              if (correctName == null) {
                error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                warnedProperties[name] = true;
                return true;
              }
              if (name !== correctName) {
                error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                warnedProperties[name] = true;
                return true;
              }
            }
            if (rARIA.test(name)) {
              var lowerCasedName = name.toLowerCase();
              var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
              if (standardName == null) {
                warnedProperties[name] = true;
                return false;
              }
              if (name !== standardName) {
                error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties[name] = true;
                return true;
              }
            }
          }
          return true;
        }
        function warnInvalidARIAProps(type, props) {
          {
            var invalidProps = [];
            for (var key in props) {
              var isValid = validateProperty(type, key);
              if (!isValid) {
                invalidProps.push(key);
              }
            }
            var unknownPropString = invalidProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (invalidProps.length === 1) {
              error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            } else if (invalidProps.length > 1) {
              error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            }
          }
        }
        function validateProperties(type, props) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnInvalidARIAProps(type, props);
        }
        var didWarnValueNull = false;
        function validateProperties$1(type, props) {
          {
            if (type !== "input" && type !== "textarea" && type !== "select") {
              return;
            }
            if (props != null && props.value === null && !didWarnValueNull) {
              didWarnValueNull = true;
              if (type === "select" && props.multiple) {
                error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
              } else {
                error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
              }
            }
          }
        }
        var possibleStandardNames = {
          accept: "accept",
          acceptcharset: "acceptCharset",
          "accept-charset": "acceptCharset",
          accesskey: "accessKey",
          action: "action",
          allowfullscreen: "allowFullScreen",
          alt: "alt",
          as: "as",
          async: "async",
          autocapitalize: "autoCapitalize",
          autocomplete: "autoComplete",
          autocorrect: "autoCorrect",
          autofocus: "autoFocus",
          autoplay: "autoPlay",
          autosave: "autoSave",
          capture: "capture",
          cellpadding: "cellPadding",
          cellspacing: "cellSpacing",
          challenge: "challenge",
          charset: "charSet",
          checked: "checked",
          children: "children",
          cite: "cite",
          class: "className",
          classid: "classID",
          classname: "className",
          cols: "cols",
          colspan: "colSpan",
          content: "content",
          contenteditable: "contentEditable",
          contextmenu: "contextMenu",
          controls: "controls",
          controlslist: "controlsList",
          coords: "coords",
          crossorigin: "crossOrigin",
          dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
          data: "data",
          datetime: "dateTime",
          default: "default",
          defaultchecked: "defaultChecked",
          defaultvalue: "defaultValue",
          defer: "defer",
          dir: "dir",
          disabled: "disabled",
          disablepictureinpicture: "disablePictureInPicture",
          disableremoteplayback: "disableRemotePlayback",
          download: "download",
          draggable: "draggable",
          enctype: "encType",
          enterkeyhint: "enterKeyHint",
          for: "htmlFor",
          form: "form",
          formmethod: "formMethod",
          formaction: "formAction",
          formenctype: "formEncType",
          formnovalidate: "formNoValidate",
          formtarget: "formTarget",
          frameborder: "frameBorder",
          headers: "headers",
          height: "height",
          hidden: "hidden",
          high: "high",
          href: "href",
          hreflang: "hrefLang",
          htmlfor: "htmlFor",
          httpequiv: "httpEquiv",
          "http-equiv": "httpEquiv",
          icon: "icon",
          id: "id",
          imagesizes: "imageSizes",
          imagesrcset: "imageSrcSet",
          innerhtml: "innerHTML",
          inputmode: "inputMode",
          integrity: "integrity",
          is: "is",
          itemid: "itemID",
          itemprop: "itemProp",
          itemref: "itemRef",
          itemscope: "itemScope",
          itemtype: "itemType",
          keyparams: "keyParams",
          keytype: "keyType",
          kind: "kind",
          label: "label",
          lang: "lang",
          list: "list",
          loop: "loop",
          low: "low",
          manifest: "manifest",
          marginwidth: "marginWidth",
          marginheight: "marginHeight",
          max: "max",
          maxlength: "maxLength",
          media: "media",
          mediagroup: "mediaGroup",
          method: "method",
          min: "min",
          minlength: "minLength",
          multiple: "multiple",
          muted: "muted",
          name: "name",
          nomodule: "noModule",
          nonce: "nonce",
          novalidate: "noValidate",
          open: "open",
          optimum: "optimum",
          pattern: "pattern",
          placeholder: "placeholder",
          playsinline: "playsInline",
          poster: "poster",
          preload: "preload",
          profile: "profile",
          radiogroup: "radioGroup",
          readonly: "readOnly",
          referrerpolicy: "referrerPolicy",
          rel: "rel",
          required: "required",
          reversed: "reversed",
          role: "role",
          rows: "rows",
          rowspan: "rowSpan",
          sandbox: "sandbox",
          scope: "scope",
          scoped: "scoped",
          scrolling: "scrolling",
          seamless: "seamless",
          selected: "selected",
          shape: "shape",
          size: "size",
          sizes: "sizes",
          span: "span",
          spellcheck: "spellCheck",
          src: "src",
          srcdoc: "srcDoc",
          srclang: "srcLang",
          srcset: "srcSet",
          start: "start",
          step: "step",
          style: "style",
          summary: "summary",
          tabindex: "tabIndex",
          target: "target",
          title: "title",
          type: "type",
          usemap: "useMap",
          value: "value",
          width: "width",
          wmode: "wmode",
          wrap: "wrap",
          about: "about",
          accentheight: "accentHeight",
          "accent-height": "accentHeight",
          accumulate: "accumulate",
          additive: "additive",
          alignmentbaseline: "alignmentBaseline",
          "alignment-baseline": "alignmentBaseline",
          allowreorder: "allowReorder",
          alphabetic: "alphabetic",
          amplitude: "amplitude",
          arabicform: "arabicForm",
          "arabic-form": "arabicForm",
          ascent: "ascent",
          attributename: "attributeName",
          attributetype: "attributeType",
          autoreverse: "autoReverse",
          azimuth: "azimuth",
          basefrequency: "baseFrequency",
          baselineshift: "baselineShift",
          "baseline-shift": "baselineShift",
          baseprofile: "baseProfile",
          bbox: "bbox",
          begin: "begin",
          bias: "bias",
          by: "by",
          calcmode: "calcMode",
          capheight: "capHeight",
          "cap-height": "capHeight",
          clip: "clip",
          clippath: "clipPath",
          "clip-path": "clipPath",
          clippathunits: "clipPathUnits",
          cliprule: "clipRule",
          "clip-rule": "clipRule",
          color: "color",
          colorinterpolation: "colorInterpolation",
          "color-interpolation": "colorInterpolation",
          colorinterpolationfilters: "colorInterpolationFilters",
          "color-interpolation-filters": "colorInterpolationFilters",
          colorprofile: "colorProfile",
          "color-profile": "colorProfile",
          colorrendering: "colorRendering",
          "color-rendering": "colorRendering",
          contentscripttype: "contentScriptType",
          contentstyletype: "contentStyleType",
          cursor: "cursor",
          cx: "cx",
          cy: "cy",
          d: "d",
          datatype: "datatype",
          decelerate: "decelerate",
          descent: "descent",
          diffuseconstant: "diffuseConstant",
          direction: "direction",
          display: "display",
          divisor: "divisor",
          dominantbaseline: "dominantBaseline",
          "dominant-baseline": "dominantBaseline",
          dur: "dur",
          dx: "dx",
          dy: "dy",
          edgemode: "edgeMode",
          elevation: "elevation",
          enablebackground: "enableBackground",
          "enable-background": "enableBackground",
          end: "end",
          exponent: "exponent",
          externalresourcesrequired: "externalResourcesRequired",
          fill: "fill",
          fillopacity: "fillOpacity",
          "fill-opacity": "fillOpacity",
          fillrule: "fillRule",
          "fill-rule": "fillRule",
          filter: "filter",
          filterres: "filterRes",
          filterunits: "filterUnits",
          floodopacity: "floodOpacity",
          "flood-opacity": "floodOpacity",
          floodcolor: "floodColor",
          "flood-color": "floodColor",
          focusable: "focusable",
          fontfamily: "fontFamily",
          "font-family": "fontFamily",
          fontsize: "fontSize",
          "font-size": "fontSize",
          fontsizeadjust: "fontSizeAdjust",
          "font-size-adjust": "fontSizeAdjust",
          fontstretch: "fontStretch",
          "font-stretch": "fontStretch",
          fontstyle: "fontStyle",
          "font-style": "fontStyle",
          fontvariant: "fontVariant",
          "font-variant": "fontVariant",
          fontweight: "fontWeight",
          "font-weight": "fontWeight",
          format: "format",
          from: "from",
          fx: "fx",
          fy: "fy",
          g1: "g1",
          g2: "g2",
          glyphname: "glyphName",
          "glyph-name": "glyphName",
          glyphorientationhorizontal: "glyphOrientationHorizontal",
          "glyph-orientation-horizontal": "glyphOrientationHorizontal",
          glyphorientationvertical: "glyphOrientationVertical",
          "glyph-orientation-vertical": "glyphOrientationVertical",
          glyphref: "glyphRef",
          gradienttransform: "gradientTransform",
          gradientunits: "gradientUnits",
          hanging: "hanging",
          horizadvx: "horizAdvX",
          "horiz-adv-x": "horizAdvX",
          horizoriginx: "horizOriginX",
          "horiz-origin-x": "horizOriginX",
          ideographic: "ideographic",
          imagerendering: "imageRendering",
          "image-rendering": "imageRendering",
          in2: "in2",
          in: "in",
          inlist: "inlist",
          intercept: "intercept",
          k1: "k1",
          k2: "k2",
          k3: "k3",
          k4: "k4",
          k: "k",
          kernelmatrix: "kernelMatrix",
          kernelunitlength: "kernelUnitLength",
          kerning: "kerning",
          keypoints: "keyPoints",
          keysplines: "keySplines",
          keytimes: "keyTimes",
          lengthadjust: "lengthAdjust",
          letterspacing: "letterSpacing",
          "letter-spacing": "letterSpacing",
          lightingcolor: "lightingColor",
          "lighting-color": "lightingColor",
          limitingconeangle: "limitingConeAngle",
          local: "local",
          markerend: "markerEnd",
          "marker-end": "markerEnd",
          markerheight: "markerHeight",
          markermid: "markerMid",
          "marker-mid": "markerMid",
          markerstart: "markerStart",
          "marker-start": "markerStart",
          markerunits: "markerUnits",
          markerwidth: "markerWidth",
          mask: "mask",
          maskcontentunits: "maskContentUnits",
          maskunits: "maskUnits",
          mathematical: "mathematical",
          mode: "mode",
          numoctaves: "numOctaves",
          offset: "offset",
          opacity: "opacity",
          operator: "operator",
          order: "order",
          orient: "orient",
          orientation: "orientation",
          origin: "origin",
          overflow: "overflow",
          overlineposition: "overlinePosition",
          "overline-position": "overlinePosition",
          overlinethickness: "overlineThickness",
          "overline-thickness": "overlineThickness",
          paintorder: "paintOrder",
          "paint-order": "paintOrder",
          panose1: "panose1",
          "panose-1": "panose1",
          pathlength: "pathLength",
          patterncontentunits: "patternContentUnits",
          patterntransform: "patternTransform",
          patternunits: "patternUnits",
          pointerevents: "pointerEvents",
          "pointer-events": "pointerEvents",
          points: "points",
          pointsatx: "pointsAtX",
          pointsaty: "pointsAtY",
          pointsatz: "pointsAtZ",
          prefix: "prefix",
          preservealpha: "preserveAlpha",
          preserveaspectratio: "preserveAspectRatio",
          primitiveunits: "primitiveUnits",
          property: "property",
          r: "r",
          radius: "radius",
          refx: "refX",
          refy: "refY",
          renderingintent: "renderingIntent",
          "rendering-intent": "renderingIntent",
          repeatcount: "repeatCount",
          repeatdur: "repeatDur",
          requiredextensions: "requiredExtensions",
          requiredfeatures: "requiredFeatures",
          resource: "resource",
          restart: "restart",
          result: "result",
          results: "results",
          rotate: "rotate",
          rx: "rx",
          ry: "ry",
          scale: "scale",
          security: "security",
          seed: "seed",
          shaperendering: "shapeRendering",
          "shape-rendering": "shapeRendering",
          slope: "slope",
          spacing: "spacing",
          specularconstant: "specularConstant",
          specularexponent: "specularExponent",
          speed: "speed",
          spreadmethod: "spreadMethod",
          startoffset: "startOffset",
          stddeviation: "stdDeviation",
          stemh: "stemh",
          stemv: "stemv",
          stitchtiles: "stitchTiles",
          stopcolor: "stopColor",
          "stop-color": "stopColor",
          stopopacity: "stopOpacity",
          "stop-opacity": "stopOpacity",
          strikethroughposition: "strikethroughPosition",
          "strikethrough-position": "strikethroughPosition",
          strikethroughthickness: "strikethroughThickness",
          "strikethrough-thickness": "strikethroughThickness",
          string: "string",
          stroke: "stroke",
          strokedasharray: "strokeDasharray",
          "stroke-dasharray": "strokeDasharray",
          strokedashoffset: "strokeDashoffset",
          "stroke-dashoffset": "strokeDashoffset",
          strokelinecap: "strokeLinecap",
          "stroke-linecap": "strokeLinecap",
          strokelinejoin: "strokeLinejoin",
          "stroke-linejoin": "strokeLinejoin",
          strokemiterlimit: "strokeMiterlimit",
          "stroke-miterlimit": "strokeMiterlimit",
          strokewidth: "strokeWidth",
          "stroke-width": "strokeWidth",
          strokeopacity: "strokeOpacity",
          "stroke-opacity": "strokeOpacity",
          suppresscontenteditablewarning: "suppressContentEditableWarning",
          suppresshydrationwarning: "suppressHydrationWarning",
          surfacescale: "surfaceScale",
          systemlanguage: "systemLanguage",
          tablevalues: "tableValues",
          targetx: "targetX",
          targety: "targetY",
          textanchor: "textAnchor",
          "text-anchor": "textAnchor",
          textdecoration: "textDecoration",
          "text-decoration": "textDecoration",
          textlength: "textLength",
          textrendering: "textRendering",
          "text-rendering": "textRendering",
          to: "to",
          transform: "transform",
          typeof: "typeof",
          u1: "u1",
          u2: "u2",
          underlineposition: "underlinePosition",
          "underline-position": "underlinePosition",
          underlinethickness: "underlineThickness",
          "underline-thickness": "underlineThickness",
          unicode: "unicode",
          unicodebidi: "unicodeBidi",
          "unicode-bidi": "unicodeBidi",
          unicoderange: "unicodeRange",
          "unicode-range": "unicodeRange",
          unitsperem: "unitsPerEm",
          "units-per-em": "unitsPerEm",
          unselectable: "unselectable",
          valphabetic: "vAlphabetic",
          "v-alphabetic": "vAlphabetic",
          values: "values",
          vectoreffect: "vectorEffect",
          "vector-effect": "vectorEffect",
          version: "version",
          vertadvy: "vertAdvY",
          "vert-adv-y": "vertAdvY",
          vertoriginx: "vertOriginX",
          "vert-origin-x": "vertOriginX",
          vertoriginy: "vertOriginY",
          "vert-origin-y": "vertOriginY",
          vhanging: "vHanging",
          "v-hanging": "vHanging",
          videographic: "vIdeographic",
          "v-ideographic": "vIdeographic",
          viewbox: "viewBox",
          viewtarget: "viewTarget",
          visibility: "visibility",
          vmathematical: "vMathematical",
          "v-mathematical": "vMathematical",
          vocab: "vocab",
          widths: "widths",
          wordspacing: "wordSpacing",
          "word-spacing": "wordSpacing",
          writingmode: "writingMode",
          "writing-mode": "writingMode",
          x1: "x1",
          x2: "x2",
          x: "x",
          xchannelselector: "xChannelSelector",
          xheight: "xHeight",
          "x-height": "xHeight",
          xlinkactuate: "xlinkActuate",
          "xlink:actuate": "xlinkActuate",
          xlinkarcrole: "xlinkArcrole",
          "xlink:arcrole": "xlinkArcrole",
          xlinkhref: "xlinkHref",
          "xlink:href": "xlinkHref",
          xlinkrole: "xlinkRole",
          "xlink:role": "xlinkRole",
          xlinkshow: "xlinkShow",
          "xlink:show": "xlinkShow",
          xlinktitle: "xlinkTitle",
          "xlink:title": "xlinkTitle",
          xlinktype: "xlinkType",
          "xlink:type": "xlinkType",
          xmlbase: "xmlBase",
          "xml:base": "xmlBase",
          xmllang: "xmlLang",
          "xml:lang": "xmlLang",
          xmlns: "xmlns",
          "xml:space": "xmlSpace",
          xmlnsxlink: "xmlnsXlink",
          "xmlns:xlink": "xmlnsXlink",
          xmlspace: "xmlSpace",
          y1: "y1",
          y2: "y2",
          y: "y",
          ychannelselector: "yChannelSelector",
          z: "z",
          zoomandpan: "zoomAndPan"
        };
        var validateProperty$1 = function() {
        };
        {
          var warnedProperties$1 = {};
          var EVENT_NAME_REGEX = /^on./;
          var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
          var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          validateProperty$1 = function(tagName, name, value, eventRegistry) {
            if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
              return true;
            }
            var lowerCasedName = name.toLowerCase();
            if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
              error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (eventRegistry != null) {
              var registrationNameDependencies = eventRegistry.registrationNameDependencies, possibleRegistrationNames = eventRegistry.possibleRegistrationNames;
              if (registrationNameDependencies.hasOwnProperty(name)) {
                return true;
              }
              var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
              if (registrationName != null) {
                error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (EVENT_NAME_REGEX.test(name)) {
                error("Unknown event handler property `%s`. It will be ignored.", name);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (EVENT_NAME_REGEX.test(name)) {
              if (INVALID_EVENT_NAME_REGEX.test(name)) {
                error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
              return true;
            }
            if (lowerCasedName === "innerhtml") {
              error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "aria") {
              error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
              error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "number" && isNaN(value)) {
              error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
              warnedProperties$1[name] = true;
              return true;
            }
            var propertyInfo = getPropertyInfo(name);
            var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
            if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              var standardName = possibleStandardNames[lowerCasedName];
              if (standardName !== name) {
                error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (!isReserved && name !== lowerCasedName) {
              error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              if (value) {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
              } else {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (isReserved) {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              warnedProperties$1[name] = true;
              return false;
            }
            if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
              error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
              warnedProperties$1[name] = true;
              return true;
            }
            return true;
          };
        }
        var warnUnknownProperties = function(type, props, eventRegistry) {
          {
            var unknownProps = [];
            for (var key in props) {
              var isValid = validateProperty$1(type, key, props[key], eventRegistry);
              if (!isValid) {
                unknownProps.push(key);
              }
            }
            var unknownPropString = unknownProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (unknownProps.length === 1) {
              error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            } else if (unknownProps.length > 1) {
              error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            }
          }
        };
        function validateProperties$2(type, props, eventRegistry) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnUnknownProperties(type, props, eventRegistry);
        }
        var warnValidStyle = function() {
        };
        {
          var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
          var msPattern = /^-ms-/;
          var hyphenPattern = /-(.)/g;
          var badStyleValueWithSemicolonPattern = /;\s*$/;
          var warnedStyleNames = {};
          var warnedStyleValues = {};
          var warnedForNaNValue = false;
          var warnedForInfinityValue = false;
          var camelize = function(string) {
            return string.replace(hyphenPattern, function(_2, character) {
              return character.toUpperCase();
            });
          };
          var warnHyphenatedStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error("Unsupported style property %s. Did you mean %s?", name, camelize(name.replace(msPattern, "ms-")));
          };
          var warnBadVendoredStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
          };
          var warnStyleValueWithSemicolon = function(name, value) {
            if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
              return;
            }
            warnedStyleValues[value] = true;
            error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
          };
          var warnStyleValueIsNaN = function(name, value) {
            if (warnedForNaNValue) {
              return;
            }
            warnedForNaNValue = true;
            error("`NaN` is an invalid value for the `%s` css style property.", name);
          };
          var warnStyleValueIsInfinity = function(name, value) {
            if (warnedForInfinityValue) {
              return;
            }
            warnedForInfinityValue = true;
            error("`Infinity` is an invalid value for the `%s` css style property.", name);
          };
          warnValidStyle = function(name, value) {
            if (name.indexOf("-") > -1) {
              warnHyphenatedStyleName(name);
            } else if (badVendoredStyleNamePattern.test(name)) {
              warnBadVendoredStyleName(name);
            } else if (badStyleValueWithSemicolonPattern.test(value)) {
              warnStyleValueWithSemicolon(name, value);
            }
            if (typeof value === "number") {
              if (isNaN(value)) {
                warnStyleValueIsNaN(name, value);
              } else if (!isFinite(value)) {
                warnStyleValueIsInfinity(name, value);
              }
            }
          };
        }
        var warnValidStyle$1 = warnValidStyle;
        var matchHtmlRegExp = /["'&<>]/;
        function escapeHtml(string) {
          {
            checkHtmlStringCoercion(string);
          }
          var str = "" + string;
          var match = matchHtmlRegExp.exec(str);
          if (!match) {
            return str;
          }
          var escape;
          var html = "";
          var index;
          var lastIndex = 0;
          for (index = match.index; index < str.length; index++) {
            switch (str.charCodeAt(index)) {
              case 34:
                escape = "&quot;";
                break;
              case 38:
                escape = "&amp;";
                break;
              case 39:
                escape = "&#x27;";
                break;
              case 60:
                escape = "&lt;";
                break;
              case 62:
                escape = "&gt;";
                break;
              default:
                continue;
            }
            if (lastIndex !== index) {
              html += str.substring(lastIndex, index);
            }
            lastIndex = index + 1;
            html += escape;
          }
          return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
        }
        function escapeTextForBrowser(text) {
          if (typeof text === "boolean" || typeof text === "number") {
            return "" + text;
          }
          return escapeHtml(text);
        }
        var uppercasePattern = /([A-Z])/g;
        var msPattern$1 = /^ms-/;
        function hyphenateStyleName(name) {
          return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern$1, "-ms-");
        }
        var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
        var didWarn = false;
        function sanitizeURL(url) {
          {
            if (!didWarn && isJavaScriptProtocol.test(url)) {
              didWarn = true;
              error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
            }
          }
        }
        var isArrayImpl = Array.isArray;
        function isArray(a) {
          return isArrayImpl(a);
        }
        var startInlineScript = stringToPrecomputedChunk("<script>");
        var endInlineScript = stringToPrecomputedChunk("<\/script>");
        var startScriptSrc = stringToPrecomputedChunk('<script src="');
        var startModuleSrc = stringToPrecomputedChunk('<script type="module" src="');
        var endAsyncScript = stringToPrecomputedChunk('" async=""><\/script>');
        function escapeBootstrapScriptContent(scriptText) {
          {
            checkHtmlStringCoercion(scriptText);
          }
          return ("" + scriptText).replace(scriptRegex, scriptReplacer);
        }
        var scriptRegex = /(<\/|<)(s)(cript)/gi;
        var scriptReplacer = function(match, prefix2, s, suffix) {
          return "" + prefix2 + (s === "s" ? "\\u0073" : "\\u0053") + suffix;
        };
        function createResponseState(identifierPrefix, nonce, bootstrapScriptContent, bootstrapScripts, bootstrapModules) {
          var idPrefix = identifierPrefix === void 0 ? "" : identifierPrefix;
          var inlineScriptWithNonce = nonce === void 0 ? startInlineScript : stringToPrecomputedChunk('<script nonce="' + escapeTextForBrowser(nonce) + '">');
          var bootstrapChunks = [];
          if (bootstrapScriptContent !== void 0) {
            bootstrapChunks.push(inlineScriptWithNonce, stringToChunk(escapeBootstrapScriptContent(bootstrapScriptContent)), endInlineScript);
          }
          if (bootstrapScripts !== void 0) {
            for (var i = 0; i < bootstrapScripts.length; i++) {
              bootstrapChunks.push(startScriptSrc, stringToChunk(escapeTextForBrowser(bootstrapScripts[i])), endAsyncScript);
            }
          }
          if (bootstrapModules !== void 0) {
            for (var _i = 0; _i < bootstrapModules.length; _i++) {
              bootstrapChunks.push(startModuleSrc, stringToChunk(escapeTextForBrowser(bootstrapModules[_i])), endAsyncScript);
            }
          }
          return {
            bootstrapChunks,
            startInlineScript: inlineScriptWithNonce,
            placeholderPrefix: stringToPrecomputedChunk(idPrefix + "P:"),
            segmentPrefix: stringToPrecomputedChunk(idPrefix + "S:"),
            boundaryPrefix: idPrefix + "B:",
            idPrefix,
            nextSuspenseID: 0,
            sentCompleteSegmentFunction: false,
            sentCompleteBoundaryFunction: false,
            sentClientRenderFunction: false
          };
        }
        var ROOT_HTML_MODE = 0;
        var HTML_MODE = 1;
        var SVG_MODE = 2;
        var MATHML_MODE = 3;
        var HTML_TABLE_MODE = 4;
        var HTML_TABLE_BODY_MODE = 5;
        var HTML_TABLE_ROW_MODE = 6;
        var HTML_COLGROUP_MODE = 7;
        function createFormatContext(insertionMode, selectedValue) {
          return {
            insertionMode,
            selectedValue
          };
        }
        function createRootFormatContext(namespaceURI) {
          var insertionMode = namespaceURI === "http://www.w3.org/2000/svg" ? SVG_MODE : namespaceURI === "http://www.w3.org/1998/Math/MathML" ? MATHML_MODE : ROOT_HTML_MODE;
          return createFormatContext(insertionMode, null);
        }
        function getChildFormatContext(parentContext, type, props) {
          switch (type) {
            case "select":
              return createFormatContext(HTML_MODE, props.value != null ? props.value : props.defaultValue);
            case "svg":
              return createFormatContext(SVG_MODE, null);
            case "math":
              return createFormatContext(MATHML_MODE, null);
            case "foreignObject":
              return createFormatContext(HTML_MODE, null);
            case "table":
              return createFormatContext(HTML_TABLE_MODE, null);
            case "thead":
            case "tbody":
            case "tfoot":
              return createFormatContext(HTML_TABLE_BODY_MODE, null);
            case "colgroup":
              return createFormatContext(HTML_COLGROUP_MODE, null);
            case "tr":
              return createFormatContext(HTML_TABLE_ROW_MODE, null);
          }
          if (parentContext.insertionMode >= HTML_TABLE_MODE) {
            return createFormatContext(HTML_MODE, null);
          }
          if (parentContext.insertionMode === ROOT_HTML_MODE) {
            return createFormatContext(HTML_MODE, null);
          }
          return parentContext;
        }
        var UNINITIALIZED_SUSPENSE_BOUNDARY_ID = null;
        function assignSuspenseBoundaryID(responseState) {
          var generatedID = responseState.nextSuspenseID++;
          return stringToPrecomputedChunk(responseState.boundaryPrefix + generatedID.toString(16));
        }
        function makeId(responseState, treeId, localId) {
          var idPrefix = responseState.idPrefix;
          var id = ":" + idPrefix + "R" + treeId;
          if (localId > 0) {
            id += "H" + localId.toString(32);
          }
          return id + ":";
        }
        function encodeHTMLTextNode(text) {
          return escapeTextForBrowser(text);
        }
        var textSeparator = stringToPrecomputedChunk("<!-- -->");
        function pushTextInstance(target, text, responseState, textEmbedded) {
          if (text === "") {
            return textEmbedded;
          }
          if (textEmbedded) {
            target.push(textSeparator);
          }
          target.push(stringToChunk(encodeHTMLTextNode(text)));
          return true;
        }
        function pushSegmentFinale(target, responseState, lastPushedText, textEmbedded) {
          if (lastPushedText && textEmbedded) {
            target.push(textSeparator);
          }
        }
        var styleNameCache = /* @__PURE__ */ new Map();
        function processStyleName(styleName) {
          var chunk = styleNameCache.get(styleName);
          if (chunk !== void 0) {
            return chunk;
          }
          var result = stringToPrecomputedChunk(escapeTextForBrowser(hyphenateStyleName(styleName)));
          styleNameCache.set(styleName, result);
          return result;
        }
        var styleAttributeStart = stringToPrecomputedChunk(' style="');
        var styleAssign = stringToPrecomputedChunk(":");
        var styleSeparator = stringToPrecomputedChunk(";");
        function pushStyle(target, responseState, style) {
          if (typeof style !== "object") {
            throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
          }
          var isFirst = true;
          for (var styleName in style) {
            if (!hasOwnProperty.call(style, styleName)) {
              continue;
            }
            var styleValue = style[styleName];
            if (styleValue == null || typeof styleValue === "boolean" || styleValue === "") {
              continue;
            }
            var nameChunk = void 0;
            var valueChunk = void 0;
            var isCustomProperty = styleName.indexOf("--") === 0;
            if (isCustomProperty) {
              nameChunk = stringToChunk(escapeTextForBrowser(styleName));
              {
                checkCSSPropertyStringCoercion(styleValue, styleName);
              }
              valueChunk = stringToChunk(escapeTextForBrowser(("" + styleValue).trim()));
            } else {
              {
                warnValidStyle$1(styleName, styleValue);
              }
              nameChunk = processStyleName(styleName);
              if (typeof styleValue === "number") {
                if (styleValue !== 0 && !hasOwnProperty.call(isUnitlessNumber, styleName)) {
                  valueChunk = stringToChunk(styleValue + "px");
                } else {
                  valueChunk = stringToChunk("" + styleValue);
                }
              } else {
                {
                  checkCSSPropertyStringCoercion(styleValue, styleName);
                }
                valueChunk = stringToChunk(escapeTextForBrowser(("" + styleValue).trim()));
              }
            }
            if (isFirst) {
              isFirst = false;
              target.push(styleAttributeStart, nameChunk, styleAssign, valueChunk);
            } else {
              target.push(styleSeparator, nameChunk, styleAssign, valueChunk);
            }
          }
          if (!isFirst) {
            target.push(attributeEnd);
          }
        }
        var attributeSeparator = stringToPrecomputedChunk(" ");
        var attributeAssign = stringToPrecomputedChunk('="');
        var attributeEnd = stringToPrecomputedChunk('"');
        var attributeEmptyString = stringToPrecomputedChunk('=""');
        function pushAttribute(target, responseState, name, value) {
          switch (name) {
            case "style": {
              pushStyle(target, responseState, value);
              return;
            }
            case "defaultValue":
            case "defaultChecked":
            case "innerHTML":
            case "suppressContentEditableWarning":
            case "suppressHydrationWarning":
              return;
          }
          if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
            return;
          }
          var propertyInfo = getPropertyInfo(name);
          if (propertyInfo !== null) {
            switch (typeof value) {
              case "function":
              case "symbol":
                return;
              case "boolean": {
                if (!propertyInfo.acceptsBooleans) {
                  return;
                }
              }
            }
            var attributeName = propertyInfo.attributeName;
            var attributeNameChunk = stringToChunk(attributeName);
            switch (propertyInfo.type) {
              case BOOLEAN:
                if (value) {
                  target.push(attributeSeparator, attributeNameChunk, attributeEmptyString);
                }
                return;
              case OVERLOADED_BOOLEAN:
                if (value === true) {
                  target.push(attributeSeparator, attributeNameChunk, attributeEmptyString);
                } else if (value === false)
                  ;
                else {
                  target.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
                }
                return;
              case NUMERIC:
                if (!isNaN(value)) {
                  target.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
                }
                break;
              case POSITIVE_NUMERIC:
                if (!isNaN(value) && value >= 1) {
                  target.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
                }
                break;
              default:
                if (propertyInfo.sanitizeURL) {
                  {
                    checkAttributeStringCoercion(value, attributeName);
                  }
                  value = "" + value;
                  sanitizeURL(value);
                }
                target.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
            }
          } else if (isAttributeNameSafe(name)) {
            switch (typeof value) {
              case "function":
              case "symbol":
                return;
              case "boolean": {
                var prefix2 = name.toLowerCase().slice(0, 5);
                if (prefix2 !== "data-" && prefix2 !== "aria-") {
                  return;
                }
              }
            }
            target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
          }
        }
        var endOfStartTag = stringToPrecomputedChunk(">");
        var endOfStartTagSelfClosing = stringToPrecomputedChunk("/>");
        function pushInnerHTML(target, innerHTML, children) {
          if (innerHTML != null) {
            if (children != null) {
              throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            }
            if (typeof innerHTML !== "object" || !("__html" in innerHTML)) {
              throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
            }
            var html = innerHTML.__html;
            if (html !== null && html !== void 0) {
              {
                checkHtmlStringCoercion(html);
              }
              target.push(stringToChunk("" + html));
            }
          }
        }
        var didWarnDefaultInputValue = false;
        var didWarnDefaultChecked = false;
        var didWarnDefaultSelectValue = false;
        var didWarnDefaultTextareaValue = false;
        var didWarnInvalidOptionChildren = false;
        var didWarnInvalidOptionInnerHTML = false;
        var didWarnSelectedSetOnOption = false;
        function checkSelectProp(props, propName) {
          {
            var value = props[propName];
            if (value != null) {
              var array = isArray(value);
              if (props.multiple && !array) {
                error("The `%s` prop supplied to <select> must be an array if `multiple` is true.", propName);
              } else if (!props.multiple && array) {
                error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.", propName);
              }
            }
          }
        }
        function pushStartSelect(target, props, responseState) {
          {
            checkControlledValueProps("select", props);
            checkSelectProp(props, "value");
            checkSelectProp(props, "defaultValue");
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultSelectValue) {
              error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
              didWarnDefaultSelectValue = true;
            }
          }
          target.push(startChunkForTag("select"));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "defaultValue":
                case "value":
                  break;
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          return children;
        }
        function flattenOptionChildren(children) {
          var content = "";
          React.Children.forEach(children, function(child) {
            if (child == null) {
              return;
            }
            content += child;
            {
              if (!didWarnInvalidOptionChildren && typeof child !== "string" && typeof child !== "number") {
                didWarnInvalidOptionChildren = true;
                error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
              }
            }
          });
          return content;
        }
        var selectedMarkerAttribute = stringToPrecomputedChunk(' selected=""');
        function pushStartOption(target, props, responseState, formatContext) {
          var selectedValue = formatContext.selectedValue;
          target.push(startChunkForTag("option"));
          var children = null;
          var value = null;
          var selected = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "selected":
                  selected = propValue;
                  {
                    if (!didWarnSelectedSetOnOption) {
                      error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                      didWarnSelectedSetOnOption = true;
                    }
                  }
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "value":
                  value = propValue;
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          if (selectedValue != null) {
            var stringValue;
            if (value !== null) {
              {
                checkAttributeStringCoercion(value, "value");
              }
              stringValue = "" + value;
            } else {
              {
                if (innerHTML !== null) {
                  if (!didWarnInvalidOptionInnerHTML) {
                    didWarnInvalidOptionInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              stringValue = flattenOptionChildren(children);
            }
            if (isArray(selectedValue)) {
              for (var i = 0; i < selectedValue.length; i++) {
                {
                  checkAttributeStringCoercion(selectedValue[i], "value");
                }
                var v = "" + selectedValue[i];
                if (v === stringValue) {
                  target.push(selectedMarkerAttribute);
                  break;
                }
              }
            } else {
              {
                checkAttributeStringCoercion(selectedValue, "select.value");
              }
              if ("" + selectedValue === stringValue) {
                target.push(selectedMarkerAttribute);
              }
            }
          } else if (selected) {
            target.push(selectedMarkerAttribute);
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          return children;
        }
        function pushInput(target, props, responseState) {
          {
            checkControlledValueProps("input", props);
            if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnDefaultChecked) {
              error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type);
              didWarnDefaultChecked = true;
            }
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultInputValue) {
              error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type);
              didWarnDefaultInputValue = true;
            }
          }
          target.push(startChunkForTag("input"));
          var value = null;
          var defaultValue = null;
          var checked = null;
          var defaultChecked = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error("input is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                case "defaultChecked":
                  defaultChecked = propValue;
                  break;
                case "defaultValue":
                  defaultValue = propValue;
                  break;
                case "checked":
                  checked = propValue;
                  break;
                case "value":
                  value = propValue;
                  break;
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          if (checked !== null) {
            pushAttribute(target, responseState, "checked", checked);
          } else if (defaultChecked !== null) {
            pushAttribute(target, responseState, "checked", defaultChecked);
          }
          if (value !== null) {
            pushAttribute(target, responseState, "value", value);
          } else if (defaultValue !== null) {
            pushAttribute(target, responseState, "value", defaultValue);
          }
          target.push(endOfStartTagSelfClosing);
          return null;
        }
        function pushStartTextArea(target, props, responseState) {
          {
            checkControlledValueProps("textarea", props);
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultTextareaValue) {
              error("Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components");
              didWarnDefaultTextareaValue = true;
            }
          }
          target.push(startChunkForTag("textarea"));
          var value = null;
          var defaultValue = null;
          var children = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "value":
                  value = propValue;
                  break;
                case "defaultValue":
                  defaultValue = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          if (value === null && defaultValue !== null) {
            value = defaultValue;
          }
          target.push(endOfStartTag);
          if (children != null) {
            {
              error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
            }
            if (value != null) {
              throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
            }
            if (isArray(children)) {
              if (children.length > 1) {
                throw new Error("<textarea> can only have at most one child.");
              }
              {
                checkHtmlStringCoercion(children[0]);
              }
              value = "" + children[0];
            }
            {
              checkHtmlStringCoercion(children);
            }
            value = "" + children;
          }
          if (typeof value === "string" && value[0] === "\n") {
            target.push(leadingNewline);
          }
          if (value !== null) {
            {
              checkAttributeStringCoercion(value, "value");
            }
            target.push(stringToChunk(encodeHTMLTextNode("" + value)));
          }
          return null;
        }
        function pushSelfClosing(target, props, tag, responseState) {
          target.push(startChunkForTag(tag));
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error(tag + " is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTagSelfClosing);
          return null;
        }
        function pushStartMenuItem(target, props, responseState) {
          target.push(startChunkForTag("menuitem"));
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error("menuitems cannot have `children` nor `dangerouslySetInnerHTML`.");
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          return null;
        }
        function pushStartTitle(target, props, responseState) {
          target.push(startChunkForTag("title"));
          var children = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  throw new Error("`dangerouslySetInnerHTML` does not make sense on <title>.");
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          {
            var child = Array.isArray(children) && children.length < 2 ? children[0] || null : children;
            if (Array.isArray(children) && children.length > 1) {
              error("A title element received an array with more than 1 element as children. In browsers title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering");
            } else if (child != null && child.$$typeof != null) {
              error("A title element received a React element for children. In the browser title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering");
            } else if (child != null && typeof child !== "string" && typeof child !== "number") {
              error("A title element received a value that was not a string or number for children. In the browser title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering");
            }
          }
          return children;
        }
        function pushStartGenericElement(target, props, tag, responseState) {
          target.push(startChunkForTag(tag));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          if (typeof children === "string") {
            target.push(stringToChunk(encodeHTMLTextNode(children)));
            return null;
          }
          return children;
        }
        function pushStartCustomElement(target, props, tag, responseState) {
          target.push(startChunkForTag(tag));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "style":
                  pushStyle(target, responseState, propValue);
                  break;
                case "suppressContentEditableWarning":
                case "suppressHydrationWarning":
                  break;
                default:
                  if (isAttributeNameSafe(propKey) && typeof propValue !== "function" && typeof propValue !== "symbol") {
                    target.push(attributeSeparator, stringToChunk(propKey), attributeAssign, stringToChunk(escapeTextForBrowser(propValue)), attributeEnd);
                  }
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          return children;
        }
        var leadingNewline = stringToPrecomputedChunk("\n");
        function pushStartPreformattedElement(target, props, tag, responseState) {
          target.push(startChunkForTag(tag));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          if (innerHTML != null) {
            if (children != null) {
              throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            }
            if (typeof innerHTML !== "object" || !("__html" in innerHTML)) {
              throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
            }
            var html = innerHTML.__html;
            if (html !== null && html !== void 0) {
              if (typeof html === "string" && html.length > 0 && html[0] === "\n") {
                target.push(leadingNewline, stringToChunk(html));
              } else {
                {
                  checkHtmlStringCoercion(html);
                }
                target.push(stringToChunk("" + html));
              }
            }
          }
          if (typeof children === "string" && children[0] === "\n") {
            target.push(leadingNewline);
          }
          return children;
        }
        var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/;
        var validatedTagCache = /* @__PURE__ */ new Map();
        function startChunkForTag(tag) {
          var tagStartChunk = validatedTagCache.get(tag);
          if (tagStartChunk === void 0) {
            if (!VALID_TAG_REGEX.test(tag)) {
              throw new Error("Invalid tag: " + tag);
            }
            tagStartChunk = stringToPrecomputedChunk("<" + tag);
            validatedTagCache.set(tag, tagStartChunk);
          }
          return tagStartChunk;
        }
        var DOCTYPE = stringToPrecomputedChunk("<!DOCTYPE html>");
        function pushStartInstance(target, type, props, responseState, formatContext) {
          {
            validateProperties(type, props);
            validateProperties$1(type, props);
            validateProperties$2(type, props, null);
            if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
              error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
            }
            if (formatContext.insertionMode !== SVG_MODE && formatContext.insertionMode !== MATHML_MODE) {
              if (type.indexOf("-") === -1 && typeof props.is !== "string" && type.toLowerCase() !== type) {
                error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
              }
            }
          }
          switch (type) {
            case "select":
              return pushStartSelect(target, props, responseState);
            case "option":
              return pushStartOption(target, props, responseState, formatContext);
            case "textarea":
              return pushStartTextArea(target, props, responseState);
            case "input":
              return pushInput(target, props, responseState);
            case "menuitem":
              return pushStartMenuItem(target, props, responseState);
            case "title":
              return pushStartTitle(target, props, responseState);
            case "listing":
            case "pre": {
              return pushStartPreformattedElement(target, props, type, responseState);
            }
            case "area":
            case "base":
            case "br":
            case "col":
            case "embed":
            case "hr":
            case "img":
            case "keygen":
            case "link":
            case "meta":
            case "param":
            case "source":
            case "track":
            case "wbr": {
              return pushSelfClosing(target, props, type, responseState);
            }
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph": {
              return pushStartGenericElement(target, props, type, responseState);
            }
            case "html": {
              if (formatContext.insertionMode === ROOT_HTML_MODE) {
                target.push(DOCTYPE);
              }
              return pushStartGenericElement(target, props, type, responseState);
            }
            default: {
              if (type.indexOf("-") === -1 && typeof props.is !== "string") {
                return pushStartGenericElement(target, props, type, responseState);
              } else {
                return pushStartCustomElement(target, props, type, responseState);
              }
            }
          }
        }
        var endTag1 = stringToPrecomputedChunk("</");
        var endTag2 = stringToPrecomputedChunk(">");
        function pushEndInstance(target, type, props) {
          switch (type) {
            case "area":
            case "base":
            case "br":
            case "col":
            case "embed":
            case "hr":
            case "img":
            case "input":
            case "keygen":
            case "link":
            case "meta":
            case "param":
            case "source":
            case "track":
            case "wbr": {
              break;
            }
            default: {
              target.push(endTag1, stringToChunk(type), endTag2);
            }
          }
        }
        function writeCompletedRoot(destination, responseState) {
          var bootstrapChunks = responseState.bootstrapChunks;
          var i = 0;
          for (; i < bootstrapChunks.length - 1; i++) {
            writeChunk(destination, bootstrapChunks[i]);
          }
          if (i < bootstrapChunks.length) {
            return writeChunkAndReturn(destination, bootstrapChunks[i]);
          }
          return true;
        }
        var placeholder1 = stringToPrecomputedChunk('<template id="');
        var placeholder2 = stringToPrecomputedChunk('"></template>');
        function writePlaceholder(destination, responseState, id) {
          writeChunk(destination, placeholder1);
          writeChunk(destination, responseState.placeholderPrefix);
          var formattedID = stringToChunk(id.toString(16));
          writeChunk(destination, formattedID);
          return writeChunkAndReturn(destination, placeholder2);
        }
        var startCompletedSuspenseBoundary = stringToPrecomputedChunk("<!--$-->");
        var startPendingSuspenseBoundary1 = stringToPrecomputedChunk('<!--$?--><template id="');
        var startPendingSuspenseBoundary2 = stringToPrecomputedChunk('"></template>');
        var startClientRenderedSuspenseBoundary = stringToPrecomputedChunk("<!--$!-->");
        var endSuspenseBoundary = stringToPrecomputedChunk("<!--/$-->");
        var clientRenderedSuspenseBoundaryError1 = stringToPrecomputedChunk("<template");
        var clientRenderedSuspenseBoundaryErrorAttrInterstitial = stringToPrecomputedChunk('"');
        var clientRenderedSuspenseBoundaryError1A = stringToPrecomputedChunk(' data-dgst="');
        var clientRenderedSuspenseBoundaryError1B = stringToPrecomputedChunk(' data-msg="');
        var clientRenderedSuspenseBoundaryError1C = stringToPrecomputedChunk(' data-stck="');
        var clientRenderedSuspenseBoundaryError2 = stringToPrecomputedChunk("></template>");
        function writeStartCompletedSuspenseBoundary(destination, responseState) {
          return writeChunkAndReturn(destination, startCompletedSuspenseBoundary);
        }
        function writeStartPendingSuspenseBoundary(destination, responseState, id) {
          writeChunk(destination, startPendingSuspenseBoundary1);
          if (id === null) {
            throw new Error("An ID must have been assigned before we can complete the boundary.");
          }
          writeChunk(destination, id);
          return writeChunkAndReturn(destination, startPendingSuspenseBoundary2);
        }
        function writeStartClientRenderedSuspenseBoundary(destination, responseState, errorDigest, errorMesssage, errorComponentStack) {
          var result;
          result = writeChunkAndReturn(destination, startClientRenderedSuspenseBoundary);
          writeChunk(destination, clientRenderedSuspenseBoundaryError1);
          if (errorDigest) {
            writeChunk(destination, clientRenderedSuspenseBoundaryError1A);
            writeChunk(destination, stringToChunk(escapeTextForBrowser(errorDigest)));
            writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
          }
          {
            if (errorMesssage) {
              writeChunk(destination, clientRenderedSuspenseBoundaryError1B);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorMesssage)));
              writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
            }
            if (errorComponentStack) {
              writeChunk(destination, clientRenderedSuspenseBoundaryError1C);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorComponentStack)));
              writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
            }
          }
          result = writeChunkAndReturn(destination, clientRenderedSuspenseBoundaryError2);
          return result;
        }
        function writeEndCompletedSuspenseBoundary(destination, responseState) {
          return writeChunkAndReturn(destination, endSuspenseBoundary);
        }
        function writeEndPendingSuspenseBoundary(destination, responseState) {
          return writeChunkAndReturn(destination, endSuspenseBoundary);
        }
        function writeEndClientRenderedSuspenseBoundary(destination, responseState) {
          return writeChunkAndReturn(destination, endSuspenseBoundary);
        }
        var startSegmentHTML = stringToPrecomputedChunk('<div hidden id="');
        var startSegmentHTML2 = stringToPrecomputedChunk('">');
        var endSegmentHTML = stringToPrecomputedChunk("</div>");
        var startSegmentSVG = stringToPrecomputedChunk('<svg aria-hidden="true" style="display:none" id="');
        var startSegmentSVG2 = stringToPrecomputedChunk('">');
        var endSegmentSVG = stringToPrecomputedChunk("</svg>");
        var startSegmentMathML = stringToPrecomputedChunk('<math aria-hidden="true" style="display:none" id="');
        var startSegmentMathML2 = stringToPrecomputedChunk('">');
        var endSegmentMathML = stringToPrecomputedChunk("</math>");
        var startSegmentTable = stringToPrecomputedChunk('<table hidden id="');
        var startSegmentTable2 = stringToPrecomputedChunk('">');
        var endSegmentTable = stringToPrecomputedChunk("</table>");
        var startSegmentTableBody = stringToPrecomputedChunk('<table hidden><tbody id="');
        var startSegmentTableBody2 = stringToPrecomputedChunk('">');
        var endSegmentTableBody = stringToPrecomputedChunk("</tbody></table>");
        var startSegmentTableRow = stringToPrecomputedChunk('<table hidden><tr id="');
        var startSegmentTableRow2 = stringToPrecomputedChunk('">');
        var endSegmentTableRow = stringToPrecomputedChunk("</tr></table>");
        var startSegmentColGroup = stringToPrecomputedChunk('<table hidden><colgroup id="');
        var startSegmentColGroup2 = stringToPrecomputedChunk('">');
        var endSegmentColGroup = stringToPrecomputedChunk("</colgroup></table>");
        function writeStartSegment(destination, responseState, formatContext, id) {
          switch (formatContext.insertionMode) {
            case ROOT_HTML_MODE:
            case HTML_MODE: {
              writeChunk(destination, startSegmentHTML);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentHTML2);
            }
            case SVG_MODE: {
              writeChunk(destination, startSegmentSVG);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentSVG2);
            }
            case MATHML_MODE: {
              writeChunk(destination, startSegmentMathML);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentMathML2);
            }
            case HTML_TABLE_MODE: {
              writeChunk(destination, startSegmentTable);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentTable2);
            }
            case HTML_TABLE_BODY_MODE: {
              writeChunk(destination, startSegmentTableBody);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentTableBody2);
            }
            case HTML_TABLE_ROW_MODE: {
              writeChunk(destination, startSegmentTableRow);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentTableRow2);
            }
            case HTML_COLGROUP_MODE: {
              writeChunk(destination, startSegmentColGroup);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentColGroup2);
            }
            default: {
              throw new Error("Unknown insertion mode. This is a bug in React.");
            }
          }
        }
        function writeEndSegment(destination, formatContext) {
          switch (formatContext.insertionMode) {
            case ROOT_HTML_MODE:
            case HTML_MODE: {
              return writeChunkAndReturn(destination, endSegmentHTML);
            }
            case SVG_MODE: {
              return writeChunkAndReturn(destination, endSegmentSVG);
            }
            case MATHML_MODE: {
              return writeChunkAndReturn(destination, endSegmentMathML);
            }
            case HTML_TABLE_MODE: {
              return writeChunkAndReturn(destination, endSegmentTable);
            }
            case HTML_TABLE_BODY_MODE: {
              return writeChunkAndReturn(destination, endSegmentTableBody);
            }
            case HTML_TABLE_ROW_MODE: {
              return writeChunkAndReturn(destination, endSegmentTableRow);
            }
            case HTML_COLGROUP_MODE: {
              return writeChunkAndReturn(destination, endSegmentColGroup);
            }
            default: {
              throw new Error("Unknown insertion mode. This is a bug in React.");
            }
          }
        }
        var completeSegmentFunction = "function $RS(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)}";
        var completeBoundaryFunction = 'function $RC(a,b){a=document.getElementById(a);b=document.getElementById(b);b.parentNode.removeChild(b);if(a){a=a.previousSibling;var f=a.parentNode,c=a.nextSibling,e=0;do{if(c&&8===c.nodeType){var d=c.data;if("/$"===d)if(0===e)break;else e--;else"$"!==d&&"$?"!==d&&"$!"!==d||e++}d=c.nextSibling;f.removeChild(c);c=d}while(c);for(;b.firstChild;)f.insertBefore(b.firstChild,c);a.data="$";a._reactRetry&&a._reactRetry()}}';
        var clientRenderFunction = 'function $RX(b,c,d,e){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data="$!",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),b._reactRetry&&b._reactRetry())}';
        var completeSegmentScript1Full = stringToPrecomputedChunk(completeSegmentFunction + ';$RS("');
        var completeSegmentScript1Partial = stringToPrecomputedChunk('$RS("');
        var completeSegmentScript2 = stringToPrecomputedChunk('","');
        var completeSegmentScript3 = stringToPrecomputedChunk('")<\/script>');
        function writeCompletedSegmentInstruction(destination, responseState, contentSegmentID) {
          writeChunk(destination, responseState.startInlineScript);
          if (!responseState.sentCompleteSegmentFunction) {
            responseState.sentCompleteSegmentFunction = true;
            writeChunk(destination, completeSegmentScript1Full);
          } else {
            writeChunk(destination, completeSegmentScript1Partial);
          }
          writeChunk(destination, responseState.segmentPrefix);
          var formattedID = stringToChunk(contentSegmentID.toString(16));
          writeChunk(destination, formattedID);
          writeChunk(destination, completeSegmentScript2);
          writeChunk(destination, responseState.placeholderPrefix);
          writeChunk(destination, formattedID);
          return writeChunkAndReturn(destination, completeSegmentScript3);
        }
        var completeBoundaryScript1Full = stringToPrecomputedChunk(completeBoundaryFunction + ';$RC("');
        var completeBoundaryScript1Partial = stringToPrecomputedChunk('$RC("');
        var completeBoundaryScript2 = stringToPrecomputedChunk('","');
        var completeBoundaryScript3 = stringToPrecomputedChunk('")<\/script>');
        function writeCompletedBoundaryInstruction(destination, responseState, boundaryID, contentSegmentID) {
          writeChunk(destination, responseState.startInlineScript);
          if (!responseState.sentCompleteBoundaryFunction) {
            responseState.sentCompleteBoundaryFunction = true;
            writeChunk(destination, completeBoundaryScript1Full);
          } else {
            writeChunk(destination, completeBoundaryScript1Partial);
          }
          if (boundaryID === null) {
            throw new Error("An ID must have been assigned before we can complete the boundary.");
          }
          var formattedContentID = stringToChunk(contentSegmentID.toString(16));
          writeChunk(destination, boundaryID);
          writeChunk(destination, completeBoundaryScript2);
          writeChunk(destination, responseState.segmentPrefix);
          writeChunk(destination, formattedContentID);
          return writeChunkAndReturn(destination, completeBoundaryScript3);
        }
        var clientRenderScript1Full = stringToPrecomputedChunk(clientRenderFunction + ';$RX("');
        var clientRenderScript1Partial = stringToPrecomputedChunk('$RX("');
        var clientRenderScript1A = stringToPrecomputedChunk('"');
        var clientRenderScript2 = stringToPrecomputedChunk(")<\/script>");
        var clientRenderErrorScriptArgInterstitial = stringToPrecomputedChunk(",");
        function writeClientRenderBoundaryInstruction(destination, responseState, boundaryID, errorDigest, errorMessage, errorComponentStack) {
          writeChunk(destination, responseState.startInlineScript);
          if (!responseState.sentClientRenderFunction) {
            responseState.sentClientRenderFunction = true;
            writeChunk(destination, clientRenderScript1Full);
          } else {
            writeChunk(destination, clientRenderScript1Partial);
          }
          if (boundaryID === null) {
            throw new Error("An ID must have been assigned before we can complete the boundary.");
          }
          writeChunk(destination, boundaryID);
          writeChunk(destination, clientRenderScript1A);
          if (errorDigest || errorMessage || errorComponentStack) {
            writeChunk(destination, clientRenderErrorScriptArgInterstitial);
            writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorDigest || "")));
          }
          if (errorMessage || errorComponentStack) {
            writeChunk(destination, clientRenderErrorScriptArgInterstitial);
            writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorMessage || "")));
          }
          if (errorComponentStack) {
            writeChunk(destination, clientRenderErrorScriptArgInterstitial);
            writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorComponentStack)));
          }
          return writeChunkAndReturn(destination, clientRenderScript2);
        }
        var regexForJSStringsInScripts = /[<\u2028\u2029]/g;
        function escapeJSStringsForInstructionScripts(input) {
          var escaped = JSON.stringify(input);
          return escaped.replace(regexForJSStringsInScripts, function(match) {
            switch (match) {
              case "<":
                return "\\u003c";
              case "\u2028":
                return "\\u2028";
              case "\u2029":
                return "\\u2029";
              default: {
                throw new Error("escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React");
              }
            }
          });
        }
        var assign = Object.assign;
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_SCOPE_TYPE = Symbol.for("react.scope");
        var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
        var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
        var REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = Symbol.for("react.default_value");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c = controlLines.length - 1;
              while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                c--;
              }
              for (; s >= 1 && c >= 0; s--, c--) {
                if (sampleLines[s] !== controlLines[c]) {
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--;
                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeClassComponentFrame(ctor, source, ownerFn) {
          {
            return describeNativeComponentFrame(ctor, true);
          }
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component2) {
          var prototype = Component2.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values2, location, componentName, element) {
          {
            var has = Function.call.bind(hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        var warnedAboutMissingGetChildContext;
        {
          warnedAboutMissingGetChildContext = {};
        }
        var emptyContextObject = {};
        {
          Object.freeze(emptyContextObject);
        }
        function getMaskedContext(type, unmaskedContext) {
          {
            var contextTypes = type.contextTypes;
            if (!contextTypes) {
              return emptyContextObject;
            }
            var context = {};
            for (var key in contextTypes) {
              context[key] = unmaskedContext[key];
            }
            {
              var name = getComponentNameFromType(type) || "Unknown";
              checkPropTypes(contextTypes, context, "context", name);
            }
            return context;
          }
        }
        function processChildContext(instance, type, parentContext, childContextTypes) {
          {
            if (typeof instance.getChildContext !== "function") {
              {
                var componentName = getComponentNameFromType(type) || "Unknown";
                if (!warnedAboutMissingGetChildContext[componentName]) {
                  warnedAboutMissingGetChildContext[componentName] = true;
                  error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                }
              }
              return parentContext;
            }
            var childContext = instance.getChildContext();
            for (var contextKey in childContext) {
              if (!(contextKey in childContextTypes)) {
                throw new Error((getComponentNameFromType(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
              }
            }
            {
              var name = getComponentNameFromType(type) || "Unknown";
              checkPropTypes(childContextTypes, childContext, "child context", name);
            }
            return assign({}, parentContext, childContext);
          }
        }
        var rendererSigil;
        {
          rendererSigil = {};
        }
        var rootContextSnapshot = null;
        var currentActiveSnapshot = null;
        function popNode(prev) {
          {
            prev.context._currentValue = prev.parentValue;
          }
        }
        function pushNode(next) {
          {
            next.context._currentValue = next.value;
          }
        }
        function popToNearestCommonAncestor(prev, next) {
          if (prev === next)
            ;
          else {
            popNode(prev);
            var parentPrev = prev.parent;
            var parentNext = next.parent;
            if (parentPrev === null) {
              if (parentNext !== null) {
                throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
              }
            } else {
              if (parentNext === null) {
                throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
              }
              popToNearestCommonAncestor(parentPrev, parentNext);
            }
            pushNode(next);
          }
        }
        function popAllPrevious(prev) {
          popNode(prev);
          var parentPrev = prev.parent;
          if (parentPrev !== null) {
            popAllPrevious(parentPrev);
          }
        }
        function pushAllNext(next) {
          var parentNext = next.parent;
          if (parentNext !== null) {
            pushAllNext(parentNext);
          }
          pushNode(next);
        }
        function popPreviousToCommonLevel(prev, next) {
          popNode(prev);
          var parentPrev = prev.parent;
          if (parentPrev === null) {
            throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
          }
          if (parentPrev.depth === next.depth) {
            popToNearestCommonAncestor(parentPrev, next);
          } else {
            popPreviousToCommonLevel(parentPrev, next);
          }
        }
        function popNextToCommonLevel(prev, next) {
          var parentNext = next.parent;
          if (parentNext === null) {
            throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
          }
          if (prev.depth === parentNext.depth) {
            popToNearestCommonAncestor(prev, parentNext);
          } else {
            popNextToCommonLevel(prev, parentNext);
          }
          pushNode(next);
        }
        function switchContext(newSnapshot) {
          var prev = currentActiveSnapshot;
          var next = newSnapshot;
          if (prev !== next) {
            if (prev === null) {
              pushAllNext(next);
            } else if (next === null) {
              popAllPrevious(prev);
            } else if (prev.depth === next.depth) {
              popToNearestCommonAncestor(prev, next);
            } else if (prev.depth > next.depth) {
              popPreviousToCommonLevel(prev, next);
            } else {
              popNextToCommonLevel(prev, next);
            }
            currentActiveSnapshot = next;
          }
        }
        function pushProvider(context, nextValue) {
          var prevValue;
          {
            prevValue = context._currentValue;
            context._currentValue = nextValue;
            {
              if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer = rendererSigil;
            }
          }
          var prevNode = currentActiveSnapshot;
          var newNode = {
            parent: prevNode,
            depth: prevNode === null ? 0 : prevNode.depth + 1,
            context,
            parentValue: prevValue,
            value: nextValue
          };
          currentActiveSnapshot = newNode;
          return newNode;
        }
        function popProvider(context) {
          var prevSnapshot = currentActiveSnapshot;
          if (prevSnapshot === null) {
            throw new Error("Tried to pop a Context at the root of the app. This is a bug in React.");
          }
          {
            if (prevSnapshot.context !== context) {
              error("The parent context is not the expected context. This is probably a bug in React.");
            }
          }
          {
            var value = prevSnapshot.parentValue;
            if (value === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED) {
              prevSnapshot.context._currentValue = prevSnapshot.context._defaultValue;
            } else {
              prevSnapshot.context._currentValue = value;
            }
            {
              if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer = rendererSigil;
            }
          }
          return currentActiveSnapshot = prevSnapshot.parent;
        }
        function getActiveContext() {
          return currentActiveSnapshot;
        }
        function readContext(context) {
          var value = context._currentValue;
          return value;
        }
        function get2(key) {
          return key._reactInternals;
        }
        function set2(key, value) {
          key._reactInternals = value;
        }
        var didWarnAboutNoopUpdateForComponent = {};
        var didWarnAboutDeprecatedWillMount = {};
        var didWarnAboutUninitializedState;
        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
        var didWarnAboutLegacyLifecyclesAndDerivedState;
        var didWarnAboutUndefinedDerivedState;
        var warnOnUndefinedDerivedState;
        var warnOnInvalidCallback;
        var didWarnAboutDirectlyAssigningPropsToState;
        var didWarnAboutContextTypeAndContextTypes;
        var didWarnAboutInvalidateContextType;
        {
          didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
          didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
          didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
          didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
          var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
          warnOnInvalidCallback = function(callback, callerName) {
            if (callback === null || typeof callback === "function") {
              return;
            }
            var key = callerName + "_" + callback;
            if (!didWarnOnInvalidCallback.has(key)) {
              didWarnOnInvalidCallback.add(key);
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          };
          warnOnUndefinedDerivedState = function(type, partialState) {
            if (partialState === void 0) {
              var componentName = getComponentNameFromType(type) || "Component";
              if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
              }
            }
          };
        }
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && getComponentNameFromType(_constructor) || "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnAboutNoopUpdateForComponent[warningKey]) {
              return;
            }
            error("%s(...): Can only update a mounting component. This usually means you called %s() outside componentWillMount() on the server. This is a no-op.\n\nPlease check the code for the %s component.", callerName, callerName, componentName);
            didWarnAboutNoopUpdateForComponent[warningKey] = true;
          }
        }
        var classComponentUpdater = {
          isMounted: function(inst) {
            return false;
          },
          enqueueSetState: function(inst, payload, callback) {
            var internals = get2(inst);
            if (internals.queue === null) {
              warnNoop(inst, "setState");
            } else {
              internals.queue.push(payload);
              {
                if (callback !== void 0 && callback !== null) {
                  warnOnInvalidCallback(callback, "setState");
                }
              }
            }
          },
          enqueueReplaceState: function(inst, payload, callback) {
            var internals = get2(inst);
            internals.replace = true;
            internals.queue = [payload];
            {
              if (callback !== void 0 && callback !== null) {
                warnOnInvalidCallback(callback, "setState");
              }
            }
          },
          enqueueForceUpdate: function(inst, callback) {
            var internals = get2(inst);
            if (internals.queue === null) {
              warnNoop(inst, "forceUpdate");
            } else {
              {
                if (callback !== void 0 && callback !== null) {
                  warnOnInvalidCallback(callback, "setState");
                }
              }
            }
          }
        };
        function applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, prevState, nextProps) {
          var partialState = getDerivedStateFromProps(nextProps, prevState);
          {
            warnOnUndefinedDerivedState(ctor, partialState);
          }
          var newState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
          return newState;
        }
        function constructClassInstance(ctor, props, maskedLegacyContext) {
          var context = emptyContextObject;
          var contextType = ctor.contextType;
          {
            if ("contextType" in ctor) {
              var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
              if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = "";
                if (contextType === void 0) {
                  addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                } else if (typeof contextType !== "object") {
                  addendum = " However, it is set to a " + typeof contextType + ".";
                } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                  addendum = " Did you accidentally pass the Context.Provider instead?";
                } else if (contextType._context !== void 0) {
                  addendum = " Did you accidentally pass the Context.Consumer instead?";
                } else {
                  addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                }
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
              }
            }
          }
          if (typeof contextType === "object" && contextType !== null) {
            context = readContext(contextType);
          } else {
            context = maskedLegacyContext;
          }
          var instance = new ctor(props, context);
          {
            if (typeof ctor.getDerivedStateFromProps === "function" && (instance.state === null || instance.state === void 0)) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
              }
            }
            if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
              var foundWillMountName = null;
              var foundWillReceivePropsName = null;
              var foundWillUpdateName = null;
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                foundWillMountName = "componentWillMount";
              } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                foundWillMountName = "UNSAFE_componentWillMount";
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                foundWillReceivePropsName = "componentWillReceiveProps";
              } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                foundWillUpdateName = "componentWillUpdate";
              } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                foundWillUpdateName = "UNSAFE_componentWillUpdate";
              }
              if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentNameFromType(ctor) || "Component";
                var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                  didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                  error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                }
              }
            }
          }
          return instance;
        }
        function checkClassInstance(instance, ctor, newProps) {
          {
            var name = getComponentNameFromType(ctor) || "Component";
            var renderPresent = instance.render;
            if (!renderPresent) {
              if (ctor.prototype && typeof ctor.prototype.render === "function") {
                error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
              } else {
                error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
              }
            }
            if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
              error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
            }
            if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
            }
            if (instance.propTypes) {
              error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
            }
            if (instance.contextType) {
              error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
            }
            {
              if (instance.contextTypes) {
                error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
              }
              if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                didWarnAboutContextTypeAndContextTypes.add(ctor);
                error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
              }
            }
            if (typeof instance.componentShouldUpdate === "function") {
              error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
              error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
            }
            if (typeof instance.componentDidUnmount === "function") {
              error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
            }
            if (typeof instance.componentDidReceiveProps === "function") {
              error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
            }
            if (typeof instance.componentWillRecieveProps === "function") {
              error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
            }
            if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
              error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
            }
            var hasMutatedProps = instance.props !== newProps;
            if (instance.props !== void 0 && hasMutatedProps) {
              error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
            }
            if (instance.defaultProps) {
              error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
              error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
            }
            if (typeof instance.getDerivedStateFromProps === "function") {
              error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof instance.getDerivedStateFromError === "function") {
              error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof ctor.getSnapshotBeforeUpdate === "function") {
              error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
            }
            var _state = instance.state;
            if (_state && (typeof _state !== "object" || isArray(_state))) {
              error("%s.state: must be set to an object or null", name);
            }
            if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
              error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
            }
          }
        }
        function callComponentWillMount(type, instance) {
          var oldState = instance.state;
          if (typeof instance.componentWillMount === "function") {
            {
              if (instance.componentWillMount.__suppressDeprecationWarning !== true) {
                var componentName = getComponentNameFromType(type) || "Unknown";
                if (!didWarnAboutDeprecatedWillMount[componentName]) {
                  warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code from componentWillMount to componentDidMount (preferred in most cases) or the constructor.\n\nPlease update the following components: %s", componentName);
                  didWarnAboutDeprecatedWillMount[componentName] = true;
                }
              }
            }
            instance.componentWillMount();
          }
          if (typeof instance.UNSAFE_componentWillMount === "function") {
            instance.UNSAFE_componentWillMount();
          }
          if (oldState !== instance.state) {
            {
              error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromType(type) || "Component");
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function processUpdateQueue(internalInstance, inst, props, maskedLegacyContext) {
          if (internalInstance.queue !== null && internalInstance.queue.length > 0) {
            var oldQueue = internalInstance.queue;
            var oldReplace = internalInstance.replace;
            internalInstance.queue = null;
            internalInstance.replace = false;
            if (oldReplace && oldQueue.length === 1) {
              inst.state = oldQueue[0];
            } else {
              var nextState = oldReplace ? oldQueue[0] : inst.state;
              var dontMutate = true;
              for (var i = oldReplace ? 1 : 0; i < oldQueue.length; i++) {
                var partial = oldQueue[i];
                var partialState = typeof partial === "function" ? partial.call(inst, nextState, props, maskedLegacyContext) : partial;
                if (partialState != null) {
                  if (dontMutate) {
                    dontMutate = false;
                    nextState = assign({}, nextState, partialState);
                  } else {
                    assign(nextState, partialState);
                  }
                }
              }
              inst.state = nextState;
            }
          } else {
            internalInstance.queue = null;
          }
        }
        function mountClassInstance(instance, ctor, newProps, maskedLegacyContext) {
          {
            checkClassInstance(instance, ctor, newProps);
          }
          var initialState = instance.state !== void 0 ? instance.state : null;
          instance.updater = classComponentUpdater;
          instance.props = newProps;
          instance.state = initialState;
          var internalInstance = {
            queue: [],
            replace: false
          };
          set2(instance, internalInstance);
          var contextType = ctor.contextType;
          if (typeof contextType === "object" && contextType !== null) {
            instance.context = readContext(contextType);
          } else {
            instance.context = maskedLegacyContext;
          }
          {
            if (instance.state === newProps) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
              }
            }
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          if (typeof getDerivedStateFromProps === "function") {
            instance.state = applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, initialState, newProps);
          }
          if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            callComponentWillMount(ctor, instance);
            processUpdateQueue(internalInstance, instance, newProps, maskedLegacyContext);
          }
        }
        var emptyTreeContext = {
          id: 1,
          overflow: ""
        };
        function getTreeId(context) {
          var overflow = context.overflow;
          var idWithLeadingBit = context.id;
          var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
          return id.toString(32) + overflow;
        }
        function pushTreeContext(baseContext, totalChildren, index) {
          var baseIdWithLeadingBit = baseContext.id;
          var baseOverflow = baseContext.overflow;
          var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
          var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
          var slot = index + 1;
          var length = getBitLength(totalChildren) + baseLength;
          if (length > 30) {
            var numberOfOverflowBits = baseLength - baseLength % 5;
            var newOverflowBits = (1 << numberOfOverflowBits) - 1;
            var newOverflow = (baseId & newOverflowBits).toString(32);
            var restOfBaseId = baseId >> numberOfOverflowBits;
            var restOfBaseLength = baseLength - numberOfOverflowBits;
            var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
            var restOfNewBits = slot << restOfBaseLength;
            var id = restOfNewBits | restOfBaseId;
            var overflow = newOverflow + baseOverflow;
            return {
              id: 1 << restOfLength | id,
              overflow
            };
          } else {
            var newBits = slot << baseLength;
            var _id = newBits | baseId;
            var _overflow = baseOverflow;
            return {
              id: 1 << length | _id,
              overflow: _overflow
            };
          }
        }
        function getBitLength(number) {
          return 32 - clz32(number);
        }
        function getLeadingBit(id) {
          return 1 << getBitLength(id) - 1;
        }
        var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
        var log = Math.log;
        var LN2 = Math.LN2;
        function clz32Fallback(x) {
          var asUint = x >>> 0;
          if (asUint === 0) {
            return 32;
          }
          return 31 - (log(asUint) / LN2 | 0) | 0;
        }
        function is(x, y) {
          return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is;
        var currentlyRenderingComponent = null;
        var currentlyRenderingTask = null;
        var firstWorkInProgressHook = null;
        var workInProgressHook = null;
        var isReRender = false;
        var didScheduleRenderPhaseUpdate = false;
        var localIdCounter = 0;
        var renderPhaseUpdates = null;
        var numberOfReRenders = 0;
        var RE_RENDER_LIMIT = 25;
        var isInHookUserCodeInDev = false;
        var currentHookNameInDev;
        function resolveCurrentlyRenderingComponent() {
          if (currentlyRenderingComponent === null) {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          {
            if (isInHookUserCodeInDev) {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            }
          }
          return currentlyRenderingComponent;
        }
        function areHookInputsEqual(nextDeps, prevDeps) {
          if (prevDeps === null) {
            {
              error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            }
            return false;
          }
          {
            if (nextDeps.length !== prevDeps.length) {
              error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + nextDeps.join(", ") + "]", "[" + prevDeps.join(", ") + "]");
            }
          }
          for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
            if (objectIs(nextDeps[i], prevDeps[i])) {
              continue;
            }
            return false;
          }
          return true;
        }
        function createHook() {
          if (numberOfReRenders > 0) {
            throw new Error("Rendered more hooks than during the previous render");
          }
          return {
            memoizedState: null,
            queue: null,
            next: null
          };
        }
        function createWorkInProgressHook() {
          if (workInProgressHook === null) {
            if (firstWorkInProgressHook === null) {
              isReRender = false;
              firstWorkInProgressHook = workInProgressHook = createHook();
            } else {
              isReRender = true;
              workInProgressHook = firstWorkInProgressHook;
            }
          } else {
            if (workInProgressHook.next === null) {
              isReRender = false;
              workInProgressHook = workInProgressHook.next = createHook();
            } else {
              isReRender = true;
              workInProgressHook = workInProgressHook.next;
            }
          }
          return workInProgressHook;
        }
        function prepareToUseHooks(task, componentIdentity) {
          currentlyRenderingComponent = componentIdentity;
          currentlyRenderingTask = task;
          {
            isInHookUserCodeInDev = false;
          }
          localIdCounter = 0;
        }
        function finishHooks(Component2, props, children, refOrContext) {
          while (didScheduleRenderPhaseUpdate) {
            didScheduleRenderPhaseUpdate = false;
            localIdCounter = 0;
            numberOfReRenders += 1;
            workInProgressHook = null;
            children = Component2(props, refOrContext);
          }
          resetHooksState();
          return children;
        }
        function checkDidRenderIdHook() {
          var didRenderIdHook = localIdCounter !== 0;
          return didRenderIdHook;
        }
        function resetHooksState() {
          {
            isInHookUserCodeInDev = false;
          }
          currentlyRenderingComponent = null;
          currentlyRenderingTask = null;
          didScheduleRenderPhaseUpdate = false;
          firstWorkInProgressHook = null;
          numberOfReRenders = 0;
          renderPhaseUpdates = null;
          workInProgressHook = null;
        }
        function readContext$1(context) {
          {
            if (isInHookUserCodeInDev) {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
          }
          return readContext(context);
        }
        function useContext(context) {
          {
            currentHookNameInDev = "useContext";
          }
          resolveCurrentlyRenderingComponent();
          return readContext(context);
        }
        function basicStateReducer(state, action) {
          return typeof action === "function" ? action(state) : action;
        }
        function useState(initialState) {
          {
            currentHookNameInDev = "useState";
          }
          return useReducer(basicStateReducer, initialState);
        }
        function useReducer(reducer, initialArg, init) {
          {
            if (reducer !== basicStateReducer) {
              currentHookNameInDev = "useReducer";
            }
          }
          currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
          workInProgressHook = createWorkInProgressHook();
          if (isReRender) {
            var queue = workInProgressHook.queue;
            var dispatch = queue.dispatch;
            if (renderPhaseUpdates !== null) {
              var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
              if (firstRenderPhaseUpdate !== void 0) {
                renderPhaseUpdates.delete(queue);
                var newState = workInProgressHook.memoizedState;
                var update = firstRenderPhaseUpdate;
                do {
                  var action = update.action;
                  {
                    isInHookUserCodeInDev = true;
                  }
                  newState = reducer(newState, action);
                  {
                    isInHookUserCodeInDev = false;
                  }
                  update = update.next;
                } while (update !== null);
                workInProgressHook.memoizedState = newState;
                return [newState, dispatch];
              }
            }
            return [workInProgressHook.memoizedState, dispatch];
          } else {
            {
              isInHookUserCodeInDev = true;
            }
            var initialState;
            if (reducer === basicStateReducer) {
              initialState = typeof initialArg === "function" ? initialArg() : initialArg;
            } else {
              initialState = init !== void 0 ? init(initialArg) : initialArg;
            }
            {
              isInHookUserCodeInDev = false;
            }
            workInProgressHook.memoizedState = initialState;
            var _queue = workInProgressHook.queue = {
              last: null,
              dispatch: null
            };
            var _dispatch = _queue.dispatch = dispatchAction.bind(null, currentlyRenderingComponent, _queue);
            return [workInProgressHook.memoizedState, _dispatch];
          }
        }
        function useMemo(nextCreate, deps) {
          currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
          workInProgressHook = createWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          if (workInProgressHook !== null) {
            var prevState = workInProgressHook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
          }
          {
            isInHookUserCodeInDev = true;
          }
          var nextValue = nextCreate();
          {
            isInHookUserCodeInDev = false;
          }
          workInProgressHook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function useRef(initialValue) {
          currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
          workInProgressHook = createWorkInProgressHook();
          var previousRef = workInProgressHook.memoizedState;
          if (previousRef === null) {
            var ref = {
              current: initialValue
            };
            {
              Object.seal(ref);
            }
            workInProgressHook.memoizedState = ref;
            return ref;
          } else {
            return previousRef;
          }
        }
        function useLayoutEffect(create, inputs) {
          {
            currentHookNameInDev = "useLayoutEffect";
            error("useLayoutEffect does nothing on the server, because its effect cannot be encoded into the server renderer's output format. This will lead to a mismatch between the initial, non-hydrated UI and the intended UI. To avoid this, useLayoutEffect should only be used in components that render exclusively on the client. See https://reactjs.org/link/uselayouteffect-ssr for common fixes.");
          }
        }
        function dispatchAction(componentIdentity, queue, action) {
          if (numberOfReRenders >= RE_RENDER_LIMIT) {
            throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
          }
          if (componentIdentity === currentlyRenderingComponent) {
            didScheduleRenderPhaseUpdate = true;
            var update = {
              action,
              next: null
            };
            if (renderPhaseUpdates === null) {
              renderPhaseUpdates = /* @__PURE__ */ new Map();
            }
            var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
            if (firstRenderPhaseUpdate === void 0) {
              renderPhaseUpdates.set(queue, update);
            } else {
              var lastRenderPhaseUpdate = firstRenderPhaseUpdate;
              while (lastRenderPhaseUpdate.next !== null) {
                lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              }
              lastRenderPhaseUpdate.next = update;
            }
          }
        }
        function useCallback(callback, deps) {
          return useMemo(function() {
            return callback;
          }, deps);
        }
        function useMutableSource(source, getSnapshot, subscribe) {
          resolveCurrentlyRenderingComponent();
          return getSnapshot(source._source);
        }
        function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          if (getServerSnapshot === void 0) {
            throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
          }
          return getServerSnapshot();
        }
        function useDeferredValue(value) {
          resolveCurrentlyRenderingComponent();
          return value;
        }
        function unsupportedStartTransition() {
          throw new Error("startTransition cannot be called during server rendering.");
        }
        function useTransition() {
          resolveCurrentlyRenderingComponent();
          return [false, unsupportedStartTransition];
        }
        function useId() {
          var task = currentlyRenderingTask;
          var treeId = getTreeId(task.treeContext);
          var responseState = currentResponseState;
          if (responseState === null) {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component.");
          }
          var localId = localIdCounter++;
          return makeId(responseState, treeId, localId);
        }
        function noop2() {
        }
        var Dispatcher = {
          readContext: readContext$1,
          useContext,
          useMemo,
          useReducer,
          useRef,
          useState,
          useInsertionEffect: noop2,
          useLayoutEffect,
          useCallback,
          useImperativeHandle: noop2,
          useEffect: noop2,
          useDebugValue: noop2,
          useDeferredValue,
          useTransition,
          useId,
          useMutableSource,
          useSyncExternalStore
        };
        var currentResponseState = null;
        function setCurrentResponseState(responseState) {
          currentResponseState = responseState;
        }
        function getStackByComponentStackNode(componentStack) {
          try {
            var info = "";
            var node = componentStack;
            do {
              switch (node.tag) {
                case 0:
                  info += describeBuiltInComponentFrame(node.type, null, null);
                  break;
                case 1:
                  info += describeFunctionComponentFrame(node.type, null, null);
                  break;
                case 2:
                  info += describeClassComponentFrame(node.type, null, null);
                  break;
              }
              node = node.parent;
            } while (node);
            return info;
          } catch (x) {
            return "\nError generating stack: " + x.message + "\n" + x.stack;
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        var PENDING = 0;
        var COMPLETED = 1;
        var FLUSHED = 2;
        var ABORTED = 3;
        var ERRORED = 4;
        var OPEN = 0;
        var CLOSING = 1;
        var CLOSED = 2;
        var DEFAULT_PROGRESSIVE_CHUNK_SIZE = 12800;
        function defaultErrorHandler(error2) {
          console["error"](error2);
          return null;
        }
        function noop$1() {
        }
        function createRequest(children, responseState, rootFormatContext, progressiveChunkSize, onError, onAllReady, onShellReady, onShellError, onFatalError) {
          var pingedTasks = [];
          var abortSet = /* @__PURE__ */ new Set();
          var request = {
            destination: null,
            responseState,
            progressiveChunkSize: progressiveChunkSize === void 0 ? DEFAULT_PROGRESSIVE_CHUNK_SIZE : progressiveChunkSize,
            status: OPEN,
            fatalError: null,
            nextSegmentId: 0,
            allPendingTasks: 0,
            pendingRootTasks: 0,
            completedRootSegment: null,
            abortableTasks: abortSet,
            pingedTasks,
            clientRenderedBoundaries: [],
            completedBoundaries: [],
            partialBoundaries: [],
            onError: onError === void 0 ? defaultErrorHandler : onError,
            onAllReady: onAllReady === void 0 ? noop$1 : onAllReady,
            onShellReady: onShellReady === void 0 ? noop$1 : onShellReady,
            onShellError: onShellError === void 0 ? noop$1 : onShellError,
            onFatalError: onFatalError === void 0 ? noop$1 : onFatalError
          };
          var rootSegment = createPendingSegment(request, 0, null, rootFormatContext, false, false);
          rootSegment.parentFlushed = true;
          var rootTask = createTask(request, children, null, rootSegment, abortSet, emptyContextObject, rootContextSnapshot, emptyTreeContext);
          pingedTasks.push(rootTask);
          return request;
        }
        function pingTask(request, task) {
          var pingedTasks = request.pingedTasks;
          pingedTasks.push(task);
          if (pingedTasks.length === 1) {
            scheduleWork(function() {
              return performWork(request);
            });
          }
        }
        function createSuspenseBoundary(request, fallbackAbortableTasks) {
          return {
            id: UNINITIALIZED_SUSPENSE_BOUNDARY_ID,
            rootSegmentID: -1,
            parentFlushed: false,
            pendingTasks: 0,
            forceClientRender: false,
            completedSegments: [],
            byteSize: 0,
            fallbackAbortableTasks,
            errorDigest: null
          };
        }
        function createTask(request, node, blockedBoundary, blockedSegment, abortSet, legacyContext, context, treeContext) {
          request.allPendingTasks++;
          if (blockedBoundary === null) {
            request.pendingRootTasks++;
          } else {
            blockedBoundary.pendingTasks++;
          }
          var task = {
            node,
            ping: function() {
              return pingTask(request, task);
            },
            blockedBoundary,
            blockedSegment,
            abortSet,
            legacyContext,
            context,
            treeContext
          };
          {
            task.componentStack = null;
          }
          abortSet.add(task);
          return task;
        }
        function createPendingSegment(request, index, boundary, formatContext, lastPushedText, textEmbedded) {
          return {
            status: PENDING,
            id: -1,
            index,
            parentFlushed: false,
            chunks: [],
            children: [],
            formatContext,
            boundary,
            lastPushedText,
            textEmbedded
          };
        }
        var currentTaskInDEV = null;
        function getCurrentStackInDEV() {
          {
            if (currentTaskInDEV === null || currentTaskInDEV.componentStack === null) {
              return "";
            }
            return getStackByComponentStackNode(currentTaskInDEV.componentStack);
          }
        }
        function pushBuiltInComponentStackInDEV(task, type) {
          {
            task.componentStack = {
              tag: 0,
              parent: task.componentStack,
              type
            };
          }
        }
        function pushFunctionComponentStackInDEV(task, type) {
          {
            task.componentStack = {
              tag: 1,
              parent: task.componentStack,
              type
            };
          }
        }
        function pushClassComponentStackInDEV(task, type) {
          {
            task.componentStack = {
              tag: 2,
              parent: task.componentStack,
              type
            };
          }
        }
        function popComponentStackInDEV(task) {
          {
            if (task.componentStack === null) {
              error("Unexpectedly popped too many stack frames. This is a bug in React.");
            } else {
              task.componentStack = task.componentStack.parent;
            }
          }
        }
        var lastBoundaryErrorComponentStackDev = null;
        function captureBoundaryErrorDetailsDev(boundary, error2) {
          {
            var errorMessage;
            if (typeof error2 === "string") {
              errorMessage = error2;
            } else if (error2 && typeof error2.message === "string") {
              errorMessage = error2.message;
            } else {
              errorMessage = String(error2);
            }
            var errorComponentStack = lastBoundaryErrorComponentStackDev || getCurrentStackInDEV();
            lastBoundaryErrorComponentStackDev = null;
            boundary.errorMessage = errorMessage;
            boundary.errorComponentStack = errorComponentStack;
          }
        }
        function logRecoverableError(request, error2) {
          var errorDigest = request.onError(error2);
          if (errorDigest != null && typeof errorDigest !== "string") {
            throw new Error('onError returned something with a type other than "string". onError should return a string and may return null or undefined but must not return anything else. It received something of type "' + typeof errorDigest + '" instead');
          }
          return errorDigest;
        }
        function fatalError(request, error2) {
          var onShellError = request.onShellError;
          onShellError(error2);
          var onFatalError = request.onFatalError;
          onFatalError(error2);
          if (request.destination !== null) {
            request.status = CLOSED;
            closeWithError(request.destination, error2);
          } else {
            request.status = CLOSING;
            request.fatalError = error2;
          }
        }
        function renderSuspenseBoundary(request, task, props) {
          pushBuiltInComponentStackInDEV(task, "Suspense");
          var parentBoundary = task.blockedBoundary;
          var parentSegment = task.blockedSegment;
          var fallback = props.fallback;
          var content = props.children;
          var fallbackAbortSet = /* @__PURE__ */ new Set();
          var newBoundary = createSuspenseBoundary(request, fallbackAbortSet);
          var insertionIndex = parentSegment.chunks.length;
          var boundarySegment = createPendingSegment(request, insertionIndex, newBoundary, parentSegment.formatContext, false, false);
          parentSegment.children.push(boundarySegment);
          parentSegment.lastPushedText = false;
          var contentRootSegment = createPendingSegment(request, 0, null, parentSegment.formatContext, false, false);
          contentRootSegment.parentFlushed = true;
          task.blockedBoundary = newBoundary;
          task.blockedSegment = contentRootSegment;
          try {
            renderNode(request, task, content);
            pushSegmentFinale(contentRootSegment.chunks, request.responseState, contentRootSegment.lastPushedText, contentRootSegment.textEmbedded);
            contentRootSegment.status = COMPLETED;
            queueCompletedSegment(newBoundary, contentRootSegment);
            if (newBoundary.pendingTasks === 0) {
              popComponentStackInDEV(task);
              return;
            }
          } catch (error2) {
            contentRootSegment.status = ERRORED;
            newBoundary.forceClientRender = true;
            newBoundary.errorDigest = logRecoverableError(request, error2);
            {
              captureBoundaryErrorDetailsDev(newBoundary, error2);
            }
          } finally {
            task.blockedBoundary = parentBoundary;
            task.blockedSegment = parentSegment;
          }
          var suspendedFallbackTask = createTask(request, fallback, parentBoundary, boundarySegment, fallbackAbortSet, task.legacyContext, task.context, task.treeContext);
          {
            suspendedFallbackTask.componentStack = task.componentStack;
          }
          request.pingedTasks.push(suspendedFallbackTask);
          popComponentStackInDEV(task);
        }
        function renderHostElement(request, task, type, props) {
          pushBuiltInComponentStackInDEV(task, type);
          var segment = task.blockedSegment;
          var children = pushStartInstance(segment.chunks, type, props, request.responseState, segment.formatContext);
          segment.lastPushedText = false;
          var prevContext = segment.formatContext;
          segment.formatContext = getChildFormatContext(prevContext, type, props);
          renderNode(request, task, children);
          segment.formatContext = prevContext;
          pushEndInstance(segment.chunks, type);
          segment.lastPushedText = false;
          popComponentStackInDEV(task);
        }
        function shouldConstruct$1(Component2) {
          return Component2.prototype && Component2.prototype.isReactComponent;
        }
        function renderWithHooks(request, task, Component2, props, secondArg) {
          var componentIdentity = {};
          prepareToUseHooks(task, componentIdentity);
          var result = Component2(props, secondArg);
          return finishHooks(Component2, props, result, secondArg);
        }
        function finishClassComponent(request, task, instance, Component2, props) {
          var nextChildren = instance.render();
          {
            if (instance.props !== props) {
              if (!didWarnAboutReassigningProps) {
                error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromType(Component2) || "a component");
              }
              didWarnAboutReassigningProps = true;
            }
          }
          {
            var childContextTypes = Component2.childContextTypes;
            if (childContextTypes !== null && childContextTypes !== void 0) {
              var previousContext = task.legacyContext;
              var mergedContext = processChildContext(instance, Component2, previousContext, childContextTypes);
              task.legacyContext = mergedContext;
              renderNodeDestructive(request, task, nextChildren);
              task.legacyContext = previousContext;
              return;
            }
          }
          renderNodeDestructive(request, task, nextChildren);
        }
        function renderClassComponent(request, task, Component2, props) {
          pushClassComponentStackInDEV(task, Component2);
          var maskedContext = getMaskedContext(Component2, task.legacyContext);
          var instance = constructClassInstance(Component2, props, maskedContext);
          mountClassInstance(instance, Component2, props, maskedContext);
          finishClassComponent(request, task, instance, Component2, props);
          popComponentStackInDEV(task);
        }
        var didWarnAboutBadClass = {};
        var didWarnAboutModulePatternComponent = {};
        var didWarnAboutContextTypeOnFunctionComponent = {};
        var didWarnAboutGetDerivedStateOnFunctionComponent = {};
        var didWarnAboutReassigningProps = false;
        var didWarnAboutGenerators = false;
        var didWarnAboutMaps = false;
        var hasWarnedAboutUsingContextAsConsumer = false;
        function renderIndeterminateComponent(request, task, Component2, props) {
          var legacyContext;
          {
            legacyContext = getMaskedContext(Component2, task.legacyContext);
          }
          pushFunctionComponentStackInDEV(task, Component2);
          {
            if (Component2.prototype && typeof Component2.prototype.render === "function") {
              var componentName = getComponentNameFromType(Component2) || "Unknown";
              if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
              }
            }
          }
          var value = renderWithHooks(request, task, Component2, props, legacyContext);
          var hasId = checkDidRenderIdHook();
          {
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              var _componentName = getComponentNameFromType(Component2) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
              }
            }
          }
          if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
            {
              var _componentName2 = getComponentNameFromType(Component2) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
              }
            }
            mountClassInstance(value, Component2, props, legacyContext);
            finishClassComponent(request, task, value, Component2, props);
          } else {
            {
              validateFunctionComponentInDev(Component2);
            }
            if (hasId) {
              var prevTreeContext = task.treeContext;
              var totalChildren = 1;
              var index = 0;
              task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index);
              try {
                renderNodeDestructive(request, task, value);
              } finally {
                task.treeContext = prevTreeContext;
              }
            } else {
              renderNodeDestructive(request, task, value);
            }
          }
          popComponentStackInDEV(task);
        }
        function validateFunctionComponentInDev(Component2) {
          {
            if (Component2) {
              if (Component2.childContextTypes) {
                error("%s(...): childContextTypes cannot be defined on a function component.", Component2.displayName || Component2.name || "Component");
              }
            }
            if (typeof Component2.getDerivedStateFromProps === "function") {
              var _componentName3 = getComponentNameFromType(Component2) || "Unknown";
              if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
              }
            }
            if (typeof Component2.contextType === "object" && Component2.contextType !== null) {
              var _componentName4 = getComponentNameFromType(Component2) || "Unknown";
              if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error("%s: Function components do not support contextType.", _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
              }
            }
          }
        }
        function resolveDefaultProps(Component2, baseProps) {
          if (Component2 && Component2.defaultProps) {
            var props = assign({}, baseProps);
            var defaultProps = Component2.defaultProps;
            for (var propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
            return props;
          }
          return baseProps;
        }
        function renderForwardRef(request, task, type, props, ref) {
          pushFunctionComponentStackInDEV(task, type.render);
          var children = renderWithHooks(request, task, type.render, props, ref);
          var hasId = checkDidRenderIdHook();
          if (hasId) {
            var prevTreeContext = task.treeContext;
            var totalChildren = 1;
            var index = 0;
            task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index);
            try {
              renderNodeDestructive(request, task, children);
            } finally {
              task.treeContext = prevTreeContext;
            }
          } else {
            renderNodeDestructive(request, task, children);
          }
          popComponentStackInDEV(task);
        }
        function renderMemo(request, task, type, props, ref) {
          var innerType = type.type;
          var resolvedProps = resolveDefaultProps(innerType, props);
          renderElement(request, task, innerType, resolvedProps, ref);
        }
        function renderContextConsumer(request, task, context, props) {
          {
            if (context._context === void 0) {
              if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                  hasWarnedAboutUsingContextAsConsumer = true;
                  error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
              }
            } else {
              context = context._context;
            }
          }
          var render = props.children;
          {
            if (typeof render !== "function") {
              error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
            }
          }
          var newValue = readContext(context);
          var newChildren = render(newValue);
          renderNodeDestructive(request, task, newChildren);
        }
        function renderContextProvider(request, task, type, props) {
          var context = type._context;
          var value = props.value;
          var children = props.children;
          var prevSnapshot;
          {
            prevSnapshot = task.context;
          }
          task.context = pushProvider(context, value);
          renderNodeDestructive(request, task, children);
          task.context = popProvider(context);
          {
            if (prevSnapshot !== task.context) {
              error("Popping the context provider did not return back to the original snapshot. This is a bug in React.");
            }
          }
        }
        function renderLazyComponent(request, task, lazyComponent, props, ref) {
          pushBuiltInComponentStackInDEV(task, "Lazy");
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;
          var Component2 = init(payload);
          var resolvedProps = resolveDefaultProps(Component2, props);
          renderElement(request, task, Component2, resolvedProps, ref);
          popComponentStackInDEV(task);
        }
        function renderElement(request, task, type, props, ref) {
          if (typeof type === "function") {
            if (shouldConstruct$1(type)) {
              renderClassComponent(request, task, type, props);
              return;
            } else {
              renderIndeterminateComponent(request, task, type, props);
              return;
            }
          }
          if (typeof type === "string") {
            renderHostElement(request, task, type, props);
            return;
          }
          switch (type) {
            case REACT_LEGACY_HIDDEN_TYPE:
            case REACT_DEBUG_TRACING_MODE_TYPE:
            case REACT_STRICT_MODE_TYPE:
            case REACT_PROFILER_TYPE:
            case REACT_FRAGMENT_TYPE: {
              renderNodeDestructive(request, task, props.children);
              return;
            }
            case REACT_SUSPENSE_LIST_TYPE: {
              pushBuiltInComponentStackInDEV(task, "SuspenseList");
              renderNodeDestructive(request, task, props.children);
              popComponentStackInDEV(task);
              return;
            }
            case REACT_SCOPE_TYPE: {
              throw new Error("ReactDOMServer does not yet support scope components.");
            }
            case REACT_SUSPENSE_TYPE: {
              {
                renderSuspenseBoundary(request, task, props);
              }
              return;
            }
          }
          if (typeof type === "object" && type !== null) {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE: {
                renderForwardRef(request, task, type, props, ref);
                return;
              }
              case REACT_MEMO_TYPE: {
                renderMemo(request, task, type, props, ref);
                return;
              }
              case REACT_PROVIDER_TYPE: {
                renderContextProvider(request, task, type, props);
                return;
              }
              case REACT_CONTEXT_TYPE: {
                renderContextConsumer(request, task, type, props);
                return;
              }
              case REACT_LAZY_TYPE: {
                renderLazyComponent(request, task, type, props);
                return;
              }
            }
          }
          var info = "";
          {
            if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
          }
          throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
        }
        function validateIterable(iterable, iteratorFn) {
          {
            if (typeof Symbol === "function" && iterable[Symbol.toStringTag] === "Generator") {
              if (!didWarnAboutGenerators) {
                error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
              }
              didWarnAboutGenerators = true;
            }
            if (iterable.entries === iteratorFn) {
              if (!didWarnAboutMaps) {
                error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
              }
              didWarnAboutMaps = true;
            }
          }
        }
        function renderNodeDestructive(request, task, node) {
          {
            try {
              return renderNodeDestructiveImpl(request, task, node);
            } catch (x) {
              if (typeof x === "object" && x !== null && typeof x.then === "function")
                ;
              else {
                lastBoundaryErrorComponentStackDev = lastBoundaryErrorComponentStackDev !== null ? lastBoundaryErrorComponentStackDev : getCurrentStackInDEV();
              }
              throw x;
            }
          }
        }
        function renderNodeDestructiveImpl(request, task, node) {
          task.node = node;
          if (typeof node === "object" && node !== null) {
            switch (node.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                var element = node;
                var type = element.type;
                var props = element.props;
                var ref = element.ref;
                renderElement(request, task, type, props, ref);
                return;
              }
              case REACT_PORTAL_TYPE:
                throw new Error("Portals are not currently supported by the server renderer. Render them conditionally so that they only appear on the client render.");
              case REACT_LAZY_TYPE: {
                var lazyNode = node;
                var payload = lazyNode._payload;
                var init = lazyNode._init;
                var resolvedNode;
                {
                  try {
                    resolvedNode = init(payload);
                  } catch (x) {
                    if (typeof x === "object" && x !== null && typeof x.then === "function") {
                      pushBuiltInComponentStackInDEV(task, "Lazy");
                    }
                    throw x;
                  }
                }
                renderNodeDestructive(request, task, resolvedNode);
                return;
              }
            }
            if (isArray(node)) {
              renderChildrenArray(request, task, node);
              return;
            }
            var iteratorFn = getIteratorFn(node);
            if (iteratorFn) {
              {
                validateIterable(node, iteratorFn);
              }
              var iterator = iteratorFn.call(node);
              if (iterator) {
                var step = iterator.next();
                if (!step.done) {
                  var children = [];
                  do {
                    children.push(step.value);
                    step = iterator.next();
                  } while (!step.done);
                  renderChildrenArray(request, task, children);
                  return;
                }
                return;
              }
            }
            var childString = Object.prototype.toString.call(node);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(node).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          if (typeof node === "string") {
            var segment = task.blockedSegment;
            segment.lastPushedText = pushTextInstance(task.blockedSegment.chunks, node, request.responseState, segment.lastPushedText);
            return;
          }
          if (typeof node === "number") {
            var _segment = task.blockedSegment;
            _segment.lastPushedText = pushTextInstance(task.blockedSegment.chunks, "" + node, request.responseState, _segment.lastPushedText);
            return;
          }
          {
            if (typeof node === "function") {
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
        }
        function renderChildrenArray(request, task, children) {
          var totalChildren = children.length;
          for (var i = 0; i < totalChildren; i++) {
            var prevTreeContext = task.treeContext;
            task.treeContext = pushTreeContext(prevTreeContext, totalChildren, i);
            try {
              renderNode(request, task, children[i]);
            } finally {
              task.treeContext = prevTreeContext;
            }
          }
        }
        function spawnNewSuspendedTask(request, task, x) {
          var segment = task.blockedSegment;
          var insertionIndex = segment.chunks.length;
          var newSegment = createPendingSegment(request, insertionIndex, null, segment.formatContext, segment.lastPushedText, true);
          segment.children.push(newSegment);
          segment.lastPushedText = false;
          var newTask = createTask(request, task.node, task.blockedBoundary, newSegment, task.abortSet, task.legacyContext, task.context, task.treeContext);
          {
            if (task.componentStack !== null) {
              newTask.componentStack = task.componentStack.parent;
            }
          }
          var ping = newTask.ping;
          x.then(ping, ping);
        }
        function renderNode(request, task, node) {
          var previousFormatContext = task.blockedSegment.formatContext;
          var previousLegacyContext = task.legacyContext;
          var previousContext = task.context;
          var previousComponentStack = null;
          {
            previousComponentStack = task.componentStack;
          }
          try {
            return renderNodeDestructive(request, task, node);
          } catch (x) {
            resetHooksState();
            if (typeof x === "object" && x !== null && typeof x.then === "function") {
              spawnNewSuspendedTask(request, task, x);
              task.blockedSegment.formatContext = previousFormatContext;
              task.legacyContext = previousLegacyContext;
              task.context = previousContext;
              switchContext(previousContext);
              {
                task.componentStack = previousComponentStack;
              }
              return;
            } else {
              task.blockedSegment.formatContext = previousFormatContext;
              task.legacyContext = previousLegacyContext;
              task.context = previousContext;
              switchContext(previousContext);
              {
                task.componentStack = previousComponentStack;
              }
              throw x;
            }
          }
        }
        function erroredTask(request, boundary, segment, error2) {
          var errorDigest = logRecoverableError(request, error2);
          if (boundary === null) {
            fatalError(request, error2);
          } else {
            boundary.pendingTasks--;
            if (!boundary.forceClientRender) {
              boundary.forceClientRender = true;
              boundary.errorDigest = errorDigest;
              {
                captureBoundaryErrorDetailsDev(boundary, error2);
              }
              if (boundary.parentFlushed) {
                request.clientRenderedBoundaries.push(boundary);
              }
            }
          }
          request.allPendingTasks--;
          if (request.allPendingTasks === 0) {
            var onAllReady = request.onAllReady;
            onAllReady();
          }
        }
        function abortTaskSoft(task) {
          var request = this;
          var boundary = task.blockedBoundary;
          var segment = task.blockedSegment;
          segment.status = ABORTED;
          finishedTask(request, boundary, segment);
        }
        function abortTask(task, request, reason) {
          var boundary = task.blockedBoundary;
          var segment = task.blockedSegment;
          segment.status = ABORTED;
          if (boundary === null) {
            request.allPendingTasks--;
            if (request.status !== CLOSED) {
              request.status = CLOSED;
              if (request.destination !== null) {
                close(request.destination);
              }
            }
          } else {
            boundary.pendingTasks--;
            if (!boundary.forceClientRender) {
              boundary.forceClientRender = true;
              var _error = reason === void 0 ? new Error("The render was aborted by the server without a reason.") : reason;
              boundary.errorDigest = request.onError(_error);
              {
                var errorPrefix = "The server did not finish this Suspense boundary: ";
                if (_error && typeof _error.message === "string") {
                  _error = errorPrefix + _error.message;
                } else {
                  _error = errorPrefix + String(_error);
                }
                var previousTaskInDev = currentTaskInDEV;
                currentTaskInDEV = task;
                try {
                  captureBoundaryErrorDetailsDev(boundary, _error);
                } finally {
                  currentTaskInDEV = previousTaskInDev;
                }
              }
              if (boundary.parentFlushed) {
                request.clientRenderedBoundaries.push(boundary);
              }
            }
            boundary.fallbackAbortableTasks.forEach(function(fallbackTask) {
              return abortTask(fallbackTask, request, reason);
            });
            boundary.fallbackAbortableTasks.clear();
            request.allPendingTasks--;
            if (request.allPendingTasks === 0) {
              var onAllReady = request.onAllReady;
              onAllReady();
            }
          }
        }
        function queueCompletedSegment(boundary, segment) {
          if (segment.chunks.length === 0 && segment.children.length === 1 && segment.children[0].boundary === null) {
            var childSegment = segment.children[0];
            childSegment.id = segment.id;
            childSegment.parentFlushed = true;
            if (childSegment.status === COMPLETED) {
              queueCompletedSegment(boundary, childSegment);
            }
          } else {
            var completedSegments = boundary.completedSegments;
            completedSegments.push(segment);
          }
        }
        function finishedTask(request, boundary, segment) {
          if (boundary === null) {
            if (segment.parentFlushed) {
              if (request.completedRootSegment !== null) {
                throw new Error("There can only be one root segment. This is a bug in React.");
              }
              request.completedRootSegment = segment;
            }
            request.pendingRootTasks--;
            if (request.pendingRootTasks === 0) {
              request.onShellError = noop$1;
              var onShellReady = request.onShellReady;
              onShellReady();
            }
          } else {
            boundary.pendingTasks--;
            if (boundary.forceClientRender)
              ;
            else if (boundary.pendingTasks === 0) {
              if (segment.parentFlushed) {
                if (segment.status === COMPLETED) {
                  queueCompletedSegment(boundary, segment);
                }
              }
              if (boundary.parentFlushed) {
                request.completedBoundaries.push(boundary);
              }
              boundary.fallbackAbortableTasks.forEach(abortTaskSoft, request);
              boundary.fallbackAbortableTasks.clear();
            } else {
              if (segment.parentFlushed) {
                if (segment.status === COMPLETED) {
                  queueCompletedSegment(boundary, segment);
                  var completedSegments = boundary.completedSegments;
                  if (completedSegments.length === 1) {
                    if (boundary.parentFlushed) {
                      request.partialBoundaries.push(boundary);
                    }
                  }
                }
              }
            }
          }
          request.allPendingTasks--;
          if (request.allPendingTasks === 0) {
            var onAllReady = request.onAllReady;
            onAllReady();
          }
        }
        function retryTask(request, task) {
          var segment = task.blockedSegment;
          if (segment.status !== PENDING) {
            return;
          }
          switchContext(task.context);
          var prevTaskInDEV = null;
          {
            prevTaskInDEV = currentTaskInDEV;
            currentTaskInDEV = task;
          }
          try {
            renderNodeDestructive(request, task, task.node);
            pushSegmentFinale(segment.chunks, request.responseState, segment.lastPushedText, segment.textEmbedded);
            task.abortSet.delete(task);
            segment.status = COMPLETED;
            finishedTask(request, task.blockedBoundary, segment);
          } catch (x) {
            resetHooksState();
            if (typeof x === "object" && x !== null && typeof x.then === "function") {
              var ping = task.ping;
              x.then(ping, ping);
            } else {
              task.abortSet.delete(task);
              segment.status = ERRORED;
              erroredTask(request, task.blockedBoundary, segment, x);
            }
          } finally {
            {
              currentTaskInDEV = prevTaskInDEV;
            }
          }
        }
        function performWork(request) {
          if (request.status === CLOSED) {
            return;
          }
          var prevContext = getActiveContext();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = Dispatcher;
          var prevGetCurrentStackImpl;
          {
            prevGetCurrentStackImpl = ReactDebugCurrentFrame$1.getCurrentStack;
            ReactDebugCurrentFrame$1.getCurrentStack = getCurrentStackInDEV;
          }
          var prevResponseState = currentResponseState;
          setCurrentResponseState(request.responseState);
          try {
            var pingedTasks = request.pingedTasks;
            var i;
            for (i = 0; i < pingedTasks.length; i++) {
              var task = pingedTasks[i];
              retryTask(request, task);
            }
            pingedTasks.splice(0, i);
            if (request.destination !== null) {
              flushCompletedQueues(request, request.destination);
            }
          } catch (error2) {
            logRecoverableError(request, error2);
            fatalError(request, error2);
          } finally {
            setCurrentResponseState(prevResponseState);
            ReactCurrentDispatcher$1.current = prevDispatcher;
            {
              ReactDebugCurrentFrame$1.getCurrentStack = prevGetCurrentStackImpl;
            }
            if (prevDispatcher === Dispatcher) {
              switchContext(prevContext);
            }
          }
        }
        function flushSubtree(request, destination, segment) {
          segment.parentFlushed = true;
          switch (segment.status) {
            case PENDING: {
              var segmentID = segment.id = request.nextSegmentId++;
              segment.lastPushedText = false;
              segment.textEmbedded = false;
              return writePlaceholder(destination, request.responseState, segmentID);
            }
            case COMPLETED: {
              segment.status = FLUSHED;
              var r = true;
              var chunks = segment.chunks;
              var chunkIdx = 0;
              var children = segment.children;
              for (var childIdx = 0; childIdx < children.length; childIdx++) {
                var nextChild = children[childIdx];
                for (; chunkIdx < nextChild.index; chunkIdx++) {
                  writeChunk(destination, chunks[chunkIdx]);
                }
                r = flushSegment(request, destination, nextChild);
              }
              for (; chunkIdx < chunks.length - 1; chunkIdx++) {
                writeChunk(destination, chunks[chunkIdx]);
              }
              if (chunkIdx < chunks.length) {
                r = writeChunkAndReturn(destination, chunks[chunkIdx]);
              }
              return r;
            }
            default: {
              throw new Error("Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React.");
            }
          }
        }
        function flushSegment(request, destination, segment) {
          var boundary = segment.boundary;
          if (boundary === null) {
            return flushSubtree(request, destination, segment);
          }
          boundary.parentFlushed = true;
          if (boundary.forceClientRender) {
            writeStartClientRenderedSuspenseBoundary(destination, request.responseState, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack);
            flushSubtree(request, destination, segment);
            return writeEndClientRenderedSuspenseBoundary(destination, request.responseState);
          } else if (boundary.pendingTasks > 0) {
            boundary.rootSegmentID = request.nextSegmentId++;
            if (boundary.completedSegments.length > 0) {
              request.partialBoundaries.push(boundary);
            }
            var id = boundary.id = assignSuspenseBoundaryID(request.responseState);
            writeStartPendingSuspenseBoundary(destination, request.responseState, id);
            flushSubtree(request, destination, segment);
            return writeEndPendingSuspenseBoundary(destination, request.responseState);
          } else if (boundary.byteSize > request.progressiveChunkSize) {
            boundary.rootSegmentID = request.nextSegmentId++;
            request.completedBoundaries.push(boundary);
            writeStartPendingSuspenseBoundary(destination, request.responseState, boundary.id);
            flushSubtree(request, destination, segment);
            return writeEndPendingSuspenseBoundary(destination, request.responseState);
          } else {
            writeStartCompletedSuspenseBoundary(destination, request.responseState);
            var completedSegments = boundary.completedSegments;
            if (completedSegments.length !== 1) {
              throw new Error("A previously unvisited boundary must have exactly one root segment. This is a bug in React.");
            }
            var contentSegment = completedSegments[0];
            flushSegment(request, destination, contentSegment);
            return writeEndCompletedSuspenseBoundary(destination, request.responseState);
          }
        }
        function flushClientRenderedBoundary(request, destination, boundary) {
          return writeClientRenderBoundaryInstruction(destination, request.responseState, boundary.id, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack);
        }
        function flushSegmentContainer(request, destination, segment) {
          writeStartSegment(destination, request.responseState, segment.formatContext, segment.id);
          flushSegment(request, destination, segment);
          return writeEndSegment(destination, segment.formatContext);
        }
        function flushCompletedBoundary(request, destination, boundary) {
          var completedSegments = boundary.completedSegments;
          var i = 0;
          for (; i < completedSegments.length; i++) {
            var segment = completedSegments[i];
            flushPartiallyCompletedSegment(request, destination, boundary, segment);
          }
          completedSegments.length = 0;
          return writeCompletedBoundaryInstruction(destination, request.responseState, boundary.id, boundary.rootSegmentID);
        }
        function flushPartialBoundary(request, destination, boundary) {
          var completedSegments = boundary.completedSegments;
          var i = 0;
          for (; i < completedSegments.length; i++) {
            var segment = completedSegments[i];
            if (!flushPartiallyCompletedSegment(request, destination, boundary, segment)) {
              i++;
              completedSegments.splice(0, i);
              return false;
            }
          }
          completedSegments.splice(0, i);
          return true;
        }
        function flushPartiallyCompletedSegment(request, destination, boundary, segment) {
          if (segment.status === FLUSHED) {
            return true;
          }
          var segmentID = segment.id;
          if (segmentID === -1) {
            var rootSegmentID = segment.id = boundary.rootSegmentID;
            if (rootSegmentID === -1) {
              throw new Error("A root segment ID must have been assigned by now. This is a bug in React.");
            }
            return flushSegmentContainer(request, destination, segment);
          } else {
            flushSegmentContainer(request, destination, segment);
            return writeCompletedSegmentInstruction(destination, request.responseState, segmentID);
          }
        }
        function flushCompletedQueues(request, destination) {
          beginWriting();
          try {
            var completedRootSegment = request.completedRootSegment;
            if (completedRootSegment !== null && request.pendingRootTasks === 0) {
              flushSegment(request, destination, completedRootSegment);
              request.completedRootSegment = null;
              writeCompletedRoot(destination, request.responseState);
            }
            var clientRenderedBoundaries = request.clientRenderedBoundaries;
            var i;
            for (i = 0; i < clientRenderedBoundaries.length; i++) {
              var boundary = clientRenderedBoundaries[i];
              if (!flushClientRenderedBoundary(request, destination, boundary)) {
                request.destination = null;
                i++;
                clientRenderedBoundaries.splice(0, i);
                return;
              }
            }
            clientRenderedBoundaries.splice(0, i);
            var completedBoundaries = request.completedBoundaries;
            for (i = 0; i < completedBoundaries.length; i++) {
              var _boundary = completedBoundaries[i];
              if (!flushCompletedBoundary(request, destination, _boundary)) {
                request.destination = null;
                i++;
                completedBoundaries.splice(0, i);
                return;
              }
            }
            completedBoundaries.splice(0, i);
            completeWriting(destination);
            beginWriting(destination);
            var partialBoundaries = request.partialBoundaries;
            for (i = 0; i < partialBoundaries.length; i++) {
              var _boundary2 = partialBoundaries[i];
              if (!flushPartialBoundary(request, destination, _boundary2)) {
                request.destination = null;
                i++;
                partialBoundaries.splice(0, i);
                return;
              }
            }
            partialBoundaries.splice(0, i);
            var largeBoundaries = request.completedBoundaries;
            for (i = 0; i < largeBoundaries.length; i++) {
              var _boundary3 = largeBoundaries[i];
              if (!flushCompletedBoundary(request, destination, _boundary3)) {
                request.destination = null;
                i++;
                largeBoundaries.splice(0, i);
                return;
              }
            }
            largeBoundaries.splice(0, i);
          } finally {
            completeWriting(destination);
            if (request.allPendingTasks === 0 && request.pingedTasks.length === 0 && request.clientRenderedBoundaries.length === 0 && request.completedBoundaries.length === 0) {
              {
                if (request.abortableTasks.size !== 0) {
                  error("There was still abortable task at the root when we closed. This is a bug in React.");
                }
              }
              close(destination);
            }
          }
        }
        function startWork(request) {
          scheduleWork(function() {
            return performWork(request);
          });
        }
        function startFlowing(request, destination) {
          if (request.status === CLOSING) {
            request.status = CLOSED;
            closeWithError(destination, request.fatalError);
            return;
          }
          if (request.status === CLOSED) {
            return;
          }
          if (request.destination !== null) {
            return;
          }
          request.destination = destination;
          try {
            flushCompletedQueues(request, destination);
          } catch (error2) {
            logRecoverableError(request, error2);
            fatalError(request, error2);
          }
        }
        function abort(request, reason) {
          try {
            var abortableTasks = request.abortableTasks;
            abortableTasks.forEach(function(task) {
              return abortTask(task, request, reason);
            });
            abortableTasks.clear();
            if (request.destination !== null) {
              flushCompletedQueues(request, request.destination);
            }
          } catch (error2) {
            logRecoverableError(request, error2);
            fatalError(request, error2);
          }
        }
        function renderToReadableStream(children, options) {
          return new Promise(function(resolve, reject) {
            var onFatalError;
            var onAllReady;
            var allReady = new Promise(function(res, rej) {
              onAllReady = res;
              onFatalError = rej;
            });
            function onShellReady() {
              var stream = new ReadableStream({
                type: "bytes",
                pull: function(controller) {
                  startFlowing(request, controller);
                },
                cancel: function(reason) {
                  abort(request);
                }
              }, {
                highWaterMark: 0
              });
              stream.allReady = allReady;
              resolve(stream);
            }
            function onShellError(error2) {
              allReady.catch(function() {
              });
              reject(error2);
            }
            var request = createRequest(children, createResponseState(options ? options.identifierPrefix : void 0, options ? options.nonce : void 0, options ? options.bootstrapScriptContent : void 0, options ? options.bootstrapScripts : void 0, options ? options.bootstrapModules : void 0), createRootFormatContext(options ? options.namespaceURI : void 0), options ? options.progressiveChunkSize : void 0, options ? options.onError : void 0, onAllReady, onShellReady, onShellError, onFatalError);
            if (options && options.signal) {
              var signal = options.signal;
              var listener = function() {
                abort(request, signal.reason);
                signal.removeEventListener("abort", listener);
              };
              signal.addEventListener("abort", listener);
            }
            startWork(request);
          });
        }
        exports.renderToReadableStream = renderToReadableStream;
        exports.version = ReactVersion;
      })();
    }
  }
});

// node_modules/react-dom/server.browser.js
var require_server_browser = __commonJS({
  "node_modules/react-dom/server.browser.js"(exports) {
    "use strict";
    var l;
    var s;
    if (false) {
      l = null;
      s = null;
    } else {
      l = require_react_dom_server_legacy_browser_development();
      s = require_react_dom_server_browser_development();
    }
    exports.version = l.version;
    exports.renderToString = l.renderToString;
    exports.renderToStaticMarkup = l.renderToStaticMarkup;
    exports.renderToNodeStream = l.renderToNodeStream;
    exports.renderToStaticNodeStream = l.renderToStaticNodeStream;
    exports.renderToReadableStream = s.renderToReadableStream;
  }
});

// node_modules/ag-grid-react/lib/shared/keyGenerator.js
var require_keyGenerator = __commonJS({
  "node_modules/ag-grid-react/lib/shared/keyGenerator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var counter = 0;
    function generateNewKey() {
      return "agPortalKey_" + ++counter;
    }
    exports.default = generateNewKey;
  }
});

// node_modules/ag-grid-react/lib/legacy/legacyReactComponent.js
var require_legacyReactComponent = __commonJS({
  "node_modules/ag-grid-react/lib/legacy/legacyReactComponent.js"(exports) {
    "use strict";
    var __extends2 = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var react_1 = require_react();
    var react_dom_1 = require_react_dom();
    var ag_grid_community_1 = (init_ag_grid_community_auto_esm(), __toCommonJS(ag_grid_community_auto_esm_exports));
    var reactComponent_1 = require_reactComponent();
    var server_1 = require_server_browser();
    var keyGenerator_1 = __importDefault(require_keyGenerator());
    var LegacyReactComponent = function(_super) {
      __extends2(LegacyReactComponent2, _super);
      function LegacyReactComponent2(reactComponent, parentComponent, portalManager, componentType) {
        var _this = _super.call(this, reactComponent, portalManager, componentType) || this;
        _this.staticMarkup = null;
        _this.staticRenderTime = 0;
        _this.parentComponent = parentComponent;
        return _this;
      }
      LegacyReactComponent2.prototype.init = function(params) {
        var _this = this;
        this.eParentElement = this.createParentElement(params);
        this.renderStaticMarkup(params);
        return new ag_grid_community_1.AgPromise(function(resolve) {
          return _this.createReactComponent(params, resolve);
        });
      };
      LegacyReactComponent2.prototype.createReactComponent = function(params, resolve) {
        var _this = this;
        if (!this.isStatelessComponent()) {
          params.ref = function(element) {
            _this.componentInstance = element;
            _this.addParentContainerStyleAndClasses();
            _this.removeStaticMarkup();
          };
        }
        var reactComponent = react_1.createElement(this.reactComponent, params);
        var portal = react_dom_1.createPortal(reactComponent, this.eParentElement, keyGenerator_1.default());
        this.portal = portal;
        this.portalManager.mountReactPortal(portal, this, function(value) {
          resolve(value);
          if (_this.isStatelessComponent()) {
            if (_this.isSlowRenderer()) {
              _this.removeStaticMarkup();
            }
            setTimeout(function() {
              _this.removeStaticMarkup();
            });
          }
        });
      };
      LegacyReactComponent2.prototype.fallbackMethodAvailable = function(name) {
        return false;
      };
      LegacyReactComponent2.prototype.fallbackMethod = function(name, params) {
      };
      LegacyReactComponent2.prototype.isSlowRenderer = function() {
        return this.staticRenderTime >= LegacyReactComponent2.SLOW_RENDERING_THRESHOLD;
      };
      LegacyReactComponent2.prototype.isNullValue = function() {
        return this.staticMarkup === "";
      };
      LegacyReactComponent2.prototype.renderStaticMarkup = function(params) {
        if (this.parentComponent.isDisableStaticMarkup() || !this.componentType.cellRenderer) {
          return;
        }
        var originalConsoleError = console.error;
        var reactComponent = react_1.createElement(this.reactComponent, params);
        try {
          console.error = function() {
          };
          var start = Date.now();
          var staticMarkup = server_1.renderToStaticMarkup(reactComponent);
          this.staticRenderTime = Date.now() - start;
          console.error = originalConsoleError;
          if (staticMarkup === "") {
            this.staticMarkup = staticMarkup;
          } else {
            if (staticMarkup) {
              this.staticMarkup = document.createElement("span");
              this.staticMarkup.innerHTML = staticMarkup;
              this.eParentElement.appendChild(this.staticMarkup);
            }
          }
        } catch (e) {
        } finally {
          console.error = originalConsoleError;
        }
      };
      LegacyReactComponent2.prototype.removeStaticMarkup = function() {
        if (this.parentComponent.isDisableStaticMarkup() || !this.componentType.cellRenderer) {
          return;
        }
        if (this.staticMarkup) {
          if (this.staticMarkup.remove) {
            this.staticMarkup.remove();
            this.staticMarkup = null;
          } else if (this.eParentElement.removeChild) {
            this.eParentElement.removeChild(this.staticMarkup);
            this.staticMarkup = null;
          }
        }
      };
      LegacyReactComponent2.prototype.rendered = function() {
        return this.isNullValue() || !!this.staticMarkup || this.isStatelessComponent() && this.statelessComponentRendered() || !!(!this.isStatelessComponent() && this.getFrameworkComponentInstance());
      };
      LegacyReactComponent2.SLOW_RENDERING_THRESHOLD = 3;
      return LegacyReactComponent2;
    }(reactComponent_1.ReactComponent);
    exports.LegacyReactComponent = LegacyReactComponent;
  }
});

// node_modules/ag-grid-react/lib/shared/agGridColumn.js
var require_agGridColumn = __commonJS({
  "node_modules/ag-grid-react/lib/shared/agGridColumn.js"(exports) {
    "use strict";
    var __extends2 = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __rest2 = exports && exports.__rest || function(s, e) {
      var t = {};
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var react_1 = __importStar(require_react());
    var prop_types_1 = __importDefault(require_prop_types());
    var AgGrid = __importStar((init_ag_grid_community_auto_esm(), __toCommonJS(ag_grid_community_auto_esm_exports)));
    var AgGridColumn = function(_super) {
      __extends2(AgGridColumn2, _super);
      function AgGridColumn2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      AgGridColumn2.prototype.render = function() {
        return null;
      };
      AgGridColumn2.mapChildColumnDefs = function(children) {
        return react_1.default.Children.map(children, function(child) {
          return !!child ? AgGridColumn2.toColDef(child.props) : null;
        });
      };
      AgGridColumn2.toColDef = function(columnProps) {
        var children = columnProps.children, colDef = __rest2(columnProps, ["children"]);
        if (AgGridColumn2.hasChildColumns(children)) {
          colDef.children = AgGridColumn2.mapChildColumnDefs(children);
        }
        return colDef;
      };
      AgGridColumn2.hasChildColumns = function(children) {
        return react_1.default.Children.count(children) > 0;
      };
      return AgGridColumn2;
    }(react_1.Component);
    exports.AgGridColumn = AgGridColumn;
    addProperties(AgGrid.ColDefUtil.BOOLEAN_PROPERTIES, prop_types_1.default.bool);
    addProperties(AgGrid.ColDefUtil.STRING_PROPERTIES, prop_types_1.default.string);
    addProperties(AgGrid.ColDefUtil.OBJECT_PROPERTIES, prop_types_1.default.object);
    addProperties(AgGrid.ColDefUtil.ARRAY_PROPERTIES, prop_types_1.default.array);
    addProperties(AgGrid.ColDefUtil.NUMBER_PROPERTIES, prop_types_1.default.number);
    addProperties(AgGrid.ColDefUtil.FUNCTION_PROPERTIES, prop_types_1.default.func);
    function addProperties(listOfProps, propType) {
      listOfProps.forEach(function(propKey) {
        AgGridColumn[propKey] = propType;
      });
    }
  }
});

// node_modules/ag-grid-react/lib/shared/changeDetectionService.js
var require_changeDetectionService = __commonJS({
  "node_modules/ag-grid-react/lib/shared/changeDetectionService.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ChangeDetectionStrategyType;
    (function(ChangeDetectionStrategyType2) {
      ChangeDetectionStrategyType2["IdentityCheck"] = "IdentityCheck";
      ChangeDetectionStrategyType2["DeepValueCheck"] = "DeepValueCheck";
      ChangeDetectionStrategyType2["NoCheck"] = "NoCheck";
    })(ChangeDetectionStrategyType = exports.ChangeDetectionStrategyType || (exports.ChangeDetectionStrategyType = {}));
    var SimpleFunctionalStrategy = function() {
      function SimpleFunctionalStrategy2(strategy) {
        this.strategy = strategy;
      }
      SimpleFunctionalStrategy2.prototype.areEqual = function(a, b) {
        return this.strategy(a, b);
      };
      return SimpleFunctionalStrategy2;
    }();
    var DeepValueStrategy = function() {
      function DeepValueStrategy2() {
      }
      DeepValueStrategy2.prototype.areEqual = function(a, b) {
        return DeepValueStrategy2.areEquivalent(DeepValueStrategy2.copy(a), DeepValueStrategy2.copy(b));
      };
      DeepValueStrategy2.unwrapStringOrNumber = function(obj) {
        return obj instanceof Number || obj instanceof String ? obj.valueOf() : obj;
      };
      DeepValueStrategy2.copy = function(value) {
        if (!value) {
          return value;
        }
        if (Array.isArray(value)) {
          var arrayCopy = [];
          for (var i = 0; i < value.length; i++) {
            arrayCopy.push(this.copy(value[i]));
          }
          return arrayCopy;
        }
        if (typeof value !== "object") {
          return value;
        }
        return [{}, value].reduce(function(r, o) {
          Object.keys(o).forEach(function(k) {
            r[k] = o[k];
          });
          return r;
        }, {});
      };
      DeepValueStrategy2.isNaN = function(value) {
        if (Number.isNaN) {
          return Number.isNaN(value);
        }
        return typeof value === "number" && isNaN(value);
      };
      DeepValueStrategy2.areEquivalent = function(a, b) {
        a = DeepValueStrategy2.unwrapStringOrNumber(a);
        b = DeepValueStrategy2.unwrapStringOrNumber(b);
        if (a === b)
          return true;
        if (a === null || b === null || typeof a !== typeof b)
          return false;
        if (DeepValueStrategy2.isNaN(a) && DeepValueStrategy2.isNaN(b)) {
          return true;
        }
        if (a instanceof Date) {
          return b instanceof Date && a.valueOf() === b.valueOf();
        }
        if (typeof a === "function") {
          return false;
        }
        if (typeof a !== "object" || a.$$typeof && a.$$typeof.toString() === "Symbol(react.element)") {
          return a == b;
        }
        if (Object.isFrozen(a) || Object.isFrozen(b)) {
          return a === b;
        }
        var newA = a.areEquivPropertyTracking === void 0, newB = b.areEquivPropertyTracking === void 0;
        try {
          var prop = void 0;
          if (newA) {
            a.areEquivPropertyTracking = [];
          } else if (a.areEquivPropertyTracking.some(function(other) {
            return other === b;
          }))
            return true;
          if (newB) {
            b.areEquivPropertyTracking = [];
          } else if (b.areEquivPropertyTracking.some(function(other) {
            return other === a;
          })) {
            return true;
          }
          a.areEquivPropertyTracking.push(b);
          b.areEquivPropertyTracking.push(a);
          var tmp = {};
          for (prop in a)
            if (prop != "areEquivPropertyTracking") {
              tmp[prop] = null;
            }
          for (prop in b)
            if (prop != "areEquivPropertyTracking") {
              tmp[prop] = null;
            }
          for (prop in tmp) {
            if (!this.areEquivalent(a[prop], b[prop])) {
              return false;
            }
          }
          return true;
        } finally {
          if (newA)
            delete a.areEquivPropertyTracking;
          if (newB)
            delete b.areEquivPropertyTracking;
        }
      };
      return DeepValueStrategy2;
    }();
    var ChangeDetectionService2 = function() {
      function ChangeDetectionService3() {
        var _a;
        this.strategyMap = (_a = {}, _a[ChangeDetectionStrategyType.DeepValueCheck] = new DeepValueStrategy(), _a[ChangeDetectionStrategyType.IdentityCheck] = new SimpleFunctionalStrategy(function(a, b) {
          return a === b;
        }), _a[ChangeDetectionStrategyType.NoCheck] = new SimpleFunctionalStrategy(function(a, b) {
          return false;
        }), _a);
      }
      ChangeDetectionService3.prototype.getStrategy = function(changeDetectionStrategy) {
        return this.strategyMap[changeDetectionStrategy];
      };
      return ChangeDetectionService3;
    }();
    exports.ChangeDetectionService = ChangeDetectionService2;
  }
});

// node_modules/ag-grid-react/lib/shared/newReactComponent.js
var require_newReactComponent = __commonJS({
  "node_modules/ag-grid-react/lib/shared/newReactComponent.js"(exports) {
    "use strict";
    var __extends2 = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign2 = exports && exports.__assign || function() {
      __assign2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign2.apply(this, arguments);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var react_1 = require_react();
    var react_dom_1 = require_react_dom();
    var ag_grid_community_1 = (init_ag_grid_community_auto_esm(), __toCommonJS(ag_grid_community_auto_esm_exports));
    var reactComponent_1 = require_reactComponent();
    var server_1 = require_server_browser();
    var keyGenerator_1 = __importDefault(require_keyGenerator());
    var NewReactComponent = function(_super) {
      __extends2(NewReactComponent2, _super);
      function NewReactComponent2(reactComponent, parentComponent, componentType) {
        var _this = _super.call(this, reactComponent, parentComponent, componentType) || this;
        _this.oldPortal = null;
        _this.key = keyGenerator_1.default();
        _this.portalKey = keyGenerator_1.default();
        return _this;
      }
      NewReactComponent2.prototype.init = function(params) {
        var _this = this;
        this.eParentElement = this.createParentElement(params);
        this.params = params;
        this.createOrUpdatePortal(params);
        return new ag_grid_community_1.AgPromise(function(resolve) {
          return _this.createReactComponent(resolve);
        });
      };
      NewReactComponent2.prototype.createOrUpdatePortal = function(params) {
        var _this = this;
        if (!this.isStatelessComponent()) {
          params.ref = function(element) {
            _this.componentInstance = element;
            _this.addParentContainerStyleAndClasses();
          };
        }
        this.reactElement = react_1.createElement(this.reactComponent, __assign2(__assign2({}, params), { key: this.key }));
        this.portal = react_dom_1.createPortal(this.reactElement, this.eParentElement, this.portalKey);
      };
      NewReactComponent2.prototype.createReactComponent = function(resolve) {
        this.portalManager.mountReactPortal(this.portal, this, function(value) {
          resolve(value);
        });
      };
      NewReactComponent2.prototype.isNullValue = function() {
        return this.valueRenderedIsNull(this.params);
      };
      NewReactComponent2.prototype.rendered = function() {
        return this.isStatelessComponent() && this.statelessComponentRendered() || !!(!this.isStatelessComponent() && this.getFrameworkComponentInstance());
      };
      NewReactComponent2.prototype.valueRenderedIsNull = function(params) {
        if (!this.componentType.cellRenderer) {
          return false;
        }
        var originalConsoleError = console.error;
        try {
          console.error = function() {
          };
          var staticMarkup = server_1.renderToStaticMarkup(react_1.createElement(this.reactComponent, params));
          return staticMarkup === "";
        } catch (ignore) {
        } finally {
          console.error = originalConsoleError;
        }
        return false;
      };
      NewReactComponent2.prototype.refreshComponent = function(args) {
        this.oldPortal = this.portal;
        this.createOrUpdatePortal(args);
        this.portalManager.updateReactPortal(this.oldPortal, this.portal);
      };
      NewReactComponent2.prototype.fallbackMethod = function(name, params) {
        var method = this[name + "Component"];
        if (!!method) {
          return method.bind(this)(params);
        }
      };
      NewReactComponent2.prototype.fallbackMethodAvailable = function(name) {
        var method = this[name + "Component"];
        return !!method;
      };
      return NewReactComponent2;
    }(reactComponent_1.ReactComponent);
    exports.NewReactComponent = NewReactComponent;
  }
});

// node_modules/ag-grid-react/lib/shared/portalManager.js
var require_portalManager = __commonJS({
  "node_modules/ag-grid-react/lib/shared/portalManager.js"(exports) {
    "use strict";
    var __spreadArrays = exports && exports.__spreadArrays || function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var PortalManager = function() {
      function PortalManager2(parent, wrappingElement, maxComponentCreationTimeMs) {
        this.destroyed = false;
        this.portals = [];
        this.hasPendingPortalUpdate = false;
        this.wrappingElement = wrappingElement ? wrappingElement : "div";
        this.parent = parent;
        this.maxComponentCreationTimeMs = maxComponentCreationTimeMs ? maxComponentCreationTimeMs : PortalManager2.MAX_COMPONENT_CREATION_TIME_IN_MS;
      }
      PortalManager2.prototype.getPortals = function() {
        return this.portals;
      };
      PortalManager2.prototype.destroy = function() {
        this.destroyed = true;
      };
      PortalManager2.prototype.destroyPortal = function(portal) {
        this.portals = this.portals.filter(function(curPortal) {
          return curPortal !== portal;
        });
        this.batchUpdate();
      };
      PortalManager2.prototype.getComponentWrappingElement = function() {
        return this.wrappingElement;
      };
      PortalManager2.prototype.mountReactPortal = function(portal, reactComponent, resolve) {
        this.portals = __spreadArrays(this.portals, [portal]);
        this.waitForInstance(reactComponent, resolve);
        this.batchUpdate();
      };
      PortalManager2.prototype.updateReactPortal = function(oldPortal, newPortal) {
        this.portals[this.portals.indexOf(oldPortal)] = newPortal;
        this.batchUpdate();
      };
      PortalManager2.prototype.batchUpdate = function() {
        var _this = this;
        if (this.hasPendingPortalUpdate) {
          return;
        }
        setTimeout(function() {
          if (!_this.destroyed) {
            _this.parent.forceUpdate(function() {
              _this.hasPendingPortalUpdate = false;
            });
          }
        });
        this.hasPendingPortalUpdate = true;
      };
      PortalManager2.prototype.waitForInstance = function(reactComponent, resolve, startTime) {
        var _this = this;
        if (startTime === void 0) {
          startTime = Date.now();
        }
        if (this.destroyed) {
          resolve(null);
          return;
        }
        if (reactComponent.rendered()) {
          resolve(reactComponent);
        } else {
          if (Date.now() - startTime >= this.maxComponentCreationTimeMs && !this.hasPendingPortalUpdate) {
            if (reactComponent.isNullValue()) {
              resolve(reactComponent);
              return;
            }
            console.error("AG Grid: React Component '" + reactComponent.getReactComponentName() + "' not created within " + this.maxComponentCreationTimeMs + "ms");
            return;
          }
          window.setTimeout(function() {
            _this.waitForInstance(reactComponent, resolve, startTime);
          });
        }
      };
      PortalManager2.MAX_COMPONENT_CREATION_TIME_IN_MS = 1e3;
      return PortalManager2;
    }();
    exports.PortalManager = PortalManager;
  }
});

// node_modules/ag-grid-react/lib/reactUi/beansContext.js
var require_beansContext = __commonJS({
  "node_modules/ag-grid-react/lib/reactUi/beansContext.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var react_1 = __importDefault(require_react());
    exports.BeansContext = react_1.default.createContext({});
  }
});

// node_modules/ag-grid-react/lib/reactUi/jsComp.js
var require_jsComp = __commonJS({
  "node_modules/ag-grid-react/lib/reactUi/jsComp.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.showJsComp = function(compDetails, context, eParent, ref) {
      var doNothing = !compDetails || compDetails.componentFromFramework;
      if (doNothing) {
        return;
      }
      var promise = compDetails.newAgStackInstance();
      if (!promise) {
        return;
      }
      var comp;
      var compGui;
      var destroyed = false;
      promise.then(function(c) {
        if (destroyed) {
          context.destroyBean(c);
          return;
        }
        comp = c;
        compGui = comp.getGui();
        eParent.appendChild(compGui);
        setRef(ref, comp);
      });
      return function() {
        destroyed = true;
        if (!comp) {
          return;
        }
        if (compGui && compGui.parentElement) {
          compGui.parentElement.removeChild(compGui);
        }
        context.destroyBean(comp);
        if (ref) {
          setRef(ref, void 0);
        }
      };
    };
    var setRef = function(ref, value) {
      if (!ref) {
        return;
      }
      if (ref instanceof Function) {
        var refCallback = ref;
        refCallback(value);
      } else {
        var refObj = ref;
        refObj.current = value;
      }
    };
    exports.createSyncJsComp = function(compDetails) {
      var promise = compDetails.newAgStackInstance();
      if (!promise) {
        return;
      }
      return promise.resolveNow(null, function(x) {
        return x;
      });
    };
  }
});

// node_modules/ag-grid-react/lib/reactUi/useEffectOnce.js
var require_useEffectOnce = __commonJS({
  "node_modules/ag-grid-react/lib/reactUi/useEffectOnce.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var react_1 = require_react();
    exports.useEffectOnce = function(effect) {
      var effectFn = react_1.useRef(effect);
      var destroyFn = react_1.useRef();
      var effectCalled = react_1.useRef(false);
      var rendered = react_1.useRef(false);
      var _a = react_1.useState(0), setVal = _a[1];
      if (effectCalled.current) {
        rendered.current = true;
      }
      react_1.useEffect(function() {
        if (!effectCalled.current) {
          destroyFn.current = effectFn.current();
          effectCalled.current = true;
        }
        setVal(function(val) {
          return val + 1;
        });
        return function() {
          if (!rendered.current) {
            return;
          }
          if (destroyFn.current) {
            destroyFn.current();
          }
        };
      }, []);
    };
    exports.useLayoutEffectOnce = function(effect) {
      var effectFn = react_1.useRef(effect);
      var destroyFn = react_1.useRef();
      var effectCalled = react_1.useRef(false);
      var rendered = react_1.useRef(false);
      var _a = react_1.useState(0), setVal = _a[1];
      if (effectCalled.current) {
        rendered.current = true;
      }
      react_1.useLayoutEffect(function() {
        if (!effectCalled.current) {
          destroyFn.current = effectFn.current();
          effectCalled.current = true;
        }
        setVal(function(val) {
          return val + 1;
        });
        return function() {
          if (!rendered.current) {
            return;
          }
          if (destroyFn.current) {
            destroyFn.current();
          }
        };
      }, []);
    };
  }
});

// node_modules/ag-grid-react/lib/reactUi/utils.js
var require_utils = __commonJS({
  "node_modules/ag-grid-react/lib/reactUi/utils.js"(exports) {
    "use strict";
    var __assign2 = exports && exports.__assign || function() {
      __assign2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign2.apply(this, arguments);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.classesList = function() {
      var list = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        list[_i] = arguments[_i];
      }
      var filtered = list.filter(function(s) {
        return s != null && s !== "";
      });
      return filtered.join(" ");
    };
    var CssClasses = function() {
      function CssClasses2() {
        var _this = this;
        var initialClasses = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          initialClasses[_i] = arguments[_i];
        }
        this.classesMap = {};
        initialClasses.forEach(function(className) {
          _this.classesMap[className] = true;
        });
      }
      CssClasses2.prototype.setClass = function(className, on) {
        var nothingHasChanged = !!this.classesMap[className] == on;
        if (nothingHasChanged) {
          return this;
        }
        var res = new CssClasses2();
        res.classesMap = __assign2({}, this.classesMap);
        res.classesMap[className] = on;
        return res;
      };
      CssClasses2.prototype.toString = function() {
        var _this = this;
        var res = Object.keys(this.classesMap).filter(function(key) {
          return _this.classesMap[key];
        }).join(" ");
        return res;
      };
      return CssClasses2;
    }();
    exports.CssClasses = CssClasses;
    exports.isComponentStateless = function(Component2) {
      var hasSymbol = function() {
        return typeof Symbol === "function" && Symbol.for;
      };
      var getMemoType = function() {
        return hasSymbol() ? Symbol.for("react.memo") : 60115;
      };
      return typeof Component2 === "function" && !(Component2.prototype && Component2.prototype.isReactComponent) || typeof Component2 === "object" && Component2.$$typeof === getMemoType();
    };
  }
});

// node_modules/ag-grid-react/lib/reactUi/cellRenderer/groupCellRenderer.js
var require_groupCellRenderer = __commonJS({
  "node_modules/ag-grid-react/lib/reactUi/cellRenderer/groupCellRenderer.js"(exports) {
    "use strict";
    var __assign2 = exports && exports.__assign || function() {
      __assign2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign2.apply(this, arguments);
    };
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var ag_grid_community_1 = (init_ag_grid_community_auto_esm(), __toCommonJS(ag_grid_community_auto_esm_exports));
    var react_1 = __importStar(require_react());
    var beansContext_1 = require_beansContext();
    var jsComp_1 = require_jsComp();
    var useEffectOnce_1 = require_useEffectOnce();
    var utils_1 = require_utils();
    var GroupCellRenderer2 = react_1.forwardRef(function(props, ref) {
      var context = react_1.useContext(beansContext_1.BeansContext).context;
      var eGui = react_1.useRef(null);
      var eValueRef = react_1.useRef(null);
      var eCheckboxRef = react_1.useRef(null);
      var eExpandedRef = react_1.useRef(null);
      var eContractedRef = react_1.useRef(null);
      var _a = react_1.useState(), innerCompDetails = _a[0], setInnerCompDetails = _a[1];
      var _b = react_1.useState(), childCount = _b[0], setChildCount = _b[1];
      var _c = react_1.useState(), value = _c[0], setValue = _c[1];
      var _d = react_1.useState(new utils_1.CssClasses()), cssClasses = _d[0], setCssClasses = _d[1];
      var _e = react_1.useState(new utils_1.CssClasses("ag-hidden")), expandedCssClasses = _e[0], setExpandedCssClasses = _e[1];
      var _f = react_1.useState(new utils_1.CssClasses("ag-hidden")), contractedCssClasses = _f[0], setContractedCssClasses = _f[1];
      var _g = react_1.useState(new utils_1.CssClasses("ag-invisible")), checkboxCssClasses = _g[0], setCheckboxCssClasses = _g[1];
      react_1.useImperativeHandle(ref, function() {
        return {
          refresh: function() {
            return false;
          }
        };
      });
      react_1.useEffect(function() {
        return jsComp_1.showJsComp(innerCompDetails, context, eValueRef.current);
      }, [innerCompDetails]);
      useEffectOnce_1.useEffectOnce(function() {
        var compProxy = {
          setInnerRenderer: function(details, valueToDisplay) {
            setInnerCompDetails(details);
            setValue(valueToDisplay);
          },
          setChildCount: function(count) {
            return setChildCount(count);
          },
          addOrRemoveCssClass: function(name, on) {
            return setCssClasses(function(prev) {
              return prev.setClass(name, on);
            });
          },
          setContractedDisplayed: function(displayed) {
            return setContractedCssClasses(function(prev) {
              return prev.setClass("ag-hidden", !displayed);
            });
          },
          setExpandedDisplayed: function(displayed) {
            return setExpandedCssClasses(function(prev) {
              return prev.setClass("ag-hidden", !displayed);
            });
          },
          setCheckboxVisible: function(visible) {
            return setCheckboxCssClasses(function(prev) {
              return prev.setClass("ag-invisible", !visible);
            });
          }
        };
        var ctrl = context.createBean(new ag_grid_community_1.GroupCellRendererCtrl());
        ctrl.init(compProxy, eGui.current, eCheckboxRef.current, eExpandedRef.current, eContractedRef.current, GroupCellRenderer2, props);
        return function() {
          context.destroyBean(ctrl);
        };
      });
      var className = react_1.useMemo(function() {
        return "ag-cell-wrapper " + cssClasses.toString();
      }, [cssClasses]);
      var expandedClassName = react_1.useMemo(function() {
        return "ag-group-expanded " + expandedCssClasses.toString();
      }, [expandedCssClasses]);
      var contractedClassName = react_1.useMemo(function() {
        return "ag-group-contracted " + contractedCssClasses.toString();
      }, [contractedCssClasses]);
      var checkboxClassName = react_1.useMemo(function() {
        return "ag-group-checkbox " + checkboxCssClasses.toString();
      }, [checkboxCssClasses]);
      var useFwRenderer = innerCompDetails && innerCompDetails.componentFromFramework;
      var FwRenderer = useFwRenderer ? innerCompDetails.componentClass : void 0;
      var useValue = innerCompDetails == null && value != null;
      var escapedValue = ag_grid_community_1._.escapeString(value, true);
      return react_1.default.createElement("span", __assign2({ className, ref: eGui }, !props.colDef ? { role: "gridcell" } : {}), react_1.default.createElement("span", { className: expandedClassName, ref: eExpandedRef }), react_1.default.createElement("span", { className: contractedClassName, ref: eContractedRef }), react_1.default.createElement("span", { className: checkboxClassName, ref: eCheckboxRef }), react_1.default.createElement("span", { className: "ag-group-value", ref: eValueRef }, useValue && react_1.default.createElement(react_1.default.Fragment, null, escapedValue), useFwRenderer && react_1.default.createElement(FwRenderer, __assign2({}, innerCompDetails.params))), react_1.default.createElement("span", { className: "ag-group-child-count" }, childCount));
    });
    exports.default = GroupCellRenderer2;
  }
});

// node_modules/ag-grid-react/lib/reactUi/header/headerCellComp.js
var require_headerCellComp = __commonJS({
  "node_modules/ag-grid-react/lib/reactUi/header/headerCellComp.js"(exports) {
    "use strict";
    var __assign2 = exports && exports.__assign || function() {
      __assign2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign2.apply(this, arguments);
    };
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var react_1 = __importStar(require_react());
    var beansContext_1 = require_beansContext();
    var ag_grid_community_1 = (init_ag_grid_community_auto_esm(), __toCommonJS(ag_grid_community_auto_esm_exports));
    var utils_1 = require_utils();
    var jsComp_1 = require_jsComp();
    var useEffectOnce_1 = require_useEffectOnce();
    var HeaderCellComp2 = function(props) {
      var context = react_1.useContext(beansContext_1.BeansContext).context;
      var _a = react_1.useState(), width = _a[0], setWidth = _a[1];
      var _b = react_1.useState(), title = _b[0], setTitle = _b[1];
      var _c = react_1.useState(), colId = _c[0], setColId = _c[1];
      var _d = react_1.useState(), ariaSort = _d[0], setAriaSort2 = _d[1];
      var _e = react_1.useState(), ariaDescription = _e[0], setAriaDescription2 = _e[1];
      var _f = react_1.useState(), userCompDetails = _f[0], setUserCompDetails = _f[1];
      var eGui = react_1.useRef(null);
      var eResize = react_1.useRef(null);
      var eHeaderCompWrapper = react_1.useRef(null);
      var userCompRef = react_1.useRef();
      var ctrl = props.ctrl;
      var cssClassManager = react_1.useMemo(function() {
        return new ag_grid_community_1.CssClassManager(function() {
          return eGui.current;
        });
      }, []);
      useEffectOnce_1.useEffectOnce(function() {
        var compProxy = {
          setWidth: function(width2) {
            return setWidth(width2);
          },
          addOrRemoveCssClass: function(name, on) {
            return cssClassManager.addOrRemoveCssClass(name, on);
          },
          setColId: function(id) {
            return setColId(id);
          },
          setTitle: function(title2) {
            return setTitle(title2);
          },
          setAriaDescription: function(description) {
            return setAriaDescription2(description);
          },
          setAriaSort: function(sort) {
            return setAriaSort2(sort);
          },
          setUserCompDetails: function(compDetails) {
            return setUserCompDetails(compDetails);
          },
          getUserCompInstance: function() {
            return userCompRef.current || void 0;
          }
        };
        ctrl.setComp(compProxy, eGui.current, eResize.current, eHeaderCompWrapper.current);
        var selectAllGui = ctrl.getSelectAllGui();
        eResize.current.insertAdjacentElement("afterend", selectAllGui);
      });
      react_1.useEffect(function() {
        return jsComp_1.showJsComp(userCompDetails, context, eHeaderCompWrapper.current, userCompRef);
      }, [userCompDetails]);
      react_1.useEffect(function() {
        ctrl.setDragSource(eGui.current);
      }, [userCompDetails]);
      var style = react_1.useMemo(function() {
        return { width };
      }, [width]);
      var userCompStateless = react_1.useMemo(function() {
        var _a2;
        var res = ((_a2 = userCompDetails) === null || _a2 === void 0 ? void 0 : _a2.componentFromFramework) && utils_1.isComponentStateless(userCompDetails.componentClass);
        return !!res;
      }, [userCompDetails]);
      var reactUserComp = userCompDetails && userCompDetails.componentFromFramework;
      var UserCompClass = userCompDetails && userCompDetails.componentClass;
      return react_1.default.createElement("div", { ref: eGui, className: "ag-header-cell", style, title, "col-id": colId, "aria-sort": ariaSort, role: "columnheader", tabIndex: -1, "aria-description": ariaDescription }, react_1.default.createElement("div", { ref: eResize, className: "ag-header-cell-resize", role: "presentation" }), react_1.default.createElement("div", { ref: eHeaderCompWrapper, className: "ag-header-cell-comp-wrapper", role: "presentation" }, reactUserComp && userCompStateless && react_1.default.createElement(UserCompClass, __assign2({}, userCompDetails.params)), reactUserComp && !userCompStateless && react_1.default.createElement(UserCompClass, __assign2({}, userCompDetails.params, { ref: userCompRef }))));
    };
    exports.default = react_1.memo(HeaderCellComp2);
  }
});

// node_modules/ag-grid-react/lib/reactUi/header/headerGroupCellComp.js
var require_headerGroupCellComp = __commonJS({
  "node_modules/ag-grid-react/lib/reactUi/header/headerGroupCellComp.js"(exports) {
    "use strict";
    var __assign2 = exports && exports.__assign || function() {
      __assign2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign2.apply(this, arguments);
    };
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var react_1 = __importStar(require_react());
    var beansContext_1 = require_beansContext();
    var jsComp_1 = require_jsComp();
    var useEffectOnce_1 = require_useEffectOnce();
    var utils_1 = require_utils();
    var HeaderGroupCellComp2 = function(props) {
      var context = react_1.useContext(beansContext_1.BeansContext).context;
      var _a = react_1.useState(new utils_1.CssClasses()), cssClasses = _a[0], setCssClasses = _a[1];
      var _b = react_1.useState(new utils_1.CssClasses()), cssResizableClasses = _b[0], setResizableCssClasses = _b[1];
      var _c = react_1.useState(), width = _c[0], setWidth = _c[1];
      var _d = react_1.useState(), title = _d[0], setTitle = _d[1];
      var _e = react_1.useState(), colId = _e[0], setColId = _e[1];
      var _f = react_1.useState(), ariaExpanded = _f[0], setAriaExpanded2 = _f[1];
      var _g = react_1.useState(), userCompDetails = _g[0], setUserCompDetails = _g[1];
      var eGui = react_1.useRef(null);
      var eResize = react_1.useRef(null);
      var ctrl = props.ctrl;
      useEffectOnce_1.useEffectOnce(function() {
        var compProxy = {
          setWidth: function(width2) {
            return setWidth(width2);
          },
          addOrRemoveCssClass: function(name, on) {
            return setCssClasses(function(prev) {
              return prev.setClass(name, on);
            });
          },
          setColId: function(id) {
            return setColId(id);
          },
          setTitle: function(title2) {
            return setTitle(title2);
          },
          setUserCompDetails: function(compDetails) {
            return setUserCompDetails(compDetails);
          },
          addOrRemoveResizableCssClass: function(name, on) {
            return setResizableCssClasses(function(prev) {
              return prev.setClass(name, on);
            });
          },
          setAriaExpanded: function(expanded) {
            return setAriaExpanded2(expanded);
          }
        };
        ctrl.setComp(compProxy, eGui.current, eResize.current);
      });
      react_1.useEffect(function() {
        return jsComp_1.showJsComp(userCompDetails, context, eGui.current);
      }, [userCompDetails]);
      react_1.useEffect(function() {
        var userCompDomElement = void 0;
        eGui.current.childNodes.forEach(function(node) {
          if (node != null && node !== eResize.current) {
            userCompDomElement = node;
          }
        });
        userCompDomElement && ctrl.setDragSource(userCompDomElement);
      }, [userCompDetails]);
      var style = react_1.useMemo(function() {
        return {
          width
        };
      }, [width]);
      var className = react_1.useMemo(function() {
        return "ag-header-group-cell " + cssClasses.toString();
      }, [cssClasses]);
      var resizableClassName = react_1.useMemo(function() {
        return "ag-header-cell-resize " + cssResizableClasses.toString();
      }, [cssResizableClasses]);
      var reactUserComp = userCompDetails && userCompDetails.componentFromFramework;
      var UserCompClass = userCompDetails && userCompDetails.componentClass;
      return react_1.default.createElement("div", { ref: eGui, className, style, title, "col-id": colId, role: "columnheader", tabIndex: -1, "aria-expanded": ariaExpanded }, reactUserComp && react_1.default.createElement(UserCompClass, __assign2({}, userCompDetails.params)), react_1.default.createElement("div", { ref: eResize, className: resizableClassName }));
    };
    exports.default = react_1.memo(HeaderGroupCellComp2);
  }
});

// node_modules/ag-grid-react/lib/reactUi/header/headerFilterCellComp.js
var require_headerFilterCellComp = __commonJS({
  "node_modules/ag-grid-react/lib/reactUi/header/headerFilterCellComp.js"(exports) {
    "use strict";
    var __assign2 = exports && exports.__assign || function() {
      __assign2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign2.apply(this, arguments);
    };
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var react_1 = __importStar(require_react());
    var beansContext_1 = require_beansContext();
    var ag_grid_community_1 = (init_ag_grid_community_auto_esm(), __toCommonJS(ag_grid_community_auto_esm_exports));
    var utils_1 = require_utils();
    var jsComp_1 = require_jsComp();
    var useEffectOnce_1 = require_useEffectOnce();
    var HeaderFilterCellComp2 = function(props) {
      var context = react_1.useContext(beansContext_1.BeansContext).context;
      var _a = react_1.useState(new utils_1.CssClasses("ag-header-cell", "ag-floating-filter")), cssClasses = _a[0], setCssClasses = _a[1];
      var _b = react_1.useState(new utils_1.CssClasses()), cssBodyClasses = _b[0], setBodyCssClasses = _b[1];
      var _c = react_1.useState(new utils_1.CssClasses("ag-floating-filter-button", "ag-hidden")), cssButtonWrapperClasses = _c[0], setButtonWrapperCssClasses = _c[1];
      var _d = react_1.useState(), width = _d[0], setWidth = _d[1];
      var _e = react_1.useState(), userCompDetails = _e[0], setUserCompDetails = _e[1];
      var eGui = react_1.useRef(null);
      var eFloatingFilterBody = react_1.useRef(null);
      var eButtonWrapper = react_1.useRef(null);
      var eButtonShowMainFilter = react_1.useRef(null);
      var alreadyResolved = react_1.useRef(false);
      var userCompResolve = react_1.useRef();
      var userCompPromise = react_1.useRef();
      useEffectOnce_1.useEffectOnce(function() {
        userCompPromise.current = new ag_grid_community_1.AgPromise(function(resolve) {
          userCompResolve.current = resolve;
        });
      });
      var userCompRef = function(value) {
        if (alreadyResolved.current) {
          return;
        }
        if (value == null) {
          return;
        }
        userCompResolve.current && userCompResolve.current(value);
        alreadyResolved.current = true;
      };
      var ctrl = props.ctrl;
      useEffectOnce_1.useEffectOnce(function() {
        var compProxy = {
          addOrRemoveCssClass: function(name, on) {
            return setCssClasses(function(prev) {
              return prev.setClass(name, on);
            });
          },
          addOrRemoveBodyCssClass: function(name, on) {
            return setBodyCssClasses(function(prev) {
              return prev.setClass(name, on);
            });
          },
          addOrRemoveButtonWrapperCssClass: function(name, on) {
            return setButtonWrapperCssClasses(function(prev) {
              return prev.setClass(name, on);
            });
          },
          setWidth: function(width2) {
            return setWidth(width2);
          },
          setCompDetails: function(compDetails) {
            return setUserCompDetails(compDetails);
          },
          getFloatingFilterComp: function() {
            return userCompPromise.current ? userCompPromise.current : null;
          },
          setMenuIcon: function(eIcon) {
            return eButtonShowMainFilter.current.appendChild(eIcon);
          }
        };
        ctrl.setComp(compProxy, eGui.current, eButtonShowMainFilter.current, eFloatingFilterBody.current);
      });
      react_1.useEffect(function() {
        return jsComp_1.showJsComp(userCompDetails, context, eFloatingFilterBody.current, userCompRef);
      }, [userCompDetails]);
      var style = react_1.useMemo(function() {
        return {
          width
        };
      }, [width]);
      var className = react_1.useMemo(function() {
        return cssClasses.toString();
      }, [cssClasses]);
      var bodyClassName = react_1.useMemo(function() {
        return cssBodyClasses.toString();
      }, [cssBodyClasses]);
      var buttonWrapperClassName = react_1.useMemo(function() {
        return cssButtonWrapperClasses.toString();
      }, [cssButtonWrapperClasses]);
      var userCompStateless = react_1.useMemo(function() {
        var res = userCompDetails && userCompDetails.componentFromFramework && utils_1.isComponentStateless(userCompDetails.componentClass);
        return !!res;
      }, [userCompDetails]);
      var reactUserComp = userCompDetails && userCompDetails.componentFromFramework;
      var UserCompClass = userCompDetails && userCompDetails.componentClass;
      return react_1.default.createElement("div", { ref: eGui, className, style, role: "gridcell", tabIndex: -1 }, react_1.default.createElement("div", { ref: eFloatingFilterBody, className: bodyClassName, role: "presentation" }, reactUserComp && userCompStateless && react_1.default.createElement(UserCompClass, __assign2({}, userCompDetails.params)), reactUserComp && !userCompStateless && react_1.default.createElement(UserCompClass, __assign2({}, userCompDetails.params, { ref: userCompRef }))), react_1.default.createElement("div", { ref: eButtonWrapper, className: buttonWrapperClassName, role: "presentation" }, react_1.default.createElement("button", { ref: eButtonShowMainFilter, type: "button", "aria-label": "Open Filter Menu", className: "ag-floating-filter-button-button", tabIndex: -1 })));
    };
    exports.default = react_1.memo(HeaderFilterCellComp2);
  }
});

// node_modules/ag-grid-react/lib/reactUi/header/headerRowComp.js
var require_headerRowComp = __commonJS({
  "node_modules/ag-grid-react/lib/reactUi/header/headerRowComp.js"(exports) {
    "use strict";
    var __spreadArrays = exports && exports.__spreadArrays || function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var ag_grid_community_1 = (init_ag_grid_community_auto_esm(), __toCommonJS(ag_grid_community_auto_esm_exports));
    var react_1 = __importStar(require_react());
    var beansContext_1 = require_beansContext();
    var headerCellComp_1 = __importDefault(require_headerCellComp());
    var headerGroupCellComp_1 = __importDefault(require_headerGroupCellComp());
    var headerFilterCellComp_1 = __importDefault(require_headerFilterCellComp());
    var useEffectOnce_1 = require_useEffectOnce();
    var HeaderRowComp2 = function(props) {
      var gridOptionsWrapper = react_1.useContext(beansContext_1.BeansContext).gridOptionsWrapper;
      var _a = react_1.useState(), transform = _a[0], setTransform = _a[1];
      var _b = react_1.useState(), height = _b[0], setHeight = _b[1];
      var _c = react_1.useState(), top = _c[0], setTop = _c[1];
      var _d = react_1.useState(), width = _d[0], setWidth = _d[1];
      var _e = react_1.useState(), ariaRowIndex = _e[0], setAriaRowIndex2 = _e[1];
      var _f = react_1.useState([]), cellCtrls = _f[0], setCellCtrls = _f[1];
      var eGui = react_1.useRef(null);
      var ctrl = props.ctrl;
      var typeColumn = ctrl.getType() === ag_grid_community_1.HeaderRowType.COLUMN;
      var typeGroup = ctrl.getType() === ag_grid_community_1.HeaderRowType.COLUMN_GROUP;
      var typeFilter = ctrl.getType() === ag_grid_community_1.HeaderRowType.FLOATING_FILTER;
      var setCellCtrlsMaintainOrder = react_1.useCallback(function(prev, next) {
        if (gridOptionsWrapper.isEnsureDomOrder()) {
          return next;
        }
        var prevMap = ag_grid_community_1._.mapById(prev, function(c) {
          return c.getInstanceId();
        });
        var nextMap = ag_grid_community_1._.mapById(next, function(c) {
          return c.getInstanceId();
        });
        var oldCtrlsWeAreKeeping = prev.filter(function(c) {
          return nextMap.has(c.getInstanceId());
        });
        var newCtrls = next.filter(function(c) {
          return !prevMap.has(c.getInstanceId());
        });
        return __spreadArrays(oldCtrlsWeAreKeeping, newCtrls);
      }, []);
      useEffectOnce_1.useEffectOnce(function() {
        var compProxy = {
          setTransform: function(transform2) {
            return setTransform(transform2);
          },
          setHeight: function(height2) {
            return setHeight(height2);
          },
          setTop: function(top2) {
            return setTop(top2);
          },
          setHeaderCtrls: function(ctrls) {
            return setCellCtrls(function(prev) {
              return setCellCtrlsMaintainOrder(prev, ctrls);
            });
          },
          setWidth: function(width2) {
            return setWidth(width2);
          },
          setAriaRowIndex: function(rowIndex) {
            return setAriaRowIndex2(rowIndex);
          }
        };
        ctrl.setComp(compProxy);
      });
      var style = react_1.useMemo(function() {
        return {
          transform,
          height,
          top,
          width
        };
      }, [transform, height, top, width]);
      var className = react_1.useMemo(function() {
        var res = ["ag-header-row"];
        typeColumn && res.push("ag-header-row-column");
        typeGroup && res.push("ag-header-row-column-group");
        typeFilter && res.push("ag-header-row-column-filter");
        return res.join(" ");
      }, []);
      var createCellJsx = react_1.useCallback(function(cellCtrl) {
        switch (ctrl.getType()) {
          case ag_grid_community_1.HeaderRowType.COLUMN_GROUP:
            return react_1.default.createElement(headerGroupCellComp_1.default, { ctrl: cellCtrl, key: cellCtrl.getInstanceId() });
          case ag_grid_community_1.HeaderRowType.FLOATING_FILTER:
            return react_1.default.createElement(headerFilterCellComp_1.default, { ctrl: cellCtrl, key: cellCtrl.getInstanceId() });
          default:
            return react_1.default.createElement(headerCellComp_1.default, { ctrl: cellCtrl, key: cellCtrl.getInstanceId() });
        }
      }, []);
      return react_1.default.createElement("div", { ref: eGui, className, role: "row", style, "aria-rowindex": ariaRowIndex }, cellCtrls.map(createCellJsx));
    };
    exports.default = react_1.memo(HeaderRowComp2);
  }
});

// node_modules/ag-grid-react/lib/reactUi/header/headerRowContainerComp.js
var require_headerRowContainerComp = __commonJS({
  "node_modules/ag-grid-react/lib/reactUi/header/headerRowContainerComp.js"(exports) {
    "use strict";
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var react_1 = __importStar(require_react());
    var beansContext_1 = require_beansContext();
    var ag_grid_community_1 = (init_ag_grid_community_auto_esm(), __toCommonJS(ag_grid_community_auto_esm_exports));
    var utils_1 = require_utils();
    var headerRowComp_1 = __importDefault(require_headerRowComp());
    var useEffectOnce_1 = require_useEffectOnce();
    var HeaderRowContainerComp2 = function(props) {
      var _a = react_1.useState(new utils_1.CssClasses()), cssClasses = _a[0], setCssClasses = _a[1];
      var _b = react_1.useState(), centerContainerWidth = _b[0], setCenterContainerWidth = _b[1];
      var _c = react_1.useState(), centerContainerTransform = _c[0], setCenterContainerTransform = _c[1];
      var _d = react_1.useState(), pinnedContainerWidth = _d[0], setPinnedContainerWidth = _d[1];
      var _e = react_1.useState([]), headerRowCtrls = _e[0], setHeaderRowCtrls = _e[1];
      var context = react_1.useContext(beansContext_1.BeansContext).context;
      var eGui = react_1.useRef(null);
      var pinnedLeft = props.pinned === ag_grid_community_1.Constants.PINNED_LEFT;
      var pinnedRight = props.pinned === ag_grid_community_1.Constants.PINNED_RIGHT;
      var centre = !pinnedLeft && !pinnedRight;
      useEffectOnce_1.useEffectOnce(function() {
        var compProxy = {
          addOrRemoveCssClass: function(name, on) {
            return setCssClasses(function(prev) {
              return prev.setClass(name, on);
            });
          },
          setCtrls: function(ctrls) {
            return setHeaderRowCtrls(ctrls);
          },
          setCenterWidth: function(width) {
            return setCenterContainerWidth(width);
          },
          setContainerTransform: function(transform) {
            return setCenterContainerTransform(transform);
          },
          setPinnedContainerWidth: function(width) {
            return setPinnedContainerWidth(width);
          }
        };
        var ctrl = context.createBean(new ag_grid_community_1.HeaderRowContainerCtrl(props.pinned));
        ctrl.setComp(compProxy, eGui.current);
        return function() {
          context.destroyBean(ctrl);
        };
      });
      var className = react_1.useMemo(function() {
        return cssClasses.toString();
      }, [cssClasses]);
      var insertRowsJsx = function() {
        return headerRowCtrls.map(function(ctrl) {
          return react_1.default.createElement(headerRowComp_1.default, { ctrl, key: ctrl.getInstanceId() });
        });
      };
      var eCenterContainerStyle = react_1.useMemo(function() {
        return {
          width: centerContainerWidth,
          transform: centerContainerTransform
        };
      }, [centerContainerWidth, centerContainerTransform]);
      var ePinnedStyle = react_1.useMemo(function() {
        return {
          width: pinnedContainerWidth,
          minWidth: pinnedContainerWidth,
          maxWidth: pinnedContainerWidth
        };
      }, [pinnedContainerWidth]);
      return react_1.default.createElement(react_1.default.Fragment, null, pinnedLeft && react_1.default.createElement("div", { ref: eGui, className: "ag-pinned-left-header " + className, role: "presentation", style: ePinnedStyle }, insertRowsJsx()), pinnedRight && react_1.default.createElement("div", { ref: eGui, className: "ag-pinned-right-header " + className, role: "presentation", style: ePinnedStyle }, insertRowsJsx()), centre && react_1.default.createElement("div", { ref: eGui, className: "ag-header-viewport " + className, role: "presentation" }, react_1.default.createElement("div", { className: "ag-header-container", role: "rowgroup", style: eCenterContainerStyle }, insertRowsJsx())));
    };
    exports.default = react_1.memo(HeaderRowContainerComp2);
  }
});

// node_modules/ag-grid-react/lib/reactUi/header/gridHeaderComp.js
var require_gridHeaderComp = __commonJS({
  "node_modules/ag-grid-react/lib/reactUi/header/gridHeaderComp.js"(exports) {
    "use strict";
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var react_1 = __importStar(require_react());
    var beansContext_1 = require_beansContext();
    var ag_grid_community_1 = (init_ag_grid_community_auto_esm(), __toCommonJS(ag_grid_community_auto_esm_exports));
    var utils_1 = require_utils();
    var headerRowContainerComp_1 = __importDefault(require_headerRowContainerComp());
    var useEffectOnce_1 = require_useEffectOnce();
    var GridHeaderComp2 = function() {
      var _a = react_1.useState(new utils_1.CssClasses()), cssClasses = _a[0], setCssClasses = _a[1];
      var _b = react_1.useState(), height = _b[0], setHeight = _b[1];
      var context = react_1.useContext(beansContext_1.BeansContext).context;
      var eGui = react_1.useRef(null);
      useEffectOnce_1.useEffectOnce(function() {
        var compProxy = {
          addOrRemoveCssClass: function(name, on) {
            return setCssClasses(function(prev) {
              return prev.setClass(name, on);
            });
          },
          setHeightAndMinHeight: function(height2) {
            return setHeight(height2);
          }
        };
        var ctrl = context.createBean(new ag_grid_community_1.GridHeaderCtrl());
        ctrl.setComp(compProxy, eGui.current, eGui.current);
        return function() {
          context.destroyBean(ctrl);
        };
      });
      var className = react_1.useMemo(function() {
        var res = cssClasses.toString();
        return "ag-header " + res;
      }, [cssClasses]);
      var style = react_1.useMemo(function() {
        return {
          height,
          minHeight: height
        };
      }, [height]);
      return react_1.default.createElement("div", { ref: eGui, className, style, role: "presentation" }, react_1.default.createElement(headerRowContainerComp_1.default, { pinned: ag_grid_community_1.Constants.PINNED_LEFT }), react_1.default.createElement(headerRowContainerComp_1.default, { pinned: null }), react_1.default.createElement(headerRowContainerComp_1.default, { pinned: ag_grid_community_1.Constants.PINNED_RIGHT }));
    };
    exports.default = react_1.memo(GridHeaderComp2);
  }
});

// node_modules/ag-grid-react/lib/reactUi/reactComment.js
var require_reactComment = __commonJS({
  "node_modules/ag-grid-react/lib/reactUi/reactComment.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var useEffectOnce_1 = require_useEffectOnce();
    var useReactCommentEffect = function(comment, eForCommentRef) {
      useEffectOnce_1.useEffectOnce(function() {
        var eForComment = eForCommentRef.current;
        var eParent = eForComment.parentElement;
        if (!eParent) {
          return;
        }
        var eComment = document.createComment(comment);
        eParent.insertBefore(eComment, eForComment);
        return function() {
          eParent.removeChild(eComment);
        };
      });
    };
    exports.default = useReactCommentEffect;
  }
});

// node_modules/ag-grid-react/lib/reactUi/cells/popupEditorComp.js
var require_popupEditorComp = __commonJS({
  "node_modules/ag-grid-react/lib/reactUi/cells/popupEditorComp.js"(exports) {
    "use strict";
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var ag_grid_community_1 = (init_ag_grid_community_auto_esm(), __toCommonJS(ag_grid_community_auto_esm_exports));
    var react_1 = __importStar(require_react());
    var react_dom_1 = require_react_dom();
    var beansContext_1 = require_beansContext();
    var useEffectOnce_1 = require_useEffectOnce();
    var PopupEditorComp = function(props) {
      var _a = react_1.useState(), popupEditorWrapper = _a[0], setPopupEditorWrapper = _a[1];
      var _b = react_1.useContext(beansContext_1.BeansContext), context = _b.context, popupService = _b.popupService, gridOptionsWrapper = _b.gridOptionsWrapper;
      useEffectOnce_1.useEffectOnce(function() {
        var editDetails = props.editDetails, cellCtrl = props.cellCtrl, eParentCell = props.eParentCell;
        var compDetails = editDetails.compDetails;
        var useModelPopup = gridOptionsWrapper.isStopEditingWhenCellsLoseFocus();
        var wrapper = context.createBean(new ag_grid_community_1.PopupEditorWrapper(compDetails.params));
        var ePopupGui = wrapper.getGui();
        if (props.jsChildComp) {
          var eChildGui = props.jsChildComp.getGui();
          if (eChildGui) {
            ePopupGui.appendChild(eChildGui);
          }
        }
        var positionParams = {
          column: cellCtrl.getColumn(),
          rowNode: cellCtrl.getRowNode(),
          type: "popupCellEditor",
          eventSource: eParentCell,
          ePopup: ePopupGui,
          keepWithinBounds: true
        };
        var positionCallback = editDetails.popupPosition === "under" ? popupService.positionPopupUnderComponent.bind(popupService, positionParams) : popupService.positionPopupOverComponent.bind(popupService, positionParams);
        var translate = gridOptionsWrapper.getLocaleTextFunc();
        var addPopupRes = popupService.addPopup({
          modal: useModelPopup,
          eChild: ePopupGui,
          closeOnEsc: true,
          closedCallback: function() {
            cellCtrl.onPopupEditorClosed();
          },
          anchorToElement: eParentCell,
          positionCallback,
          ariaLabel: translate("ariaLabelCellEditor", "Cell Editor")
        });
        var hideEditorPopup = addPopupRes ? addPopupRes.hideFunc : void 0;
        setPopupEditorWrapper(wrapper);
        props.jsChildComp && props.jsChildComp.afterGuiAttached && props.jsChildComp.afterGuiAttached();
        return function() {
          if (hideEditorPopup != null) {
            hideEditorPopup();
          }
          context.destroyBean(wrapper);
        };
      });
      return react_1.default.createElement(react_1.default.Fragment, null, popupEditorWrapper && props.wrappedContent && react_dom_1.createPortal(props.wrappedContent, popupEditorWrapper.getGui()));
    };
    exports.default = react_1.memo(PopupEditorComp);
  }
});

// node_modules/ag-grid-react/lib/reactUi/cells/showJsRenderer.js
var require_showJsRenderer = __commonJS({
  "node_modules/ag-grid-react/lib/reactUi/cells/showJsRenderer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var react_1 = require_react();
    var beansContext_1 = require_beansContext();
    var useEffectOnce_1 = require_useEffectOnce();
    var useJsCellRenderer = function(showDetails, showTools, eCellValue, cellValueVersion, jsCellRendererRef, eGui) {
      var _a = react_1.useContext(beansContext_1.BeansContext), context = _a.context, userComponentFactory = _a.userComponentFactory;
      var destroyCellRenderer = react_1.useCallback(function() {
        var comp = jsCellRendererRef.current;
        if (!comp) {
          return;
        }
        var compGui = comp.getGui();
        if (compGui && compGui.parentElement) {
          compGui.parentElement.removeChild(compGui);
        }
        context.destroyBean(comp);
        jsCellRendererRef.current = void 0;
      }, []);
      react_1.useEffect(function() {
        var showValue = showDetails != null;
        var jsCompDetails = showDetails && showDetails.compDetails && !showDetails.compDetails.componentFromFramework;
        var waitingForToolsSetup = showTools && eCellValue == null;
        var showComp = showValue && jsCompDetails && !waitingForToolsSetup;
        if (!showComp) {
          destroyCellRenderer();
          return;
        }
        var compDetails = showDetails.compDetails;
        if (jsCellRendererRef.current) {
          var comp_1 = jsCellRendererRef.current;
          var attemptRefresh = comp_1.refresh != null && showDetails.force == false;
          var refreshResult = attemptRefresh ? comp_1.refresh(compDetails.params) : false;
          var refreshWorked = refreshResult === true || refreshResult === void 0;
          if (refreshWorked) {
            return;
          }
          destroyCellRenderer();
        }
        var promise = compDetails.newAgStackInstance();
        ;
        if (!promise) {
          return;
        }
        var comp = promise.resolveNow(null, function(x) {
          return x;
        });
        if (!comp) {
          return;
        }
        var compGui = comp.getGui();
        if (!compGui) {
          return;
        }
        var parent = showTools ? eCellValue : eGui.current;
        parent.appendChild(compGui);
        jsCellRendererRef.current = comp;
      }, [showDetails, showTools, cellValueVersion]);
      useEffectOnce_1.useEffectOnce(function() {
        return destroyCellRenderer;
      });
    };
    exports.default = useJsCellRenderer;
  }
});

// node_modules/ag-grid-react/lib/reactUi/cells/cellComp.js
var require_cellComp = __commonJS({
  "node_modules/ag-grid-react/lib/reactUi/cells/cellComp.js"(exports) {
    "use strict";
    var __assign2 = exports && exports.__assign || function() {
      __assign2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign2.apply(this, arguments);
    };
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var ag_grid_community_1 = (init_ag_grid_community_auto_esm(), __toCommonJS(ag_grid_community_auto_esm_exports));
    var react_1 = __importStar(require_react());
    var utils_1 = require_utils();
    var popupEditorComp_1 = __importDefault(require_popupEditorComp());
    var showJsRenderer_1 = __importDefault(require_showJsRenderer());
    var beansContext_1 = require_beansContext();
    var jsComp_1 = require_jsComp();
    var useEffectOnce_1 = require_useEffectOnce();
    var CellCompState;
    (function(CellCompState2) {
      CellCompState2[CellCompState2["ShowValue"] = 0] = "ShowValue";
      CellCompState2[CellCompState2["EditValue"] = 1] = "EditValue";
    })(CellCompState = exports.CellCompState || (exports.CellCompState = {}));
    var checkCellEditorDeprecations = function(popup, cellEditor, cellCtrl) {
      var col = cellCtrl.getColumn();
      if (!popup && cellEditor.isPopup && cellEditor.isPopup()) {
        var msg_1 = "AG Grid: Found an issue in column " + col.getColId() + ". If using React, specify an editor is a popup using colDef.cellEditorPopup=true. AG Grid React cannot depend on the editor component specifying if it's in a popup (via the isPopup() method on the editor), as React needs to know this information BEFORE the component is created.";
        ag_grid_community_1._.doOnce(function() {
          return console.warn(msg_1);
        }, "jsEditorComp-isPopup-" + cellCtrl.getColumn().getColId());
      }
      if (popup && cellEditor.getPopupPosition && cellEditor.getPopupPosition() != null) {
        var msg_2 = "AG Grid: Found an issue in column " + col.getColId() + ". If using React, specify an editor popup position using colDef.cellEditorPopupPosition=true. AG Grid React cannot depend on the editor component specifying it's position (via the getPopupPosition() method on the editor), as React needs to know this information BEFORE the component is created.";
        ag_grid_community_1._.doOnce(function() {
          return console.warn(msg_2);
        }, "jsEditorComp-getPopupPosition-" + cellCtrl.getColumn().getColId());
      }
    };
    var jsxEditValue = function(editDetails, setInlineCellEditorRef, setPopupCellEditorRef, eGui, cellCtrl, jsEditorComp) {
      var compDetails = editDetails.compDetails;
      var CellEditorClass = compDetails.componentClass;
      var reactInlineEditor = compDetails.componentFromFramework && !editDetails.popup;
      var reactPopupEditor = compDetails.componentFromFramework && editDetails.popup;
      var jsPopupEditor = !compDetails.componentFromFramework && editDetails.popup;
      return react_1.default.createElement(react_1.default.Fragment, null, reactInlineEditor && react_1.default.createElement(CellEditorClass, __assign2({}, editDetails.compDetails.params, { ref: setInlineCellEditorRef })), reactPopupEditor && react_1.default.createElement(popupEditorComp_1.default, { editDetails, cellCtrl, eParentCell: eGui, wrappedContent: react_1.default.createElement(CellEditorClass, __assign2({}, editDetails.compDetails.params, { ref: setPopupCellEditorRef })) }), jsPopupEditor && jsEditorComp && react_1.default.createElement(popupEditorComp_1.default, { editDetails, cellCtrl, eParentCell: eGui, jsChildComp: jsEditorComp }));
    };
    var jsxShowValue = function(showDetails, key, parentId, cellRendererRef, showCellWrapper, reactCellRendererStateless, setECellValue) {
      var _a;
      var compDetails = showDetails.compDetails, value = showDetails.value;
      var noCellRenderer = !compDetails;
      var reactCellRenderer = compDetails && compDetails.componentFromFramework;
      var CellRendererClass = compDetails && compDetails.componentClass;
      var valueForNoCellRenderer = ((_a = value) === null || _a === void 0 ? void 0 : _a.toString) ? value.toString() : value;
      var bodyJsxFunc = function() {
        return react_1.default.createElement(react_1.default.Fragment, null, noCellRenderer && react_1.default.createElement(react_1.default.Fragment, null, valueForNoCellRenderer), reactCellRenderer && !reactCellRendererStateless && react_1.default.createElement(CellRendererClass, __assign2({}, compDetails.params, { key, ref: cellRendererRef })), reactCellRenderer && reactCellRendererStateless && react_1.default.createElement(CellRendererClass, __assign2({}, compDetails.params, { key })));
      };
      return react_1.default.createElement(react_1.default.Fragment, null, showCellWrapper ? react_1.default.createElement("span", { role: "presentation", id: "cell-" + parentId, className: "ag-cell-value", ref: setECellValue }, bodyJsxFunc()) : bodyJsxFunc());
    };
    var CellComp2 = function(props) {
      var context = react_1.useContext(beansContext_1.BeansContext).context;
      var cellCtrl = props.cellCtrl, printLayout = props.printLayout, editingRow = props.editingRow;
      var _a = react_1.useState(), renderDetails = _a[0], setRenderDetails = _a[1];
      var _b = react_1.useState(), editDetails = _b[0], setEditDetails = _b[1];
      var _c = react_1.useState(1), renderKey = _c[0], setRenderKey = _c[1];
      var _d = react_1.useState(), userStyles = _d[0], setUserStyles = _d[1];
      var _e = react_1.useState(), tabIndex = _e[0], setTabIndex = _e[1];
      var _f = react_1.useState(), ariaDescribedBy = _f[0], setAriaDescribedBy2 = _f[1];
      var _g = react_1.useState(), role = _g[0], setRole = _g[1];
      var _h = react_1.useState(), colId = _h[0], setColId = _h[1];
      var _j = react_1.useState(), title = _j[0], setTitle = _j[1];
      var _k = react_1.useState(false), includeSelection = _k[0], setIncludeSelection = _k[1];
      var _l = react_1.useState(false), includeRowDrag = _l[0], setIncludeRowDrag = _l[1];
      var _m = react_1.useState(false), includeDndSource = _m[0], setIncludeDndSource = _m[1];
      var _o = react_1.useState(), jsEditorComp = _o[0], setJsEditorComp = _o[1];
      var forceWrapper = react_1.useMemo(function() {
        return cellCtrl.isForceWrapper();
      }, []);
      var eGui = react_1.useRef(null);
      var cellRendererRef = react_1.useRef(null);
      var jsCellRendererRef = react_1.useRef();
      var cellEditorRef = react_1.useRef();
      var eCellWrapper = react_1.useRef();
      var _p = react_1.useState(0), cellWrapperVersion = _p[0], setCellWrapperVersion = _p[1];
      var setCellWrapperRef = react_1.useCallback(function(ref) {
        eCellWrapper.current = ref;
        setCellWrapperVersion(function(v) {
          return v + 1;
        });
      }, []);
      var eCellValue = react_1.useRef();
      var _q = react_1.useState(0), cellValueVersion = _q[0], setCellValueVersion = _q[1];
      var setCellValueRef = react_1.useCallback(function(ref) {
        eCellValue.current = ref;
        setCellValueVersion(function(v) {
          return v + 1;
        });
      }, []);
      var showTools = renderDetails != null && (includeSelection || includeDndSource || includeRowDrag);
      var showCellWrapper = forceWrapper || showTools;
      var setCellEditorRef = react_1.useCallback(function(popup, cellEditor) {
        cellEditorRef.current = cellEditor;
        if (cellEditor) {
          checkCellEditorDeprecations(popup, cellEditor, cellCtrl);
          var editingCancelledByUserComp = cellEditor.isCancelBeforeStart && cellEditor.isCancelBeforeStart();
          if (editingCancelledByUserComp) {
            setTimeout(function() {
              return cellCtrl.stopEditing();
            }, 0);
          }
        }
      }, []);
      var setPopupCellEditorRef = react_1.useCallback(function(cellRenderer) {
        return setCellEditorRef(true, cellRenderer);
      }, []);
      var setInlineCellEditorRef = react_1.useCallback(function(cellRenderer) {
        return setCellEditorRef(false, cellRenderer);
      }, []);
      var cssClassManager = react_1.useMemo(function() {
        return new ag_grid_community_1.CssClassManager(function() {
          return eGui.current;
        });
      }, []);
      showJsRenderer_1.default(renderDetails, showCellWrapper, eCellValue.current, cellValueVersion, jsCellRendererRef, eGui);
      var lastRenderDetails = react_1.useRef();
      react_1.useEffect(function() {
        var oldDetails = lastRenderDetails.current;
        var newDetails = renderDetails;
        lastRenderDetails.current = renderDetails;
        if (oldDetails == null || oldDetails.compDetails == null || newDetails == null || newDetails.compDetails == null) {
          return;
        }
        var oldCompDetails = oldDetails.compDetails;
        var newCompDetails = newDetails.compDetails;
        if (oldCompDetails.componentClass != newCompDetails.componentClass) {
          return;
        }
        if (cellRendererRef.current == null || cellRendererRef.current.refresh == null) {
          return;
        }
        var result = cellRendererRef.current.refresh(newCompDetails.params);
        if (result != true) {
          setRenderKey(function(prev) {
            return prev + 1;
          });
        }
      }, [renderDetails]);
      react_1.useEffect(function() {
        var _a2;
        var doingJsEditor = editDetails && !editDetails.compDetails.componentFromFramework;
        if (!doingJsEditor) {
          return;
        }
        var compDetails = editDetails.compDetails;
        var isPopup = editDetails.popup === true;
        var cellEditor = jsComp_1.createSyncJsComp(compDetails);
        if (!cellEditor) {
          return;
        }
        var compGui = cellEditor.getGui();
        setCellEditorRef(isPopup, cellEditor);
        if (!isPopup) {
          var parentEl = (forceWrapper ? eCellWrapper : eGui).current;
          (_a2 = parentEl) === null || _a2 === void 0 ? void 0 : _a2.appendChild(compGui);
          cellEditor.afterGuiAttached && cellEditor.afterGuiAttached();
        }
        setJsEditorComp(cellEditor);
        return function() {
          context.destroyBean(cellEditor);
          setCellEditorRef(isPopup, void 0);
          setJsEditorComp(void 0);
          if (compGui && compGui.parentElement) {
            compGui.parentElement.removeChild(compGui);
          }
        };
      }, [editDetails]);
      react_1.useEffect(function() {
        if (!cellCtrl || !context) {
          return;
        }
        setAriaDescribedBy2(!!eCellWrapper.current ? "cell-" + cellCtrl.getInstanceId() : void 0);
        if (!eCellWrapper.current || !showCellWrapper) {
          return;
        }
        var destroyFuncs = [];
        var addComp = function(comp) {
          if (comp) {
            var eGui_1 = comp.getGui();
            eCellWrapper.current.insertAdjacentElement("afterbegin", eGui_1);
            destroyFuncs.push(function() {
              context.destroyBean(comp);
              ag_grid_community_1._.removeFromParent(eGui_1);
            });
          }
          return comp;
        };
        if (includeSelection) {
          addComp(cellCtrl.createSelectionCheckbox());
        }
        if (includeDndSource) {
          addComp(cellCtrl.createDndSource());
        }
        if (includeRowDrag) {
          addComp(cellCtrl.createRowDragComp());
        }
        return function() {
          return destroyFuncs.forEach(function(f) {
            return f();
          });
        };
      }, [showCellWrapper, includeDndSource, includeRowDrag, includeSelection, cellWrapperVersion]);
      useEffectOnce_1.useLayoutEffectOnce(function() {
        if (!cellCtrl) {
          return;
        }
        var compProxy = {
          addOrRemoveCssClass: function(name, on) {
            return cssClassManager.addOrRemoveCssClass(name, on);
          },
          setUserStyles: function(styles) {
            return setUserStyles(styles);
          },
          getFocusableElement: function() {
            return eGui.current;
          },
          setTabIndex: function(tabIndex2) {
            return setTabIndex(tabIndex2);
          },
          setRole: function(role2) {
            return setRole(role2);
          },
          setColId: function(colId2) {
            return setColId(colId2);
          },
          setTitle: function(title2) {
            return setTitle(title2);
          },
          setIncludeSelection: function(include) {
            return setIncludeSelection(include);
          },
          setIncludeRowDrag: function(include) {
            return setIncludeRowDrag(include);
          },
          setIncludeDndSource: function(include) {
            return setIncludeDndSource(include);
          },
          getCellEditor: function() {
            return cellEditorRef.current || null;
          },
          getCellRenderer: function() {
            return cellRendererRef.current ? cellRendererRef.current : jsCellRendererRef.current;
          },
          getParentOfValue: function() {
            return eCellValue.current ? eCellValue.current : eCellWrapper.current ? eCellWrapper.current : eGui.current;
          },
          setRenderDetails: function(compDetails, value, force) {
            setRenderDetails({
              value,
              compDetails,
              force
            });
          },
          setEditDetails: function(compDetails, popup, popupPosition) {
            if (compDetails) {
              setEditDetails({
                compDetails,
                popup,
                popupPosition
              });
              if (!popup) {
                setRenderDetails(void 0);
              }
            } else {
              setEditDetails(void 0);
            }
          }
        };
        var cellWrapperOrUndefined = eCellWrapper.current || void 0;
        cellCtrl.setComp(compProxy, eGui.current, cellWrapperOrUndefined, printLayout, editingRow);
      });
      var reactCellRendererStateless = react_1.useMemo(function() {
        var res = renderDetails && renderDetails.compDetails && renderDetails.compDetails.componentFromFramework && utils_1.isComponentStateless(renderDetails.compDetails.componentClass);
        return !!res;
      }, [renderDetails]);
      if (eGui.current && !showCellWrapper) {
        cssClassManager.addOrRemoveCssClass("ag-cell-value", !showCellWrapper);
      }
      var cellInstanceId = react_1.useMemo(function() {
        return cellCtrl.getInstanceId();
      }, []);
      var showContents = function() {
        return react_1.default.createElement(react_1.default.Fragment, null, renderDetails != null && jsxShowValue(renderDetails, renderKey, cellInstanceId, cellRendererRef, showCellWrapper, reactCellRendererStateless, setCellValueRef), editDetails != null && jsxEditValue(editDetails, setInlineCellEditorRef, setPopupCellEditorRef, eGui.current, cellCtrl, jsEditorComp));
      };
      return react_1.default.createElement("div", { ref: eGui, style: userStyles, tabIndex, role, "col-id": colId, title, "aria-describedby": ariaDescribedBy }, showCellWrapper ? react_1.default.createElement("div", { className: "ag-cell-wrapper", role: "presentation", ref: setCellWrapperRef }, showContents()) : showContents());
    };
    exports.default = react_1.memo(CellComp2);
  }
});

// node_modules/ag-grid-react/lib/reactUi/rows/rowComp.js
var require_rowComp = __commonJS({
  "node_modules/ag-grid-react/lib/reactUi/rows/rowComp.js"(exports) {
    "use strict";
    var __assign2 = exports && exports.__assign || function() {
      __assign2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign2.apply(this, arguments);
    };
    var __spreadArrays = exports && exports.__spreadArrays || function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var react_1 = __importStar(require_react());
    var ag_grid_community_1 = (init_ag_grid_community_auto_esm(), __toCommonJS(ag_grid_community_auto_esm_exports));
    var jsComp_1 = require_jsComp();
    var utils_1 = require_utils();
    var beansContext_1 = require_beansContext();
    var cellComp_1 = __importDefault(require_cellComp());
    var useEffectOnce_1 = require_useEffectOnce();
    var maintainOrderOnColumns = function(prev, next, domOrder) {
      if (domOrder) {
        var res_1 = { list: next, instanceIdMap: /* @__PURE__ */ new Map() };
        next.forEach(function(c) {
          return res_1.instanceIdMap.set(c.getInstanceId(), c);
        });
        return res_1;
      }
      var oldCellCtrls = [];
      var newCellCtrls = [];
      var newInstanceIdMap = /* @__PURE__ */ new Map();
      var tempMap = /* @__PURE__ */ new Map();
      next.forEach(function(c) {
        return tempMap.set(c.getInstanceId(), c);
      });
      prev.list.forEach(function(c) {
        var instanceId = c.getInstanceId();
        if (tempMap.has(instanceId)) {
          oldCellCtrls.push(c);
          newInstanceIdMap.set(instanceId, c);
        }
      });
      next.forEach(function(c) {
        var instanceId = c.getInstanceId();
        if (!prev.instanceIdMap.has(instanceId)) {
          newCellCtrls.push(c);
          newInstanceIdMap.set(instanceId, c);
        }
      });
      var res = {
        list: __spreadArrays(oldCellCtrls, newCellCtrls),
        instanceIdMap: newInstanceIdMap
      };
      return res;
    };
    var RowComp2 = function(params) {
      var context = react_1.useContext(beansContext_1.BeansContext).context;
      var rowCtrl = params.rowCtrl, containerType = params.containerType;
      var _a = react_1.useState(), rowIndex = _a[0], setRowIndex = _a[1];
      var _b = react_1.useState(), rowId = _b[0], setRowId = _b[1];
      var _c = react_1.useState(), role = _c[0], setRole = _c[1];
      var _d = react_1.useState(), rowBusinessKey = _d[0], setRowBusinessKey = _d[1];
      var _e = react_1.useState(), tabIndex = _e[0], setTabIndex = _e[1];
      var _f = react_1.useState(), userStyles = _f[0], setUserStyles = _f[1];
      var _g = react_1.useState({ list: [], instanceIdMap: /* @__PURE__ */ new Map() }), cellCtrls = _g[0], setCellCtrls = _g[1];
      var _h = react_1.useState(), fullWidthCompDetails = _h[0], setFullWidthCompDetails = _h[1];
      var _j = react_1.useState(false), domOrder = _j[0], setDomOrder = _j[1];
      var _k = react_1.useState(rowCtrl.getInitialRowTop()), top = _k[0], setTop = _k[1];
      var _l = react_1.useState(rowCtrl.getInitialTransform()), transform = _l[0], setTransform = _l[1];
      var eGui = react_1.useRef(null);
      var fullWidthCompRef = react_1.useRef();
      var autoHeightSetup = react_1.useRef(false);
      var _m = react_1.useState(0), autoHeightSetupAttempt = _m[0], setAutoHeightSetupAttempt = _m[1];
      react_1.useEffect(function() {
        var _a2;
        if (autoHeightSetup.current) {
          return;
        }
        if (!fullWidthCompDetails) {
          return;
        }
        if (autoHeightSetupAttempt > 10) {
          return;
        }
        var eChild = (_a2 = eGui.current) === null || _a2 === void 0 ? void 0 : _a2.firstChild;
        if (eChild) {
          rowCtrl.setupDetailRowAutoHeight(eChild);
          autoHeightSetup.current = true;
        } else {
          setAutoHeightSetupAttempt(function(prev) {
            return prev + 1;
          });
        }
      }, [fullWidthCompDetails, autoHeightSetupAttempt]);
      var cssClassManager = react_1.useMemo(function() {
        return new ag_grid_community_1.CssClassManager(function() {
          return eGui.current;
        });
      }, []);
      useEffectOnce_1.useLayoutEffectOnce(function() {
        if (!rowCtrl.isAlive()) {
          return;
        }
        var compProxy = {
          setTop: function(value) {
            return setTop(value);
          },
          setTransform: function(value) {
            return setTransform(value);
          },
          addOrRemoveCssClass: function(name, on) {
            return cssClassManager.addOrRemoveCssClass(name, on);
          },
          setDomOrder: function(domOrder2) {
            return setDomOrder(domOrder2);
          },
          setRowIndex: function(value) {
            return setRowIndex(value);
          },
          setRowId: function(value) {
            return setRowId(value);
          },
          setRowBusinessKey: function(value) {
            return setRowBusinessKey(value);
          },
          setTabIndex: function(value) {
            return setTabIndex(value);
          },
          setUserStyles: function(styles) {
            return setUserStyles(styles);
          },
          setRole: function(value) {
            return setRole(value);
          },
          setCellCtrls: function(next) {
            return setCellCtrls(function(prev) {
              return maintainOrderOnColumns(prev, next, domOrder);
            });
          },
          showFullWidth: function(compDetails) {
            return setFullWidthCompDetails(compDetails);
          },
          getFullWidthCellRenderer: function() {
            return fullWidthCompRef.current;
          }
        };
        rowCtrl.setComp(compProxy, eGui.current, containerType);
      });
      react_1.useEffect(function() {
        return jsComp_1.showJsComp(fullWidthCompDetails, context, eGui.current, fullWidthCompRef);
      }, [fullWidthCompDetails]);
      var rowStyles = react_1.useMemo(function() {
        var res = { top, transform };
        Object.assign(res, userStyles);
        return res;
      }, [top, transform, userStyles]);
      var showFullWidthFramework = fullWidthCompDetails && fullWidthCompDetails.componentFromFramework;
      var showCells = cellCtrls != null;
      var reactFullWidthCellRendererStateless = react_1.useMemo(function() {
        var _a2;
        var res = ((_a2 = fullWidthCompDetails) === null || _a2 === void 0 ? void 0 : _a2.componentFromFramework) && utils_1.isComponentStateless(fullWidthCompDetails.componentClass);
        return !!res;
      }, [fullWidthCompDetails]);
      var showCellsJsx = function() {
        return cellCtrls.list.map(function(cellCtrl) {
          return react_1.default.createElement(cellComp_1.default, { cellCtrl, editingRow: rowCtrl.isEditing(), printLayout: rowCtrl.isPrintLayout(), key: cellCtrl.getInstanceId() });
        });
      };
      var showFullWidthFrameworkJsx = function() {
        var FullWidthComp = fullWidthCompDetails.componentClass;
        return react_1.default.createElement(react_1.default.Fragment, null, reactFullWidthCellRendererStateless && react_1.default.createElement(FullWidthComp, __assign2({}, fullWidthCompDetails.params)), !reactFullWidthCellRendererStateless && react_1.default.createElement(FullWidthComp, __assign2({}, fullWidthCompDetails.params, { ref: fullWidthCompRef })));
      };
      return react_1.default.createElement("div", { ref: eGui, role, style: rowStyles, "row-index": rowIndex, "row-id": rowId, "row-business-key": rowBusinessKey, tabIndex }, showCells && showCellsJsx(), showFullWidthFramework && showFullWidthFrameworkJsx());
    };
    exports.default = react_1.memo(RowComp2);
  }
});

// node_modules/ag-grid-react/lib/reactUi/rows/rowContainerComp.js
var require_rowContainerComp = __commonJS({
  "node_modules/ag-grid-react/lib/reactUi/rows/rowContainerComp.js"(exports) {
    "use strict";
    var __spreadArrays = exports && exports.__spreadArrays || function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var ag_grid_community_1 = (init_ag_grid_community_auto_esm(), __toCommonJS(ag_grid_community_auto_esm_exports));
    var react_1 = __importStar(require_react());
    var utils_1 = require_utils();
    var reactComment_1 = __importDefault(require_reactComment());
    var rowComp_1 = __importDefault(require_rowComp());
    var beansContext_1 = require_beansContext();
    var useEffectOnce_1 = require_useEffectOnce();
    var RowContainerComp2 = function(params) {
      var context = react_1.useContext(beansContext_1.BeansContext).context;
      var _a = react_1.useState(""), viewportHeight = _a[0], setViewportHeight = _a[1];
      var _b = react_1.useState([]), rowCtrlsOrdered = _b[0], setRowCtrlsOrdered = _b[1];
      var _c = react_1.useState([]), rowCtrls = _c[0], setRowCtrls = _c[1];
      var _d = react_1.useState(false), domOrder = _d[0], setDomOrder = _d[1];
      var _e = react_1.useState(""), containerWidth = _e[0], setContainerWidth = _e[1];
      var name = params.name;
      var containerType = react_1.useMemo(function() {
        return ag_grid_community_1.getRowContainerTypeForName(name);
      }, [name]);
      var eWrapper = react_1.useRef(null);
      var eViewport = react_1.useRef(null);
      var eContainer = react_1.useRef(null);
      var cssClasses = react_1.useMemo(function() {
        return ag_grid_community_1.RowContainerCtrl.getRowContainerCssClasses(name);
      }, [name]);
      var wrapperClasses = react_1.useMemo(function() {
        return utils_1.classesList(cssClasses.wrapper);
      }, []);
      var viewportClasses = react_1.useMemo(function() {
        return utils_1.classesList(cssClasses.viewport);
      }, []);
      var containerClasses = react_1.useMemo(function() {
        return utils_1.classesList(cssClasses.container);
      }, []);
      var template1 = name === ag_grid_community_1.RowContainerName.CENTER;
      var template2 = name === ag_grid_community_1.RowContainerName.TOP_CENTER || name === ag_grid_community_1.RowContainerName.BOTTOM_CENTER || name === ag_grid_community_1.RowContainerName.STICKY_TOP_CENTER;
      var template3 = !template1 && !template2;
      var topLevelRef = template1 ? eWrapper : template2 ? eViewport : eContainer;
      reactComment_1.default(" AG Row Container " + name + " ", topLevelRef);
      react_1.useEffect(function() {
        setRowCtrlsOrdered(function(prev) {
          if (domOrder) {
            return rowCtrls;
          }
          var oldRows = prev.filter(function(r) {
            return rowCtrls.indexOf(r) >= 0;
          });
          var newRows = rowCtrls.filter(function(r) {
            return oldRows.indexOf(r) < 0;
          });
          var next = __spreadArrays(oldRows, newRows);
          return next;
        });
      }, [domOrder, rowCtrls]);
      useEffectOnce_1.useEffectOnce(function() {
        var beansToDestroy = [];
        var compProxy = {
          setViewportHeight,
          setRowCtrls: function(rowCtrls2) {
            return setRowCtrls(rowCtrls2);
          },
          setDomOrder: function(domOrder2) {
            return setDomOrder(domOrder2);
          },
          setContainerWidth: function(width) {
            return setContainerWidth(width);
          }
        };
        var ctrl = context.createBean(new ag_grid_community_1.RowContainerCtrl(name));
        beansToDestroy.push(ctrl);
        ctrl.setComp(compProxy, eContainer.current, eViewport.current, eWrapper.current);
        return function() {
          context.destroyBeans(beansToDestroy);
        };
      });
      var viewportStyle = react_1.useMemo(function() {
        return {
          height: viewportHeight
        };
      }, [viewportHeight]);
      var containerStyle = react_1.useMemo(function() {
        return {
          width: containerWidth
        };
      }, [containerWidth]);
      var buildContainer = function() {
        return react_1.default.createElement("div", { className: containerClasses, ref: eContainer, role: rowCtrls.length ? "rowgroup" : "presentation", style: containerStyle }, rowCtrlsOrdered.map(function(rowCtrl) {
          return react_1.default.createElement(rowComp_1.default, { rowCtrl, containerType, key: rowCtrl.getInstanceId() });
        }));
      };
      return react_1.default.createElement(react_1.default.Fragment, null, template1 && react_1.default.createElement("div", { className: wrapperClasses, ref: eWrapper, role: "presentation" }, react_1.default.createElement("div", { className: viewportClasses, ref: eViewport, role: "presentation", style: viewportStyle }, buildContainer())), template2 && react_1.default.createElement("div", { className: viewportClasses, ref: eViewport, role: "presentation", style: viewportStyle }, buildContainer()), template3 && buildContainer());
    };
    exports.default = react_1.memo(RowContainerComp2);
  }
});

// node_modules/ag-grid-react/lib/reactUi/gridBodyComp.js
var require_gridBodyComp = __commonJS({
  "node_modules/ag-grid-react/lib/reactUi/gridBodyComp.js"(exports) {
    "use strict";
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var ag_grid_community_1 = (init_ag_grid_community_auto_esm(), __toCommonJS(ag_grid_community_auto_esm_exports));
    var react_1 = __importStar(require_react());
    var beansContext_1 = require_beansContext();
    var gridHeaderComp_1 = __importDefault(require_gridHeaderComp());
    var reactComment_1 = __importDefault(require_reactComment());
    var rowContainerComp_1 = __importDefault(require_rowContainerComp());
    var useEffectOnce_1 = require_useEffectOnce();
    var utils_1 = require_utils();
    var GridBodyComp2 = function() {
      var _a = react_1.useContext(beansContext_1.BeansContext), context = _a.context, agStackComponentsRegistry = _a.agStackComponentsRegistry, resizeObserverService = _a.resizeObserverService;
      var _b = react_1.useState(""), rowAnimationClass = _b[0], setRowAnimationClass = _b[1];
      var _c = react_1.useState(0), ariaColCount = _c[0], setAriaColCount2 = _c[1];
      var _d = react_1.useState(0), ariaRowCount = _d[0], setAriaRowCount2 = _d[1];
      var _e = react_1.useState(0), topHeight = _e[0], setTopHeight = _e[1];
      var _f = react_1.useState(0), bottomHeight = _f[0], setBottomHeight = _f[1];
      var _g = react_1.useState("0px"), stickyTopHeight = _g[0], setStickyTopHeight = _g[1];
      var _h = react_1.useState("0px"), stickyTopTop = _h[0], setStickyTopTop = _h[1];
      var _j = react_1.useState("100%"), stickyTopWidth = _j[0], setStickyTopWidth = _j[1];
      var _k = react_1.useState(""), topDisplay = _k[0], setTopDisplay = _k[1];
      var _l = react_1.useState(""), bottomDisplay = _l[0], setBottomDisplay = _l[1];
      var _m = react_1.useState(null), movingCss = _m[0], setMovingCss = _m[1];
      var _o = react_1.useState(null), forceVerticalScrollClass = _o[0], setForceVerticalScrollClass = _o[1];
      var _p = react_1.useState(""), topAndBottomOverflowY = _p[0], setTopAndBottomOverflowY = _p[1];
      var _q = react_1.useState(null), cellSelectableCss = _q[0], setCellSelectableCss = _q[1];
      var _r = react_1.useState("ag-layout-normal"), layoutClass = _r[0], setLayoutClass = _r[1];
      var eRoot = react_1.useRef(null);
      var eTop = react_1.useRef(null);
      var eStickyTop = react_1.useRef(null);
      var eBodyViewport = react_1.useRef(null);
      var eBottom = react_1.useRef(null);
      reactComment_1.default(" AG Grid Body ", eRoot);
      reactComment_1.default(" AG Pinned Top ", eTop);
      reactComment_1.default(" AG Sticky Top ", eStickyTop);
      reactComment_1.default(" AG Middle ", eBodyViewport);
      reactComment_1.default(" AG Pinned Bottom ", eBottom);
      useEffectOnce_1.useEffectOnce(function() {
        var beansToDestroy = [];
        var destroyFuncs = [];
        if (!context) {
          return;
        }
        var newComp = function(tag) {
          var CompClass = agStackComponentsRegistry.getComponentClass(tag);
          var comp = context.createBean(new CompClass());
          beansToDestroy.push(comp);
          return comp;
        };
        eRoot.current.appendChild(document.createComment(" AG Fake Horizontal Scroll "));
        eRoot.current.appendChild(newComp("AG-FAKE-HORIZONTAL-SCROLL").getGui());
        eRoot.current.appendChild(document.createComment(" AG Overlay Wrapper "));
        eRoot.current.appendChild(newComp("AG-OVERLAY-WRAPPER").getGui());
        var compProxy = {
          setRowAnimationCssOnBodyViewport: setRowAnimationClass,
          setColumnCount: setAriaColCount2,
          setRowCount: setAriaRowCount2,
          setTopHeight,
          setBottomHeight,
          setStickyTopHeight,
          setStickyTopTop,
          setStickyTopWidth,
          setTopDisplay,
          setBottomDisplay,
          setColumnMovingCss: setMovingCss,
          updateLayoutClasses: setLayoutClass,
          setAlwaysVerticalScrollClass: setForceVerticalScrollClass,
          setPinnedTopBottomOverflowY: setTopAndBottomOverflowY,
          setCellSelectableCss,
          registerBodyViewportResizeListener: function(listener) {
            var unsubscribeFromResize = resizeObserverService.observeResize(eBodyViewport.current, listener);
            destroyFuncs.push(function() {
              return unsubscribeFromResize();
            });
          }
        };
        var ctrl = context.createBean(new ag_grid_community_1.GridBodyCtrl());
        beansToDestroy.push(ctrl);
        ctrl.setComp(compProxy, eRoot.current, eBodyViewport.current, eTop.current, eBottom.current, eStickyTop.current);
        return function() {
          context.destroyBeans(beansToDestroy);
          destroyFuncs.forEach(function(f) {
            return f();
          });
        };
      });
      var rootClasses = react_1.useMemo(function() {
        return utils_1.classesList("ag-root", "ag-unselectable", movingCss, layoutClass);
      }, [movingCss, layoutClass]);
      var bodyViewportClasses = react_1.useMemo(function() {
        return utils_1.classesList("ag-body-viewport", rowAnimationClass, layoutClass, forceVerticalScrollClass, cellSelectableCss);
      }, [rowAnimationClass, layoutClass, forceVerticalScrollClass, cellSelectableCss]);
      var topClasses = react_1.useMemo(function() {
        return utils_1.classesList("ag-floating-top", cellSelectableCss);
      }, [cellSelectableCss]);
      var stickyTopClasses = react_1.useMemo(function() {
        return utils_1.classesList("ag-sticky-top", cellSelectableCss);
      }, [cellSelectableCss]);
      var bottomClasses = react_1.useMemo(function() {
        return utils_1.classesList("ag-floating-bottom", cellSelectableCss);
      }, [cellSelectableCss]);
      var topStyle = react_1.useMemo(function() {
        return {
          height: topHeight,
          minHeight: topHeight,
          display: topDisplay,
          overflowY: topAndBottomOverflowY
        };
      }, [topHeight, topDisplay, topAndBottomOverflowY]);
      var stickyTopStyle = react_1.useMemo(function() {
        return {
          height: stickyTopHeight,
          top: stickyTopTop,
          width: stickyTopWidth
        };
      }, [stickyTopHeight, stickyTopTop, stickyTopWidth]);
      var bottomStyle = react_1.useMemo(function() {
        return {
          height: bottomHeight,
          minHeight: bottomHeight,
          display: bottomDisplay,
          overflowY: topAndBottomOverflowY
        };
      }, [bottomHeight, bottomDisplay, topAndBottomOverflowY]);
      var createRowContainer = function(container) {
        return react_1.default.createElement(rowContainerComp_1.default, { name: container, key: container + "-container" });
      };
      var createSection = function(_a2) {
        var section = _a2.section, children = _a2.children, className = _a2.className, style = _a2.style;
        return react_1.default.createElement("div", { ref: section, className, role: "presentation", style }, children.map(createRowContainer));
      };
      return react_1.default.createElement("div", { ref: eRoot, className: rootClasses, role: "grid", "aria-colcount": ariaColCount, "aria-rowcount": ariaRowCount }, react_1.default.createElement(gridHeaderComp_1.default, null), createSection({ section: eTop, className: topClasses, style: topStyle, children: [
        ag_grid_community_1.RowContainerName.TOP_LEFT,
        ag_grid_community_1.RowContainerName.TOP_CENTER,
        ag_grid_community_1.RowContainerName.TOP_RIGHT,
        ag_grid_community_1.RowContainerName.TOP_FULL_WIDTH
      ] }), createSection({ section: eBodyViewport, className: bodyViewportClasses, children: [
        ag_grid_community_1.RowContainerName.LEFT,
        ag_grid_community_1.RowContainerName.CENTER,
        ag_grid_community_1.RowContainerName.RIGHT,
        ag_grid_community_1.RowContainerName.FULL_WIDTH
      ] }), createSection({ section: eStickyTop, className: stickyTopClasses, style: stickyTopStyle, children: [
        ag_grid_community_1.RowContainerName.STICKY_TOP_LEFT,
        ag_grid_community_1.RowContainerName.STICKY_TOP_CENTER,
        ag_grid_community_1.RowContainerName.STICKY_TOP_RIGHT,
        ag_grid_community_1.RowContainerName.STICKY_TOP_FULL_WIDTH
      ] }), createSection({ section: eBottom, className: bottomClasses, style: bottomStyle, children: [
        ag_grid_community_1.RowContainerName.BOTTOM_LEFT,
        ag_grid_community_1.RowContainerName.BOTTOM_CENTER,
        ag_grid_community_1.RowContainerName.BOTTOM_RIGHT,
        ag_grid_community_1.RowContainerName.BOTTOM_FULL_WIDTH
      ] }));
    };
    exports.default = react_1.memo(GridBodyComp2);
  }
});

// node_modules/ag-grid-react/lib/reactUi/tabGuardComp.js
var require_tabGuardComp = __commonJS({
  "node_modules/ag-grid-react/lib/reactUi/tabGuardComp.js"(exports) {
    "use strict";
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var react_1 = __importStar(require_react());
    var ag_grid_community_1 = (init_ag_grid_community_auto_esm(), __toCommonJS(ag_grid_community_auto_esm_exports));
    var beansContext_1 = require_beansContext();
    var useEffectOnce_1 = require_useEffectOnce();
    var TabGuardCompRef = function(props, forwardRef) {
      var children = props.children, eFocusableElement = props.eFocusableElement, onTabKeyDown = props.onTabKeyDown, gridCtrl = props.gridCtrl;
      var context = react_1.useContext(beansContext_1.BeansContext).context;
      var topTabGuardRef = react_1.useRef(null);
      var bottomTabGuardRef = react_1.useRef(null);
      var tabGuardCtrlRef = react_1.useRef();
      var _a = react_1.useState(), tabIndex = _a[0], setTabIndex = _a[1];
      react_1.useImperativeHandle(forwardRef, function() {
        return {
          forceFocusOutOfContainer: function() {
            tabGuardCtrlRef.current.forceFocusOutOfContainer();
          }
        };
      });
      useEffectOnce_1.useEffectOnce(function() {
        var eTopGuard = topTabGuardRef.current;
        var eBottomGuard = bottomTabGuardRef.current;
        var compProxy = {
          setTabIndex: function(value) {
            return value == null ? setTabIndex(void 0) : setTabIndex(parseInt(value, 10));
          }
        };
        var ctrl = tabGuardCtrlRef.current = context.createBean(new ag_grid_community_1.TabGuardCtrl({
          comp: compProxy,
          eTopGuard,
          eBottomGuard,
          eFocusableElement,
          onTabKeyDown,
          focusInnerElement: function(fromBottom) {
            return gridCtrl.focusInnerElement(fromBottom);
          }
        }));
        return function() {
          context.destroyBean(ctrl);
        };
      });
      var createTabGuard = function(side) {
        return react_1.default.createElement("div", { className: "ag-tab-guard ag-tab-guard-" + side, role: "presentation", tabIndex, ref: side === "top" ? topTabGuardRef : bottomTabGuardRef });
      };
      return react_1.default.createElement(react_1.default.Fragment, null, createTabGuard("top"), children, createTabGuard("bottom"));
    };
    var TabGuardComp2 = react_1.forwardRef(TabGuardCompRef);
    exports.default = react_1.memo(TabGuardComp2);
  }
});

// node_modules/ag-grid-react/lib/reactUi/gridComp.js
var require_gridComp = __commonJS({
  "node_modules/ag-grid-react/lib/reactUi/gridComp.js"(exports) {
    "use strict";
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var ag_grid_community_1 = (init_ag_grid_community_auto_esm(), __toCommonJS(ag_grid_community_auto_esm_exports));
    var react_1 = __importStar(require_react());
    var beansContext_1 = require_beansContext();
    var gridBodyComp_1 = __importDefault(require_gridBodyComp());
    var reactComment_1 = __importDefault(require_reactComment());
    var tabGuardComp_1 = __importDefault(require_tabGuardComp());
    var useEffectOnce_1 = require_useEffectOnce();
    var utils_1 = require_utils();
    var GridComp2 = function(_a) {
      var context = _a.context;
      var _b = react_1.useState(""), rtlClass = _b[0], setRtlClass = _b[1];
      var _c = react_1.useState(""), keyboardFocusClass = _c[0], setKeyboardFocusClass = _c[1];
      var _d = react_1.useState(""), layoutClass = _d[0], setLayoutClass = _d[1];
      var _e = react_1.useState(null), cursor = _e[0], setCursor = _e[1];
      var _f = react_1.useState(null), userSelect = _f[0], setUserSelect = _f[1];
      var _g = react_1.useState(false), initialised = _g[0], setInitialised = _g[1];
      var _h = react_1.useState(), tabGuardReady = _h[0], setTabGuardReady = _h[1];
      var gridCtrlRef = react_1.useRef(null);
      var eRootWrapperRef = react_1.useRef(null);
      var tabGuardRef = react_1.useRef();
      var eGridBodyParentRef = react_1.useRef(null);
      var focusInnerElementRef = react_1.useRef(function() {
        return void 0;
      });
      var onTabKeyDown = react_1.useCallback(function() {
        return void 0;
      }, []);
      var beans = react_1.useMemo(function() {
        return context.getBean("beans");
      }, []);
      reactComment_1.default(" AG Grid ", eRootWrapperRef);
      useEffectOnce_1.useEffectOnce(function() {
        var currentController = gridCtrlRef.current = context.createBean(new ag_grid_community_1.GridCtrl());
        return function() {
          context.destroyBean(currentController);
          gridCtrlRef.current = null;
        };
      });
      useEffectOnce_1.useEffectOnce(function() {
        var gridCtrl = gridCtrlRef.current;
        focusInnerElementRef.current = gridCtrl.focusInnerElement.bind(gridCtrl);
        var compProxy = {
          destroyGridUi: function() {
          },
          setRtlClass,
          addOrRemoveKeyboardFocusClass: function(addOrRemove) {
            return setKeyboardFocusClass(addOrRemove ? ag_grid_community_1.FocusService.AG_KEYBOARD_FOCUS : "");
          },
          forceFocusOutOfContainer: function() {
            tabGuardRef.current.forceFocusOutOfContainer();
          },
          updateLayoutClasses: setLayoutClass,
          getFocusableContainers: function() {
            var els = [];
            var gridBodyCompEl = eRootWrapperRef.current.querySelector(".ag-root");
            var sideBarEl = eRootWrapperRef.current.querySelector(".ag-side-bar");
            if (gridBodyCompEl) {
              els.push(gridBodyCompEl);
            }
            if (sideBarEl) {
              els.push(sideBarEl);
            }
            return els;
          },
          setCursor,
          setUserSelect
        };
        gridCtrl.setComp(compProxy, eRootWrapperRef.current, eRootWrapperRef.current);
        setInitialised(true);
      });
      react_1.useEffect(function() {
        if (!tabGuardReady) {
          return;
        }
        var gridCtrl = gridCtrlRef.current;
        var beansToDestroy = [];
        var agStackComponentsRegistry = beans.agStackComponentsRegistry;
        var HeaderDropZonesClass = agStackComponentsRegistry.getComponentClass("AG-GRID-HEADER-DROP-ZONES");
        var SideBarClass = agStackComponentsRegistry.getComponentClass("AG-SIDE-BAR");
        var StatusBarClass = agStackComponentsRegistry.getComponentClass("AG-STATUS-BAR");
        var WatermarkClass = agStackComponentsRegistry.getComponentClass("AG-WATERMARK");
        var PaginationClass = agStackComponentsRegistry.getComponentClass("AG-PAGINATION");
        var additionalEls = [];
        var eRootWrapper = eRootWrapperRef.current;
        var eGridBodyParent2 = eGridBodyParentRef.current;
        if (gridCtrl.showDropZones() && HeaderDropZonesClass) {
          var headerDropZonesComp = context.createBean(new HeaderDropZonesClass());
          var eGui = headerDropZonesComp.getGui();
          eRootWrapper.insertAdjacentElement("afterbegin", eGui);
          additionalEls.push(eGui);
          beansToDestroy.push(headerDropZonesComp);
        }
        if (gridCtrl.showSideBar() && SideBarClass) {
          var sideBarComp = context.createBean(new SideBarClass());
          var eGui = sideBarComp.getGui();
          var bottomTabGuard = eGridBodyParent2.querySelector(".ag-tab-guard-bottom");
          if (bottomTabGuard) {
            bottomTabGuard.insertAdjacentElement("beforebegin", eGui);
            additionalEls.push(eGui);
          }
          beansToDestroy.push(sideBarComp);
        }
        if (gridCtrl.showStatusBar() && StatusBarClass) {
          var statusBarComp = context.createBean(new StatusBarClass());
          var eGui = statusBarComp.getGui();
          eRootWrapper.insertAdjacentElement("beforeend", eGui);
          additionalEls.push(eGui);
          beansToDestroy.push(statusBarComp);
        }
        if (PaginationClass) {
          var paginationComp = context.createBean(new PaginationClass());
          var eGui = paginationComp.getGui();
          eRootWrapper.insertAdjacentElement("beforeend", eGui);
          additionalEls.push(eGui);
          beansToDestroy.push(paginationComp);
        }
        if (gridCtrl.showWatermark() && WatermarkClass) {
          var watermarkComp = context.createBean(new WatermarkClass());
          var eGui = watermarkComp.getGui();
          eRootWrapper.insertAdjacentElement("beforeend", eGui);
          additionalEls.push(eGui);
          beansToDestroy.push(watermarkComp);
        }
        return function() {
          context.destroyBeans(beansToDestroy);
          additionalEls.forEach(function(el) {
            if (el.parentElement) {
              el.parentElement.removeChild(el);
            }
          });
        };
      }, [tabGuardReady]);
      var rootWrapperClasses = react_1.useMemo(function() {
        return utils_1.classesList("ag-root-wrapper", rtlClass, keyboardFocusClass, layoutClass);
      }, [rtlClass, keyboardFocusClass, layoutClass]);
      var rootWrapperBodyClasses = react_1.useMemo(function() {
        return utils_1.classesList("ag-root-wrapper-body", "ag-focus-managed", layoutClass);
      }, [layoutClass]);
      var topStyle = react_1.useMemo(function() {
        return {
          userSelect: userSelect != null ? userSelect : "",
          WebkitUserSelect: userSelect != null ? userSelect : "",
          cursor: cursor != null ? cursor : ""
        };
      }, [userSelect, cursor]);
      var eGridBodyParent = eGridBodyParentRef.current;
      var setTabGuardCompRef = react_1.useCallback(function(ref) {
        tabGuardRef.current = ref;
        setTabGuardReady(true);
      }, []);
      return react_1.default.createElement("div", { ref: eRootWrapperRef, className: rootWrapperClasses, style: topStyle, role: "presentation" }, react_1.default.createElement("div", { className: rootWrapperBodyClasses, ref: eGridBodyParentRef, role: "presentation" }, initialised && eGridBodyParent && react_1.default.createElement(beansContext_1.BeansContext.Provider, { value: beans }, react_1.default.createElement(tabGuardComp_1.default, { ref: setTabGuardCompRef, eFocusableElement: eGridBodyParent, onTabKeyDown, gridCtrl: gridCtrlRef.current }, react_1.default.createElement(gridBodyComp_1.default, null)))));
    };
    exports.default = react_1.memo(GridComp2);
  }
});

// node_modules/ag-grid-react/lib/reactUi/agGridReactUi.js
var require_agGridReactUi = __commonJS({
  "node_modules/ag-grid-react/lib/reactUi/agGridReactUi.js"(exports) {
    "use strict";
    var __extends2 = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign2 = exports && exports.__assign || function() {
      __assign2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign2.apply(this, arguments);
    };
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var ag_grid_community_1 = (init_ag_grid_community_auto_esm(), __toCommonJS(ag_grid_community_auto_esm_exports));
    var react_1 = __importStar(require_react());
    var agGridColumn_1 = require_agGridColumn();
    var changeDetectionService_1 = require_changeDetectionService();
    var newReactComponent_1 = require_newReactComponent();
    var portalManager_1 = require_portalManager();
    var gridComp_1 = __importDefault(require_gridComp());
    var reactFrameworkOverrides_1 = require_reactFrameworkOverrides();
    function debug(msg, obj) {
    }
    var AgGridReactUi = function(_super) {
      __extends2(AgGridReactUi2, _super);
      function AgGridReactUi2(props) {
        var _this = _super.call(this, props) || this;
        _this.props = props;
        _this.destroyFuncs = [];
        _this.changeDetectionService = new changeDetectionService_1.ChangeDetectionService();
        _this.eGui = react_1.default.createRef();
        _this.whenReadyFuncs = [];
        _this.ready = false;
        _this.renderedAfterMount = false;
        _this.mounted = false;
        debug("AgGridReactUi.constructor");
        _this.state = { context: void 0 };
        _this.portalManager = new portalManager_1.PortalManager(_this, props.componentWrappingElement, props.maxComponentCreationTimeMs);
        _this.destroyFuncs.push(function() {
          return _this.portalManager.destroy();
        });
        return _this;
      }
      AgGridReactUi2.prototype.render = function() {
        debug("AgGridReactUi.render, context = " + this.state.context);
        if (this.state.context) {
          this.renderedAfterMount = true;
        }
        return react_1.default.createElement("div", { style: this.createStyleForDiv(), className: this.props.className, ref: this.eGui }, this.state.context && react_1.default.createElement(gridComp_1.default, { context: this.state.context }), this.portalManager.getPortals());
      };
      AgGridReactUi2.prototype.createStyleForDiv = function() {
        return __assign2({ height: "100%" }, this.props.containerStyle || {});
      };
      AgGridReactUi2.prototype.componentDidMount = function() {
        var _this = this;
        if (this.mounted) {
          debug("AgGridReactUi.componentDidMount - skipping");
          return;
        }
        debug("AgGridReactUi.componentDidMount");
        this.mounted = true;
        var modules = this.props.modules || [];
        var gridParams = {
          providedBeanInstances: {
            frameworkComponentWrapper: new ReactFrameworkComponentWrapper(this.portalManager)
          },
          modules,
          frameworkOverrides: new reactFrameworkOverrides_1.ReactFrameworkOverrides(true)
        };
        this.gridOptions = this.props.gridOptions || {};
        var children = this.props.children;
        if (agGridColumn_1.AgGridColumn.hasChildColumns(children)) {
          this.gridOptions.columnDefs = agGridColumn_1.AgGridColumn.mapChildColumnDefs(children);
        }
        this.gridOptions = ag_grid_community_1.ComponentUtil.copyAttributesToGridOptions(this.gridOptions, this.props);
        var createUiCallback = function(context) {
          _this.setState({ context });
          var ctrlsService = context.getBean(ag_grid_community_1.CtrlsService.NAME);
          ctrlsService.whenReady(function() {
            debug("AgGridReactUi.createUiCallback");
            _this.api = _this.gridOptions.api;
            _this.columnApi = _this.gridOptions.columnApi;
            _this.props.setGridApi(_this.api, _this.columnApi);
            _this.destroyFuncs.push(function() {
              return _this.api.destroy();
            });
          });
        };
        var acceptChangesCallback = function(context) {
          var ctrlsService = context.getBean(ag_grid_community_1.CtrlsService.NAME);
          ctrlsService.whenReady(function() {
            debug("AgGridReactUi.acceptChangesCallback");
            _this.whenReadyFuncs.forEach(function(f) {
              return f();
            });
            _this.whenReadyFuncs.length = 0;
            _this.ready = true;
          });
        };
        var gridCoreCreator = new ag_grid_community_1.GridCoreCreator();
        gridCoreCreator.create(this.eGui.current, this.gridOptions, createUiCallback, acceptChangesCallback, gridParams);
      };
      AgGridReactUi2.prototype.componentWillUnmount = function() {
        if (this.renderedAfterMount) {
          debug("AgGridReactUi.componentWillUnmount - executing");
          this.destroyFuncs.forEach(function(f) {
            return f();
          });
          this.destroyFuncs.length = 0;
        } else {
          debug("AgGridReactUi.componentWillUnmount - skipping");
        }
      };
      AgGridReactUi2.prototype.componentDidUpdate = function(prevProps) {
        this.processPropsChanges(prevProps, this.props);
      };
      AgGridReactUi2.prototype.processPropsChanges = function(prevProps, nextProps) {
        var changes = {};
        this.extractGridPropertyChanges(prevProps, nextProps, changes);
        this.extractDeclarativeColDefChanges(nextProps, changes);
        this.processChanges(changes);
      };
      AgGridReactUi2.prototype.extractDeclarativeColDefChanges = function(nextProps, changes) {
        if (this.props.gridOptions && this.props.gridOptions.columnDefs || this.props.columnDefs) {
          return;
        }
        var debugLogging = !!nextProps.debug;
        var propKey = "columnDefs";
        var currentColDefs = this.gridOptions.columnDefs;
        if (agGridColumn_1.AgGridColumn.hasChildColumns(nextProps.children)) {
          var detectionStrategy = this.changeDetectionService.getStrategy(this.getStrategyTypeForProp(propKey));
          var newColDefs = agGridColumn_1.AgGridColumn.mapChildColumnDefs(nextProps.children);
          if (!detectionStrategy.areEqual(currentColDefs, newColDefs)) {
            if (debugLogging) {
              console.log("agGridReact: colDefs definitions changed");
            }
            changes[propKey] = {
              previousValue: currentColDefs,
              currentValue: newColDefs
            };
          }
        } else if (currentColDefs && currentColDefs.length > 0) {
          changes[propKey] = {
            previousValue: currentColDefs,
            currentValue: []
          };
        }
      };
      AgGridReactUi2.prototype.extractGridPropertyChanges = function(prevProps, nextProps, changes) {
        var _this = this;
        var debugLogging = !!nextProps.debug;
        Object.keys(nextProps).forEach(function(propKey) {
          if (ag_grid_community_1._.includes(ag_grid_community_1.ComponentUtil.ALL_PROPERTIES, propKey)) {
            var changeDetectionStrategy = _this.changeDetectionService.getStrategy(_this.getStrategyTypeForProp(propKey));
            if (!changeDetectionStrategy.areEqual(prevProps[propKey], nextProps[propKey])) {
              if (debugLogging) {
                console.log("agGridReact: [" + propKey + "] property changed");
              }
              changes[propKey] = {
                previousValue: prevProps[propKey],
                currentValue: nextProps[propKey]
              };
            }
          }
        });
        ag_grid_community_1.ComponentUtil.getEventCallbacks().forEach(function(funcName) {
          if (prevProps[funcName] !== nextProps[funcName]) {
            if (debugLogging) {
              console.log("agGridReact: [" + funcName + "] event callback changed");
            }
            changes[funcName] = {
              previousValue: prevProps[funcName],
              currentValue: nextProps[funcName]
            };
          }
        });
      };
      AgGridReactUi2.prototype.processChanges = function(changes) {
        var _this = this;
        this.processWhenReady(function() {
          return ag_grid_community_1.ComponentUtil.processOnChange(changes, _this.gridOptions, _this.api, _this.columnApi);
        });
      };
      AgGridReactUi2.prototype.processWhenReady = function(func) {
        if (this.ready) {
          debug("AgGridReactUi.processWhenReady sync");
          func();
        } else {
          debug("AgGridReactUi.processWhenReady async");
          this.whenReadyFuncs.push(func);
        }
      };
      AgGridReactUi2.prototype.getStrategyTypeForProp = function(propKey) {
        if (propKey === "rowData") {
          if (this.props.rowDataChangeDetectionStrategy) {
            return this.props.rowDataChangeDetectionStrategy;
          }
          if (this.isImmutableDataActive()) {
            return changeDetectionService_1.ChangeDetectionStrategyType.IdentityCheck;
          }
        }
        return changeDetectionService_1.ChangeDetectionStrategyType.DeepValueCheck;
      };
      AgGridReactUi2.prototype.isImmutableDataActive = function() {
        return this.props.deltaRowDataMode || this.props.immutableData || this.props.getRowId != null || this.props.gridOptions && (this.props.gridOptions.deltaRowDataMode || this.props.gridOptions.immutableData || this.props.gridOptions.getRowId != null);
      };
      return AgGridReactUi2;
    }(react_1.Component);
    exports.AgGridReactUi = AgGridReactUi;
    var ReactFrameworkComponentWrapper = function(_super) {
      __extends2(ReactFrameworkComponentWrapper2, _super);
      function ReactFrameworkComponentWrapper2(parent) {
        var _this = _super.call(this) || this;
        _this.parent = parent;
        return _this;
      }
      ReactFrameworkComponentWrapper2.prototype.createWrapper = function(UserReactComponent, componentType) {
        return new newReactComponent_1.NewReactComponent(UserReactComponent, this.parent, componentType);
      };
      return ReactFrameworkComponentWrapper2;
    }(ag_grid_community_1.BaseComponentWrapper);
  }
});

// node_modules/ag-grid-react/lib/reactUi/cellRenderer/detailCellRenderer.js
var require_detailCellRenderer = __commonJS({
  "node_modules/ag-grid-react/lib/reactUi/cellRenderer/detailCellRenderer.js"(exports) {
    "use strict";
    var __assign2 = exports && exports.__assign || function() {
      __assign2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign2.apply(this, arguments);
    };
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var react_1 = __importStar(require_react());
    var utils_1 = require_utils();
    var beansContext_1 = require_beansContext();
    var agGridReactUi_1 = require_agGridReactUi();
    var useEffectOnce_1 = require_useEffectOnce();
    var DetailCellRenderer = function(props, ref) {
      var _a = react_1.useContext(beansContext_1.BeansContext), ctrlsFactory = _a.ctrlsFactory, context = _a.context, gridOptionsWrapper = _a.gridOptionsWrapper, resizeObserverService = _a.resizeObserverService, clientSideRowModel = _a.clientSideRowModel, serverSideRowModel = _a.serverSideRowModel;
      var _b = react_1.useState(new utils_1.CssClasses()), cssClasses = _b[0], setCssClasses = _b[1];
      var _c = react_1.useState(new utils_1.CssClasses()), gridCssClasses = _c[0], setGridCssClasses = _c[1];
      var _d = react_1.useState(), detailGridOptions = _d[0], setDetailGridOptions = _d[1];
      var _e = react_1.useState(), detailRowData = _e[0], setDetailRowData = _e[1];
      var ctrlRef = react_1.useRef();
      var eGuiRef = react_1.useRef(null);
      var topClassName = react_1.useMemo(function() {
        return cssClasses.toString() + " ag-details-row";
      }, [cssClasses]);
      var gridClassName = react_1.useMemo(function() {
        return gridCssClasses.toString() + " ag-details-grid";
      }, [gridCssClasses]);
      if (ref) {
        react_1.useImperativeHandle(ref, function() {
          return {
            refresh: function() {
              return ctrlRef.current.refresh();
            }
          };
        });
      }
      useEffectOnce_1.useEffectOnce(function() {
        if (props.template && typeof props.template === "string") {
          console.warn("AG Grid: detailCellRendererParams.template is not supported by React - this only works with frameworks that work against String templates. To change the template, please provide your own React Detail Cell Renderer.");
        }
      });
      useEffectOnce_1.useEffectOnce(function() {
        var compProxy = {
          addOrRemoveCssClass: function(name, on) {
            return setCssClasses(function(prev) {
              return prev.setClass(name, on);
            });
          },
          addOrRemoveDetailGridCssClass: function(name, on) {
            return setGridCssClasses(function(prev) {
              return prev.setClass(name, on);
            });
          },
          setDetailGrid: function(gridOptions) {
            return setDetailGridOptions(gridOptions);
          },
          setRowData: function(rowData) {
            return setDetailRowData(rowData);
          },
          getGui: function() {
            return eGuiRef.current;
          }
        };
        var ctrl = ctrlsFactory.getInstance("detailCellRenderer");
        if (!ctrl) {
          return;
        }
        context.createBean(ctrl);
        ctrl.init(compProxy, props);
        ctrlRef.current = ctrl;
        var resizeObserverDestroyFunc;
        if (gridOptionsWrapper.isDetailRowAutoHeight()) {
          var checkRowSizeFunc = function() {
            if (eGuiRef.current == null) {
              return;
            }
            var clientHeight = eGuiRef.current.clientHeight;
            if (clientHeight != null && clientHeight > 0) {
              var updateRowHeightFunc = function() {
                props.node.setRowHeight(clientHeight);
                if (clientSideRowModel) {
                  clientSideRowModel.onRowHeightChanged();
                } else if (serverSideRowModel) {
                  serverSideRowModel.onRowHeightChanged();
                }
              };
              setTimeout(updateRowHeightFunc, 0);
            }
          };
          resizeObserverDestroyFunc = resizeObserverService.observeResize(eGuiRef.current, checkRowSizeFunc);
          checkRowSizeFunc();
        }
        return function() {
          context.destroyBean(ctrl);
          if (resizeObserverDestroyFunc) {
            resizeObserverDestroyFunc();
          }
        };
      });
      var setGridApi = react_1.useCallback(function(api, columnApi) {
        ctrlRef.current.registerDetailWithMaster(api, columnApi);
      }, []);
      return react_1.default.createElement("div", { className: topClassName, ref: eGuiRef }, detailGridOptions && react_1.default.createElement(agGridReactUi_1.AgGridReactUi, __assign2({ className: gridClassName }, detailGridOptions, { rowData: detailRowData, setGridApi })));
    };
    exports.default = react_1.forwardRef(DetailCellRenderer);
  }
});

// node_modules/ag-grid-react/lib/shared/reactFrameworkOverrides.js
var require_reactFrameworkOverrides = __commonJS({
  "node_modules/ag-grid-react/lib/shared/reactFrameworkOverrides.js"(exports) {
    "use strict";
    var __extends2 = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var ag_grid_community_1 = (init_ag_grid_community_auto_esm(), __toCommonJS(ag_grid_community_auto_esm_exports));
    var groupCellRenderer_1 = __importDefault(require_groupCellRenderer());
    var detailCellRenderer_1 = __importDefault(require_detailCellRenderer());
    var ReactFrameworkOverrides = function(_super) {
      __extends2(ReactFrameworkOverrides2, _super);
      function ReactFrameworkOverrides2(reactUi) {
        var _this = _super.call(this) || this;
        _this.frameworkComponents = {
          agGroupCellRenderer: groupCellRenderer_1.default,
          agGroupRowRenderer: groupCellRenderer_1.default,
          agDetailCellRenderer: detailCellRenderer_1.default
        };
        _this.reactUi = reactUi;
        return _this;
      }
      ReactFrameworkOverrides2.prototype.frameworkComponent = function(name) {
        if (!this.reactUi) {
          return;
        }
        return this.frameworkComponents[name];
      };
      ReactFrameworkOverrides2.prototype.isFrameworkComponent = function(comp) {
        if (!comp) {
          return false;
        }
        var prototype = comp.prototype;
        var isJsComp = prototype && "getGui" in prototype;
        return !isJsComp;
      };
      return ReactFrameworkOverrides2;
    }(ag_grid_community_1.VanillaFrameworkOverrides);
    exports.ReactFrameworkOverrides = ReactFrameworkOverrides;
  }
});

// node_modules/ag-grid-react/lib/legacy/agGridReactLegacy.js
var require_agGridReactLegacy = __commonJS({
  "node_modules/ag-grid-react/lib/legacy/agGridReactLegacy.js"(exports) {
    "use strict";
    var __extends2 = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign2 = exports && exports.__assign || function() {
      __assign2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign2.apply(this, arguments);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var ag_grid_community_1 = (init_ag_grid_community_auto_esm(), __toCommonJS(ag_grid_community_auto_esm_exports));
    var prop_types_1 = __importDefault(require_prop_types());
    var react_1 = __importStar(require_react());
    var legacyReactComponent_1 = require_legacyReactComponent();
    var agGridColumn_1 = require_agGridColumn();
    var changeDetectionService_1 = require_changeDetectionService();
    var newReactComponent_1 = require_newReactComponent();
    var portalManager_1 = require_portalManager();
    var reactFrameworkOverrides_1 = require_reactFrameworkOverrides();
    var AgGridReactLegacy = function(_super) {
      __extends2(AgGridReactLegacy2, _super);
      function AgGridReactLegacy2(props) {
        var _this = _super.call(this, props) || this;
        _this.props = props;
        _this.changeDetectionService = new changeDetectionService_1.ChangeDetectionService();
        _this.api = null;
        _this.destroyed = false;
        _this.SYNCHRONOUS_CHANGE_PROPERTIES = ["context"];
        _this.portalManager = new portalManager_1.PortalManager(_this, props.componentWrappingElement, props.maxComponentCreationTimeMs);
        return _this;
      }
      AgGridReactLegacy2.prototype.render = function() {
        var _this = this;
        return react_1.default.createElement("div", {
          style: this.createStyleForDiv(),
          className: this.props.className,
          ref: function(e) {
            _this.eGridDiv = e;
          }
        }, this.portalManager.getPortals());
      };
      AgGridReactLegacy2.prototype.createStyleForDiv = function() {
        return __assign2({ height: "100%" }, this.props.containerStyle || {});
      };
      AgGridReactLegacy2.prototype.componentDidMount = function() {
        var modules = this.props.modules || [];
        var gridParams = {
          providedBeanInstances: {
            agGridReact: this,
            frameworkComponentWrapper: new ReactFrameworkComponentWrapper(this, this.portalManager)
          },
          modules,
          frameworkOverrides: new reactFrameworkOverrides_1.ReactFrameworkOverrides(false)
        };
        var gridOptions = this.props.gridOptions || {};
        var children = this.props.children;
        if (agGridColumn_1.AgGridColumn.hasChildColumns(children)) {
          gridOptions.columnDefs = agGridColumn_1.AgGridColumn.mapChildColumnDefs(children);
        }
        this.gridOptions = ag_grid_community_1.ComponentUtil.copyAttributesToGridOptions(gridOptions, this.props);
        new ag_grid_community_1.Grid(this.eGridDiv, this.gridOptions, gridParams);
        this.api = this.gridOptions.api;
        this.columnApi = this.gridOptions.columnApi;
        this.props.setGridApi(this.api, this.columnApi);
      };
      AgGridReactLegacy2.prototype.getStrategyTypeForProp = function(propKey) {
        if (propKey === "rowData") {
          if (this.props.rowDataChangeDetectionStrategy) {
            return this.props.rowDataChangeDetectionStrategy;
          } else if (this.isImmutableDataActive()) {
            return changeDetectionService_1.ChangeDetectionStrategyType.IdentityCheck;
          }
        }
        return changeDetectionService_1.ChangeDetectionStrategyType.DeepValueCheck;
      };
      AgGridReactLegacy2.prototype.isImmutableDataActive = function() {
        return this.props.deltaRowDataMode || this.props.immutableData || this.props.getRowId != null || this.props.gridOptions && (this.props.gridOptions.deltaRowDataMode || this.props.gridOptions.immutableData || this.props.gridOptions.getRowId != null);
      };
      AgGridReactLegacy2.prototype.shouldComponentUpdate = function(nextProps) {
        this.processPropsChanges(this.props, nextProps);
        return false;
      };
      AgGridReactLegacy2.prototype.componentDidUpdate = function(prevProps) {
        this.processPropsChanges(prevProps, this.props);
      };
      AgGridReactLegacy2.prototype.processPropsChanges = function(prevProps, nextProps) {
        var changes = {};
        this.extractGridPropertyChanges(prevProps, nextProps, changes);
        this.extractDeclarativeColDefChanges(nextProps, changes);
        this.processSynchronousChanges(changes);
        this.processAsynchronousChanges(changes);
      };
      AgGridReactLegacy2.prototype.extractDeclarativeColDefChanges = function(nextProps, changes) {
        if (this.props.gridOptions && this.props.gridOptions.columnDefs || this.props.columnDefs) {
          return;
        }
        var debugLogging = !!nextProps.debug;
        var propKey = "columnDefs";
        var currentColDefs = this.gridOptions.columnDefs;
        if (agGridColumn_1.AgGridColumn.hasChildColumns(nextProps.children)) {
          var detectionStrategy = this.changeDetectionService.getStrategy(this.getStrategyTypeForProp(propKey));
          var newColDefs = agGridColumn_1.AgGridColumn.mapChildColumnDefs(nextProps.children);
          if (!detectionStrategy.areEqual(currentColDefs, newColDefs)) {
            if (debugLogging) {
              console.log("agGridReact: colDefs definitions changed");
            }
            changes[propKey] = {
              previousValue: currentColDefs,
              currentValue: newColDefs
            };
          }
        } else if (currentColDefs && currentColDefs.length > 0) {
          changes[propKey] = {
            previousValue: currentColDefs,
            currentValue: []
          };
        }
      };
      AgGridReactLegacy2.prototype.extractGridPropertyChanges = function(prevProps, nextProps, changes) {
        var _this = this;
        var debugLogging = !!nextProps.debug;
        Object.keys(nextProps).forEach(function(propKey) {
          if (ag_grid_community_1._.includes(ag_grid_community_1.ComponentUtil.ALL_PROPERTIES, propKey)) {
            var changeDetectionStrategy = _this.changeDetectionService.getStrategy(_this.getStrategyTypeForProp(propKey));
            if (!changeDetectionStrategy.areEqual(prevProps[propKey], nextProps[propKey])) {
              if (debugLogging) {
                console.log("agGridReact: [" + propKey + "] property changed");
              }
              changes[propKey] = {
                previousValue: prevProps[propKey],
                currentValue: nextProps[propKey]
              };
            }
          }
        });
        ag_grid_community_1.ComponentUtil.getEventCallbacks().forEach(function(funcName) {
          if (prevProps[funcName] !== nextProps[funcName]) {
            if (debugLogging) {
              console.log("agGridReact: [" + funcName + "] event callback changed");
            }
            changes[funcName] = {
              previousValue: prevProps[funcName],
              currentValue: nextProps[funcName]
            };
          }
        });
      };
      AgGridReactLegacy2.prototype.componentWillUnmount = function() {
        if (this.api) {
          this.api.destroy();
          this.api = null;
        }
        this.destroyed = true;
        this.portalManager.destroy();
      };
      AgGridReactLegacy2.prototype.isDisableStaticMarkup = function() {
        return this.props.disableStaticMarkup === true;
      };
      AgGridReactLegacy2.prototype.isLegacyComponentRendering = function() {
        return this.props.legacyComponentRendering === true;
      };
      AgGridReactLegacy2.prototype.processSynchronousChanges = function(changes) {
        var asyncChanges = __assign2({}, changes);
        if (Object.keys(asyncChanges).length > 0) {
          var synchronousChanges_1 = {};
          this.SYNCHRONOUS_CHANGE_PROPERTIES.forEach(function(synchronousChangeProperty) {
            if (asyncChanges[synchronousChangeProperty]) {
              synchronousChanges_1[synchronousChangeProperty] = asyncChanges[synchronousChangeProperty];
              delete asyncChanges[synchronousChangeProperty];
            }
          });
          if (Object.keys(synchronousChanges_1).length > 0 && !!this.api) {
            ag_grid_community_1.ComponentUtil.processOnChange(synchronousChanges_1, this.gridOptions, this.api, this.columnApi);
          }
        }
        return asyncChanges;
      };
      AgGridReactLegacy2.prototype.processAsynchronousChanges = function(changes) {
        var _this = this;
        if (Object.keys(changes).length > 0) {
          window.setTimeout(function() {
            if (_this.api) {
              ag_grid_community_1.ComponentUtil.processOnChange(changes, _this.gridOptions, _this.api, _this.columnApi);
            }
          });
        }
      };
      AgGridReactLegacy2.MAX_COMPONENT_CREATION_TIME_IN_MS = 1e3;
      AgGridReactLegacy2.defaultProps = {
        legacyComponentRendering: false,
        disableStaticMarkup: false,
        maxComponentCreationTimeMs: AgGridReactLegacy2.MAX_COMPONENT_CREATION_TIME_IN_MS
      };
      return AgGridReactLegacy2;
    }(react_1.Component);
    exports.AgGridReactLegacy = AgGridReactLegacy;
    AgGridReactLegacy.propTypes = {
      gridOptions: prop_types_1.default.object
    };
    addProperties(ag_grid_community_1.ComponentUtil.getEventCallbacks(), prop_types_1.default.func);
    addProperties(ag_grid_community_1.ComponentUtil.BOOLEAN_PROPERTIES, prop_types_1.default.bool);
    addProperties(ag_grid_community_1.ComponentUtil.STRING_PROPERTIES, prop_types_1.default.string);
    addProperties(ag_grid_community_1.ComponentUtil.OBJECT_PROPERTIES, prop_types_1.default.object);
    addProperties(ag_grid_community_1.ComponentUtil.ARRAY_PROPERTIES, prop_types_1.default.array);
    addProperties(ag_grid_community_1.ComponentUtil.NUMBER_PROPERTIES, prop_types_1.default.number);
    addProperties(ag_grid_community_1.ComponentUtil.FUNCTION_PROPERTIES, prop_types_1.default.func);
    function addProperties(listOfProps, propType) {
      listOfProps.forEach(function(propKey) {
        AgGridReactLegacy[propKey] = propType;
      });
    }
    var ReactFrameworkComponentWrapper = function(_super) {
      __extends2(ReactFrameworkComponentWrapper2, _super);
      function ReactFrameworkComponentWrapper2(agGridReact, portalManager) {
        var _this = _super.call(this) || this;
        _this.agGridReact = agGridReact;
        _this.portalManager = portalManager;
        return _this;
      }
      ReactFrameworkComponentWrapper2.prototype.createWrapper = function(UserReactComponent, componentType) {
        if (this.agGridReact.isLegacyComponentRendering()) {
          return new legacyReactComponent_1.LegacyReactComponent(UserReactComponent, this.agGridReact, this.portalManager, componentType);
        } else {
          return new newReactComponent_1.NewReactComponent(UserReactComponent, this.portalManager, componentType);
        }
      };
      return ReactFrameworkComponentWrapper2;
    }(ag_grid_community_1.BaseComponentWrapper);
  }
});

// node_modules/ag-grid-react/lib/agGridReact.js
var require_agGridReact = __commonJS({
  "node_modules/ag-grid-react/lib/agGridReact.js"(exports) {
    "use strict";
    var __extends2 = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign2 = exports && exports.__assign || function() {
      __assign2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign2.apply(this, arguments);
    };
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var react_1 = __importStar(require_react());
    var agGridReactLegacy_1 = require_agGridReactLegacy();
    var agGridReactUi_1 = require_agGridReactUi();
    var AgGridReact = function(_super) {
      __extends2(AgGridReact2, _super);
      function AgGridReact2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.setGridApi = function(api, columnApi) {
          _this.api = api;
          _this.columnApi = columnApi;
        };
        return _this;
      }
      AgGridReact2.prototype.render = function() {
        var ReactComponentToUse = this.props.suppressReactUi ? react_1.default.createElement(agGridReactLegacy_1.AgGridReactLegacy, __assign2({}, this.props, { setGridApi: this.setGridApi })) : react_1.default.createElement(agGridReactUi_1.AgGridReactUi, __assign2({}, this.props, { setGridApi: this.setGridApi }));
        return ReactComponentToUse;
      };
      return AgGridReact2;
    }(react_1.Component);
    exports.AgGridReact = AgGridReact;
  }
});

// node_modules/ag-grid-react/main.js
var require_main = __commonJS({
  "node_modules/ag-grid-react/main.js"(exports) {
    exports.AgGridReact = require_agGridReact().AgGridReact;
    exports.AgGridColumn = require_agGridColumn().AgGridColumn;
    exports.ChangeDetectionStrategyType = require_changeDetectionService().ChangeDetectionStrategyType;
    exports.AgGridReactUi = require_agGridReactUi().AgGridReactUi;
  }
});

// dep:ag-grid-react
var ag_grid_react_default = require_main();
export {
  ag_grid_react_default as default
};
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/**
          * @ag-grid-community/all-modules - Advanced Data Grid / Data Table supporting Javascript / Typescript / React / Angular / Vue * @version v28.2.1
          * @link https://www.ag-grid.com/
          * @license MIT
          */
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / Typescript / React / Angular / Vue
 * @version v28.2.1
 * @link https://www.ag-grid.com/
 * @license MIT
 */
/**
 * @license React
 * react-dom-server-legacy.browser.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react-dom-server.browser.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
//# sourceMappingURL=ag-grid-react.js.map
